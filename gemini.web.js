(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega'), require('d3')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vega', 'd3'], factory) :
  (global = global || self, factory(global.gemini = {}, global.vega, global.d3));
}(this, (function (exports, vega, d3) { 'use strict';

  var vega__default = 'default' in vega ? vega['default'] : vega;
  var d3__default = 'default' in d3 ? d3['default'] : d3;

  class Animation {
    constructor(schedule, rawInfo, spec) {
      this.schedule = schedule;
      this.moments = this.schedule.moments;
      this.status = "ready";
      this.spec = spec;
      this.logs = [];
      this._queue = [];
      this.rawInfo = rawInfo;
    }

    log(timestamp, message, info) {
      if (typeof message === "string" && typeof timestamp === "number") {
        this.logs.push({
          timestamp,
          message,
          info
        });
      }
      return this.logs;
    }

    async play(targetElm) {
      this.status = "playing";
      // get moments and sort by sTime
      const { moments } = this;

      const globalSTime = new Date();
      this._start(moments[0].starting, targetElm);
      this.log(new Date() - globalSTime, "0-th moment");

      for (let i = 1; i < moments.length; i++) {
        const moment = moments[i];

        await this._end(moment).then(() => {
          const delay = Math.max(moment.time - (new Date() - globalSTime), 0);
          return new Promise(resolve => setTimeout(() => resolve(), delay));
        });
        this._start(moment.starting, targetElm);
        this.log(new Date() - globalSTime, `${i}-th moment`);

        if (i === moments.length - 1) {
          this.status = "ready";
          return;
        }
      }
    }

    _start(steps, targetElm) {
      steps.forEach(step => {
        this._queue.push({
          sTime: step.sTime,
          eTime: step.eTime,
          step,
          result: step.template(this.rawInfo, step, targetElm) // contains the promise
        });
      });
    }

    async _end(moment) {
      const { time } = moment;

      const workingSteps = this._queue.filter(item => item.eTime === time);
      for (let i = 0; i < workingSteps.length; i++) {
        await workingSteps[i].result;
      }
    }
  }

  Array.prototype.contains = function(v, accessor) {
    accessor =
      accessor ||
      (d => {
        return d;
      });
    for (let i = 0; i < this.length; i++) {
      if (accessor(this[i]) === accessor(v)) return true;
    }
    return false;
  };
  Array.prototype.containAll = function(arr, accessor) {
    accessor =
      accessor ||
      (d => {
        return d;
      });
    for (let i = 0; i < arr.length; i++) {
      if (!this.contains(arr[i], accessor)) return false;
    }
    return true;
  };

  Array.prototype.unique = function(accessor) {
    const arr = [];
    for (let i = 0; i < this.length; i++) {
      if (!arr.contains(this[i], accessor)) {
        arr.push(this[i]);
      }
    }
    return arr;
  };
  Array.prototype.sample = function(N) {
    const tempThis = this.slice();
    const sampled = [];
    for (let i = 0; i < N; i++) {
      sampled.push(
        tempThis.splice([Math.floor(Math.random() * tempThis.length)], 1)[0]
      );
    }
    return sampled;
  };

  Array.prototype.shuffle = function() {
    for (let i = this.length; i; i--) {
      const j = Math.floor(Math.random() * i);
      [this[i - 1], this[j]] = [this[j], this[i - 1]];
    }
    return this;
  };
  Array.prototype.clone = function() {
    return JSON.parse(JSON.stringify(this));
  };
  function stringifyDatumValue(value) {
    if (value === null) {
      return "__null__";
    }
    return value.toString();
  }
  function deepEqual(obj1, obj2) {
    if (obj1 === obj2) {
      return true;
    }
    if (isDate(obj1) && isDate(obj2)) {
      return Number(obj1) === Number(obj2);
    }
    if (
      typeof obj1 === "object" &&
      obj1 !== undefined &&
      typeof obj2 === "object" &&
      obj2 !== undefined
    ) {
      const props1 = Object.keys(obj1);
      const props2 = Object.keys(obj2);
      if (props1.length !== props2.length) {
        return false;
      }

      for (let i = 0; i < props1.length; i++) {
        const prop = props1[i];

        if (!Object.prototype.hasOwnProperty.call(obj2, prop) || !deepEqual(obj1[prop], obj2[prop])) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  function copy(obj) {
    if (obj === undefined) {
      return undefined;
    }
    return JSON.parse(JSON.stringify(obj));
  }
  // create a new obj that has the same keys pointing the same values/functions;
  function copy2(obj) {
    return Object.keys(obj).reduce((acc, curr) => {
      acc[curr] = obj[curr];
      return acc;
    }, {});
  }
  function flatten(arrays) {
    return arrays.reduce((acc, curr) => {
      acc = acc.concat(curr);
      return acc;
    }, []);
  }

  function permutate(arr) {
    if (arr.length === 2) {
      return [arr, [arr[1], arr[0]]];
    }
    return arr.reduce((acc, anchor, i) => {
      const workingArr = copy(arr);
      workingArr.splice(i, 1);

      acc = acc.concat(
        permutate(workingArr).map(newArr => {
          return [anchor].concat(newArr);
        })
      );
      return acc;
    }, []);
  }
  function isDate(o) {
    return o !== undefined && typeof o.getMonth === "function";
  }

  function enumArr(arr, item) {
    const newArrs = [];
    for (let i = 0; i < arr.length; i++) {
      const newArr = copy(arr);
      if (Array.isArray(newArr[i])) {
        newArr[i].push(item);
      } else {
        newArr[i] = [newArr[i], item];
      }
      newArrs.push(newArr);
    }
    return newArrs;
  }

  function enumArraysByItems(arrs, items, enumArrFn = enumArr) {
    let newArrs = copy(arrs);
    items.forEach(item => {
      newArrs = newArrs.reduce((allArrs, arr) => {
        return (allArrs = allArrs.concat(enumArrFn(arr, item)));
      }, []);
    });
    return newArrs;
  }

  function get(o, ...props) {
    return props.reduce((obj, prop) => {
      return !isNullOrUndefined(obj) && !isNullOrUndefined(obj[prop])
        ? obj[prop]
        : undefined;
    }, o);
  }

  function isNullOrUndefined(obj) {
    return obj === null || obj === undefined;
  }
  function isNumber(x) {
    return typeof x === "number" && !isNaN(x);
  }
  function roundUp(num, d = 5) {
    return Math.round(Math.pow(10, d) * num) / Math.pow(10, d);
  }
  Array.prototype.exclude = function(items, accessor = x => x) {
    const newArr = this.slice();
    for (const item of items) {
      const i = newArr.findIndex(x => accessor(x) === accessor(item));
      if (i >= 0) {
        newArr.splice(i, 1);
      }
    }
    return newArr;
  };
  function variance(nums) {
    const mu = mean(nums);
    return (
      nums.reduce((acc, num) => (acc += Math.pow(num - mu, 2)), 0) / nums.length
    );
  }
  function mean(nums) {
    return nums.reduce((sum, num) => sum + num, 0) / nums.length;
  }

  function isEmpty(o) {
    return typeof o === "object" && Object.keys(o).length === 0;
  }
  function isDefinitelyNaN(o) {
    return ((typeof(v) === "number" ) && isNaN(v))
  }
  function isValue(v) {
    return (v !== undefined) && (v !== null) && !(isDefinitelyNaN())
  }

  function crossJoinArrays(arrs) {
    return arrs.reduce((acc, currArray) => {
      return currArray.reduce((result, b) => {
        return result.concat(acc.map(a => [...a, b]))
      }, [])
    }, [[]])
  }

  //Enumerate all ways of splitting arr into N non-empty arrays
  function NSplits(arr, N) {
    if (N === 1) {
      return [[arr]]
    } else if (arr.length === N) {
      return [arr.map(item => { return [item] })];
    } else if (arr.length < N) {
      throw new Error(`Cannot split ${arr.length}-long array into ${N}.`)
    }
    let results = [];
    for (let i = 1; arr.length -i >= N-1; i++) {
      let division = NSplits(arr.slice(i), N-1).map(division => {
        return [arr.slice(0,i)].concat(division)
      });
      results = results.concat(division);
    }
    return results;
  }

  function collectResolves(parsedBlock, parsedSteps) {
    let resolves = collect(parsedBlock);
    // 1-2. collect the alternative timelines. (alterIds)
    resolves.forEach(r => {
      r.alterIds = parsedSteps
        .filter(
          step => step.alterId &&
            (step.alterId.split(":")[0] === r.alterName)
        )
        .map(step => step.alterId)
        .unique();

      // Place ":main" at first
      const i = r.alterIds.findIndex(d => d.indexOf(":main") >= 0);
      const head = r.alterIds.splice(i, 1);
      r.alterIds = head.concat(r.alterIds);
    });
    return resolves;
  }

  function collect(block) {
    let resolves = [];

    if (block.sync) {
      block.sync.forEach(blk => {
        resolves = resolves.concat(collect(blk));
      });
    } else if (block.concat) {
      block.concat.forEach(blk => {
        resolves = resolves.concat(collect(blk));
      });
    }
    if (block.resolve) {
      resolves.push(block.resolve);
    }
    return resolves;
  }

  class Schedule {
    constructor(parsedSteps) {
      // Assgin the sTime and eTime

      let newParsedSteps = parsedSteps.map((stp, i) => {
        return { ...stp, stepId: i };
      });

      this.tracks = newParsedSteps
        .map(d => {
          const trackName = (d.trackName = d.compName
            ? `${d.compType}.${d.compName}`
            : d.compType);

          return {
            name: trackName,
            compType: d.compType,
            compName: d.compName
          };
        })
        .unique(d => d.name)
        .map(track => {
          return {
            ...track,
            steps: newParsedSteps.filter(d => d.trackName === track.name)
          };
        });
    }


    getTimeline(alterId) {
      return this.tracks.map(track => {
        return Object.assign({}, track, {
          steps: track.steps.filter(
            step => step.alterId === undefined || step.alterId.indexOf(alterId) >= 0
          )
        });
      });
    }

    getTimelineAlternator(scaleOrderResovles) {
      let counter = 0;
      let dividers = scaleOrderResovles.reduce(
        (acc, r, i) => {
          acc.push(r.alterIds.length * acc[i]);
          return acc;
        },
        [1]
      );
      const totalCount = dividers[dividers.length - 1];
      dividers = dividers.slice(0, dividers.length - 1).sort((a, b) => b - a);
      return () => {
        counter += 1;
        counter %= totalCount;
        if (counter === 0) {
          console.warn("Gemini cannot find the order to resolve.");
          return false;
        }
        return dividers.reduce(
          (acc, divider, i) => {
            const q = Math.floor(acc.remainder / divider);
            acc.remainder -= q * divider;
            const resolve = scaleOrderResovles[i];

            const alterId = resolve.alterIds[q];

            acc.tracks = acc.tracks.map(track => {
              const newSteps = track.steps.filter(step => {
                if (step.alterId === undefined) {
                  return true;
                }
                if (
                  step.alterId.split(":")[0] === alterId.split(":")[0] &&
                  step.alterId.split(":")[1] !== alterId.split(":")[1]
                ) {
                  return false;
                }

                return true;
              });
              return Object.assign({}, track, { steps: newSteps });
            });

            return acc;
          },
          { tracks: this.tracks, remainder: counter }
        ).tracks;
      };
    }


  }

  function check(schedule, resolves) {
    // 3. check if there is any component whose steps are overlapped by themselves.
    let tracksPerAlterId = [{ alterId: ":main", tracks: schedule.tracks }];
    if (resolves.length > 0) {
      tracksPerAlterId = resolves
        .reduce((allAlterIds, resolve) => {
          return allAlterIds.concat(resolve.alterIds);
        }, [])
        .map(alterId => {
          return {
            tracks: schedule.tracks.map(track => {
              return {
                ...track,
                steps: track.steps.filter(
                  stp => !stp.alterId || alterId === stp.alterId
                )
              };
            }),
            alterId
          };
        });
    }
    const conflictsPerAlterId = tracksPerAlterId.map(findConflicts);
    const conflictedAlterIds = conflictsPerAlterId
      .filter(conflicts => conflicts.length > 0)
      .map(conflicts => conflicts.alterId);

    if (conflictedAlterIds.length === tracksPerAlterId.length) {
      if (conflictsPerAlterId.length > 1) {
        throw new Error(
          "All possible timelines have 1+ schedule conflict.",
          conflictsPerAlterId
        );
      } else {
        throw new Error(
          "The timeline has 1+ schedule conflict.",
          conflictsPerAlterId
        );
      }
    } else if (conflictedAlterIds.length > 0) {
      if (
        conflictsPerAlterId.find(conflicts =>
          conflicts.find(conf => conf.alterId.indexOf(":main") >= 0)
        )
      ) {
        console.warn(
          "The main timeline (specified timeline) has 1+ schedule conflict.",
          conflictsPerAlterId
        );
      } else {
        console.warn(
          "Some possible timelines have 1+ schedule conflict.",
          conflictsPerAlterId
        );
      }
    }
    schedule.tracks = schedule.tracks.map(track => {
      return {
        ...track,
        steps: track.steps.filter(
          stp => conflictedAlterIds.indexOf(stp.alterId) < 0
        )
      };
    });
    resolves = resolves.map(resolve => {
      return {
        ...resolve,
        alterIds: resolve.alterIds.filter(
          id => conflictedAlterIds.indexOf(id) < 0
        )
      };
    });

    return {conflictsPerAlterId};
  }


  function findConflicts(tracksWithAlterId) {
    const conflicts = [];
    const { tracks } = tracksWithAlterId;
    const { alterId } = tracksWithAlterId;

    for (const track of tracks) {
      const sortedSteps = track.steps.sort(
        (stp1, stp2) => stp1.sTime - stp2.sTime
      );
      for (let i = 0; i < sortedSteps.length - 1; i++) {
        if (sortedSteps[i].eTime > sortedSteps[i + 1].sTime) {
          conflicts.push({
            alterId,
            conflictedSteps: [sortedSteps[i], sortedSteps[i + 1]],
            compName: track.compName,
            compType: track.compType
          });
        }
      }
    }

    return conflicts;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  var uri_all = createCommonjsModule(function (module, exports) {
  /** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
  (function (global, factory) {
  	 factory(exports) ;
  }(commonjsGlobal, (function (exports) {
  function merge() {
      for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
          sets[_key] = arguments[_key];
      }

      if (sets.length > 1) {
          sets[0] = sets[0].slice(0, -1);
          var xl = sets.length - 1;
          for (var x = 1; x < xl; ++x) {
              sets[x] = sets[x].slice(1, -1);
          }
          sets[xl] = sets[xl].slice(1);
          return sets.join('');
      } else {
          return sets[0];
      }
  }
  function subexp(str) {
      return "(?:" + str + ")";
  }
  function typeOf(o) {
      return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
  }
  function toUpperCase(str) {
      return str.toUpperCase();
  }
  function toArray(obj) {
      return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
  }
  function assign(target, source) {
      var obj = target;
      if (source) {
          for (var key in source) {
              obj[key] = source[key];
          }
      }
      return obj;
  }

  function buildExps(isIRI) {
      var ALPHA$$ = "[A-Za-z]",
          DIGIT$$ = "[0-9]",
          HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
          PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
          //expanded
      GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
          SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
          RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
          UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
          //subset, excludes bidi control characters
      IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
          //subset
      UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
          SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
          USERINFO$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
          DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
          //relaxed parsing rules
      IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
          H16$ = subexp(HEXDIG$$ + "{1,4}"),
          LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
          IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
          //                           6( h16 ":" ) ls32
      IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
          //                      "::" 5( h16 ":" ) ls32
      IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
          //[               h16 ] "::" 4( h16 ":" ) ls32
      IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
          //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
      IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
          //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
      IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
          //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
      IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
          //[ *4( h16 ":" ) h16 ] "::"              ls32
      IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
          //[ *5( h16 ":" ) h16 ] "::"              h16
      IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
          //[ *6( h16 ":" ) h16 ] "::"
      IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
          ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
          //RFC 6874, with relaxed parsing rules
      IPVFUTURE$ = subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
          //RFC 6874
      REG_NAME$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
          PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
          SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
          QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
      return {
          NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
          NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
          NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
          NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
          NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
          NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
          NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
          ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
          UNRESERVED: new RegExp(UNRESERVED$$, "g"),
          OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
          PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
          IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
          IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
      };
  }
  var URI_PROTOCOL = buildExps(false);

  var IRI_PROTOCOL = buildExps(true);

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();













  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  /** Highest positive signed 32-bit float value */

  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80
  var delimiter = '-'; // '\x2D'

  /** Regular expressions */
  var regexPunycode = /^xn--/;
  var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  var errors = {
  	'overflow': 'Overflow: input needs wider integers to process',
  	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  	'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error$1(type) {
  	throw new RangeError(errors[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map(array, fn) {
  	var result = [];
  	var length = array.length;
  	while (length--) {
  		result[length] = fn(array[length]);
  	}
  	return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(string, fn) {
  	var parts = string.split('@');
  	var result = '';
  	if (parts.length > 1) {
  		// In email addresses, only the domain name should be punycoded. Leave
  		// the local part (i.e. everything up to `@`) intact.
  		result = parts[0] + '@';
  		string = parts[1];
  	}
  	// Avoid `split(regex)` for IE8 compatibility. See #17.
  	string = string.replace(regexSeparators, '\x2E');
  	var labels = string.split('.');
  	var encoded = map(labels, fn).join('.');
  	return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
  	var output = [];
  	var counter = 0;
  	var length = string.length;
  	while (counter < length) {
  		var value = string.charCodeAt(counter++);
  		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  			// It's a high surrogate, and there is a next character.
  			var extra = string.charCodeAt(counter++);
  			if ((extra & 0xFC00) == 0xDC00) {
  				// Low surrogate.
  				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  			} else {
  				// It's an unmatched surrogate; only append this code unit, in case the
  				// next code unit is the high surrogate of a surrogate pair.
  				output.push(value);
  				counter--;
  			}
  		} else {
  			output.push(value);
  		}
  	}
  	return output;
  }

  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */
  var ucs2encode = function ucs2encode(array) {
  	return String.fromCodePoint.apply(String, toConsumableArray(array));
  };

  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */
  var basicToDigit = function basicToDigit(codePoint) {
  	if (codePoint - 0x30 < 0x0A) {
  		return codePoint - 0x16;
  	}
  	if (codePoint - 0x41 < 0x1A) {
  		return codePoint - 0x41;
  	}
  	if (codePoint - 0x61 < 0x1A) {
  		return codePoint - 0x61;
  	}
  	return base;
  };

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  var digitToBasic = function digitToBasic(digit, flag) {
  	//  0..25 map to ASCII a..z or A..Z
  	// 26..35 map to ASCII 0..9
  	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  var adapt = function adapt(delta, numPoints, firstTime) {
  	var k = 0;
  	delta = firstTime ? floor(delta / damp) : delta >> 1;
  	delta += floor(delta / numPoints);
  	for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
  		delta = floor(delta / baseMinusTMin);
  	}
  	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  };

  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */
  var decode = function decode(input) {
  	// Don't use UCS-2.
  	var output = [];
  	var inputLength = input.length;
  	var i = 0;
  	var n = initialN;
  	var bias = initialBias;

  	// Handle the basic code points: let `basic` be the number of input code
  	// points before the last delimiter, or `0` if there is none, then copy
  	// the first basic code points to the output.

  	var basic = input.lastIndexOf(delimiter);
  	if (basic < 0) {
  		basic = 0;
  	}

  	for (var j = 0; j < basic; ++j) {
  		// if it's not a basic code point
  		if (input.charCodeAt(j) >= 0x80) {
  			error$1('not-basic');
  		}
  		output.push(input.charCodeAt(j));
  	}

  	// Main decoding loop: start just after the last delimiter if any basic code
  	// points were copied; start at the beginning otherwise.

  	for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

  		// `index` is the index of the next character to be consumed.
  		// Decode a generalized variable-length integer into `delta`,
  		// which gets added to `i`. The overflow checking is easier
  		// if we increase `i` as we go, then subtract off its starting
  		// value at the end to obtain `delta`.
  		var oldi = i;
  		for (var w = 1, k = base;; /* no condition */k += base) {

  			if (index >= inputLength) {
  				error$1('invalid-input');
  			}

  			var digit = basicToDigit(input.charCodeAt(index++));

  			if (digit >= base || digit > floor((maxInt - i) / w)) {
  				error$1('overflow');
  			}

  			i += digit * w;
  			var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

  			if (digit < t) {
  				break;
  			}

  			var baseMinusT = base - t;
  			if (w > floor(maxInt / baseMinusT)) {
  				error$1('overflow');
  			}

  			w *= baseMinusT;
  		}

  		var out = output.length + 1;
  		bias = adapt(i - oldi, out, oldi == 0);

  		// `i` was supposed to wrap around from `out` to `0`,
  		// incrementing `n` each time, so we'll fix that now:
  		if (floor(i / out) > maxInt - n) {
  			error$1('overflow');
  		}

  		n += floor(i / out);
  		i %= out;

  		// Insert `n` at position `i` of the output.
  		output.splice(i++, 0, n);
  	}

  	return String.fromCodePoint.apply(String, output);
  };

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  var encode = function encode(input) {
  	var output = [];

  	// Convert the input in UCS-2 to an array of Unicode code points.
  	input = ucs2decode(input);

  	// Cache the length.
  	var inputLength = input.length;

  	// Initialize the state.
  	var n = initialN;
  	var delta = 0;
  	var bias = initialBias;

  	// Handle the basic code points.
  	var _iteratorNormalCompletion = true;
  	var _didIteratorError = false;
  	var _iteratorError = undefined;

  	try {
  		for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
  			var _currentValue2 = _step.value;

  			if (_currentValue2 < 0x80) {
  				output.push(stringFromCharCode(_currentValue2));
  			}
  		}
  	} catch (err) {
  		_didIteratorError = true;
  		_iteratorError = err;
  	} finally {
  		try {
  			if (!_iteratorNormalCompletion && _iterator.return) {
  				_iterator.return();
  			}
  		} finally {
  			if (_didIteratorError) {
  				throw _iteratorError;
  			}
  		}
  	}

  	var basicLength = output.length;
  	var handledCPCount = basicLength;

  	// `handledCPCount` is the number of code points that have been handled;
  	// `basicLength` is the number of basic code points.

  	// Finish the basic string with a delimiter unless it's empty.
  	if (basicLength) {
  		output.push(delimiter);
  	}

  	// Main encoding loop:
  	while (handledCPCount < inputLength) {

  		// All non-basic code points < n have been handled already. Find the next
  		// larger one:
  		var m = maxInt;
  		var _iteratorNormalCompletion2 = true;
  		var _didIteratorError2 = false;
  		var _iteratorError2 = undefined;

  		try {
  			for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
  				var currentValue = _step2.value;

  				if (currentValue >= n && currentValue < m) {
  					m = currentValue;
  				}
  			}

  			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
  			// but guard against overflow.
  		} catch (err) {
  			_didIteratorError2 = true;
  			_iteratorError2 = err;
  		} finally {
  			try {
  				if (!_iteratorNormalCompletion2 && _iterator2.return) {
  					_iterator2.return();
  				}
  			} finally {
  				if (_didIteratorError2) {
  					throw _iteratorError2;
  				}
  			}
  		}

  		var handledCPCountPlusOne = handledCPCount + 1;
  		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
  			error$1('overflow');
  		}

  		delta += (m - n) * handledCPCountPlusOne;
  		n = m;

  		var _iteratorNormalCompletion3 = true;
  		var _didIteratorError3 = false;
  		var _iteratorError3 = undefined;

  		try {
  			for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
  				var _currentValue = _step3.value;

  				if (_currentValue < n && ++delta > maxInt) {
  					error$1('overflow');
  				}
  				if (_currentValue == n) {
  					// Represent delta as a generalized variable-length integer.
  					var q = delta;
  					for (var k = base;; /* no condition */k += base) {
  						var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
  						if (q < t) {
  							break;
  						}
  						var qMinusT = q - t;
  						var baseMinusT = base - t;
  						output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
  						q = floor(qMinusT / baseMinusT);
  					}

  					output.push(stringFromCharCode(digitToBasic(q, 0)));
  					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
  					delta = 0;
  					++handledCPCount;
  				}
  			}
  		} catch (err) {
  			_didIteratorError3 = true;
  			_iteratorError3 = err;
  		} finally {
  			try {
  				if (!_iteratorNormalCompletion3 && _iterator3.return) {
  					_iterator3.return();
  				}
  			} finally {
  				if (_didIteratorError3) {
  					throw _iteratorError3;
  				}
  			}
  		}

  		++delta;
  		++n;
  	}
  	return output.join('');
  };

  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */
  var toUnicode = function toUnicode(input) {
  	return mapDomain(input, function (string) {
  		return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
  	});
  };

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  var toASCII = function toASCII(input) {
  	return mapDomain(input, function (string) {
  		return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
  	});
  };

  /*--------------------------------------------------------------------------*/

  /** Define the public API */
  var punycode = {
  	/**
    * A string representing the current Punycode.js version number.
    * @memberOf punycode
    * @type String
    */
  	'version': '2.1.0',
  	/**
    * An object of methods to convert from JavaScript's internal character
    * representation (UCS-2) to Unicode code points, and back.
    * @see <https://mathiasbynens.be/notes/javascript-encoding>
    * @memberOf punycode
    * @type Object
    */
  	'ucs2': {
  		'decode': ucs2decode,
  		'encode': ucs2encode
  	},
  	'decode': decode,
  	'encode': encode,
  	'toASCII': toASCII,
  	'toUnicode': toUnicode
  };

  /**
   * URI.js
   *
   * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
   * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
   * @see http://github.com/garycourt/uri-js
   */
  /**
   * Copyright 2011 Gary Court. All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification, are
   * permitted provided that the following conditions are met:
   *
   *    1. Redistributions of source code must retain the above copyright notice, this list of
   *       conditions and the following disclaimer.
   *
   *    2. Redistributions in binary form must reproduce the above copyright notice, this list
   *       of conditions and the following disclaimer in the documentation and/or other materials
   *       provided with the distribution.
   *
   * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
   * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
   * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
   * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *
   * The views and conclusions contained in the software and documentation are those of the
   * authors and should not be interpreted as representing official policies, either expressed
   * or implied, of Gary Court.
   */
  var SCHEMES = {};
  function pctEncChar(chr) {
      var c = chr.charCodeAt(0);
      var e = void 0;
      if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
      return e;
  }
  function pctDecChars(str) {
      var newStr = "";
      var i = 0;
      var il = str.length;
      while (i < il) {
          var c = parseInt(str.substr(i + 1, 2), 16);
          if (c < 128) {
              newStr += String.fromCharCode(c);
              i += 3;
          } else if (c >= 194 && c < 224) {
              if (il - i >= 6) {
                  var c2 = parseInt(str.substr(i + 4, 2), 16);
                  newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
              } else {
                  newStr += str.substr(i, 6);
              }
              i += 6;
          } else if (c >= 224) {
              if (il - i >= 9) {
                  var _c = parseInt(str.substr(i + 4, 2), 16);
                  var c3 = parseInt(str.substr(i + 7, 2), 16);
                  newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
              } else {
                  newStr += str.substr(i, 9);
              }
              i += 9;
          } else {
              newStr += str.substr(i, 3);
              i += 3;
          }
      }
      return newStr;
  }
  function _normalizeComponentEncoding(components, protocol) {
      function decodeUnreserved(str) {
          var decStr = pctDecChars(str);
          return !decStr.match(protocol.UNRESERVED) ? str : decStr;
      }
      if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
      if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      return components;
  }

  function _stripLeadingZeros(str) {
      return str.replace(/^0*(.*)/, "$1") || "0";
  }
  function _normalizeIPv4(host, protocol) {
      var matches = host.match(protocol.IPV4ADDRESS) || [];

      var _matches = slicedToArray(matches, 2),
          address = _matches[1];

      if (address) {
          return address.split(".").map(_stripLeadingZeros).join(".");
      } else {
          return host;
      }
  }
  function _normalizeIPv6(host, protocol) {
      var matches = host.match(protocol.IPV6ADDRESS) || [];

      var _matches2 = slicedToArray(matches, 3),
          address = _matches2[1],
          zone = _matches2[2];

      if (address) {
          var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
              _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
              last = _address$toLowerCase$2[0],
              first = _address$toLowerCase$2[1];

          var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
          var lastFields = last.split(":").map(_stripLeadingZeros);
          var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
          var fieldCount = isLastFieldIPv4Address ? 7 : 8;
          var lastFieldsStart = lastFields.length - fieldCount;
          var fields = Array(fieldCount);
          for (var x = 0; x < fieldCount; ++x) {
              fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
          }
          if (isLastFieldIPv4Address) {
              fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
          }
          var allZeroFields = fields.reduce(function (acc, field, index) {
              if (!field || field === "0") {
                  var lastLongest = acc[acc.length - 1];
                  if (lastLongest && lastLongest.index + lastLongest.length === index) {
                      lastLongest.length++;
                  } else {
                      acc.push({ index: index, length: 1 });
                  }
              }
              return acc;
          }, []);
          var longestZeroFields = allZeroFields.sort(function (a, b) {
              return b.length - a.length;
          })[0];
          var newHost = void 0;
          if (longestZeroFields && longestZeroFields.length > 1) {
              var newFirst = fields.slice(0, longestZeroFields.index);
              var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
              newHost = newFirst.join(":") + "::" + newLast.join(":");
          } else {
              newHost = fields.join(":");
          }
          if (zone) {
              newHost += "%" + zone;
          }
          return newHost;
      } else {
          return host;
      }
  }
  var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
  var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
  function parse(uriString) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var components = {};
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
      var matches = uriString.match(URI_PARSE);
      if (matches) {
          if (NO_MATCH_IS_UNDEFINED) {
              //store each component
              components.scheme = matches[1];
              components.userinfo = matches[3];
              components.host = matches[4];
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = matches[7];
              components.fragment = matches[8];
              //fix port number
              if (isNaN(components.port)) {
                  components.port = matches[5];
              }
          } else {
              //IE FIX for improper RegExp matching
              //store each component
              components.scheme = matches[1] || undefined;
              components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
              components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
              components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
              //fix port number
              if (isNaN(components.port)) {
                  components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
              }
          }
          if (components.host) {
              //normalize IP hosts
              components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
          }
          //determine reference type
          if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
              components.reference = "same-document";
          } else if (components.scheme === undefined) {
              components.reference = "relative";
          } else if (components.fragment === undefined) {
              components.reference = "absolute";
          } else {
              components.reference = "uri";
          }
          //check for reference errors
          if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
              components.error = components.error || "URI is not a " + options.reference + " reference.";
          }
          //find scheme handler
          var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
          //check if scheme can't handle IRIs
          if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
              //if host component is a domain name
              if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                  //convert Unicode IDN -> ASCII IDN
                  try {
                      components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                  } catch (e) {
                      components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                  }
              }
              //convert IRI -> URI
              _normalizeComponentEncoding(components, URI_PROTOCOL);
          } else {
              //normalize encodings
              _normalizeComponentEncoding(components, protocol);
          }
          //perform scheme specific parsing
          if (schemeHandler && schemeHandler.parse) {
              schemeHandler.parse(components, options);
          }
      } else {
          components.error = components.error || "URI can not be parsed.";
      }
      return components;
  }

  function _recomposeAuthority(components, options) {
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = [];
      if (components.userinfo !== undefined) {
          uriTokens.push(components.userinfo);
          uriTokens.push("@");
      }
      if (components.host !== undefined) {
          //normalize IP hosts, add brackets and escape zone separator for IPv6
          uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
              return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
          }));
      }
      if (typeof components.port === "number" || typeof components.port === "string") {
          uriTokens.push(":");
          uriTokens.push(String(components.port));
      }
      return uriTokens.length ? uriTokens.join("") : undefined;
  }

  var RDS1 = /^\.\.?\//;
  var RDS2 = /^\/\.(\/|$)/;
  var RDS3 = /^\/\.\.(\/|$)/;
  var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
  function removeDotSegments(input) {
      var output = [];
      while (input.length) {
          if (input.match(RDS1)) {
              input = input.replace(RDS1, "");
          } else if (input.match(RDS2)) {
              input = input.replace(RDS2, "/");
          } else if (input.match(RDS3)) {
              input = input.replace(RDS3, "/");
              output.pop();
          } else if (input === "." || input === "..") {
              input = "";
          } else {
              var im = input.match(RDS5);
              if (im) {
                  var s = im[0];
                  input = input.slice(s.length);
                  output.push(s);
              } else {
                  throw new Error("Unexpected dot segment condition");
              }
          }
      }
      return output.join("");
  }

  function serialize(components) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = [];
      //find scheme handler
      var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
      //perform scheme specific serialization
      if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
      if (components.host) {
          //if host component is an IPv6 address
          if (protocol.IPV6ADDRESS.test(components.host)) ;
          //TODO: normalize IPv6 address as per RFC 5952

          //if host component is a domain name
          else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
                  //convert IDN via punycode
                  try {
                      components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
                  } catch (e) {
                      components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                  }
              }
      }
      //normalize encoding
      _normalizeComponentEncoding(components, protocol);
      if (options.reference !== "suffix" && components.scheme) {
          uriTokens.push(components.scheme);
          uriTokens.push(":");
      }
      var authority = _recomposeAuthority(components, options);
      if (authority !== undefined) {
          if (options.reference !== "suffix") {
              uriTokens.push("//");
          }
          uriTokens.push(authority);
          if (components.path && components.path.charAt(0) !== "/") {
              uriTokens.push("/");
          }
      }
      if (components.path !== undefined) {
          var s = components.path;
          if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
              s = removeDotSegments(s);
          }
          if (authority === undefined) {
              s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
          }
          uriTokens.push(s);
      }
      if (components.query !== undefined) {
          uriTokens.push("?");
          uriTokens.push(components.query);
      }
      if (components.fragment !== undefined) {
          uriTokens.push("#");
          uriTokens.push(components.fragment);
      }
      return uriTokens.join(""); //merge tokens into a string
  }

  function resolveComponents(base, relative) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var skipNormalization = arguments[3];

      var target = {};
      if (!skipNormalization) {
          base = parse(serialize(base, options), options); //normalize base components
          relative = parse(serialize(relative, options), options); //normalize relative components
      }
      options = options || {};
      if (!options.tolerant && relative.scheme) {
          target.scheme = relative.scheme;
          //target.authority = relative.authority;
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || "");
          target.query = relative.query;
      } else {
          if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
              //target.authority = relative.authority;
              target.userinfo = relative.userinfo;
              target.host = relative.host;
              target.port = relative.port;
              target.path = removeDotSegments(relative.path || "");
              target.query = relative.query;
          } else {
              if (!relative.path) {
                  target.path = base.path;
                  if (relative.query !== undefined) {
                      target.query = relative.query;
                  } else {
                      target.query = base.query;
                  }
              } else {
                  if (relative.path.charAt(0) === "/") {
                      target.path = removeDotSegments(relative.path);
                  } else {
                      if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                          target.path = "/" + relative.path;
                      } else if (!base.path) {
                          target.path = relative.path;
                      } else {
                          target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                      }
                      target.path = removeDotSegments(target.path);
                  }
                  target.query = relative.query;
              }
              //target.authority = base.authority;
              target.userinfo = base.userinfo;
              target.host = base.host;
              target.port = base.port;
          }
          target.scheme = base.scheme;
      }
      target.fragment = relative.fragment;
      return target;
  }

  function resolve(baseURI, relativeURI, options) {
      var schemelessOptions = assign({ scheme: 'null' }, options);
      return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
  }

  function normalize(uri, options) {
      if (typeof uri === "string") {
          uri = serialize(parse(uri, options), options);
      } else if (typeOf(uri) === "object") {
          uri = parse(serialize(uri, options), options);
      }
      return uri;
  }

  function equal(uriA, uriB, options) {
      if (typeof uriA === "string") {
          uriA = serialize(parse(uriA, options), options);
      } else if (typeOf(uriA) === "object") {
          uriA = serialize(uriA, options);
      }
      if (typeof uriB === "string") {
          uriB = serialize(parse(uriB, options), options);
      } else if (typeOf(uriB) === "object") {
          uriB = serialize(uriB, options);
      }
      return uriA === uriB;
  }

  function escapeComponent(str, options) {
      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
  }

  function unescapeComponent(str, options) {
      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
  }

  var handler = {
      scheme: "http",
      domainHost: true,
      parse: function parse(components, options) {
          //report missing host
          if (!components.host) {
              components.error = components.error || "HTTP URIs must have a host.";
          }
          return components;
      },
      serialize: function serialize(components, options) {
          var secure = String(components.scheme).toLowerCase() === "https";
          //normalize the default port
          if (components.port === (secure ? 443 : 80) || components.port === "") {
              components.port = undefined;
          }
          //normalize the empty path
          if (!components.path) {
              components.path = "/";
          }
          //NOTE: We do not parse query strings for HTTP URIs
          //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
          //and not the HTTP spec.
          return components;
      }
  };

  var handler$1 = {
      scheme: "https",
      domainHost: handler.domainHost,
      parse: handler.parse,
      serialize: handler.serialize
  };

  function isSecure(wsComponents) {
      return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
  }
  //RFC 6455
  var handler$2 = {
      scheme: "ws",
      domainHost: true,
      parse: function parse(components, options) {
          var wsComponents = components;
          //indicate if the secure flag is set
          wsComponents.secure = isSecure(wsComponents);
          //construct resouce name
          wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
          wsComponents.path = undefined;
          wsComponents.query = undefined;
          return wsComponents;
      },
      serialize: function serialize(wsComponents, options) {
          //normalize the default port
          if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
              wsComponents.port = undefined;
          }
          //ensure scheme matches secure flag
          if (typeof wsComponents.secure === 'boolean') {
              wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
              wsComponents.secure = undefined;
          }
          //reconstruct path from resource name
          if (wsComponents.resourceName) {
              var _wsComponents$resourc = wsComponents.resourceName.split('?'),
                  _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
                  path = _wsComponents$resourc2[0],
                  query = _wsComponents$resourc2[1];

              wsComponents.path = path && path !== '/' ? path : undefined;
              wsComponents.query = query;
              wsComponents.resourceName = undefined;
          }
          //forbid fragment component
          wsComponents.fragment = undefined;
          return wsComponents;
      }
  };

  var handler$3 = {
      scheme: "wss",
      domainHost: handler$2.domainHost,
      parse: handler$2.parse,
      serialize: handler$2.serialize
  };

  var O = {};
  //RFC 3986
  var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + ( "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" ) + "]";
  var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
  var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
  //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
  //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
  //const WSP$$ = "[\\x20\\x09]";
  //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
  //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
  //const VCHAR$$ = "[\\x21-\\x7E]";
  //const WSP$$ = "[\\x20\\x09]";
  //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
  //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
  //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
  //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
  var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
  var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
  var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
  var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
  var UNRESERVED = new RegExp(UNRESERVED$$, "g");
  var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
  var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
  var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
  var NOT_HFVALUE = NOT_HFNAME;
  function decodeUnreserved(str) {
      var decStr = pctDecChars(str);
      return !decStr.match(UNRESERVED) ? str : decStr;
  }
  var handler$4 = {
      scheme: "mailto",
      parse: function parse$$1(components, options) {
          var mailtoComponents = components;
          var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
          mailtoComponents.path = undefined;
          if (mailtoComponents.query) {
              var unknownHeaders = false;
              var headers = {};
              var hfields = mailtoComponents.query.split("&");
              for (var x = 0, xl = hfields.length; x < xl; ++x) {
                  var hfield = hfields[x].split("=");
                  switch (hfield[0]) {
                      case "to":
                          var toAddrs = hfield[1].split(",");
                          for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                              to.push(toAddrs[_x]);
                          }
                          break;
                      case "subject":
                          mailtoComponents.subject = unescapeComponent(hfield[1], options);
                          break;
                      case "body":
                          mailtoComponents.body = unescapeComponent(hfield[1], options);
                          break;
                      default:
                          unknownHeaders = true;
                          headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                          break;
                  }
              }
              if (unknownHeaders) mailtoComponents.headers = headers;
          }
          mailtoComponents.query = undefined;
          for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
              var addr = to[_x2].split("@");
              addr[0] = unescapeComponent(addr[0]);
              if (!options.unicodeSupport) {
                  //convert Unicode IDN -> ASCII IDN
                  try {
                      addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                  } catch (e) {
                      mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                  }
              } else {
                  addr[1] = unescapeComponent(addr[1], options).toLowerCase();
              }
              to[_x2] = addr.join("@");
          }
          return mailtoComponents;
      },
      serialize: function serialize$$1(mailtoComponents, options) {
          var components = mailtoComponents;
          var to = toArray(mailtoComponents.to);
          if (to) {
              for (var x = 0, xl = to.length; x < xl; ++x) {
                  var toAddr = String(to[x]);
                  var atIdx = toAddr.lastIndexOf("@");
                  var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                  var domain = toAddr.slice(atIdx + 1);
                  //convert IDN via punycode
                  try {
                      domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                  } catch (e) {
                      components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                  }
                  to[x] = localPart + "@" + domain;
              }
              components.path = to.join(",");
          }
          var headers = mailtoComponents.headers = mailtoComponents.headers || {};
          if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
          if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
          var fields = [];
          for (var name in headers) {
              if (headers[name] !== O[name]) {
                  fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
              }
          }
          if (fields.length) {
              components.query = fields.join("&");
          }
          return components;
      }
  };

  var URN_PARSE = /^([^\:]+)\:(.*)/;
  //RFC 2141
  var handler$5 = {
      scheme: "urn",
      parse: function parse$$1(components, options) {
          var matches = components.path && components.path.match(URN_PARSE);
          var urnComponents = components;
          if (matches) {
              var scheme = options.scheme || urnComponents.scheme || "urn";
              var nid = matches[1].toLowerCase();
              var nss = matches[2];
              var urnScheme = scheme + ":" + (options.nid || nid);
              var schemeHandler = SCHEMES[urnScheme];
              urnComponents.nid = nid;
              urnComponents.nss = nss;
              urnComponents.path = undefined;
              if (schemeHandler) {
                  urnComponents = schemeHandler.parse(urnComponents, options);
              }
          } else {
              urnComponents.error = urnComponents.error || "URN can not be parsed.";
          }
          return urnComponents;
      },
      serialize: function serialize$$1(urnComponents, options) {
          var scheme = options.scheme || urnComponents.scheme || "urn";
          var nid = urnComponents.nid;
          var urnScheme = scheme + ":" + (options.nid || nid);
          var schemeHandler = SCHEMES[urnScheme];
          if (schemeHandler) {
              urnComponents = schemeHandler.serialize(urnComponents, options);
          }
          var uriComponents = urnComponents;
          var nss = urnComponents.nss;
          uriComponents.path = (nid || options.nid) + ":" + nss;
          return uriComponents;
      }
  };

  var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
  //RFC 4122
  var handler$6 = {
      scheme: "urn:uuid",
      parse: function parse(urnComponents, options) {
          var uuidComponents = urnComponents;
          uuidComponents.uuid = uuidComponents.nss;
          uuidComponents.nss = undefined;
          if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
              uuidComponents.error = uuidComponents.error || "UUID is not valid.";
          }
          return uuidComponents;
      },
      serialize: function serialize(uuidComponents, options) {
          var urnComponents = uuidComponents;
          //normalize UUID
          urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
          return urnComponents;
      }
  };

  SCHEMES[handler.scheme] = handler;
  SCHEMES[handler$1.scheme] = handler$1;
  SCHEMES[handler$2.scheme] = handler$2;
  SCHEMES[handler$3.scheme] = handler$3;
  SCHEMES[handler$4.scheme] = handler$4;
  SCHEMES[handler$5.scheme] = handler$5;
  SCHEMES[handler$6.scheme] = handler$6;

  exports.SCHEMES = SCHEMES;
  exports.pctEncChar = pctEncChar;
  exports.pctDecChars = pctDecChars;
  exports.parse = parse;
  exports.removeDotSegments = removeDotSegments;
  exports.serialize = serialize;
  exports.resolveComponents = resolveComponents;
  exports.resolve = resolve;
  exports.normalize = normalize;
  exports.equal = equal;
  exports.escapeComponent = escapeComponent;
  exports.unescapeComponent = unescapeComponent;

  Object.defineProperty(exports, '__esModule', { value: true });

  })));

  });

  unwrapExports(uri_all);

  // do not edit .js files directly - edit src/index.jst



  var fastDeepEqual = function equal(a, b) {
    if (a === b) return true;

    if (a && b && typeof a == 'object' && typeof b == 'object') {
      if (a.constructor !== b.constructor) return false;

      var length, i, keys;
      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length) return false;
        for (i = length; i-- !== 0;)
          if (!equal(a[i], b[i])) return false;
        return true;
      }



      if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length) return false;

      for (i = length; i-- !== 0;)
        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

      for (i = length; i-- !== 0;) {
        var key = keys[i];

        if (!equal(a[key], b[key])) return false;
      }

      return true;
    }

    // true if both NaN, false otherwise
    return a!==a && b!==b;
  };

  // https://mathiasbynens.be/notes/javascript-encoding
  // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
  var ucs2length = function ucs2length(str) {
    var length = 0
      , len = str.length
      , pos = 0
      , value;
    while (pos < len) {
      length++;
      value = str.charCodeAt(pos++);
      if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
        // high surrogate, and there is a next character
        value = str.charCodeAt(pos);
        if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
      }
    }
    return length;
  };

  var util = {
    copy: copy$1,
    checkDataType: checkDataType,
    checkDataTypes: checkDataTypes,
    coerceToTypes: coerceToTypes,
    toHash: toHash,
    getProperty: getProperty,
    escapeQuotes: escapeQuotes,
    equal: fastDeepEqual,
    ucs2length: ucs2length,
    varOccurences: varOccurences,
    varReplace: varReplace,
    schemaHasRules: schemaHasRules,
    schemaHasRulesExcept: schemaHasRulesExcept,
    schemaUnknownRules: schemaUnknownRules,
    toQuotedString: toQuotedString,
    getPathExpr: getPathExpr,
    getPath: getPath,
    getData: getData,
    unescapeFragment: unescapeFragment,
    unescapeJsonPointer: unescapeJsonPointer,
    escapeFragment: escapeFragment,
    escapeJsonPointer: escapeJsonPointer
  };


  function copy$1(o, to) {
    to = to || {};
    for (var key in o) to[key] = o[key];
    return to;
  }


  function checkDataType(dataType, data, strictNumbers, negate) {
    var EQUAL = negate ? ' !== ' : ' === '
      , AND = negate ? ' || ' : ' && '
      , OK = negate ? '!' : ''
      , NOT = negate ? '' : '!';
    switch (dataType) {
      case 'null': return data + EQUAL + 'null';
      case 'array': return OK + 'Array.isArray(' + data + ')';
      case 'object': return '(' + OK + data + AND +
                            'typeof ' + data + EQUAL + '"object"' + AND +
                            NOT + 'Array.isArray(' + data + '))';
      case 'integer': return '(typeof ' + data + EQUAL + '"number"' + AND +
                             NOT + '(' + data + ' % 1)' +
                             AND + data + EQUAL + data +
                             (strictNumbers ? (AND + OK + 'isFinite(' + data + ')') : '') + ')';
      case 'number': return '(typeof ' + data + EQUAL + '"' + dataType + '"' +
                            (strictNumbers ? (AND + OK + 'isFinite(' + data + ')') : '') + ')';
      default: return 'typeof ' + data + EQUAL + '"' + dataType + '"';
    }
  }


  function checkDataTypes(dataTypes, data, strictNumbers) {
    switch (dataTypes.length) {
      case 1: return checkDataType(dataTypes[0], data, strictNumbers, true);
      default:
        var code = '';
        var types = toHash(dataTypes);
        if (types.array && types.object) {
          code = types.null ? '(': '(!' + data + ' || ';
          code += 'typeof ' + data + ' !== "object")';
          delete types.null;
          delete types.array;
          delete types.object;
        }
        if (types.number) delete types.integer;
        for (var t in types)
          code += (code ? ' && ' : '' ) + checkDataType(t, data, strictNumbers, true);

        return code;
    }
  }


  var COERCE_TO_TYPES = toHash([ 'string', 'number', 'integer', 'boolean', 'null' ]);
  function coerceToTypes(optionCoerceTypes, dataTypes) {
    if (Array.isArray(dataTypes)) {
      var types = [];
      for (var i=0; i<dataTypes.length; i++) {
        var t = dataTypes[i];
        if (COERCE_TO_TYPES[t]) types[types.length] = t;
        else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
      }
      if (types.length) return types;
    } else if (COERCE_TO_TYPES[dataTypes]) {
      return [dataTypes];
    } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
      return ['array'];
    }
  }


  function toHash(arr) {
    var hash = {};
    for (var i=0; i<arr.length; i++) hash[arr[i]] = true;
    return hash;
  }


  var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
  var SINGLE_QUOTE = /'|\\/g;
  function getProperty(key) {
    return typeof key == 'number'
            ? '[' + key + ']'
            : IDENTIFIER.test(key)
              ? '.' + key
              : "['" + escapeQuotes(key) + "']";
  }


  function escapeQuotes(str) {
    return str.replace(SINGLE_QUOTE, '\\$&')
              .replace(/\n/g, '\\n')
              .replace(/\r/g, '\\r')
              .replace(/\f/g, '\\f')
              .replace(/\t/g, '\\t');
  }


  function varOccurences(str, dataVar) {
    dataVar += '[^0-9]';
    var matches = str.match(new RegExp(dataVar, 'g'));
    return matches ? matches.length : 0;
  }


  function varReplace(str, dataVar, expr) {
    dataVar += '([^0-9])';
    expr = expr.replace(/\$/g, '$$$$');
    return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
  }


  function schemaHasRules(schema, rules) {
    if (typeof schema == 'boolean') return !schema;
    for (var key in schema) if (rules[key]) return true;
  }


  function schemaHasRulesExcept(schema, rules, exceptKeyword) {
    if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';
    for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
  }


  function schemaUnknownRules(schema, rules) {
    if (typeof schema == 'boolean') return;
    for (var key in schema) if (!rules[key]) return key;
  }


  function toQuotedString(str) {
    return '\'' + escapeQuotes(str) + '\'';
  }


  function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
    var path = jsonPointers // false by default
                ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')')
                : (isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'');
    return joinPaths(currentPath, path);
  }


  function getPath(currentPath, prop, jsonPointers) {
    var path = jsonPointers // false by default
                ? toQuotedString('/' + escapeJsonPointer(prop))
                : toQuotedString(getProperty(prop));
    return joinPaths(currentPath, path);
  }


  var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
  var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
  function getData($data, lvl, paths) {
    var up, jsonPointer, data, matches;
    if ($data === '') return 'rootData';
    if ($data[0] == '/') {
      if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
      jsonPointer = $data;
      data = 'rootData';
    } else {
      matches = $data.match(RELATIVE_JSON_POINTER);
      if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
      up = +matches[1];
      jsonPointer = matches[2];
      if (jsonPointer == '#') {
        if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
        return paths[lvl - up];
      }

      if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
      data = 'data' + ((lvl - up) || '');
      if (!jsonPointer) return data;
    }

    var expr = data;
    var segments = jsonPointer.split('/');
    for (var i=0; i<segments.length; i++) {
      var segment = segments[i];
      if (segment) {
        data += getProperty(unescapeJsonPointer(segment));
        expr += ' && ' + data;
      }
    }
    return expr;
  }


  function joinPaths (a, b) {
    if (a == '""') return b;
    return (a + ' + ' + b).replace(/([^\\])' \+ '/g, '$1');
  }


  function unescapeFragment(str) {
    return unescapeJsonPointer(decodeURIComponent(str));
  }


  function escapeFragment(str) {
    return encodeURIComponent(escapeJsonPointer(str));
  }


  function escapeJsonPointer(str) {
    return str.replace(/~/g, '~0').replace(/\//g, '~1');
  }


  function unescapeJsonPointer(str) {
    return str.replace(/~1/g, '/').replace(/~0/g, '~');
  }

  var schema_obj = SchemaObject;

  function SchemaObject(obj) {
    util.copy(obj, this);
  }

  var jsonSchemaTraverse = createCommonjsModule(function (module) {

  var traverse = module.exports = function (schema, opts, cb) {
    // Legacy support for v0.3.1 and earlier.
    if (typeof opts == 'function') {
      cb = opts;
      opts = {};
    }

    cb = opts.cb || cb;
    var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
    var post = cb.post || function() {};

    _traverse(opts, pre, post, schema, '', schema);
  };


  traverse.keywords = {
    additionalItems: true,
    items: true,
    contains: true,
    additionalProperties: true,
    propertyNames: true,
    not: true
  };

  traverse.arrayKeywords = {
    items: true,
    allOf: true,
    anyOf: true,
    oneOf: true
  };

  traverse.propsKeywords = {
    definitions: true,
    properties: true,
    patternProperties: true,
    dependencies: true
  };

  traverse.skipKeywords = {
    default: true,
    enum: true,
    const: true,
    required: true,
    maximum: true,
    minimum: true,
    exclusiveMaximum: true,
    exclusiveMinimum: true,
    multipleOf: true,
    maxLength: true,
    minLength: true,
    pattern: true,
    format: true,
    maxItems: true,
    minItems: true,
    uniqueItems: true,
    maxProperties: true,
    minProperties: true
  };


  function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
      pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      for (var key in schema) {
        var sch = schema[key];
        if (Array.isArray(sch)) {
          if (key in traverse.arrayKeywords) {
            for (var i=0; i<sch.length; i++)
              _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
          }
        } else if (key in traverse.propsKeywords) {
          if (sch && typeof sch == 'object') {
            for (var prop in sch)
              _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
          }
        } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
          _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
        }
      }
      post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    }
  }


  function escapeJsonPtr(str) {
    return str.replace(/~/g, '~0').replace(/\//g, '~1');
  }
  });

  var resolve_1 = resolve;

  resolve.normalizeId = normalizeId;
  resolve.fullPath = getFullPath;
  resolve.url = resolveUrl;
  resolve.ids = resolveIds;
  resolve.inlineRef = inlineRef;
  resolve.schema = resolveSchema;

  /**
   * [resolve and compile the references ($ref)]
   * @this   Ajv
   * @param  {Function} compile reference to schema compilation funciton (localCompile)
   * @param  {Object} root object with information about the root schema for the current schema
   * @param  {String} ref reference to resolve
   * @return {Object|Function} schema object (if the schema can be inlined) or validation function
   */
  function resolve(compile, root, ref) {
    /* jshint validthis: true */
    var refVal = this._refs[ref];
    if (typeof refVal == 'string') {
      if (this._refs[refVal]) refVal = this._refs[refVal];
      else return resolve.call(this, compile, root, refVal);
    }

    refVal = refVal || this._schemas[ref];
    if (refVal instanceof schema_obj) {
      return inlineRef(refVal.schema, this._opts.inlineRefs)
              ? refVal.schema
              : refVal.validate || this._compile(refVal);
    }

    var res = resolveSchema.call(this, root, ref);
    var schema, v, baseId;
    if (res) {
      schema = res.schema;
      root = res.root;
      baseId = res.baseId;
    }

    if (schema instanceof schema_obj) {
      v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
    } else if (schema !== undefined) {
      v = inlineRef(schema, this._opts.inlineRefs)
          ? schema
          : compile.call(this, schema, root, undefined, baseId);
    }

    return v;
  }


  /**
   * Resolve schema, its root and baseId
   * @this Ajv
   * @param  {Object} root root object with properties schema, refVal, refs
   * @param  {String} ref  reference to resolve
   * @return {Object} object with properties schema, root, baseId
   */
  function resolveSchema(root, ref) {
    /* jshint validthis: true */
    var p = uri_all.parse(ref)
      , refPath = _getFullPath(p)
      , baseId = getFullPath(this._getId(root.schema));
    if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
      var id = normalizeId(refPath);
      var refVal = this._refs[id];
      if (typeof refVal == 'string') {
        return resolveRecursive.call(this, root, refVal, p);
      } else if (refVal instanceof schema_obj) {
        if (!refVal.validate) this._compile(refVal);
        root = refVal;
      } else {
        refVal = this._schemas[id];
        if (refVal instanceof schema_obj) {
          if (!refVal.validate) this._compile(refVal);
          if (id == normalizeId(ref))
            return { schema: refVal, root: root, baseId: baseId };
          root = refVal;
        } else {
          return;
        }
      }
      if (!root.schema) return;
      baseId = getFullPath(this._getId(root.schema));
    }
    return getJsonPointer.call(this, p, baseId, root.schema, root);
  }


  /* @this Ajv */
  function resolveRecursive(root, ref, parsedRef) {
    /* jshint validthis: true */
    var res = resolveSchema.call(this, root, ref);
    if (res) {
      var schema = res.schema;
      var baseId = res.baseId;
      root = res.root;
      var id = this._getId(schema);
      if (id) baseId = resolveUrl(baseId, id);
      return getJsonPointer.call(this, parsedRef, baseId, schema, root);
    }
  }


  var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
  /* @this Ajv */
  function getJsonPointer(parsedRef, baseId, schema, root) {
    /* jshint validthis: true */
    parsedRef.fragment = parsedRef.fragment || '';
    if (parsedRef.fragment.slice(0,1) != '/') return;
    var parts = parsedRef.fragment.split('/');

    for (var i = 1; i < parts.length; i++) {
      var part = parts[i];
      if (part) {
        part = util.unescapeFragment(part);
        schema = schema[part];
        if (schema === undefined) break;
        var id;
        if (!PREVENT_SCOPE_CHANGE[part]) {
          id = this._getId(schema);
          if (id) baseId = resolveUrl(baseId, id);
          if (schema.$ref) {
            var $ref = resolveUrl(baseId, schema.$ref);
            var res = resolveSchema.call(this, root, $ref);
            if (res) {
              schema = res.schema;
              root = res.root;
              baseId = res.baseId;
            }
          }
        }
      }
    }
    if (schema !== undefined && schema !== root.schema)
      return { schema: schema, root: root, baseId: baseId };
  }


  var SIMPLE_INLINED = util.toHash([
    'type', 'format', 'pattern',
    'maxLength', 'minLength',
    'maxProperties', 'minProperties',
    'maxItems', 'minItems',
    'maximum', 'minimum',
    'uniqueItems', 'multipleOf',
    'required', 'enum'
  ]);
  function inlineRef(schema, limit) {
    if (limit === false) return false;
    if (limit === undefined || limit === true) return checkNoRef(schema);
    else if (limit) return countKeys(schema) <= limit;
  }


  function checkNoRef(schema) {
    var item;
    if (Array.isArray(schema)) {
      for (var i=0; i<schema.length; i++) {
        item = schema[i];
        if (typeof item == 'object' && !checkNoRef(item)) return false;
      }
    } else {
      for (var key in schema) {
        if (key == '$ref') return false;
        item = schema[key];
        if (typeof item == 'object' && !checkNoRef(item)) return false;
      }
    }
    return true;
  }


  function countKeys(schema) {
    var count = 0, item;
    if (Array.isArray(schema)) {
      for (var i=0; i<schema.length; i++) {
        item = schema[i];
        if (typeof item == 'object') count += countKeys(item);
        if (count == Infinity) return Infinity;
      }
    } else {
      for (var key in schema) {
        if (key == '$ref') return Infinity;
        if (SIMPLE_INLINED[key]) {
          count++;
        } else {
          item = schema[key];
          if (typeof item == 'object') count += countKeys(item) + 1;
          if (count == Infinity) return Infinity;
        }
      }
    }
    return count;
  }


  function getFullPath(id, normalize) {
    if (normalize !== false) id = normalizeId(id);
    var p = uri_all.parse(id);
    return _getFullPath(p);
  }


  function _getFullPath(p) {
    return uri_all.serialize(p).split('#')[0] + '#';
  }


  var TRAILING_SLASH_HASH = /#\/?$/;
  function normalizeId(id) {
    return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
  }


  function resolveUrl(baseId, id) {
    id = normalizeId(id);
    return uri_all.resolve(baseId, id);
  }


  /* @this Ajv */
  function resolveIds(schema) {
    var schemaId = normalizeId(this._getId(schema));
    var baseIds = {'': schemaId};
    var fullPaths = {'': getFullPath(schemaId, false)};
    var localRefs = {};
    var self = this;

    jsonSchemaTraverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (jsonPtr === '') return;
      var id = self._getId(sch);
      var baseId = baseIds[parentJsonPtr];
      var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
      if (keyIndex !== undefined)
        fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));

      if (typeof id == 'string') {
        id = baseId = normalizeId(baseId ? uri_all.resolve(baseId, id) : id);

        var refVal = self._refs[id];
        if (typeof refVal == 'string') refVal = self._refs[refVal];
        if (refVal && refVal.schema) {
          if (!fastDeepEqual(sch, refVal.schema))
            throw new Error('id "' + id + '" resolves to more than one schema');
        } else if (id != normalizeId(fullPath)) {
          if (id[0] == '#') {
            if (localRefs[id] && !fastDeepEqual(sch, localRefs[id]))
              throw new Error('id "' + id + '" resolves to more than one schema');
            localRefs[id] = sch;
          } else {
            self._refs[id] = fullPath;
          }
        }
      }
      baseIds[jsonPtr] = baseId;
      fullPaths[jsonPtr] = fullPath;
    });

    return localRefs;
  }

  var error_classes = {
    Validation: errorSubclass(ValidationError),
    MissingRef: errorSubclass(MissingRefError)
  };


  function ValidationError(errors) {
    this.message = 'validation failed';
    this.errors = errors;
    this.ajv = this.validation = true;
  }


  MissingRefError.message = function (baseId, ref) {
    return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
  };


  function MissingRefError(baseId, ref, message) {
    this.message = message || MissingRefError.message(baseId, ref);
    this.missingRef = resolve_1.url(baseId, ref);
    this.missingSchema = resolve_1.normalizeId(resolve_1.fullPath(this.missingRef));
  }


  function errorSubclass(Subclass) {
    Subclass.prototype = Object.create(Error.prototype);
    Subclass.prototype.constructor = Subclass;
    return Subclass;
  }

  var fastJsonStableStringify = function (data, opts) {
      if (!opts) opts = {};
      if (typeof opts === 'function') opts = { cmp: opts };
      var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

      var cmp = opts.cmp && (function (f) {
          return function (node) {
              return function (a, b) {
                  var aobj = { key: a, value: node[a] };
                  var bobj = { key: b, value: node[b] };
                  return f(aobj, bobj);
              };
          };
      })(opts.cmp);

      var seen = [];
      return (function stringify (node) {
          if (node && node.toJSON && typeof node.toJSON === 'function') {
              node = node.toJSON();
          }

          if (node === undefined) return;
          if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
          if (typeof node !== 'object') return JSON.stringify(node);

          var i, out;
          if (Array.isArray(node)) {
              out = '[';
              for (i = 0; i < node.length; i++) {
                  if (i) out += ',';
                  out += stringify(node[i]) || 'null';
              }
              return out + ']';
          }

          if (node === null) return 'null';

          if (seen.indexOf(node) !== -1) {
              if (cycles) return JSON.stringify('__cycle__');
              throw new TypeError('Converting circular structure to JSON');
          }

          var seenIndex = seen.push(node) - 1;
          var keys = Object.keys(node).sort(cmp && cmp(node));
          out = '';
          for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              var value = stringify(node[key]);

              if (!value) continue;
              if (out) out += ',';
              out += JSON.stringify(key) + ':' + value;
          }
          seen.splice(seenIndex, 1);
          return '{' + out + '}';
      })(data);
  };

  var validate = function generate_validate(it, $keyword, $ruleType) {
    var out = '';
    var $async = it.schema.$async === true,
      $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
      $id = it.self._getId(it.schema);
    if (it.opts.strictKeywords) {
      var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
      if ($unknownKwd) {
        var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;
        if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);
        else throw new Error($keywordsMsg);
      }
    }
    if (it.isTop) {
      out += ' var validate = ';
      if ($async) {
        it.async = true;
        out += 'async ';
      }
      out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';
      if ($id && (it.opts.sourceCode || it.opts.processCode)) {
        out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
      }
    }
    if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
      var $keyword = 'false schema';
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $errorKeyword;
      var $data = 'data' + ($dataLvl || '');
      var $valid = 'valid' + $lvl;
      if (it.schema === false) {
        if (it.isTop) {
          $breakOnError = true;
        } else {
          out += ' var ' + ($valid) + ' = false; ';
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
          if (it.opts.messages !== false) {
            out += ' , message: \'boolean schema is false\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      } else {
        if (it.isTop) {
          if ($async) {
            out += ' return data; ';
          } else {
            out += ' validate.errors = null; return true; ';
          }
        } else {
          out += ' var ' + ($valid) + ' = true; ';
        }
      }
      if (it.isTop) {
        out += ' }; return validate; ';
      }
      return out;
    }
    if (it.isTop) {
      var $top = it.isTop,
        $lvl = it.level = 0,
        $dataLvl = it.dataLevel = 0,
        $data = 'data';
      it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
      it.baseId = it.baseId || it.rootId;
      delete it.isTop;
      it.dataPathArr = [""];
      if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
        var $defaultMsg = 'default is ignored in the schema root';
        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
        else throw new Error($defaultMsg);
      }
      out += ' var vErrors = null; ';
      out += ' var errors = 0;     ';
      out += ' if (rootData === undefined) rootData = data; ';
    } else {
      var $lvl = it.level,
        $dataLvl = it.dataLevel,
        $data = 'data' + ($dataLvl || '');
      if ($id) it.baseId = it.resolve.url(it.baseId, $id);
      if ($async && !it.async) throw new Error('async schema in sync schema');
      out += ' var errs_' + ($lvl) + ' = errors;';
    }
    var $valid = 'valid' + $lvl,
      $breakOnError = !it.opts.allErrors,
      $closingBraces1 = '',
      $closingBraces2 = '';
    var $errorKeyword;
    var $typeSchema = it.schema.type,
      $typeIsArray = Array.isArray($typeSchema);
    if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
      if ($typeIsArray) {
        if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');
      } else if ($typeSchema != 'null') {
        $typeSchema = [$typeSchema, 'null'];
        $typeIsArray = true;
      }
    }
    if ($typeIsArray && $typeSchema.length == 1) {
      $typeSchema = $typeSchema[0];
      $typeIsArray = false;
    }
    if (it.schema.$ref && $refKeywords) {
      if (it.opts.extendRefs == 'fail') {
        throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
      } else if (it.opts.extendRefs !== true) {
        $refKeywords = false;
        it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
      }
    }
    if (it.schema.$comment && it.opts.$comment) {
      out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));
    }
    if ($typeSchema) {
      if (it.opts.coerceTypes) {
        var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
      }
      var $rulesGroup = it.RULES.types[$typeSchema];
      if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
        var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type';
        var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type',
          $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
        out += ' if (' + (it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true)) + ') { ';
        if ($coerceToTypes) {
          var $dataType = 'dataType' + $lvl,
            $coerced = 'coerced' + $lvl;
          out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; var ' + ($coerced) + ' = undefined; ';
          if (it.opts.coerceTypes == 'array') {
            out += ' if (' + ($dataType) + ' == \'object\' && Array.isArray(' + ($data) + ') && ' + ($data) + '.length == 1) { ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + '; if (' + (it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers)) + ') ' + ($coerced) + ' = ' + ($data) + '; } ';
          }
          out += ' if (' + ($coerced) + ' !== undefined) ; ';
          var arr1 = $coerceToTypes;
          if (arr1) {
            var $type, $i = -1,
              l1 = arr1.length - 1;
            while ($i < l1) {
              $type = arr1[$i += 1];
              if ($type == 'string') {
                out += ' else if (' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\') ' + ($coerced) + ' = \'\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \'\'; ';
              } else if ($type == 'number' || $type == 'integer') {
                out += ' else if (' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \'string\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';
                if ($type == 'integer') {
                  out += ' && !(' + ($data) + ' % 1)';
                }
                out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';
              } else if ($type == 'boolean') {
                out += ' else if (' + ($data) + ' === \'false\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \'true\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';
              } else if ($type == 'null') {
                out += ' else if (' + ($data) + ' === \'\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';
              } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
                out += ' else if (' + ($dataType) + ' == \'string\' || ' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';
              }
            }
          }
          out += ' else {   ';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
            if ($typeIsArray) {
              out += '' + ($typeSchema.join(","));
            } else {
              out += '' + ($typeSchema);
            }
            out += '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should be ';
              if ($typeIsArray) {
                out += '' + ($typeSchema.join(","));
              } else {
                out += '' + ($typeSchema);
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          out += ' } if (' + ($coerced) + ' !== undefined) {  ';
          var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
            $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
          out += ' ' + ($data) + ' = ' + ($coerced) + '; ';
          if (!$dataLvl) {
            out += 'if (' + ($parentData) + ' !== undefined)';
          }
          out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';
        } else {
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
            if ($typeIsArray) {
              out += '' + ($typeSchema.join(","));
            } else {
              out += '' + ($typeSchema);
            }
            out += '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should be ';
              if ($typeIsArray) {
                out += '' + ($typeSchema.join(","));
              } else {
                out += '' + ($typeSchema);
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
        }
        out += ' } ';
      }
    }
    if (it.schema.$ref && !$refKeywords) {
      out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';
      if ($breakOnError) {
        out += ' } if (errors === ';
        if ($top) {
          out += '0';
        } else {
          out += 'errs_' + ($lvl);
        }
        out += ') { ';
        $closingBraces2 += '}';
      }
    } else {
      var arr2 = it.RULES;
      if (arr2) {
        var $rulesGroup, i2 = -1,
          l2 = arr2.length - 1;
        while (i2 < l2) {
          $rulesGroup = arr2[i2 += 1];
          if ($shouldUseGroup($rulesGroup)) {
            if ($rulesGroup.type) {
              out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers)) + ') { ';
            }
            if (it.opts.useDefaults) {
              if ($rulesGroup.type == 'object' && it.schema.properties) {
                var $schema = it.schema.properties,
                  $schemaKeys = Object.keys($schema);
                var arr3 = $schemaKeys;
                if (arr3) {
                  var $propertyKey, i3 = -1,
                    l3 = arr3.length - 1;
                  while (i3 < l3) {
                    $propertyKey = arr3[i3 += 1];
                    var $sch = $schema[$propertyKey];
                    if ($sch.default !== undefined) {
                      var $passData = $data + it.util.getProperty($propertyKey);
                      if (it.compositeRule) {
                        if (it.opts.strictDefaults) {
                          var $defaultMsg = 'default is ignored for: ' + $passData;
                          if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                          else throw new Error($defaultMsg);
                        }
                      } else {
                        out += ' if (' + ($passData) + ' === undefined ';
                        if (it.opts.useDefaults == 'empty') {
                          out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                        }
                        out += ' ) ' + ($passData) + ' = ';
                        if (it.opts.useDefaults == 'shared') {
                          out += ' ' + (it.useDefault($sch.default)) + ' ';
                        } else {
                          out += ' ' + (JSON.stringify($sch.default)) + ' ';
                        }
                        out += '; ';
                      }
                    }
                  }
                }
              } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
                var arr4 = it.schema.items;
                if (arr4) {
                  var $sch, $i = -1,
                    l4 = arr4.length - 1;
                  while ($i < l4) {
                    $sch = arr4[$i += 1];
                    if ($sch.default !== undefined) {
                      var $passData = $data + '[' + $i + ']';
                      if (it.compositeRule) {
                        if (it.opts.strictDefaults) {
                          var $defaultMsg = 'default is ignored for: ' + $passData;
                          if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                          else throw new Error($defaultMsg);
                        }
                      } else {
                        out += ' if (' + ($passData) + ' === undefined ';
                        if (it.opts.useDefaults == 'empty') {
                          out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                        }
                        out += ' ) ' + ($passData) + ' = ';
                        if (it.opts.useDefaults == 'shared') {
                          out += ' ' + (it.useDefault($sch.default)) + ' ';
                        } else {
                          out += ' ' + (JSON.stringify($sch.default)) + ' ';
                        }
                        out += '; ';
                      }
                    }
                  }
                }
              }
            }
            var arr5 = $rulesGroup.rules;
            if (arr5) {
              var $rule, i5 = -1,
                l5 = arr5.length - 1;
              while (i5 < l5) {
                $rule = arr5[i5 += 1];
                if ($shouldUseRule($rule)) {
                  var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                  if ($code) {
                    out += ' ' + ($code) + ' ';
                    if ($breakOnError) {
                      $closingBraces1 += '}';
                    }
                  }
                }
              }
            }
            if ($breakOnError) {
              out += ' ' + ($closingBraces1) + ' ';
              $closingBraces1 = '';
            }
            if ($rulesGroup.type) {
              out += ' } ';
              if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                out += ' else { ';
                var $schemaPath = it.schemaPath + '.type',
                  $errSchemaPath = it.errSchemaPath + '/type';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                  if ($typeIsArray) {
                    out += '' + ($typeSchema.join(","));
                  } else {
                    out += '' + ($typeSchema);
                  }
                  out += '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should be ';
                    if ($typeIsArray) {
                      out += '' + ($typeSchema.join(","));
                    } else {
                      out += '' + ($typeSchema);
                    }
                    out += '\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } ';
              }
            }
            if ($breakOnError) {
              out += ' if (errors === ';
              if ($top) {
                out += '0';
              } else {
                out += 'errs_' + ($lvl);
              }
              out += ') { ';
              $closingBraces2 += '}';
            }
          }
        }
      }
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces2) + ' ';
    }
    if ($top) {
      if ($async) {
        out += ' if (errors === 0) return data;           ';
        out += ' else throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; ';
        out += ' return errors === 0;       ';
      }
      out += ' }; return validate;';
    } else {
      out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';
    }

    function $shouldUseGroup($rulesGroup) {
      var rules = $rulesGroup.rules;
      for (var i = 0; i < rules.length; i++)
        if ($shouldUseRule(rules[i])) return true;
    }

    function $shouldUseRule($rule) {
      return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));
    }

    function $ruleImplementsSomeKeyword($rule) {
      var impl = $rule.implements;
      for (var i = 0; i < impl.length; i++)
        if (it.schema[impl[i]] !== undefined) return true;
    }
    return out;
  };

  /**
   * Functions below are used inside compiled validations function
   */

  var ucs2length$1 = util.ucs2length;


  // this error is thrown by async schemas to return validation errors via exception
  var ValidationError$1 = error_classes.Validation;

  var compile_1 = compile;


  /**
   * Compiles schema to validation function
   * @this   Ajv
   * @param  {Object} schema schema object
   * @param  {Object} root object with information about the root schema for this schema
   * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
   * @param  {String} baseId base ID for IDs in the schema
   * @return {Function} validation function
   */
  function compile(schema, root, localRefs, baseId) {
    /* jshint validthis: true, evil: true */
    /* eslint no-shadow: 0 */
    var self = this
      , opts = this._opts
      , refVal = [ undefined ]
      , refs = {}
      , patterns = []
      , patternsHash = {}
      , defaults = []
      , defaultsHash = {}
      , customRules = [];

    root = root || { schema: schema, refVal: refVal, refs: refs };

    var c = checkCompiling.call(this, schema, root, baseId);
    var compilation = this._compilations[c.index];
    if (c.compiling) return (compilation.callValidate = callValidate);

    var formats = this._formats;
    var RULES = this.RULES;

    try {
      var v = localCompile(schema, root, localRefs, baseId);
      compilation.validate = v;
      var cv = compilation.callValidate;
      if (cv) {
        cv.schema = v.schema;
        cv.errors = null;
        cv.refs = v.refs;
        cv.refVal = v.refVal;
        cv.root = v.root;
        cv.$async = v.$async;
        if (opts.sourceCode) cv.source = v.source;
      }
      return v;
    } finally {
      endCompiling.call(this, schema, root, baseId);
    }

    /* @this   {*} - custom context, see passContext option */
    function callValidate() {
      /* jshint validthis: true */
      var validate = compilation.validate;
      var result = validate.apply(this, arguments);
      callValidate.errors = validate.errors;
      return result;
    }

    function localCompile(_schema, _root, localRefs, baseId) {
      var isRoot = !_root || (_root && _root.schema == _schema);
      if (_root.schema != root.schema)
        return compile.call(self, _schema, _root, localRefs, baseId);

      var $async = _schema.$async === true;

      var sourceCode = validate({
        isTop: true,
        schema: _schema,
        isRoot: isRoot,
        baseId: baseId,
        root: _root,
        schemaPath: '',
        errSchemaPath: '#',
        errorPath: '""',
        MissingRefError: error_classes.MissingRef,
        RULES: RULES,
        validate: validate,
        util: util,
        resolve: resolve_1,
        resolveRef: resolveRef,
        usePattern: usePattern,
        useDefault: useDefault,
        useCustomRule: useCustomRule,
        opts: opts,
        formats: formats,
        logger: self.logger,
        self: self
      });

      sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)
                     + vars(defaults, defaultCode) + vars(customRules, customRuleCode)
                     + sourceCode;

      if (opts.processCode) sourceCode = opts.processCode(sourceCode, _schema);
      // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
      var validate$1;
      try {
        var makeValidate = new Function(
          'self',
          'RULES',
          'formats',
          'root',
          'refVal',
          'defaults',
          'customRules',
          'equal',
          'ucs2length',
          'ValidationError',
          sourceCode
        );

        validate$1 = makeValidate(
          self,
          RULES,
          formats,
          root,
          refVal,
          defaults,
          customRules,
          fastDeepEqual,
          ucs2length$1,
          ValidationError$1
        );

        refVal[0] = validate$1;
      } catch(e) {
        self.logger.error('Error compiling schema, function code:', sourceCode);
        throw e;
      }

      validate$1.schema = _schema;
      validate$1.errors = null;
      validate$1.refs = refs;
      validate$1.refVal = refVal;
      validate$1.root = isRoot ? validate$1 : _root;
      if ($async) validate$1.$async = true;
      if (opts.sourceCode === true) {
        validate$1.source = {
          code: sourceCode,
          patterns: patterns,
          defaults: defaults
        };
      }

      return validate$1;
    }

    function resolveRef(baseId, ref, isRoot) {
      ref = resolve_1.url(baseId, ref);
      var refIndex = refs[ref];
      var _refVal, refCode;
      if (refIndex !== undefined) {
        _refVal = refVal[refIndex];
        refCode = 'refVal[' + refIndex + ']';
        return resolvedRef(_refVal, refCode);
      }
      if (!isRoot && root.refs) {
        var rootRefId = root.refs[ref];
        if (rootRefId !== undefined) {
          _refVal = root.refVal[rootRefId];
          refCode = addLocalRef(ref, _refVal);
          return resolvedRef(_refVal, refCode);
        }
      }

      refCode = addLocalRef(ref);
      var v = resolve_1.call(self, localCompile, root, ref);
      if (v === undefined) {
        var localSchema = localRefs && localRefs[ref];
        if (localSchema) {
          v = resolve_1.inlineRef(localSchema, opts.inlineRefs)
              ? localSchema
              : compile.call(self, localSchema, root, localRefs, baseId);
        }
      }

      if (v === undefined) {
        removeLocalRef(ref);
      } else {
        replaceLocalRef(ref, v);
        return resolvedRef(v, refCode);
      }
    }

    function addLocalRef(ref, v) {
      var refId = refVal.length;
      refVal[refId] = v;
      refs[ref] = refId;
      return 'refVal' + refId;
    }

    function removeLocalRef(ref) {
      delete refs[ref];
    }

    function replaceLocalRef(ref, v) {
      var refId = refs[ref];
      refVal[refId] = v;
    }

    function resolvedRef(refVal, code) {
      return typeof refVal == 'object' || typeof refVal == 'boolean'
              ? { code: code, schema: refVal, inline: true }
              : { code: code, $async: refVal && !!refVal.$async };
    }

    function usePattern(regexStr) {
      var index = patternsHash[regexStr];
      if (index === undefined) {
        index = patternsHash[regexStr] = patterns.length;
        patterns[index] = regexStr;
      }
      return 'pattern' + index;
    }

    function useDefault(value) {
      switch (typeof value) {
        case 'boolean':
        case 'number':
          return '' + value;
        case 'string':
          return util.toQuotedString(value);
        case 'object':
          if (value === null) return 'null';
          var valueStr = fastJsonStableStringify(value);
          var index = defaultsHash[valueStr];
          if (index === undefined) {
            index = defaultsHash[valueStr] = defaults.length;
            defaults[index] = value;
          }
          return 'default' + index;
      }
    }

    function useCustomRule(rule, schema, parentSchema, it) {
      if (self._opts.validateSchema !== false) {
        var deps = rule.definition.dependencies;
        if (deps && !deps.every(function(keyword) {
          return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
        }))
          throw new Error('parent schema must have all required keywords: ' + deps.join(','));

        var validateSchema = rule.definition.validateSchema;
        if (validateSchema) {
          var valid = validateSchema(schema);
          if (!valid) {
            var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
            if (self._opts.validateSchema == 'log') self.logger.error(message);
            else throw new Error(message);
          }
        }
      }

      var compile = rule.definition.compile
        , inline = rule.definition.inline
        , macro = rule.definition.macro;

      var validate;
      if (compile) {
        validate = compile.call(self, schema, parentSchema, it);
      } else if (macro) {
        validate = macro.call(self, schema, parentSchema, it);
        if (opts.validateSchema !== false) self.validateSchema(validate, true);
      } else if (inline) {
        validate = inline.call(self, it, rule.keyword, schema, parentSchema);
      } else {
        validate = rule.definition.validate;
        if (!validate) return;
      }

      if (validate === undefined)
        throw new Error('custom keyword "' + rule.keyword + '"failed to compile');

      var index = customRules.length;
      customRules[index] = validate;

      return {
        code: 'customRule' + index,
        validate: validate
      };
    }
  }


  /**
   * Checks if the schema is currently compiled
   * @this   Ajv
   * @param  {Object} schema schema to compile
   * @param  {Object} root root object
   * @param  {String} baseId base schema ID
   * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
   */
  function checkCompiling(schema, root, baseId) {
    /* jshint validthis: true */
    var index = compIndex.call(this, schema, root, baseId);
    if (index >= 0) return { index: index, compiling: true };
    index = this._compilations.length;
    this._compilations[index] = {
      schema: schema,
      root: root,
      baseId: baseId
    };
    return { index: index, compiling: false };
  }


  /**
   * Removes the schema from the currently compiled list
   * @this   Ajv
   * @param  {Object} schema schema to compile
   * @param  {Object} root root object
   * @param  {String} baseId base schema ID
   */
  function endCompiling(schema, root, baseId) {
    /* jshint validthis: true */
    var i = compIndex.call(this, schema, root, baseId);
    if (i >= 0) this._compilations.splice(i, 1);
  }


  /**
   * Index of schema compilation in the currently compiled list
   * @this   Ajv
   * @param  {Object} schema schema to compile
   * @param  {Object} root root object
   * @param  {String} baseId base schema ID
   * @return {Integer} compilation index
   */
  function compIndex(schema, root, baseId) {
    /* jshint validthis: true */
    for (var i=0; i<this._compilations.length; i++) {
      var c = this._compilations[i];
      if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
    }
    return -1;
  }


  function patternCode(i, patterns) {
    return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
  }


  function defaultCode(i) {
    return 'var default' + i + ' = defaults[' + i + '];';
  }


  function refValCode(i, refVal) {
    return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
  }


  function customRuleCode(i) {
    return 'var customRule' + i + ' = customRules[' + i + '];';
  }


  function vars(arr, statement) {
    if (!arr.length) return '';
    var code = '';
    for (var i=0; i<arr.length; i++)
      code += statement(i, arr);
    return code;
  }

  var cache = createCommonjsModule(function (module) {


  var Cache = module.exports = function Cache() {
    this._cache = {};
  };


  Cache.prototype.put = function Cache_put(key, value) {
    this._cache[key] = value;
  };


  Cache.prototype.get = function Cache_get(key) {
    return this._cache[key];
  };


  Cache.prototype.del = function Cache_del(key) {
    delete this._cache[key];
  };


  Cache.prototype.clear = function Cache_clear() {
    this._cache = {};
  };
  });

  var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
  var DAYS = [0,31,28,31,30,31,30,31,31,30,31,30,31];
  var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
  var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
  var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  // uri-template: https://tools.ietf.org/html/rfc6570
  var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
  // For the source: https://gist.github.com/dperini/729294
  // For test cases: https://mathiasbynens.be/demo/url-regex
  // @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
  // var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
  var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
  var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
  var JSON_POINTER$1 = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
  var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
  var RELATIVE_JSON_POINTER$1 = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;


  var formats_1 = formats;

  function formats(mode) {
    mode = mode == 'full' ? 'full' : 'fast';
    return util.copy(formats[mode]);
  }


  formats.fast = {
    // date: http://tools.ietf.org/html/rfc3339#section-5.6
    date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
    // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
    time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
    'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
    // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
    uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
    'uri-reference': /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
    'uri-template': URITEMPLATE,
    url: URL,
    // email (sources from jsen validator):
    // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
    // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
    email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
    hostname: HOSTNAME,
    // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex: regex,
    // uuid: http://tools.ietf.org/html/rfc4122
    uuid: UUID,
    // JSON-pointer: https://tools.ietf.org/html/rfc6901
    // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
    'json-pointer': JSON_POINTER$1,
    'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
    // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
    'relative-json-pointer': RELATIVE_JSON_POINTER$1
  };


  formats.full = {
    date: date,
    time: time,
    'date-time': date_time,
    uri: uri,
    'uri-reference': URIREF,
    'uri-template': URITEMPLATE,
    url: URL,
    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
    hostname: HOSTNAME,
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex: regex,
    uuid: UUID,
    'json-pointer': JSON_POINTER$1,
    'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
    'relative-json-pointer': RELATIVE_JSON_POINTER$1
  };


  function isLeapYear(year) {
    // https://tools.ietf.org/html/rfc3339#appendix-C
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }


  function date(str) {
    // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
    var matches = str.match(DATE);
    if (!matches) return false;

    var year = +matches[1];
    var month = +matches[2];
    var day = +matches[3];

    return month >= 1 && month <= 12 && day >= 1 &&
            day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
  }


  function time(str, full) {
    var matches = str.match(TIME);
    if (!matches) return false;

    var hour = matches[1];
    var minute = matches[2];
    var second = matches[3];
    var timeZone = matches[5];
    return ((hour <= 23 && minute <= 59 && second <= 59) ||
            (hour == 23 && minute == 59 && second == 60)) &&
           (!full || timeZone);
  }


  var DATE_TIME_SEPARATOR = /t|\s/i;
  function date_time(str) {
    // http://tools.ietf.org/html/rfc3339#section-5.6
    var dateTime = str.split(DATE_TIME_SEPARATOR);
    return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
  }


  var NOT_URI_FRAGMENT = /\/|:/;
  function uri(str) {
    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
    return NOT_URI_FRAGMENT.test(str) && URI.test(str);
  }


  var Z_ANCHOR = /[^\\]\\Z/;
  function regex(str) {
    if (Z_ANCHOR.test(str)) return false;
    try {
      new RegExp(str);
      return true;
    } catch(e) {
      return false;
    }
  }

  var ref = function generate_ref(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $async, $refCode;
    if ($schema == '#' || $schema == '#/') {
      if (it.isRoot) {
        $async = it.async;
        $refCode = 'validate';
      } else {
        $async = it.root.schema.$async === true;
        $refCode = 'root.refVal[0]';
      }
    } else {
      var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
      if ($refVal === undefined) {
        var $message = it.MissingRefError.message(it.baseId, $schema);
        if (it.opts.missingRefs == 'fail') {
          it.logger.error($message);
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('$ref') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \'' + (it.util.escapeQuotes($schema)) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'can\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          if ($breakOnError) {
            out += ' if (false) { ';
          }
        } else if (it.opts.missingRefs == 'ignore') {
          it.logger.warn($message);
          if ($breakOnError) {
            out += ' if (true) { ';
          }
        } else {
          throw new it.MissingRefError(it.baseId, $schema, $message);
        }
      } else if ($refVal.inline) {
        var $it = it.util.copy(it);
        $it.level++;
        var $nextValid = 'valid' + $it.level;
        $it.schema = $refVal.schema;
        $it.schemaPath = '';
        $it.errSchemaPath = $schema;
        var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
        out += ' ' + ($code) + ' ';
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
        }
      } else {
        $async = $refVal.$async === true || (it.async && $refVal.$async !== false);
        $refCode = $refVal.code;
      }
    }
    if ($refCode) {
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      if (it.opts.passContext) {
        out += ' ' + ($refCode) + '.call(this, ';
      } else {
        out += ' ' + ($refCode) + '( ';
      }
      out += ' ' + ($data) + ', (dataPath || \'\')';
      if (it.errorPath != '""') {
        out += ' + ' + (it.errorPath);
      }
      var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
      out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';
      var __callValidate = out;
      out = $$outStack.pop();
      if ($async) {
        if (!it.async) throw new Error('async schema referenced by sync schema');
        if ($breakOnError) {
          out += ' var ' + ($valid) + '; ';
        }
        out += ' try { await ' + (__callValidate) + '; ';
        if ($breakOnError) {
          out += ' ' + ($valid) + ' = true; ';
        }
        out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
        if ($breakOnError) {
          out += ' ' + ($valid) + ' = false; ';
        }
        out += ' } ';
        if ($breakOnError) {
          out += ' if (' + ($valid) + ') { ';
        }
      } else {
        out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';
        if ($breakOnError) {
          out += ' else { ';
        }
      }
    }
    return out;
  };

  var allOf = function generate_allOf(it, $keyword, $ruleType) {
    var out = ' ';
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $currentBaseId = $it.baseId,
      $allSchemasEmpty = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
          $allSchemasEmpty = false;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if ($breakOnError) {
      if ($allSchemasEmpty) {
        out += ' if (true) { ';
      } else {
        out += ' ' + ($closingBraces.slice(0, -1)) + ' ';
      }
    }
    return out;
  };

  var anyOf = function generate_anyOf(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $noEmptySchema = $schema.every(function($sch) {
      return (it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all));
    });
    if ($noEmptySchema) {
      var $currentBaseId = $it.baseId;
      out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1,
          l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
          out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';
          $closingBraces += '}';
        }
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('anyOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should match some schema in anyOf\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
      out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
      if (it.opts.allErrors) {
        out += ' } ';
      }
    } else {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    }
    return out;
  };

  var comment = function generate_comment(it, $keyword, $ruleType) {
    var out = ' ';
    var $schema = it.schema[$keyword];
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $comment = it.util.toQuotedString($schema);
    if (it.opts.$comment === true) {
      out += ' console.log(' + ($comment) + ');';
    } else if (typeof it.opts.$comment == 'function') {
      out += ' self._opts.$comment(' + ($comment) + ', ' + (it.util.toQuotedString($errSchemaPath)) + ', validate.root.schema);';
    }
    return out;
  };

  var _const = function generate_const(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    }
    if (!$isData) {
      out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';
    }
    out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('const') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValue: schema' + ($lvl) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be equal to constant\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' }';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var contains = function generate_contains(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId,
      $nonEmptySchema = (it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all));
    out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
    if ($nonEmptySchema) {
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
      } else {
        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
      }
      out += ' if (' + ($nextValid) + ') break; }  ';
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';
    } else {
      out += ' if (' + ($data) + '.length == 0) {';
    }
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('contains') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should contain a valid item\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } else { ';
    if ($nonEmptySchema) {
      out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
    }
    if (it.opts.allErrors) {
      out += ' } ';
    }
    return out;
  };

  var dependencies = function generate_dependencies(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $schemaDeps = {},
      $propertyDeps = {},
      $ownProperties = it.opts.ownProperties;
    for ($property in $schema) {
      if ($property == '__proto__') continue;
      var $sch = $schema[$property];
      var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
      $deps[$property] = $sch;
    }
    out += 'var ' + ($errs) + ' = errors;';
    var $currentErrorPath = it.errorPath;
    out += 'var missing' + ($lvl) + ';';
    for (var $property in $propertyDeps) {
      $deps = $propertyDeps[$property];
      if ($deps.length) {
        out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
        if ($ownProperties) {
          out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
        }
        if ($breakOnError) {
          out += ' && ( ';
          var arr1 = $deps;
          if (arr1) {
            var $propertyKey, $i = -1,
              l1 = arr1.length - 1;
            while ($i < l1) {
              $propertyKey = arr1[$i += 1];
              if ($i) {
                out += ' || ';
              }
              var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
              out += ' ( ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
              }
              out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
            }
          }
          out += ')) {  ';
          var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
          }
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'should have ';
              if ($deps.length == 1) {
                out += 'property ' + (it.util.escapeQuotes($deps[0]));
              } else {
                out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
              }
              out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
        } else {
          out += ' ) { ';
          var arr2 = $deps;
          if (arr2) {
            var $propertyKey, i2 = -1,
              l2 = arr2.length - 1;
            while (i2 < l2) {
              $propertyKey = arr2[i2 += 1];
              var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              out += ' if ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
              }
              out += ') {  var err =   '; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should have ';
                  if ($deps.length == 1) {
                    out += 'property ' + (it.util.escapeQuotes($deps[0]));
                  } else {
                    out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
                  }
                  out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
            }
          }
        }
        out += ' }   ';
        if ($breakOnError) {
          $closingBraces += '}';
          out += ' else { ';
        }
      }
    }
    it.errorPath = $currentErrorPath;
    var $currentBaseId = $it.baseId;
    for (var $property in $schemaDeps) {
      var $sch = $schemaDeps[$property];
      if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
        out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
        if ($ownProperties) {
          out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
        }
        out += ') { ';
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + it.util.getProperty($property);
        $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        out += ' }  ';
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
          $closingBraces += '}';
        }
      }
    }
    if ($breakOnError) {
      out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    return out;
  };

  var _enum = function generate_enum(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    }
    var $i = 'i' + $lvl,
      $vSchema = 'schema' + $lvl;
    if (!$isData) {
      out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';
    }
    out += 'var ' + ($valid) + ';';
    if ($isData) {
      out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
    }
    out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';
    if ($isData) {
      out += '  }  ';
    }
    out += ' if (!' + ($valid) + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('enum') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be equal to one of the allowed values\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' }';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var format = function generate_format(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    if (it.opts.format === false) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
      return out;
    }
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $unknownFormats = it.opts.unknownFormats,
      $allowUnknown = Array.isArray($unknownFormats);
    if ($isData) {
      var $format = 'format' + $lvl,
        $isObject = 'isObject' + $lvl,
        $formatType = 'formatType' + $lvl;
      out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \'object\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \'string\'; if (' + ($isObject) + ') { ';
      if (it.async) {
        out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';
      }
      out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
      }
      out += ' (';
      if ($unknownFormats != 'ignore') {
        out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';
        if ($allowUnknown) {
          out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';
        }
        out += ') || ';
      }
      out += ' (' + ($format) + ' && ' + ($formatType) + ' == \'' + ($ruleType) + '\' && !(typeof ' + ($format) + ' == \'function\' ? ';
      if (it.async) {
        out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';
      } else {
        out += ' ' + ($format) + '(' + ($data) + ') ';
      }
      out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';
    } else {
      var $format = it.formats[$schema];
      if (!$format) {
        if ($unknownFormats == 'ignore') {
          it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
          if ($breakOnError) {
            out += ' if (true) { ';
          }
          return out;
        } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
          if ($breakOnError) {
            out += ' if (true) { ';
          }
          return out;
        } else {
          throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
        }
      }
      var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
      var $formatType = $isObject && $format.type || 'string';
      if ($isObject) {
        var $async = $format.async === true;
        $format = $format.validate;
      }
      if ($formatType != $ruleType) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      }
      if ($async) {
        if (!it.async) throw new Error('async format in sync schema');
        var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
        out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';
      } else {
        out += ' if (! ';
        var $formatRef = 'formats' + it.util.getProperty($schema);
        if ($isObject) $formatRef += '.validate';
        if (typeof $format == 'function') {
          out += ' ' + ($formatRef) + '(' + ($data) + ') ';
        } else {
          out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';
        }
        out += ') { ';
      }
    }
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('format') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';
      if ($isData) {
        out += '' + ($schemaValue);
      } else {
        out += '' + (it.util.toQuotedString($schema));
      }
      out += '  } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match format "';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + (it.util.escapeQuotes($schema));
        }
        out += '"\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + (it.util.toQuotedString($schema));
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var _if = function generate_if(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $thenSch = it.schema['then'],
      $elseSch = it.schema['else'],
      $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? (typeof $thenSch == 'object' && Object.keys($thenSch).length > 0) || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)),
      $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? (typeof $elseSch == 'object' && Object.keys($elseSch).length > 0) || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)),
      $currentBaseId = $it.baseId;
    if ($thenPresent || $elsePresent) {
      var $ifClause;
      $it.createErrors = false;
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = true;  ';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      out += '  ' + (it.validate($it)) + ' ';
      $it.baseId = $currentBaseId;
      $it.createErrors = true;
      out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }  ';
      it.compositeRule = $it.compositeRule = $wasComposite;
      if ($thenPresent) {
        out += ' if (' + ($nextValid) + ') {  ';
        $it.schema = it.schema['then'];
        $it.schemaPath = it.schemaPath + '.then';
        $it.errSchemaPath = it.errSchemaPath + '/then';
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
        if ($thenPresent && $elsePresent) {
          $ifClause = 'ifClause' + $lvl;
          out += ' var ' + ($ifClause) + ' = \'then\'; ';
        } else {
          $ifClause = '\'then\'';
        }
        out += ' } ';
        if ($elsePresent) {
          out += ' else { ';
        }
      } else {
        out += ' if (!' + ($nextValid) + ') { ';
      }
      if ($elsePresent) {
        $it.schema = it.schema['else'];
        $it.schemaPath = it.schemaPath + '.else';
        $it.errSchemaPath = it.errSchemaPath + '/else';
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
        if ($thenPresent && $elsePresent) {
          $ifClause = 'ifClause' + $lvl;
          out += ' var ' + ($ifClause) + ' = \'else\'; ';
        } else {
          $ifClause = '\'else\'';
        }
        out += ' } ';
      }
      out += ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('if') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { failingKeyword: ' + ($ifClause) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should match "\' + ' + ($ifClause) + ' + \'" schema\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
      out += ' }   ';
      if ($breakOnError) {
        out += ' else { ';
      }
    } else {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    }
    return out;
  };

  var items = function generate_items(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId;
    out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
    if (Array.isArray($schema)) {
      var $additionalItems = it.schema.additionalItems;
      if ($additionalItems === false) {
        out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';
        var $currErrSchemaPath = $errSchemaPath;
        $errSchemaPath = it.errSchemaPath + '/additionalItems';
        out += '  if (!' + ($valid) + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('additionalItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should NOT have more than ' + ($schema.length) + ' items\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } ';
        $errSchemaPath = $currErrSchemaPath;
        if ($breakOnError) {
          $closingBraces += '}';
          out += ' else { ';
        }
      }
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1,
          l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
            out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';
            var $passData = $data + '[' + $i + ']';
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + '[' + $i + ']';
            $it.errSchemaPath = $errSchemaPath + '/' + $i;
            $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
            $it.dataPathArr[$dataNxt] = $i;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            out += ' }  ';
            if ($breakOnError) {
              out += ' if (' + ($nextValid) + ') { ';
              $closingBraces += '}';
            }
          }
        }
      }
      if (typeof $additionalItems == 'object' && (it.opts.strictKeywords ? (typeof $additionalItems == 'object' && Object.keys($additionalItems).length > 0) || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
        $it.schema = $additionalItems;
        $it.schemaPath = it.schemaPath + '.additionalItems';
        $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
        out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
        $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
        var $passData = $data + '[' + $idx + ']';
        $it.dataPathArr[$dataNxt] = $idx;
        var $code = it.validate($it);
        $it.baseId = $currentBaseId;
        if (it.util.varOccurences($code, $nextData) < 2) {
          out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
        } else {
          out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
        }
        if ($breakOnError) {
          out += ' if (!' + ($nextValid) + ') break; ';
        }
        out += ' } }  ';
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
          $closingBraces += '}';
        }
      }
    } else if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
      } else {
        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
      }
      if ($breakOnError) {
        out += ' if (!' + ($nextValid) + ') break; ';
      }
      out += ' }';
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    return out;
  };

  var _limit = function generate__limit(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $isMax = $keyword == 'maximum',
      $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
      $schemaExcl = it.schema[$exclusiveKeyword],
      $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
      $op = $isMax ? '<' : '>',
      $notOp = $isMax ? '>' : '<',
      $errorKeyword = undefined;
    if (!($isData || typeof $schema == 'number' || $schema === undefined)) {
      throw new Error($keyword + ' must be number');
    }
    if (!($isDataExcl || $schemaExcl === undefined || typeof $schemaExcl == 'number' || typeof $schemaExcl == 'boolean')) {
      throw new Error($exclusiveKeyword + ' must be number or boolean');
    }
    if ($isDataExcl) {
      var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
        $exclusive = 'exclusive' + $lvl,
        $exclType = 'exclType' + $lvl,
        $exclIsNumber = 'exclIsNumber' + $lvl,
        $opExpr = 'op' + $lvl,
        $opStr = '\' + ' + $opExpr + ' + \'';
      out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';
      $schemaValueExcl = 'schemaExcl' + $lvl;
      out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \'boolean\' && ' + ($exclType) + ' != \'undefined\' && ' + ($exclType) + ' != \'number\') { ';
      var $errorKeyword = $exclusiveKeyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'' + ($exclusiveKeyword) + ' should be boolean\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } else if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
      }
      out += ' ' + ($exclType) + ' == \'number\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \'' + ($op) + '\' : \'' + ($op) + '=\'; ';
      if ($schema === undefined) {
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
        $schemaValue = $schemaValueExcl;
        $isData = $isDataExcl;
      }
    } else {
      var $exclIsNumber = typeof $schemaExcl == 'number',
        $opStr = $op;
      if ($exclIsNumber && $isData) {
        var $opExpr = '\'' + $opStr + '\'';
        out += ' if ( ';
        if ($isData) {
          out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
        }
        out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';
      } else {
        if ($exclIsNumber && $schema === undefined) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
          $schemaValue = $schemaExcl;
          $notOp += '=';
        } else {
          if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);
          if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
            $exclusive = true;
            $errorKeyword = $exclusiveKeyword;
            $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
            $notOp += '=';
          } else {
            $exclusive = false;
            $opStr += '=';
          }
        }
        var $opExpr = '\'' + $opStr + '\'';
        out += ' if ( ';
        if ($isData) {
          out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
        }
        out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';
      }
    }
    $errorKeyword = $errorKeyword || $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be ' + ($opStr) + ' ';
        if ($isData) {
          out += '\' + ' + ($schemaValue);
        } else {
          out += '' + ($schemaValue) + '\'';
        }
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var _limitItems = function generate__limitItems(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (!($isData || typeof $schema == 'number')) {
      throw new Error($keyword + ' must be number');
    }
    var $op = $keyword == 'maxItems' ? '>' : '<';
    out += 'if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
    }
    out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have ';
        if ($keyword == 'maxItems') {
          out += 'more';
        } else {
          out += 'fewer';
        }
        out += ' than ';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + ($schema);
        }
        out += ' items\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var _limitLength = function generate__limitLength(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (!($isData || typeof $schema == 'number')) {
      throw new Error($keyword + ' must be number');
    }
    var $op = $keyword == 'maxLength' ? '>' : '<';
    out += 'if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
    }
    if (it.opts.unicode === false) {
      out += ' ' + ($data) + '.length ';
    } else {
      out += ' ucs2length(' + ($data) + ') ';
    }
    out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be ';
        if ($keyword == 'maxLength') {
          out += 'longer';
        } else {
          out += 'shorter';
        }
        out += ' than ';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + ($schema);
        }
        out += ' characters\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var _limitProperties = function generate__limitProperties(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (!($isData || typeof $schema == 'number')) {
      throw new Error($keyword + ' must be number');
    }
    var $op = $keyword == 'maxProperties' ? '>' : '<';
    out += 'if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
    }
    out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have ';
        if ($keyword == 'maxProperties') {
          out += 'more';
        } else {
          out += 'fewer';
        }
        out += ' than ';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + ($schema);
        }
        out += ' properties\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var multipleOf = function generate_multipleOf(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (!($isData || typeof $schema == 'number')) {
      throw new Error($keyword + ' must be number');
    }
    out += 'var division' + ($lvl) + ';if (';
    if ($isData) {
      out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \'number\' || ';
    }
    out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';
    if (it.opts.multipleOfPrecision) {
      out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';
    } else {
      out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';
    }
    out += ' ) ';
    if ($isData) {
      out += '  )  ';
    }
    out += ' ) {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('multipleOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be multiple of ';
        if ($isData) {
          out += '\' + ' + ($schemaValue);
        } else {
          out += '' + ($schemaValue) + '\'';
        }
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var not = function generate_not(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += ' var ' + ($errs) + ' = errors;  ';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      $it.createErrors = false;
      var $allErrorsOption;
      if ($it.opts.allErrors) {
        $allErrorsOption = $it.opts.allErrors;
        $it.opts.allErrors = false;
      }
      out += ' ' + (it.validate($it)) + ' ';
      $it.createErrors = true;
      if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' if (' + ($nextValid) + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT be valid\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
      if (it.opts.allErrors) {
        out += ' } ';
      }
    } else {
      out += '  var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT be valid\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if ($breakOnError) {
        out += ' if (false) { ';
      }
    }
    return out;
  };

  var oneOf = function generate_oneOf(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $currentBaseId = $it.baseId,
      $prevValid = 'prevValid' + $lvl,
      $passingSchemas = 'passingSchemas' + $lvl;
    out += 'var ' + ($errs) + ' = errors , ' + ($prevValid) + ' = false , ' + ($valid) + ' = false , ' + ($passingSchemas) + ' = null; ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
        } else {
          out += ' var ' + ($nextValid) + ' = true; ';
        }
        if ($i) {
          out += ' if (' + ($nextValid) + ' && ' + ($prevValid) + ') { ' + ($valid) + ' = false; ' + ($passingSchemas) + ' = [' + ($passingSchemas) + ', ' + ($i) + ']; } else { ';
          $closingBraces += '}';
        }
        out += ' if (' + ($nextValid) + ') { ' + ($valid) + ' = ' + ($prevValid) + ' = true; ' + ($passingSchemas) + ' = ' + ($i) + '; }';
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('oneOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { passingSchemas: ' + ($passingSchemas) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match exactly one schema in oneOf\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';
    if (it.opts.allErrors) {
      out += ' } ';
    }
    return out;
  };

  var pattern = function generate_pattern(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
    out += 'if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
    }
    out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('pattern') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';
      if ($isData) {
        out += '' + ($schemaValue);
      } else {
        out += '' + (it.util.toQuotedString($schema));
      }
      out += '  } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match pattern "';
        if ($isData) {
          out += '\' + ' + ($schemaValue) + ' + \'';
        } else {
          out += '' + (it.util.escapeQuotes($schema));
        }
        out += '"\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + (it.util.toQuotedString($schema));
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  };

  var properties = function generate_properties(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $dataProperties = 'dataProperties' + $lvl;
    var $schemaKeys = Object.keys($schema || {}).filter(notProto),
      $pProperties = it.schema.patternProperties || {},
      $pPropertyKeys = Object.keys($pProperties).filter(notProto),
      $aProperties = it.schema.additionalProperties,
      $someProperties = $schemaKeys.length || $pPropertyKeys.length,
      $noAdditional = $aProperties === false,
      $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
      $removeAdditional = it.opts.removeAdditional,
      $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
      $ownProperties = it.opts.ownProperties,
      $currentBaseId = it.baseId;
    var $required = it.schema.required;
    if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {
      var $requiredHash = it.util.toHash($required);
    }

    function notProto(p) {
      return p !== '__proto__';
    }
    out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';
    if ($ownProperties) {
      out += ' var ' + ($dataProperties) + ' = undefined;';
    }
    if ($checkAdditional) {
      if ($ownProperties) {
        out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
      } else {
        out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
      }
      if ($someProperties) {
        out += ' var isAdditional' + ($lvl) + ' = !(false ';
        if ($schemaKeys.length) {
          if ($schemaKeys.length > 8) {
            out += ' || validate.schema' + ($schemaPath) + '.hasOwnProperty(' + ($key) + ') ';
          } else {
            var arr1 = $schemaKeys;
            if (arr1) {
              var $propertyKey, i1 = -1,
                l1 = arr1.length - 1;
              while (i1 < l1) {
                $propertyKey = arr1[i1 += 1];
                out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
              }
            }
          }
        }
        if ($pPropertyKeys.length) {
          var arr2 = $pPropertyKeys;
          if (arr2) {
            var $pProperty, $i = -1,
              l2 = arr2.length - 1;
            while ($i < l2) {
              $pProperty = arr2[$i += 1];
              out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';
            }
          }
        }
        out += ' ); if (isAdditional' + ($lvl) + ') { ';
      }
      if ($removeAdditional == 'all') {
        out += ' delete ' + ($data) + '[' + ($key) + ']; ';
      } else {
        var $currentErrorPath = it.errorPath;
        var $additionalProperty = '\' + ' + $key + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
        }
        if ($noAdditional) {
          if ($removeAdditional) {
            out += ' delete ' + ($data) + '[' + ($key) + ']; ';
          } else {
            out += ' ' + ($nextValid) + ' = false; ';
            var $currErrSchemaPath = $errSchemaPath;
            $errSchemaPath = it.errSchemaPath + '/additionalProperties';
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('additionalProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \'' + ($additionalProperty) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'';
                if (it.opts._errorDataPathProperty) {
                  out += 'is an invalid additional property';
                } else {
                  out += 'should NOT have additional properties';
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            $errSchemaPath = $currErrSchemaPath;
            if ($breakOnError) {
              out += ' break; ';
            }
          }
        } else if ($additionalIsSchema) {
          if ($removeAdditional == 'failing') {
            out += ' var ' + ($errs) + ' = errors;  ';
            var $wasComposite = it.compositeRule;
            it.compositeRule = $it.compositeRule = true;
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + '.additionalProperties';
            $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + '[' + $key + ']';
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';
            it.compositeRule = $it.compositeRule = $wasComposite;
          } else {
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + '.additionalProperties';
            $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + '[' + $key + ']';
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            if ($breakOnError) {
              out += ' if (!' + ($nextValid) + ') break; ';
            }
          }
        }
        it.errorPath = $currentErrorPath;
      }
      if ($someProperties) {
        out += ' } ';
      }
      out += ' }  ';
      if ($breakOnError) {
        out += ' if (' + ($nextValid) + ') { ';
        $closingBraces += '}';
      }
    }
    var $useDefaults = it.opts.useDefaults && !it.compositeRule;
    if ($schemaKeys.length) {
      var arr3 = $schemaKeys;
      if (arr3) {
        var $propertyKey, i3 = -1,
          l3 = arr3.length - 1;
        while (i3 < l3) {
          $propertyKey = arr3[i3 += 1];
          var $sch = $schema[$propertyKey];
          if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
            var $prop = it.util.getProperty($propertyKey),
              $passData = $data + $prop,
              $hasDefault = $useDefaults && $sch.default !== undefined;
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + $prop;
            $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
            $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
            $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              $code = it.util.varReplace($code, $nextData, $passData);
              var $useData = $passData;
            } else {
              var $useData = $nextData;
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
            }
            if ($hasDefault) {
              out += ' ' + ($code) + ' ';
            } else {
              if ($requiredHash && $requiredHash[$propertyKey]) {
                out += ' if ( ' + ($useData) + ' === undefined ';
                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                }
                out += ') { ' + ($nextValid) + ' = false; ';
                var $currentErrorPath = it.errorPath,
                  $currErrSchemaPath = $errSchemaPath,
                  $missingProperty = it.util.escapeQuotes($propertyKey);
                if (it.opts._errorDataPathProperty) {
                  it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                }
                $errSchemaPath = it.errSchemaPath + '/required';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'';
                    if (it.opts._errorDataPathProperty) {
                      out += 'is a required property';
                    } else {
                      out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                    }
                    out += '\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                $errSchemaPath = $currErrSchemaPath;
                it.errorPath = $currentErrorPath;
                out += ' } else { ';
              } else {
                if ($breakOnError) {
                  out += ' if ( ' + ($useData) + ' === undefined ';
                  if ($ownProperties) {
                    out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                  }
                  out += ') { ' + ($nextValid) + ' = true; } else { ';
                } else {
                  out += ' if (' + ($useData) + ' !== undefined ';
                  if ($ownProperties) {
                    out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                  }
                  out += ' ) { ';
                }
              }
              out += ' ' + ($code) + ' } ';
            }
          }
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if ($pPropertyKeys.length) {
      var arr4 = $pPropertyKeys;
      if (arr4) {
        var $pProperty, i4 = -1,
          l4 = arr4.length - 1;
        while (i4 < l4) {
          $pProperty = arr4[i4 += 1];
          var $sch = $pProperties[$pProperty];
          if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
            $it.schema = $sch;
            $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
            $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
            if ($ownProperties) {
              out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
            } else {
              out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
            }
            out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';
            $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + '[' + $key + ']';
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            if ($breakOnError) {
              out += ' if (!' + ($nextValid) + ') break; ';
            }
            out += ' } ';
            if ($breakOnError) {
              out += ' else ' + ($nextValid) + ' = true; ';
            }
            out += ' }  ';
            if ($breakOnError) {
              out += ' if (' + ($nextValid) + ') { ';
              $closingBraces += '}';
            }
          }
        }
      }
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    return out;
  };

  var propertyNames = function generate_propertyNames(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $errs = 'errs__' + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    out += 'var ' + ($errs) + ' = errors;';
    if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      var $key = 'key' + $lvl,
        $idx = 'idx' + $lvl,
        $i = 'i' + $lvl,
        $invalidName = '\' + ' + $key + ' + \'',
        $dataNxt = $it.dataLevel = it.dataLevel + 1,
        $nextData = 'data' + $dataNxt,
        $dataProperties = 'dataProperties' + $lvl,
        $ownProperties = it.opts.ownProperties,
        $currentBaseId = it.baseId;
      if ($ownProperties) {
        out += ' var ' + ($dataProperties) + ' = undefined; ';
      }
      if ($ownProperties) {
        out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
      } else {
        out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
      }
      out += ' var startErrs' + ($lvl) + ' = errors; ';
      var $passData = $key;
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
      } else {
        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('propertyNames') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \'' + ($invalidName) + '\' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'property name \\\'' + ($invalidName) + '\\\' is invalid\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
      if ($breakOnError) {
        out += ' break; ';
      }
      out += ' } }';
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    return out;
  };

  var required = function generate_required(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    }
    var $vSchema = 'schema' + $lvl;
    if (!$isData) {
      if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
        var $required = [];
        var arr1 = $schema;
        if (arr1) {
          var $property, i1 = -1,
            l1 = arr1.length - 1;
          while (i1 < l1) {
            $property = arr1[i1 += 1];
            var $propertySch = it.schema.properties[$property];
            if (!($propertySch && (it.opts.strictKeywords ? (typeof $propertySch == 'object' && Object.keys($propertySch).length > 0) || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
              $required[$required.length] = $property;
            }
          }
        }
      } else {
        var $required = $schema;
      }
    }
    if ($isData || $required.length) {
      var $currentErrorPath = it.errorPath,
        $loopRequired = $isData || $required.length >= it.opts.loopRequired,
        $ownProperties = it.opts.ownProperties;
      if ($breakOnError) {
        out += ' var missing' + ($lvl) + '; ';
        if ($loopRequired) {
          if (!$isData) {
            out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
          }
          var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          }
          out += ' var ' + ($valid) + ' = true; ';
          if ($isData) {
            out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
          }
          out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';
          if ($ownProperties) {
            out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
          }
          out += '; if (!' + ($valid) + ') break; } ';
          if ($isData) {
            out += '  }  ';
          }
          out += '  if (!' + ($valid) + ') {   ';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          out += ' } else { ';
        } else {
          out += ' if ( ';
          var arr2 = $required;
          if (arr2) {
            var $propertyKey, $i = -1,
              l2 = arr2.length - 1;
            while ($i < l2) {
              $propertyKey = arr2[$i += 1];
              if ($i) {
                out += ' || ';
              }
              var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
              out += ' ( ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
              }
              out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
            }
          }
          out += ') {  ';
          var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
          }
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          out += ' } else { ';
        }
      } else {
        if ($loopRequired) {
          if (!$isData) {
            out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
          }
          var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          }
          if ($isData) {
            out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'';
                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';
          }
          out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';
          if ($ownProperties) {
            out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
          }
          out += ') {  var err =   '; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
          if ($isData) {
            out += '  }  ';
          }
        } else {
          var arr3 = $required;
          if (arr3) {
            var $propertyKey, i3 = -1,
              l3 = arr3.length - 1;
            while (i3 < l3) {
              $propertyKey = arr3[i3 += 1];
              var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              out += ' if ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
              }
              out += ') {  var err =   '; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'';
                  if (it.opts._errorDataPathProperty) {
                    out += 'is a required property';
                  } else {
                    out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                  }
                  out += '\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
            }
          }
        }
      }
      it.errorPath = $currentErrorPath;
    } else if ($breakOnError) {
      out += ' if (true) {';
    }
    return out;
  };

  var uniqueItems = function generate_uniqueItems(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (($schema || $isData) && it.opts.uniqueItems !== false) {
      if ($isData) {
        out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'boolean\') ' + ($valid) + ' = false; else { ';
      }
      out += ' var i = ' + ($data) + '.length , ' + ($valid) + ' = true , j; if (i > 1) { ';
      var $itemType = it.schema.items && it.schema.items.type,
        $typeIsArray = Array.isArray($itemType);
      if (!$itemType || $itemType == 'object' || $itemType == 'array' || ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))) {
        out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } ';
      } else {
        out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + ($data) + '[i]; ';
        var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
        out += ' if (' + (it.util[$method]($itemType, 'item', it.opts.strictNumbers, true)) + ') continue; ';
        if ($typeIsArray) {
          out += ' if (typeof item == \'string\') item = \'"\' + item; ';
        }
        out += ' if (typeof itemIndices[item] == \'number\') { ' + ($valid) + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
      }
      out += ' } ';
      if ($isData) {
        out += '  }  ';
      }
      out += ' if (!' + ($valid) + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('uniqueItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema:  ';
          if ($isData) {
            out += 'validate.schema' + ($schemaPath);
          } else {
            out += '' + ($schema);
          }
          out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    } else {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    }
    return out;
  };

  //all requires must be explicit because browserify won't work with dynamic requires
  var dotjs = {
    '$ref': ref,
    allOf: allOf,
    anyOf: anyOf,
    '$comment': comment,
    const: _const,
    contains: contains,
    dependencies: dependencies,
    'enum': _enum,
    format: format,
    'if': _if,
    items: items,
    maximum: _limit,
    minimum: _limit,
    maxItems: _limitItems,
    minItems: _limitItems,
    maxLength: _limitLength,
    minLength: _limitLength,
    maxProperties: _limitProperties,
    minProperties: _limitProperties,
    multipleOf: multipleOf,
    not: not,
    oneOf: oneOf,
    pattern: pattern,
    properties: properties,
    propertyNames: propertyNames,
    required: required,
    uniqueItems: uniqueItems,
    validate: validate
  };

  var toHash$1 = util.toHash;

  var rules = function rules() {
    var RULES = [
      { type: 'number',
        rules: [ { 'maximum': ['exclusiveMaximum'] },
                 { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },
      { type: 'string',
        rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },
      { type: 'array',
        rules: [ 'maxItems', 'minItems', 'items', 'contains', 'uniqueItems' ] },
      { type: 'object',
        rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',
                 { 'properties': ['additionalProperties', 'patternProperties'] } ] },
      { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if' ] }
    ];

    var ALL = [ 'type', '$comment' ];
    var KEYWORDS = [
      '$schema', '$id', 'id', '$data', '$async', 'title',
      'description', 'default', 'definitions',
      'examples', 'readOnly', 'writeOnly',
      'contentMediaType', 'contentEncoding',
      'additionalItems', 'then', 'else'
    ];
    var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];
    RULES.all = toHash$1(ALL);
    RULES.types = toHash$1(TYPES);

    RULES.forEach(function (group) {
      group.rules = group.rules.map(function (keyword) {
        var implKeywords;
        if (typeof keyword == 'object') {
          var key = Object.keys(keyword)[0];
          implKeywords = keyword[key];
          keyword = key;
          implKeywords.forEach(function (k) {
            ALL.push(k);
            RULES.all[k] = true;
          });
        }
        ALL.push(keyword);
        var rule = RULES.all[keyword] = {
          keyword: keyword,
          code: dotjs[keyword],
          implements: implKeywords
        };
        return rule;
      });

      RULES.all.$comment = {
        keyword: '$comment',
        code: dotjs.$comment
      };

      if (group.type) RULES.types[group.type] = group;
    });

    RULES.keywords = toHash$1(ALL.concat(KEYWORDS));
    RULES.custom = {};

    return RULES;
  };

  var KEYWORDS = [
    'multipleOf',
    'maximum',
    'exclusiveMaximum',
    'minimum',
    'exclusiveMinimum',
    'maxLength',
    'minLength',
    'pattern',
    'additionalItems',
    'maxItems',
    'minItems',
    'uniqueItems',
    'maxProperties',
    'minProperties',
    'required',
    'additionalProperties',
    'enum',
    'format',
    'const'
  ];

  var data = function (metaSchema, keywordsJsonPointers) {
    for (var i=0; i<keywordsJsonPointers.length; i++) {
      metaSchema = JSON.parse(JSON.stringify(metaSchema));
      var segments = keywordsJsonPointers[i].split('/');
      var keywords = metaSchema;
      var j;
      for (j=1; j<segments.length; j++)
        keywords = keywords[segments[j]];

      for (j=0; j<KEYWORDS.length; j++) {
        var key = KEYWORDS[j];
        var schema = keywords[key];
        if (schema) {
          keywords[key] = {
            anyOf: [
              schema,
              { $ref: 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#' }
            ]
          };
        }
      }
    }

    return metaSchema;
  };

  var MissingRefError$1 = error_classes.MissingRef;

  var async = compileAsync;


  /**
   * Creates validating function for passed schema with asynchronous loading of missing schemas.
   * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
   * @this  Ajv
   * @param {Object}   schema schema object
   * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
   * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
   * @return {Promise} promise that resolves with a validating function.
   */
  function compileAsync(schema, meta, callback) {
    /* eslint no-shadow: 0 */
    /* global Promise */
    /* jshint validthis: true */
    var self = this;
    if (typeof this._opts.loadSchema != 'function')
      throw new Error('options.loadSchema should be a function');

    if (typeof meta == 'function') {
      callback = meta;
      meta = undefined;
    }

    var p = loadMetaSchemaOf(schema).then(function () {
      var schemaObj = self._addSchema(schema, undefined, meta);
      return schemaObj.validate || _compileAsync(schemaObj);
    });

    if (callback) {
      p.then(
        function(v) { callback(null, v); },
        callback
      );
    }

    return p;


    function loadMetaSchemaOf(sch) {
      var $schema = sch.$schema;
      return $schema && !self.getSchema($schema)
              ? compileAsync.call(self, { $ref: $schema }, true)
              : Promise.resolve();
    }


    function _compileAsync(schemaObj) {
      try { return self._compile(schemaObj); }
      catch(e) {
        if (e instanceof MissingRefError$1) return loadMissingSchema(e);
        throw e;
      }


      function loadMissingSchema(e) {
        var ref = e.missingSchema;
        if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');

        var schemaPromise = self._loadingSchemas[ref];
        if (!schemaPromise) {
          schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
          schemaPromise.then(removePromise, removePromise);
        }

        return schemaPromise.then(function (sch) {
          if (!added(ref)) {
            return loadMetaSchemaOf(sch).then(function () {
              if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
            });
          }
        }).then(function() {
          return _compileAsync(schemaObj);
        });

        function removePromise() {
          delete self._loadingSchemas[ref];
        }

        function added(ref) {
          return self._refs[ref] || self._schemas[ref];
        }
      }
    }
  }

  var custom = function generate_custom(it, $keyword, $ruleType) {
    var out = ' ';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    var $errs = 'errs__' + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
    if ($isData) {
      out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
      $schemaValue = 'schema' + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $rule = this,
      $definition = 'definition' + $lvl,
      $rDef = $rule.definition,
      $closingBraces = '';
    var $compile, $inline, $macro, $ruleValidate, $validateCode;
    if ($isData && $rDef.$data) {
      $validateCode = 'keywordValidate' + $lvl;
      var $validateSchema = $rDef.validateSchema;
      out += ' var ' + ($definition) + ' = RULES.custom[\'' + ($keyword) + '\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';
    } else {
      $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
      if (!$ruleValidate) return;
      $schemaValue = 'validate.schema' + $schemaPath;
      $validateCode = $ruleValidate.code;
      $compile = $rDef.compile;
      $inline = $rDef.inline;
      $macro = $rDef.macro;
    }
    var $ruleErrs = $validateCode + '.errors',
      $i = 'i' + $lvl,
      $ruleErr = 'ruleErr' + $lvl,
      $asyncKeyword = $rDef.async;
    if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
    if (!($inline || $macro)) {
      out += '' + ($ruleErrs) + ' = null;';
    }
    out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
    if ($isData && $rDef.$data) {
      $closingBraces += '}';
      out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';
      if ($validateSchema) {
        $closingBraces += '}';
        out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';
      }
    }
    if ($inline) {
      if ($rDef.statements) {
        out += ' ' + ($ruleValidate.validate) + ' ';
      } else {
        out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';
      }
    } else if ($macro) {
      var $it = it.util.copy(it);
      var $closingBraces = '';
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      $it.schema = $ruleValidate.validate;
      $it.schemaPath = '';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' ' + ($code);
    } else {
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      out += '  ' + ($validateCode) + '.call( ';
      if (it.opts.passContext) {
        out += 'this';
      } else {
        out += 'self';
      }
      if ($compile || $rDef.schema === false) {
        out += ' , ' + ($data) + ' ';
      } else {
        out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';
      }
      out += ' , (dataPath || \'\')';
      if (it.errorPath != '""') {
        out += ' + ' + (it.errorPath);
      }
      var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
      out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';
      var def_callRuleValidate = out;
      out = $$outStack.pop();
      if ($rDef.errors === false) {
        out += ' ' + ($valid) + ' = ';
        if ($asyncKeyword) {
          out += 'await ';
        }
        out += '' + (def_callRuleValidate) + '; ';
      } else {
        if ($asyncKeyword) {
          $ruleErrs = 'customErrors' + $lvl;
          out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = await ' + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';
        } else {
          out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';
        }
      }
    }
    if ($rDef.modifying) {
      out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';
    }
    out += '' + ($closingBraces);
    if ($rDef.valid) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    } else {
      out += ' if ( ';
      if ($rDef.valid === undefined) {
        out += ' !';
        if ($macro) {
          out += '' + ($nextValid);
        } else {
          out += '' + ($valid);
        }
      } else {
        out += ' ' + (!$rDef.valid) + ' ';
      }
      out += ') { ';
      $errorKeyword = $rule.keyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      var def_customError = out;
      out = $$outStack.pop();
      if ($inline) {
        if ($rDef.errors) {
          if ($rDef.errors != 'full') {
            out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
            if (it.opts.verbose) {
              out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
            }
            out += ' } ';
          }
        } else {
          if ($rDef.errors === false) {
            out += ' ' + (def_customError) + ' ';
          } else {
            out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
            if (it.opts.verbose) {
              out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
            }
            out += ' } } ';
          }
        }
      } else if ($macro) {
        out += '   var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError(vErrors); ';
          } else {
            out += ' validate.errors = vErrors; return false; ';
          }
        }
      } else {
        if ($rDef.errors === false) {
          out += ' ' + (def_customError) + ' ';
        } else {
          out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '";  ';
          if (it.opts.verbose) {
            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
          }
          out += ' } } else { ' + (def_customError) + ' } ';
        }
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    }
    return out;
  };

  var $schema = "http://json-schema.org/draft-07/schema#";
  var $id = "http://json-schema.org/draft-07/schema#";
  var title = "Core schema meta-schema";
  var definitions = {
  	schemaArray: {
  		type: "array",
  		minItems: 1,
  		items: {
  			$ref: "#"
  		}
  	},
  	nonNegativeInteger: {
  		type: "integer",
  		minimum: 0
  	},
  	nonNegativeIntegerDefault0: {
  		allOf: [
  			{
  				$ref: "#/definitions/nonNegativeInteger"
  			},
  			{
  				"default": 0
  			}
  		]
  	},
  	simpleTypes: {
  		"enum": [
  			"array",
  			"boolean",
  			"integer",
  			"null",
  			"number",
  			"object",
  			"string"
  		]
  	},
  	stringArray: {
  		type: "array",
  		items: {
  			type: "string"
  		},
  		uniqueItems: true,
  		"default": [
  		]
  	}
  };
  var type = [
  	"object",
  	"boolean"
  ];
  var properties$1 = {
  	$id: {
  		type: "string",
  		format: "uri-reference"
  	},
  	$schema: {
  		type: "string",
  		format: "uri"
  	},
  	$ref: {
  		type: "string",
  		format: "uri-reference"
  	},
  	$comment: {
  		type: "string"
  	},
  	title: {
  		type: "string"
  	},
  	description: {
  		type: "string"
  	},
  	"default": true,
  	readOnly: {
  		type: "boolean",
  		"default": false
  	},
  	examples: {
  		type: "array",
  		items: true
  	},
  	multipleOf: {
  		type: "number",
  		exclusiveMinimum: 0
  	},
  	maximum: {
  		type: "number"
  	},
  	exclusiveMaximum: {
  		type: "number"
  	},
  	minimum: {
  		type: "number"
  	},
  	exclusiveMinimum: {
  		type: "number"
  	},
  	maxLength: {
  		$ref: "#/definitions/nonNegativeInteger"
  	},
  	minLength: {
  		$ref: "#/definitions/nonNegativeIntegerDefault0"
  	},
  	pattern: {
  		type: "string",
  		format: "regex"
  	},
  	additionalItems: {
  		$ref: "#"
  	},
  	items: {
  		anyOf: [
  			{
  				$ref: "#"
  			},
  			{
  				$ref: "#/definitions/schemaArray"
  			}
  		],
  		"default": true
  	},
  	maxItems: {
  		$ref: "#/definitions/nonNegativeInteger"
  	},
  	minItems: {
  		$ref: "#/definitions/nonNegativeIntegerDefault0"
  	},
  	uniqueItems: {
  		type: "boolean",
  		"default": false
  	},
  	contains: {
  		$ref: "#"
  	},
  	maxProperties: {
  		$ref: "#/definitions/nonNegativeInteger"
  	},
  	minProperties: {
  		$ref: "#/definitions/nonNegativeIntegerDefault0"
  	},
  	required: {
  		$ref: "#/definitions/stringArray"
  	},
  	additionalProperties: {
  		$ref: "#"
  	},
  	definitions: {
  		type: "object",
  		additionalProperties: {
  			$ref: "#"
  		},
  		"default": {
  		}
  	},
  	properties: {
  		type: "object",
  		additionalProperties: {
  			$ref: "#"
  		},
  		"default": {
  		}
  	},
  	patternProperties: {
  		type: "object",
  		additionalProperties: {
  			$ref: "#"
  		},
  		propertyNames: {
  			format: "regex"
  		},
  		"default": {
  		}
  	},
  	dependencies: {
  		type: "object",
  		additionalProperties: {
  			anyOf: [
  				{
  					$ref: "#"
  				},
  				{
  					$ref: "#/definitions/stringArray"
  				}
  			]
  		}
  	},
  	propertyNames: {
  		$ref: "#"
  	},
  	"const": true,
  	"enum": {
  		type: "array",
  		items: true,
  		minItems: 1,
  		uniqueItems: true
  	},
  	type: {
  		anyOf: [
  			{
  				$ref: "#/definitions/simpleTypes"
  			},
  			{
  				type: "array",
  				items: {
  					$ref: "#/definitions/simpleTypes"
  				},
  				minItems: 1,
  				uniqueItems: true
  			}
  		]
  	},
  	format: {
  		type: "string"
  	},
  	contentMediaType: {
  		type: "string"
  	},
  	contentEncoding: {
  		type: "string"
  	},
  	"if": {
  		$ref: "#"
  	},
  	then: {
  		$ref: "#"
  	},
  	"else": {
  		$ref: "#"
  	},
  	allOf: {
  		$ref: "#/definitions/schemaArray"
  	},
  	anyOf: {
  		$ref: "#/definitions/schemaArray"
  	},
  	oneOf: {
  		$ref: "#/definitions/schemaArray"
  	},
  	not: {
  		$ref: "#"
  	}
  };
  var jsonSchemaDraft07 = {
  	$schema: $schema,
  	$id: $id,
  	title: title,
  	definitions: definitions,
  	type: type,
  	properties: properties$1,
  	"default": true
  };

  var jsonSchemaDraft07$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $schema: $schema,
    $id: $id,
    title: title,
    definitions: definitions,
    type: type,
    properties: properties$1,
    'default': jsonSchemaDraft07
  });

  var require$$2 = getCjsExportFromNamespace(jsonSchemaDraft07$1);

  var definition_schema = {
    $id: 'https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js',
    definitions: {
      simpleTypes: require$$2.definitions.simpleTypes
    },
    type: 'object',
    dependencies: {
      schema: ['validate'],
      $data: ['validate'],
      statements: ['inline'],
      valid: {not: {required: ['macro']}}
    },
    properties: {
      type: require$$2.properties.type,
      schema: {type: 'boolean'},
      statements: {type: 'boolean'},
      dependencies: {
        type: 'array',
        items: {type: 'string'}
      },
      metaSchema: {type: 'object'},
      modifying: {type: 'boolean'},
      valid: {type: 'boolean'},
      $data: {type: 'boolean'},
      async: {type: 'boolean'},
      errors: {
        anyOf: [
          {type: 'boolean'},
          {const: 'full'}
        ]
      }
    }
  };

  var IDENTIFIER$1 = /^[a-z_$][a-z0-9_$-]*$/i;



  var keyword = {
    add: addKeyword,
    get: getKeyword,
    remove: removeKeyword,
    validate: validateKeyword
  };


  /**
   * Define custom keyword
   * @this  Ajv
   * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
   * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
   * @return {Ajv} this for method chaining
   */
  function addKeyword(keyword, definition) {
    /* jshint validthis: true */
    /* eslint no-shadow: 0 */
    var RULES = this.RULES;
    if (RULES.keywords[keyword])
      throw new Error('Keyword ' + keyword + ' is already defined');

    if (!IDENTIFIER$1.test(keyword))
      throw new Error('Keyword ' + keyword + ' is not a valid identifier');

    if (definition) {
      this.validateKeyword(definition, true);

      var dataType = definition.type;
      if (Array.isArray(dataType)) {
        for (var i=0; i<dataType.length; i++)
          _addRule(keyword, dataType[i], definition);
      } else {
        _addRule(keyword, dataType, definition);
      }

      var metaSchema = definition.metaSchema;
      if (metaSchema) {
        if (definition.$data && this._opts.$data) {
          metaSchema = {
            anyOf: [
              metaSchema,
              { '$ref': 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#' }
            ]
          };
        }
        definition.validateSchema = this.compile(metaSchema, true);
      }
    }

    RULES.keywords[keyword] = RULES.all[keyword] = true;


    function _addRule(keyword, dataType, definition) {
      var ruleGroup;
      for (var i=0; i<RULES.length; i++) {
        var rg = RULES[i];
        if (rg.type == dataType) {
          ruleGroup = rg;
          break;
        }
      }

      if (!ruleGroup) {
        ruleGroup = { type: dataType, rules: [] };
        RULES.push(ruleGroup);
      }

      var rule = {
        keyword: keyword,
        definition: definition,
        custom: true,
        code: custom,
        implements: definition.implements
      };
      ruleGroup.rules.push(rule);
      RULES.custom[keyword] = rule;
    }

    return this;
  }


  /**
   * Get keyword
   * @this  Ajv
   * @param {String} keyword pre-defined or custom keyword.
   * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
   */
  function getKeyword(keyword) {
    /* jshint validthis: true */
    var rule = this.RULES.custom[keyword];
    return rule ? rule.definition : this.RULES.keywords[keyword] || false;
  }


  /**
   * Remove keyword
   * @this  Ajv
   * @param {String} keyword pre-defined or custom keyword.
   * @return {Ajv} this for method chaining
   */
  function removeKeyword(keyword) {
    /* jshint validthis: true */
    var RULES = this.RULES;
    delete RULES.keywords[keyword];
    delete RULES.all[keyword];
    delete RULES.custom[keyword];
    for (var i=0; i<RULES.length; i++) {
      var rules = RULES[i].rules;
      for (var j=0; j<rules.length; j++) {
        if (rules[j].keyword == keyword) {
          rules.splice(j, 1);
          break;
        }
      }
    }
    return this;
  }


  /**
   * Validate keyword definition
   * @this  Ajv
   * @param {Object} definition keyword definition object.
   * @param {Boolean} throwError true to throw exception if definition is invalid
   * @return {boolean} validation result
   */
  function validateKeyword(definition, throwError) {
    validateKeyword.errors = null;
    var v = this._validateKeyword = this._validateKeyword
                                    || this.compile(definition_schema, true);

    if (v(definition)) return true;
    validateKeyword.errors = v.errors;
    if (throwError)
      throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));
    else
      return false;
  }

  var $schema$1 = "http://json-schema.org/draft-07/schema#";
  var $id$1 = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
  var description = "Meta-schema for $data reference (JSON Schema extension proposal)";
  var type$1 = "object";
  var required$1 = [
  	"$data"
  ];
  var properties$2 = {
  	$data: {
  		type: "string",
  		anyOf: [
  			{
  				format: "relative-json-pointer"
  			},
  			{
  				format: "json-pointer"
  			}
  		]
  	}
  };
  var additionalProperties = false;
  var data$1 = {
  	$schema: $schema$1,
  	$id: $id$1,
  	description: description,
  	type: type$1,
  	required: required$1,
  	properties: properties$2,
  	additionalProperties: additionalProperties
  };

  var data$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $schema: $schema$1,
    $id: $id$1,
    description: description,
    type: type$1,
    required: required$1,
    properties: properties$2,
    additionalProperties: additionalProperties,
    'default': data$1
  });

  var require$$1 = getCjsExportFromNamespace(data$2);

  var ajv = Ajv;

  Ajv.prototype.validate = validate$1;
  Ajv.prototype.compile = compile$1;
  Ajv.prototype.addSchema = addSchema;
  Ajv.prototype.addMetaSchema = addMetaSchema;
  Ajv.prototype.validateSchema = validateSchema;
  Ajv.prototype.getSchema = getSchema;
  Ajv.prototype.removeSchema = removeSchema;
  Ajv.prototype.addFormat = addFormat;
  Ajv.prototype.errorsText = errorsText;

  Ajv.prototype._addSchema = _addSchema;
  Ajv.prototype._compile = _compile;

  Ajv.prototype.compileAsync = async;

  Ajv.prototype.addKeyword = keyword.add;
  Ajv.prototype.getKeyword = keyword.get;
  Ajv.prototype.removeKeyword = keyword.remove;
  Ajv.prototype.validateKeyword = keyword.validate;


  Ajv.ValidationError = error_classes.Validation;
  Ajv.MissingRefError = error_classes.MissingRef;
  Ajv.$dataMetaSchema = data;

  var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';

  var META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];
  var META_SUPPORT_DATA = ['/properties'];

  /**
   * Creates validator instance.
   * Usage: `Ajv(opts)`
   * @param {Object} opts optional options
   * @return {Object} ajv instance
   */
  function Ajv(opts) {
    if (!(this instanceof Ajv)) return new Ajv(opts);
    opts = this._opts = util.copy(opts) || {};
    setLogger(this);
    this._schemas = {};
    this._refs = {};
    this._fragments = {};
    this._formats = formats_1(opts.format);

    this._cache = opts.cache || new cache;
    this._loadingSchemas = {};
    this._compilations = [];
    this.RULES = rules();
    this._getId = chooseGetId(opts);

    opts.loopRequired = opts.loopRequired || Infinity;
    if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
    if (opts.serialize === undefined) opts.serialize = fastJsonStableStringify;
    this._metaOpts = getMetaSchemaOptions(this);

    if (opts.formats) addInitialFormats(this);
    if (opts.keywords) addInitialKeywords(this);
    addDefaultMetaSchema(this);
    if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
    if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});
    addInitialSchemas(this);
  }



  /**
   * Validate data using schema
   * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
   * @this   Ajv
   * @param  {String|Object} schemaKeyRef key, ref or schema object
   * @param  {Any} data to be validated
   * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
   */
  function validate$1(schemaKeyRef, data) {
    var v;
    if (typeof schemaKeyRef == 'string') {
      v = this.getSchema(schemaKeyRef);
      if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
    } else {
      var schemaObj = this._addSchema(schemaKeyRef);
      v = schemaObj.validate || this._compile(schemaObj);
    }

    var valid = v(data);
    if (v.$async !== true) this.errors = v.errors;
    return valid;
  }


  /**
   * Create validating function for passed schema.
   * @this   Ajv
   * @param  {Object} schema schema object
   * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
   * @return {Function} validating function
   */
  function compile$1(schema, _meta) {
    var schemaObj = this._addSchema(schema, undefined, _meta);
    return schemaObj.validate || this._compile(schemaObj);
  }


  /**
   * Adds schema to the instance.
   * @this   Ajv
   * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
   * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
   * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
   * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
   * @return {Ajv} this for method chaining
   */
  function addSchema(schema, key, _skipValidation, _meta) {
    if (Array.isArray(schema)){
      for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);
      return this;
    }
    var id = this._getId(schema);
    if (id !== undefined && typeof id != 'string')
      throw new Error('schema id must be string');
    key = resolve_1.normalizeId(key || id);
    checkUnique(this, key);
    this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
    return this;
  }


  /**
   * Add schema that will be used to validate other schemas
   * options in META_IGNORE_OPTIONS are alway set to false
   * @this   Ajv
   * @param {Object} schema schema object
   * @param {String} key optional schema key
   * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
   * @return {Ajv} this for method chaining
   */
  function addMetaSchema(schema, key, skipValidation) {
    this.addSchema(schema, key, skipValidation, true);
    return this;
  }


  /**
   * Validate schema
   * @this   Ajv
   * @param {Object} schema schema to validate
   * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
   * @return {Boolean} true if schema is valid
   */
  function validateSchema(schema, throwOrLogError) {
    var $schema = schema.$schema;
    if ($schema !== undefined && typeof $schema != 'string')
      throw new Error('$schema must be a string');
    $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
    if (!$schema) {
      this.logger.warn('meta-schema not available');
      this.errors = null;
      return true;
    }
    var valid = this.validate($schema, schema);
    if (!valid && throwOrLogError) {
      var message = 'schema is invalid: ' + this.errorsText();
      if (this._opts.validateSchema == 'log') this.logger.error(message);
      else throw new Error(message);
    }
    return valid;
  }


  function defaultMeta(self) {
    var meta = self._opts.meta;
    self._opts.defaultMeta = typeof meta == 'object'
                              ? self._getId(meta) || meta
                              : self.getSchema(META_SCHEMA_ID)
                                ? META_SCHEMA_ID
                                : undefined;
    return self._opts.defaultMeta;
  }


  /**
   * Get compiled schema from the instance by `key` or `ref`.
   * @this   Ajv
   * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
   * @return {Function} schema validating function (with property `schema`).
   */
  function getSchema(keyRef) {
    var schemaObj = _getSchemaObj(this, keyRef);
    switch (typeof schemaObj) {
      case 'object': return schemaObj.validate || this._compile(schemaObj);
      case 'string': return this.getSchema(schemaObj);
      case 'undefined': return _getSchemaFragment(this, keyRef);
    }
  }


  function _getSchemaFragment(self, ref) {
    var res = resolve_1.schema.call(self, { schema: {} }, ref);
    if (res) {
      var schema = res.schema
        , root = res.root
        , baseId = res.baseId;
      var v = compile_1.call(self, schema, root, undefined, baseId);
      self._fragments[ref] = new schema_obj({
        ref: ref,
        fragment: true,
        schema: schema,
        root: root,
        baseId: baseId,
        validate: v
      });
      return v;
    }
  }


  function _getSchemaObj(self, keyRef) {
    keyRef = resolve_1.normalizeId(keyRef);
    return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
  }


  /**
   * Remove cached schema(s).
   * If no parameter is passed all schemas but meta-schemas are removed.
   * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
   * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
   * @this   Ajv
   * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
   * @return {Ajv} this for method chaining
   */
  function removeSchema(schemaKeyRef) {
    if (schemaKeyRef instanceof RegExp) {
      _removeAllSchemas(this, this._schemas, schemaKeyRef);
      _removeAllSchemas(this, this._refs, schemaKeyRef);
      return this;
    }
    switch (typeof schemaKeyRef) {
      case 'undefined':
        _removeAllSchemas(this, this._schemas);
        _removeAllSchemas(this, this._refs);
        this._cache.clear();
        return this;
      case 'string':
        var schemaObj = _getSchemaObj(this, schemaKeyRef);
        if (schemaObj) this._cache.del(schemaObj.cacheKey);
        delete this._schemas[schemaKeyRef];
        delete this._refs[schemaKeyRef];
        return this;
      case 'object':
        var serialize = this._opts.serialize;
        var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
        this._cache.del(cacheKey);
        var id = this._getId(schemaKeyRef);
        if (id) {
          id = resolve_1.normalizeId(id);
          delete this._schemas[id];
          delete this._refs[id];
        }
    }
    return this;
  }


  function _removeAllSchemas(self, schemas, regex) {
    for (var keyRef in schemas) {
      var schemaObj = schemas[keyRef];
      if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
        self._cache.del(schemaObj.cacheKey);
        delete schemas[keyRef];
      }
    }
  }


  /* @this   Ajv */
  function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
    if (typeof schema != 'object' && typeof schema != 'boolean')
      throw new Error('schema should be object or boolean');
    var serialize = this._opts.serialize;
    var cacheKey = serialize ? serialize(schema) : schema;
    var cached = this._cache.get(cacheKey);
    if (cached) return cached;

    shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;

    var id = resolve_1.normalizeId(this._getId(schema));
    if (id && shouldAddSchema) checkUnique(this, id);

    var willValidate = this._opts.validateSchema !== false && !skipValidation;
    var recursiveMeta;
    if (willValidate && !(recursiveMeta = id && id == resolve_1.normalizeId(schema.$schema)))
      this.validateSchema(schema, true);

    var localRefs = resolve_1.ids.call(this, schema);

    var schemaObj = new schema_obj({
      id: id,
      schema: schema,
      localRefs: localRefs,
      cacheKey: cacheKey,
      meta: meta
    });

    if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;
    this._cache.put(cacheKey, schemaObj);

    if (willValidate && recursiveMeta) this.validateSchema(schema, true);

    return schemaObj;
  }


  /* @this   Ajv */
  function _compile(schemaObj, root) {
    if (schemaObj.compiling) {
      schemaObj.validate = callValidate;
      callValidate.schema = schemaObj.schema;
      callValidate.errors = null;
      callValidate.root = root ? root : callValidate;
      if (schemaObj.schema.$async === true)
        callValidate.$async = true;
      return callValidate;
    }
    schemaObj.compiling = true;

    var currentOpts;
    if (schemaObj.meta) {
      currentOpts = this._opts;
      this._opts = this._metaOpts;
    }

    var v;
    try { v = compile_1.call(this, schemaObj.schema, root, schemaObj.localRefs); }
    catch(e) {
      delete schemaObj.validate;
      throw e;
    }
    finally {
      schemaObj.compiling = false;
      if (schemaObj.meta) this._opts = currentOpts;
    }

    schemaObj.validate = v;
    schemaObj.refs = v.refs;
    schemaObj.refVal = v.refVal;
    schemaObj.root = v.root;
    return v;


    /* @this   {*} - custom context, see passContext option */
    function callValidate() {
      /* jshint validthis: true */
      var _validate = schemaObj.validate;
      var result = _validate.apply(this, arguments);
      callValidate.errors = _validate.errors;
      return result;
    }
  }


  function chooseGetId(opts) {
    switch (opts.schemaId) {
      case 'auto': return _get$IdOrId;
      case 'id': return _getId;
      default: return _get$Id;
    }
  }

  /* @this   Ajv */
  function _getId(schema) {
    if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
    return schema.id;
  }

  /* @this   Ajv */
  function _get$Id(schema) {
    if (schema.id) this.logger.warn('schema id ignored', schema.id);
    return schema.$id;
  }


  function _get$IdOrId(schema) {
    if (schema.$id && schema.id && schema.$id != schema.id)
      throw new Error('schema $id is different from id');
    return schema.$id || schema.id;
  }


  /**
   * Convert array of error message objects to string
   * @this   Ajv
   * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
   * @param  {Object} options optional options with properties `separator` and `dataVar`.
   * @return {String} human readable string with all errors descriptions
   */
  function errorsText(errors, options) {
    errors = errors || this.errors;
    if (!errors) return 'No errors';
    options = options || {};
    var separator = options.separator === undefined ? ', ' : options.separator;
    var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

    var text = '';
    for (var i=0; i<errors.length; i++) {
      var e = errors[i];
      if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
    }
    return text.slice(0, -separator.length);
  }


  /**
   * Add custom format
   * @this   Ajv
   * @param {String} name format name
   * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
   * @return {Ajv} this for method chaining
   */
  function addFormat(name, format) {
    if (typeof format == 'string') format = new RegExp(format);
    this._formats[name] = format;
    return this;
  }


  function addDefaultMetaSchema(self) {
    var $dataSchema;
    if (self._opts.$data) {
      $dataSchema = require$$1;
      self.addMetaSchema($dataSchema, $dataSchema.$id, true);
    }
    if (self._opts.meta === false) return;
    var metaSchema = require$$2;
    if (self._opts.$data) metaSchema = data(metaSchema, META_SUPPORT_DATA);
    self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
    self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
  }


  function addInitialSchemas(self) {
    var optsSchemas = self._opts.schemas;
    if (!optsSchemas) return;
    if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);
    else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
  }


  function addInitialFormats(self) {
    for (var name in self._opts.formats) {
      var format = self._opts.formats[name];
      self.addFormat(name, format);
    }
  }


  function addInitialKeywords(self) {
    for (var name in self._opts.keywords) {
      var keyword = self._opts.keywords[name];
      self.addKeyword(name, keyword);
    }
  }


  function checkUnique(self, id) {
    if (self._schemas[id] || self._refs[id])
      throw new Error('schema with key or id "' + id + '" already exists');
  }


  function getMetaSchemaOptions(self) {
    var metaOpts = util.copy(self._opts);
    for (var i=0; i<META_IGNORE_OPTIONS.length; i++)
      delete metaOpts[META_IGNORE_OPTIONS[i]];
    return metaOpts;
  }


  function setLogger(self) {
    var logger = self._opts.logger;
    if (logger === false) {
      self.logger = {log: noop, warn: noop, error: noop};
    } else {
      if (logger === undefined) logger = console;
      if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))
        throw new Error('logger must implement log, warn and error methods');
      self.logger = logger;
    }
  }


  function noop() {}

  /* global globalThis */
  /* eslint no-restricted-globals: 1 */
  function schema() {
    return {
      type: "object",
      properties: {
        timeline: { $ref: "#/defs/block" },
        totalDuration: { type: "number", minimum: 0 },
        staggerings: { type: "array", items: { $ref: "#/defs/staggering" } },
        enumerators: { type: "array", items: { $ref: "#/defs/enumerator" } },
        meta: { type: "object" }
      },
      additionalProperties: false,
      defs: {
        ease: {
          type: "string",
          enum: ["linear", "cubic", "quad", "exp", "bounce", "circle", "sin",
            "linearIn", "cubicIn", "quadIn", "expIn", "bounceIn", "circleIn", "sinIn",
            "linearOut", "cubicOut", "quadOut", "expOut", "bounceOut", "circleOut", "sinOut"
          ]
        },
        enumerator: {
          type: "object",
          properties: {
            name: { type: "string" },
            filter: { type: "string" },
            stepSize: { type: "number" },
            values: { type: "array" }
          },
          additionalProperties: false,
          oneOf: [
            { required: ["name", "filter", "stepSize"] },
            { required: ["name", "filter", "values"] }
          ]
        },
        staggering: {
          type: "object",
          properties: {
            name: { type: "string" },
            by: {
              oneOf: [
                { type: "string" },
                {
                  type: "object",
                  properties: {
                    initial: { type: "string" },
                    final: { type: "string" }
                  },
                  additionalProperties: false
                }
              ]
            },
            overlap: { type: "number" },
            order: { type: "string", enum: ["ascending", "descending"] },
            ease: { $ref: "#/defs/ease" },
            staggering: { $ref: "#/defs/subStaggering" }
          },
          additionalProperties: false,
          oneOf: [{ required: ["name", "overlap", "by"] }]
        },
        subStaggering: {
          type: "object",
          properties: {
            name: { type: "string" },
            by: { oneOf: [{ type: "string" }, { type: "object" }] },
            overlap: { type: "number" },
            order: { type: "string", enum: ["ascending", "descending"] },
            staggering: { $ref: "#/defs/subStaggering" }
          },
          additionalProperties: false,
          oneOf: [{ required: ["overlap", "by"] }]
        },
        block: {
          anyOf: [
            { $ref: "#/defs/sync" },
            { $ref: "#/defs/concat" },
            { $ref: "#/defs/markStep" },
            { $ref: "#/defs/axisStep" },
            { $ref: "#/defs/legendStep" },
            { $ref: "#/defs/pauseStep" },
            { $ref: "#/defs/viewStep" }
          ]
        },
        concat: {
          type: "object",
          properties: {
            concat: { type: "array", items: { $ref: "#/defs/block" } },
            autoScaleOrder: { type: "array", items: { type: "string" } },
            enumerator: { type: "string" }
          },
          required: ["concat"],
          additionalProperties: false
        },
        sync: {
          type: "object",
          properties: {
            sync: { type: "array", items: { $ref: "#/defs/block" } },
            anchor: { type: "string", enum: ["start", "end"] }
          },
          required: ["sync"],
          additionalProperties: false
        },
        markStep: {
          type: "object",
          properties: {
            component: {
              type: "object",
              properties: { mark: { type: "string" } },
              additionalProperties: false,
              required: ["mark"]
            },
            change: {
              type: "object",
              properties: {
                data: {
                  oneOf: [
                    {
                      type: "object",
                      properties: {
                        keys: { type: "array", items: { type: "string" } },
                        enter: { type: "boolean" },
                        exit: { type: "boolean" },
                        update: { type: "boolean" }
                      },
                      additionalProperties: false
                    },
                    { type: "array", items: { type: "string" } },
                    { type: "boolean" }
                  ]
                },
                scale: {
                  oneOf: [
                    {
                      type: "object",
                      additionalProperties: {
                        type: "object",
                        properties: { data: { type: "boolean" } },
                        additionalProperties: false
                      }
                    },
                    { type: "boolean" },
                    { type: "array", items: { type: "string" } }
                  ]
                },
                signal: {
                  oneOf: [
                    { type: "array", items: { type: "string" } },
                    { type: "boolean" }
                  ]
                },
                marktype: { type: "boolean" },
                encode: { $ref: "#/defs/encode" }
              },
              additionalProperties: false
            },
            timing: { $ref: "#/defs/timing" },
            enumerator: { type: "string" }
          },
          required: ["timing", "component"],
          additionalProperties: false
        },
        axisStep: {
          type: "object",
          properties: {
            component: {
              type: "object",
              properties: { axis: { type: "string" } },
              additionalProperties: false,
              required: ["axis"]
            },
            change: {
              type: "object",
              properties: {
                scale: {
                  oneOf: [
                    {
                      type: "object",
                      properties: {
                        domainDimension: { type: "string", enum: ["same", "diff"] },
                        data: { type: "boolean" }
                      },
                      additionalProperties: false
                    },
                    { type: "boolean" }
                  ]
                },
                signal: {
                  oneOf: [
                    { type: "array", items: { type: "string" } },
                    { type: "boolean" }
                  ]
                },
                marktype: { type: "boolean" },
                encode: {
                  oneOf: [
                    {
                      type: "object",
                      properties: {
                        axis: { $ref: "#/defs/encode" },
                        title: { $ref: "#/defs/encode" },
                        ticks: { $ref: "#/defs/encode" },
                        labels: { $ref: "#/defs/encode" },
                        grid: { $ref: "#/defs/encode" },
                        domain: { $ref: "#/defs/encode" }
                      },
                      additionalProperties: false
                    },
                    { type: "boolean" }
                  ]
                }
              },
              additionalProperties: false
            },
            timing: { $ref: "#/defs/timing" },
            enumerator: { type: "string" }
          },
          required: ["timing", "component"],
          additionalProperties: false
        },
        legendStep: {
          type: "object",
          properties: {
            component: {
              type: "object",
              properties: { legend: { type: "string" } },
              additionalProperties: false,
              required: ["legend"]
            },
            change: {
              type: "object",
              properties: {
                scale: {
                  oneOf: [
                    {
                      type: "object",
                      properties: {
                        domainDimension: { type: "string", enum: ["same", "diff"] }
                      },
                      additionalProperties: {
                        type: "object",
                        properties: { data: { type: "boolean" } },
                        additionalProperties: false
                      }
                    },
                    { type: "boolean" },
                    { type: "array", items: { type: "string" } }
                  ]
                },
                signal: {
                  oneOf: [
                    { type: "array", items: { type: "string" } },
                    { type: "boolean" }
                  ]
                },
                encode: {
                  oneOf: [
                    {
                      type: "object",
                      properties: {
                        symbols: { $ref: "#/defs/encode" },
                        title: { $ref: "#/defs/encode" },
                        labels: { $ref: "#/defs/encode" },
                        entries: { $ref: "#/defs/encode" },
                        gradient: { $ref: "#/defs/encode" },
                        legend: { $ref: "#/defs/encode" }
                      },
                      additionalProperties: false
                    },
                    { type: "boolean" }
                  ]
                }
              },
              additionalProperties: false
            },
            timing: { $ref: "#/defs/timing" },
            enumerator: { type: "string" }
          },
          required: ["timing", "component"],
          additionalProperties: false
        },
        pauseStep: {
          type: "object",
          properties: {
            component: { const: "pause" },
            timing: { $ref: "#/defs/timing" }
          },
          required: ["timing", "component"],
          additionalProperties: false
        },
        viewStep: {
          type: "object",
          properties: {
            component: { const: "view" },
            change: {
              type: "object",
              properties: {
                signal: {
                  oneOf: [
                    { type: "array", items: { type: "string" } },
                    { type: "boolean" }
                  ]
                },
                additionalProperties: false
              }
            },
            timing: { $ref: "#/defs/timing" }
          },
          required: ["timing", "component"],
          additionalProperties: false
        },
        timing: {
          type: "object",
          properties: {
            duration: {
              oneOf: [
                { type: "number", minimum: 0 },
                {
                  type: "object",
                  properties: { ratio: { type: "number", minimum: 0 } }
                }
              ]
            },
            delay: {
              oneOf: [
                { type: "number" },
                { type: "object", properties: { ratio: { type: "number" } } }
              ]
            },
            staggering: { type: "string" },
            ease: { $ref: "#/defs/ease" },
          }
        },
        encode: {
          oneOf: [
            {
              type: "object",
              properties: {
                update: { oneOf: [{ type: "object" }, { type: "boolean" }] },
                enter: { oneOf: [{ type: "object" }, { type: "boolean" }] },
                exit: { oneOf: [{ type: "object" }, { type: "boolean" }] }
              },
              additionalProperties: false
            },
            { type: "boolean" }
          ]
        }
      }
    };
  }

  function specChecker(spec) {
    const ajv$1 = new ajv();
    const validate = ajv$1.compile(schema());

    const valid = validate(spec);
    if (!valid) {
      throw new Error("Invalid Spec", validate.errors);
    }
    return true;
  }

  const RawCode = 'RawCode';
  const Literal = 'Literal';
  const Property = 'Property';
  const Identifier = 'Identifier';

  const ArrayExpression = 'ArrayExpression';
  const BinaryExpression = 'BinaryExpression';
  const CallExpression = 'CallExpression';
  const ConditionalExpression = 'ConditionalExpression';
  const LogicalExpression = 'LogicalExpression';
  const MemberExpression = 'MemberExpression';
  const ObjectExpression = 'ObjectExpression';
  const UnaryExpression = 'UnaryExpression';

  function ASTNode(type) {
    this.type = type;
  }

  ASTNode.prototype.visit = function(visitor) {
    let c, i, n;

    if (visitor(this)) return 1;

    for (c=children(this), i=0, n=c.length; i<n; ++i) {
      if (c[i].visit(visitor)) return 1;
    }
  };

  function children(node) {
    switch (node.type) {
      case ArrayExpression:
        return node.elements;
      case BinaryExpression:
      case LogicalExpression:
        return [node.left, node.right];
      case CallExpression:
        return [node.callee].concat(node.arguments);
      case ConditionalExpression:
        return [node.test, node.consequent, node.alternate];
      case MemberExpression:
        return [node.object, node.property];
      case ObjectExpression:
        return node.properties;
      case Property:
        return [node.key, node.value];
      case UnaryExpression:
        return [node.argument];
      case Identifier:
      case Literal:
      case RawCode:
      default:
        return [];
    }
  }

  /*
    The following expression parser is based on Esprima (http://esprima.org/).
    Original header comment and license for Esprima is included here:

    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  var TokenName,
      source,
      index,
      length,
      lookahead;

  var TokenBooleanLiteral = 1,
      TokenEOF = 2,
      TokenIdentifier = 3,
      TokenKeyword = 4,
      TokenNullLiteral = 5,
      TokenNumericLiteral = 6,
      TokenPunctuator = 7,
      TokenStringLiteral = 8,
      TokenRegularExpression = 9;

  TokenName = {};
  TokenName[TokenBooleanLiteral] = 'Boolean';
  TokenName[TokenEOF] = '<end>';
  TokenName[TokenIdentifier] = 'Identifier';
  TokenName[TokenKeyword] = 'Keyword';
  TokenName[TokenNullLiteral] = 'Null';
  TokenName[TokenNumericLiteral] = 'Numeric';
  TokenName[TokenPunctuator] = 'Punctuator';
  TokenName[TokenStringLiteral] = 'String';
  TokenName[TokenRegularExpression] = 'RegularExpression';

  var SyntaxArrayExpression = 'ArrayExpression',
      SyntaxBinaryExpression = 'BinaryExpression',
      SyntaxCallExpression = 'CallExpression',
      SyntaxConditionalExpression = 'ConditionalExpression',
      SyntaxIdentifier = 'Identifier',
      SyntaxLiteral = 'Literal',
      SyntaxLogicalExpression = 'LogicalExpression',
      SyntaxMemberExpression = 'MemberExpression',
      SyntaxObjectExpression = 'ObjectExpression',
      SyntaxProperty = 'Property',
      SyntaxUnaryExpression = 'UnaryExpression';

  // Error messages should be identical to V8.
  var MessageUnexpectedToken = 'Unexpected token %0',
      MessageUnexpectedNumber = 'Unexpected number',
      MessageUnexpectedString = 'Unexpected string',
      MessageUnexpectedIdentifier = 'Unexpected identifier',
      MessageUnexpectedReserved = 'Unexpected reserved word',
      MessageUnexpectedEOS = 'Unexpected end of input',
      MessageInvalidRegExp = 'Invalid regular expression',
      MessageUnterminatedRegExp = 'Invalid regular expression: missing /',
      MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',
      MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';

  var ILLEGAL = 'ILLEGAL',
      DISABLED = 'Disabled.';

  // See also tools/generate-unicode-regex.py.
  var RegexNonAsciiIdentifierStart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'),
      // eslint-disable-next-line no-misleading-character-class
      RegexNonAsciiIdentifierPart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]');

  // Ensure the condition is true, otherwise throw an error.
  // This is only to have a better contract semantic, i.e. another safety net
  // to catch a logic error. The condition shall be fulfilled in normal case.
  // Do NOT use this to enforce a certain condition on any user input.

  function assert(condition, message) {
    /* istanbul ignore next */
    if (!condition) {
      throw new Error('ASSERT: ' + message);
    }
  }

  function isDecimalDigit(ch) {
    return (ch >= 0x30 && ch <= 0x39); // 0..9
  }

  function isHexDigit(ch) {
    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
  }

  function isOctalDigit(ch) {
    return '01234567'.indexOf(ch) >= 0;
  }

  // 7.2 White Space

  function isWhiteSpace(ch) {
    return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
      (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
  }

  // 7.3 Line Terminators

  function isLineTerminator(ch) {
    return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
  }

  // 7.6 Identifier Names and Identifiers

  function isIdentifierStart(ch) {
    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)
      (ch >= 0x41 && ch <= 0x5A) || // A..Z
      (ch >= 0x61 && ch <= 0x7A) || // a..z
      (ch === 0x5C) || // \ (backslash)
      ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));
  }

  function isIdentifierPart(ch) {
    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)
      (ch >= 0x41 && ch <= 0x5A) || // A..Z
      (ch >= 0x61 && ch <= 0x7A) || // a..z
      (ch >= 0x30 && ch <= 0x39) || // 0..9
      (ch === 0x5C) || // \ (backslash)
      ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));
  }

  // 7.6.1.1 Keywords

  var keywords = {
    'if':1, 'in':1, 'do':1,
    'var':1, 'for':1, 'new':1, 'try':1, 'let':1,
    'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,
    'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,
    'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,
    'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,
    'function':1, 'continue':1, 'debugger':1,
    'interface':1, 'protected':1,
    'instanceof':1, 'implements':1
  };

  function skipComment() {
    var ch;

    while (index < length) {
      ch = source.charCodeAt(index);

      if (isWhiteSpace(ch) || isLineTerminator(ch)) {
        ++index;
      } else {
        break;
      }
    }
  }

  function scanHexEscape(prefix) {
    var i, len, ch, code = 0;

    len = (prefix === 'u') ? 4 : 2;
    for (i = 0; i < len; ++i) {
      if (index < length && isHexDigit(source[index])) {
        ch = source[index++];
        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
      } else {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }
    return String.fromCharCode(code);
  }

  function scanUnicodeCodePointEscape() {
    var ch, code, cu1, cu2;

    ch = source[index];
    code = 0;

    // At least, one hex digit is required.
    if (ch === '}') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    while (index < length) {
      ch = source[index++];
      if (!isHexDigit(ch)) {
        break;
      }
      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
    }

    if (code > 0x10FFFF || ch !== '}') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    // UTF-16 Encoding
    if (code <= 0xFFFF) {
      return String.fromCharCode(code);
    }
    cu1 = ((code - 0x10000) >> 10) + 0xD800;
    cu2 = ((code - 0x10000) & 1023) + 0xDC00;
    return String.fromCharCode(cu1, cu2);
  }

  function getEscapedIdentifier() {
    var ch, id;

    ch = source.charCodeAt(index++);
    id = String.fromCharCode(ch);

    // '\u' (U+005C, U+0075) denotes an escaped character.
    if (ch === 0x5C) {
      if (source.charCodeAt(index) !== 0x75) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
      ++index;
      ch = scanHexEscape('u');
      if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
      id = ch;
    }

    while (index < length) {
      ch = source.charCodeAt(index);
      if (!isIdentifierPart(ch)) {
        break;
      }
      ++index;
      id += String.fromCharCode(ch);

      // '\u' (U+005C, U+0075) denotes an escaped character.
      if (ch === 0x5C) {
        id = id.substr(0, id.length - 1);
        if (source.charCodeAt(index) !== 0x75) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        ++index;
        ch = scanHexEscape('u');
        if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        id += ch;
      }
    }

    return id;
  }

  function getIdentifier() {
    var start, ch;

    start = index++;
    while (index < length) {
      ch = source.charCodeAt(index);
      if (ch === 0x5C) {
        // Blackslash (U+005C) marks Unicode escape sequence.
        index = start;
        return getEscapedIdentifier();
      }
      if (isIdentifierPart(ch)) {
        ++index;
      } else {
        break;
      }
    }

    return source.slice(start, index);
  }

  function scanIdentifier() {
    var start, id, type;

    start = index;

    // Backslash (U+005C) starts an escaped character.
    id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();

    // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.
    if (id.length === 1) {
      type = TokenIdentifier;
    } else if (keywords.hasOwnProperty(id)) { // eslint-disable-line no-prototype-builtins
      type = TokenKeyword;
    } else if (id === 'null') {
      type = TokenNullLiteral;
    } else if (id === 'true' || id === 'false') {
      type = TokenBooleanLiteral;
    } else {
      type = TokenIdentifier;
    }

    return {
      type: type,
      value: id,
      start: start,
      end: index
    };
  }

  // 7.7 Punctuators

  function scanPunctuator() {
    var start = index,
      code = source.charCodeAt(index),
      code2,
      ch1 = source[index],
      ch2,
      ch3,
      ch4;

    switch (code) {

      // Check for most common single-character punctuators.
      case 0x2E: // . dot
      case 0x28: // ( open bracket
      case 0x29: // ) close bracket
      case 0x3B: // ; semicolon
      case 0x2C: // , comma
      case 0x7B: // { open curly brace
      case 0x7D: // } close curly brace
      case 0x5B: // [
      case 0x5D: // ]
      case 0x3A: // :
      case 0x3F: // ?
      case 0x7E: // ~
        ++index;
        return {
          type: TokenPunctuator,
          value: String.fromCharCode(code),
          start: start,
          end: index
        };

      default:
        code2 = source.charCodeAt(index + 1);

        // '=' (U+003D) marks an assignment or comparison operator.
        if (code2 === 0x3D) {
          switch (code) {
            case 0x2B: // +
            case 0x2D: // -
            case 0x2F: // /
            case 0x3C: // <
            case 0x3E: // >
            case 0x5E: // ^
            case 0x7C: // |
            case 0x25: // %
            case 0x26: // &
            case 0x2A: // *
              index += 2;
              return {
                type: TokenPunctuator,
                value: String.fromCharCode(code) + String.fromCharCode(code2),
                start: start,
                end: index
              };

            case 0x21: // !
            case 0x3D: // =
              index += 2;

              // !== and ===
              if (source.charCodeAt(index) === 0x3D) {
                ++index;
              }
              return {
                type: TokenPunctuator,
                value: source.slice(start, index),
                start: start,
                end: index
              };
          }
        }
    }

    // 4-character punctuator: >>>=

    ch4 = source.substr(index, 4);

    if (ch4 === '>>>=') {
      index += 4;
      return {
        type: TokenPunctuator,
        value: ch4,
        start: start,
        end: index
      };
    }

    // 3-character punctuators: === !== >>> <<= >>=

    ch3 = ch4.substr(0, 3);

    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
      index += 3;
      return {
        type: TokenPunctuator,
        value: ch3,
        start: start,
        end: index
      };
    }

    // Other 2-character punctuators: ++ -- << >> && ||
    ch2 = ch3.substr(0, 2);

    if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {
      index += 2;
      return {
        type: TokenPunctuator,
        value: ch2,
        start: start,
        end: index
      };
    }

    // 1-character punctuators: < > = ! + - * % & | ^ /

    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
      ++index;
      return {
        type: TokenPunctuator,
        value: ch1,
        start: start,
        end: index
      };
    }

    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  // 7.8.3 Numeric Literals

  function scanHexLiteral(start) {
    var number = '';

    while (index < length) {
      if (!isHexDigit(source[index])) {
        break;
      }
      number += source[index++];
    }

    if (number.length === 0) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    if (isIdentifierStart(source.charCodeAt(index))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    return {
      type: TokenNumericLiteral,
      value: parseInt('0x' + number, 16),
      start: start,
      end: index
    };
  }

  function scanOctalLiteral(start) {
    var number = '0' + source[index++];
    while (index < length) {
      if (!isOctalDigit(source[index])) {
        break;
      }
      number += source[index++];
    }

    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    return {
      type: TokenNumericLiteral,
      value: parseInt(number, 8),
      octal: true,
      start: start,
      end: index
    };
  }

  function scanNumericLiteral() {
    var number, start, ch;

    ch = source[index];
    assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
      'Numeric literal must start with a decimal digit or a decimal point');

    start = index;
    number = '';
    if (ch !== '.') {
      number = source[index++];
      ch = source[index];

      // Hex number starts with '0x'.
      // Octal number starts with '0'.
      if (number === '0') {
        if (ch === 'x' || ch === 'X') {
          ++index;
          return scanHexLiteral(start);
        }
        if (isOctalDigit(ch)) {
          return scanOctalLiteral(start);
        }

        // decimal number starts with '0' such as '09' is illegal.
        if (ch && isDecimalDigit(ch.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
      }

      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }
      ch = source[index];
    }

    if (ch === '.') {
      number += source[index++];
      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }
      ch = source[index];
    }

    if (ch === 'e' || ch === 'E') {
      number += source[index++];

      ch = source[index];
      if (ch === '+' || ch === '-') {
        number += source[index++];
      }
      if (isDecimalDigit(source.charCodeAt(index))) {
        while (isDecimalDigit(source.charCodeAt(index))) {
          number += source[index++];
        }
      } else {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }

    if (isIdentifierStart(source.charCodeAt(index))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    return {
      type: TokenNumericLiteral,
      value: parseFloat(number),
      start: start,
      end: index
    };
  }

  // 7.8.4 String Literals

  function scanStringLiteral() {
    var str = '',
      quote, start, ch, code, octal = false;

    quote = source[index];
    assert((quote === '\'' || quote === '"'),
      'String literal must starts with a quote');

    start = index;
    ++index;

    while (index < length) {
      ch = source[index++];

      if (ch === quote) {
        quote = '';
        break;
      } else if (ch === '\\') {
        ch = source[index++];
        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
          switch (ch) {
            case 'u':
            case 'x':
              if (source[index] === '{') {
                ++index;
                str += scanUnicodeCodePointEscape();
              } else {
                str += scanHexEscape(ch);
              }
              break;
            case 'n':
              str += '\n';
              break;
            case 'r':
              str += '\r';
              break;
            case 't':
              str += '\t';
              break;
            case 'b':
              str += '\b';
              break;
            case 'f':
              str += '\f';
              break;
            case 'v':
              str += '\x0B';
              break;

            default:
              if (isOctalDigit(ch)) {
                code = '01234567'.indexOf(ch);

                // \0 is not octal escape sequence
                if (code !== 0) {
                  octal = true;
                }

                if (index < length && isOctalDigit(source[index])) {
                  octal = true;
                  code = code * 8 + '01234567'.indexOf(source[index++]);

                  // 3 digits are only allowed when string starts
                  // with 0, 1, 2, 3
                  if ('0123'.indexOf(ch) >= 0 &&
                    index < length &&
                    isOctalDigit(source[index])) {
                    code = code * 8 + '01234567'.indexOf(source[index++]);
                  }
                }
                str += String.fromCharCode(code);
              } else {
                str += ch;
              }
              break;
          }
        } else {
          if (ch === '\r' && source[index] === '\n') {
            ++index;
          }
        }
      } else if (isLineTerminator(ch.charCodeAt(0))) {
        break;
      } else {
        str += ch;
      }
    }

    if (quote !== '') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    return {
      type: TokenStringLiteral,
      value: str,
      octal: octal,
      start: start,
      end: index
    };
  }

  function testRegExp(pattern, flags) {
    var tmp = pattern;

    if (flags.indexOf('u') >= 0) {
      // Replace each astral symbol and every Unicode code point
      // escape sequence with a single ASCII symbol to avoid throwing on
      // regular expressions that are only valid in combination with the
      // `/u` flag.
      // Note: replacing with the ASCII symbol `x` might cause false
      // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
      // perfectly valid pattern that is equivalent to `[a-b]`, but it
      // would be replaced by `[x-b]` which throws an error.
      tmp = tmp
        .replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1) => {
          if (parseInt($1, 16) <= 0x10FFFF) {
            return 'x';
          }
          throwError({}, MessageInvalidRegExp);
        })
        .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
    }

    // First, detect invalid regular expressions.
    try {
      new RegExp(tmp);
    } catch (e) {
      throwError({}, MessageInvalidRegExp);
    }

    // Return a regular expression object for this pattern-flag pair, or
    // `null` in case the current environment doesn't support the flags it
    // uses.
    try {
      return new RegExp(pattern, flags);
    } catch (exception) {
      return null;
    }
  }

  function scanRegExpBody() {
    var ch, str, classMarker, terminated, body;

    ch = source[index];
    assert(ch === '/', 'Regular expression literal must start with a slash');
    str = source[index++];

    classMarker = false;
    terminated = false;
    while (index < length) {
      ch = source[index++];
      str += ch;
      if (ch === '\\') {
        ch = source[index++];
        // ECMA-262 7.8.5
        if (isLineTerminator(ch.charCodeAt(0))) {
          throwError({}, MessageUnterminatedRegExp);
        }
        str += ch;
      } else if (isLineTerminator(ch.charCodeAt(0))) {
        throwError({}, MessageUnterminatedRegExp);
      } else if (classMarker) {
        if (ch === ']') {
          classMarker = false;
        }
      } else {
        if (ch === '/') {
          terminated = true;
          break;
        } else if (ch === '[') {
          classMarker = true;
        }
      }
    }

    if (!terminated) {
      throwError({}, MessageUnterminatedRegExp);
    }

    // Exclude leading and trailing slash.
    body = str.substr(1, str.length - 2);
    return {
      value: body,
      literal: str
    };
  }

  function scanRegExpFlags() {
    var ch, str, flags;

    str = '';
    flags = '';
    while (index < length) {
      ch = source[index];
      if (!isIdentifierPart(ch.charCodeAt(0))) {
        break;
      }

      ++index;
      if (ch === '\\' && index < length) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      } else {
        flags += ch;
        str += ch;
      }
    }

    if (flags.search(/[^gimuy]/g) >= 0) {
      throwError({}, MessageInvalidRegExp, flags);
    }

    return {
      value: flags,
      literal: str
    };
  }

  function scanRegExp() {
    var start, body, flags, value;

    lookahead = null;
    skipComment();
    start = index;

    body = scanRegExpBody();
    flags = scanRegExpFlags();
    value = testRegExp(body.value, flags.value);

    return {
      literal: body.literal + flags.literal,
      value: value,
      regex: {
        pattern: body.value,
        flags: flags.value
      },
      start: start,
      end: index
    };
  }

  function isIdentifierName(token) {
    return token.type === TokenIdentifier ||
      token.type === TokenKeyword ||
      token.type === TokenBooleanLiteral ||
      token.type === TokenNullLiteral;
  }

  function advance() {
    var ch;

    skipComment();

    if (index >= length) {
      return {
        type: TokenEOF,
        start: index,
        end: index
      };
    }

    ch = source.charCodeAt(index);

    if (isIdentifierStart(ch)) {
      return scanIdentifier();
    }

    // Very common: ( and ) and ;
    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
      return scanPunctuator();
    }

    // String literal starts with single quote (U+0027) or double quote (U+0022).
    if (ch === 0x27 || ch === 0x22) {
      return scanStringLiteral();
    }


    // Dot (.) U+002E can also start a floating-point number, hence the need
    // to check the next character.
    if (ch === 0x2E) {
      if (isDecimalDigit(source.charCodeAt(index + 1))) {
        return scanNumericLiteral();
      }
      return scanPunctuator();
    }

    if (isDecimalDigit(ch)) {
      return scanNumericLiteral();
    }

    return scanPunctuator();
  }

  function lex() {
    var token;

    token = lookahead;
    index = token.end;

    lookahead = advance();

    index = token.end;

    return token;
  }

  function peek() {
    var pos;

    pos = index;

    lookahead = advance();
    index = pos;
  }

  function finishArrayExpression(elements) {
    var node = new ASTNode(SyntaxArrayExpression);
    node.elements = elements;
    return node;
  }

  function finishBinaryExpression(operator, left, right) {
    var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);
    node.operator = operator;
    node.left = left;
    node.right = right;
    return node;
  }

  function finishCallExpression(callee, args) {
    var node = new ASTNode(SyntaxCallExpression);
    node.callee = callee;
    node.arguments = args;
    return node;
  }

  function finishConditionalExpression(test, consequent, alternate) {
    var node = new ASTNode(SyntaxConditionalExpression);
    node.test = test;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
  }

  function finishIdentifier(name) {
    var node = new ASTNode(SyntaxIdentifier);
    node.name = name;
    return node;
  }

  function finishLiteral(token) {
    var node = new ASTNode(SyntaxLiteral);
    node.value = token.value;
    node.raw = source.slice(token.start, token.end);
    if (token.regex) {
      if (node.raw === '//') {
        node.raw = '/(?:)/';
      }
      node.regex = token.regex;
    }
    return node;
  }

  function finishMemberExpression(accessor, object, property) {
    var node = new ASTNode(SyntaxMemberExpression);
    node.computed = accessor === '[';
    node.object = object;
    node.property = property;
    if (!node.computed) property.member = true;
    return node;
  }

  function finishObjectExpression(properties) {
    var node = new ASTNode(SyntaxObjectExpression);
    node.properties = properties;
    return node;
  }

  function finishProperty(kind, key, value) {
    var node = new ASTNode(SyntaxProperty);
    node.key = key;
    node.value = value;
    node.kind = kind;
    return node;
  }

  function finishUnaryExpression(operator, argument) {
    var node = new ASTNode(SyntaxUnaryExpression);
    node.operator = operator;
    node.argument = argument;
    node.prefix = true;
    return node;
  }

  // Throw an exception

  function throwError(token, messageFormat) {
    var error,
      args = Array.prototype.slice.call(arguments, 2),
      msg = messageFormat.replace(
        /%(\d)/g,
        (whole, index) => {
          assert(index < args.length, 'Message reference must be in range');
          return args[index];
        }
      );


    error = new Error(msg);
    error.index = index;
    error.description = msg;
    throw error;
  }

  // Throw an exception because of the token.

  function throwUnexpected(token) {
    if (token.type === TokenEOF) {
      throwError(token, MessageUnexpectedEOS);
    }

    if (token.type === TokenNumericLiteral) {
      throwError(token, MessageUnexpectedNumber);
    }

    if (token.type === TokenStringLiteral) {
      throwError(token, MessageUnexpectedString);
    }

    if (token.type === TokenIdentifier) {
      throwError(token, MessageUnexpectedIdentifier);
    }

    if (token.type === TokenKeyword) {
      throwError(token, MessageUnexpectedReserved);
    }

    // BooleanLiteral, NullLiteral, or Punctuator.
    throwError(token, MessageUnexpectedToken, token.value);
  }

  // Expect the next token to match the specified punctuator.
  // If not, an exception will be thrown.

  function expect(value) {
    var token = lex();
    if (token.type !== TokenPunctuator || token.value !== value) {
      throwUnexpected(token);
    }
  }

  // Return true if the next token matches the specified punctuator.

  function match(value) {
    return lookahead.type === TokenPunctuator && lookahead.value === value;
  }

  // Return true if the next token matches the specified keyword

  function matchKeyword(keyword) {
    return lookahead.type === TokenKeyword && lookahead.value === keyword;
  }

  // 11.1.4 Array Initialiser

  function parseArrayInitialiser() {
    var elements = [];

    index = lookahead.start;
    expect('[');

    while (!match(']')) {
      if (match(',')) {
        lex();
        elements.push(null);
      } else {
        elements.push(parseConditionalExpression());

        if (!match(']')) {
          expect(',');
        }
      }
    }

    lex();

    return finishArrayExpression(elements);
  }

  // 11.1.5 Object Initialiser

  function parseObjectPropertyKey() {
    var token;

    index = lookahead.start;
    token = lex();

    // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.

    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
      if (token.octal) {
        throwError(token, MessageStrictOctalLiteral);
      }
      return finishLiteral(token);
    }

    return finishIdentifier(token.value);
  }

  function parseObjectProperty() {
    var token, key, id, value;

    index = lookahead.start;
    token = lookahead;

    if (token.type === TokenIdentifier) {
      id = parseObjectPropertyKey();
      expect(':');
      value = parseConditionalExpression();
      return finishProperty('init', id, value);
    }
    if (token.type === TokenEOF || token.type === TokenPunctuator) {
      throwUnexpected(token);
    } else {
      key = parseObjectPropertyKey();
      expect(':');
      value = parseConditionalExpression();
      return finishProperty('init', key, value);
    }
  }

  function parseObjectInitialiser() {
    var properties = [],
      property, name, key, map = {},
      toString = String;

    index = lookahead.start;
    expect('{');

    while (!match('}')) {
      property = parseObjectProperty();

      if (property.key.type === SyntaxIdentifier) {
        name = property.key.name;
      } else {
        name = toString(property.key.value);
      }

      key = '$' + name;
      if (Object.prototype.hasOwnProperty.call(map, key)) {
        throwError({}, MessageStrictDuplicateProperty);
      } else {
        map[key] = true;
      }

      properties.push(property);

      if (!match('}')) {
        expect(',');
      }
    }

    expect('}');

    return finishObjectExpression(properties);
  }

  // 11.1.6 The Grouping Operator

  function parseGroupExpression() {
    var expr;

    expect('(');

    expr = parseExpression();

    expect(')');

    return expr;
  }


  // 11.1 Primary Expressions

  var legalKeywords = {
    'if': 1
  };

  function parsePrimaryExpression() {
    var type, token, expr;

    if (match('(')) {
      return parseGroupExpression();
    }

    if (match('[')) {
      return parseArrayInitialiser();
    }

    if (match('{')) {
      return parseObjectInitialiser();
    }

    type = lookahead.type;
    index = lookahead.start;


    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {
      expr = finishIdentifier(lex().value);
    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
      if (lookahead.octal) {
        throwError(lookahead, MessageStrictOctalLiteral);
      }
      expr = finishLiteral(lex());
    } else if (type === TokenKeyword) {
      throw new Error(DISABLED);
    } else if (type === TokenBooleanLiteral) {
      token = lex();
      token.value = (token.value === 'true');
      expr = finishLiteral(token);
    } else if (type === TokenNullLiteral) {
      token = lex();
      token.value = null;
      expr = finishLiteral(token);
    } else if (match('/') || match('/=')) {
      expr = finishLiteral(scanRegExp());
      peek();
    } else {
      throwUnexpected(lex());
    }

    return expr;
  }

  // 11.2 Left-Hand-Side Expressions

  function parseArguments() {
    var args = [];

    expect('(');

    if (!match(')')) {
      while (index < length) {
        args.push(parseConditionalExpression());
        if (match(')')) {
          break;
        }
        expect(',');
      }
    }

    expect(')');

    return args;
  }

  function parseNonComputedProperty() {
    var token;
    index = lookahead.start;
    token = lex();

    if (!isIdentifierName(token)) {
      throwUnexpected(token);
    }

    return finishIdentifier(token.value);
  }

  function parseNonComputedMember() {
    expect('.');

    return parseNonComputedProperty();
  }

  function parseComputedMember() {
    var expr;

    expect('[');

    expr = parseExpression();

    expect(']');

    return expr;
  }

  function parseLeftHandSideExpressionAllowCall() {
    var expr, args, property;

    expr = parsePrimaryExpression();

    for (;;) {
      if (match('.')) {
        property = parseNonComputedMember();
        expr = finishMemberExpression('.', expr, property);
      } else if (match('(')) {
        args = parseArguments();
        expr = finishCallExpression(expr, args);
      } else if (match('[')) {
        property = parseComputedMember();
        expr = finishMemberExpression('[', expr, property);
      } else {
        break;
      }
    }

    return expr;
  }

  // 11.3 Postfix Expressions

  function parsePostfixExpression() {
    var expr = parseLeftHandSideExpressionAllowCall();

    if (lookahead.type === TokenPunctuator) {
      if ((match('++') || match('--'))) {
        throw new Error(DISABLED);
      }
    }

    return expr;
  }

  // 11.4 Unary Operators

  function parseUnaryExpression() {
    var token, expr;

    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
      expr = parsePostfixExpression();
    } else if (match('++') || match('--')) {
      throw new Error(DISABLED);
    } else if (match('+') || match('-') || match('~') || match('!')) {
      token = lex();
      expr = parseUnaryExpression();
      expr = finishUnaryExpression(token.value, expr);
    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
      throw new Error(DISABLED);
    } else {
      expr = parsePostfixExpression();
    }

    return expr;
  }

  function binaryPrecedence(token) {
    var prec = 0;

    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
      return 0;
    }

    switch (token.value) {
      case '||':
        prec = 1;
        break;

      case '&&':
        prec = 2;
        break;

      case '|':
        prec = 3;
        break;

      case '^':
        prec = 4;
        break;

      case '&':
        prec = 5;
        break;

      case '==':
      case '!=':
      case '===':
      case '!==':
        prec = 6;
        break;

      case '<':
      case '>':
      case '<=':
      case '>=':
      case 'instanceof':
      case 'in':
        prec = 7;
        break;

      case '<<':
      case '>>':
      case '>>>':
        prec = 8;
        break;

      case '+':
      case '-':
        prec = 9;
        break;

      case '*':
      case '/':
      case '%':
        prec = 11;
        break;
    }

    return prec;
  }

  // 11.5 Multiplicative Operators
  // 11.6 Additive Operators
  // 11.7 Bitwise Shift Operators
  // 11.8 Relational Operators
  // 11.9 Equality Operators
  // 11.10 Binary Bitwise Operators
  // 11.11 Binary Logical Operators

  function parseBinaryExpression() {
    var marker, markers, expr, token, prec, stack, right, operator, left, i;

    marker = lookahead;
    left = parseUnaryExpression();

    token = lookahead;
    prec = binaryPrecedence(token);
    if (prec === 0) {
      return left;
    }
    token.prec = prec;
    lex();

    markers = [marker, lookahead];
    right = parseUnaryExpression();

    stack = [left, token, right];

    while ((prec = binaryPrecedence(lookahead)) > 0) {

      // Reduce: make a binary expression from the three topmost entries.
      while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
        right = stack.pop();
        operator = stack.pop().value;
        left = stack.pop();
        markers.pop();
        expr = finishBinaryExpression(operator, left, right);
        stack.push(expr);
      }

      // Shift.
      token = lex();
      token.prec = prec;
      stack.push(token);
      markers.push(lookahead);
      expr = parseUnaryExpression();
      stack.push(expr);
    }

    // Final reduce to clean-up the stack.
    i = stack.length - 1;
    expr = stack[i];
    markers.pop();
    while (i > 1) {
      markers.pop();
      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
      i -= 2;
    }

    return expr;
  }

  // 11.12 Conditional Operator

  function parseConditionalExpression() {
    var expr, consequent, alternate;

    expr = parseBinaryExpression();

    if (match('?')) {
      lex();
      consequent = parseConditionalExpression();
      expect(':');
      alternate = parseConditionalExpression();

      expr = finishConditionalExpression(expr, consequent, alternate);
    }

    return expr;
  }

  // 11.14 Comma Operator

  function parseExpression() {
    var expr = parseConditionalExpression();

    if (match(',')) {
      throw new Error(DISABLED); // no sequence expressions
    }

    return expr;
  }

  function parse(code) {
    source = code;
    index = 0;
    length = source.length;
    lookahead = null;

    peek();

    var expr = parseExpression();

    if (lookahead.type !== TokenEOF) {
      throw new Error('Unexpect token after expression.');
    }
    return expr;
  }

  var Constants = {
    NaN:       'NaN',
    E:         'Math.E',
    LN2:       'Math.LN2',
    LN10:      'Math.LN10',
    LOG2E:     'Math.LOG2E',
    LOG10E:    'Math.LOG10E',
    PI:        'Math.PI',
    SQRT1_2:   'Math.SQRT1_2',
    SQRT2:     'Math.SQRT2',
    MIN_VALUE: 'Number.MIN_VALUE',
    MAX_VALUE: 'Number.MAX_VALUE'
  };

  function accessor (fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
  }

  function getter (path) {
    return path.length === 1 ? get1(path[0]) : getN(path);
  }
  const get1 = field => function (obj) {
    return obj[field];
  };
  const getN = path => {
    const len = path.length;
    return function (obj) {
      for (let i = 0; i < len; ++i) {
        obj = obj[path[i]];
      }
      return obj;
    };
  };

  function error (message) {
    throw Error(message);
  }

  function splitAccessPath (p) {
    const path = [],
      n = p.length;
    let q = null,
      b = 0,
      s = '',
      i,
      j,
      c;
    p = p + '';
    function push() {
      path.push(s + p.substring(i, j));
      s = '';
      i = j + 1;
    }
    for (i = j = 0; j < n; ++j) {
      c = p[j];
      if (c === '\\') {
        s += p.substring(i, j++);
        i = j;
      } else if (c === q) {
        push();
        q = null;
        b = -1;
      } else if (q) {
        continue;
      } else if (i === b && c === '"') {
        i = j + 1;
        q = c;
      } else if (i === b && c === "'") {
        i = j + 1;
        q = c;
      } else if (c === '.' && !b) {
        if (j > i) {
          push();
        } else {
          i = j + 1;
        }
      } else if (c === '[') {
        if (j > i) push();
        b = i = j + 1;
      } else if (c === ']') {
        if (!b) error('Access path missing open bracket: ' + p);
        if (b > 0) push();
        b = 0;
        i = j + 1;
      }
    }
    if (b) error('Access path missing closing bracket: ' + p);
    if (q) error('Access path missing closing quote: ' + p);
    if (j > i) {
      j++;
      push();
    }
    return path;
  }

  function field (field, name, opt) {
    const path = splitAccessPath(field);
    field = path.length === 1 ? path[0] : field;
    return accessor((opt && opt.get || getter)(path), [field], name || field);
  }

  const id = field('id');
  const identity = accessor(_ => _, [], 'identity');
  const zero = accessor(() => 0, [], 'zero');
  const one = accessor(() => 1, [], 'one');
  const truthy = accessor(() => true, [], 'true');
  const falsy = accessor(() => false, [], 'false');

  function isFunction (_) {
    return typeof _ === 'function';
  }

  const hop = Object.prototype.hasOwnProperty;
  function has (object, property) {
    return hop.call(object, property);
  }

  function isString (_) {
    return typeof _ === 'string';
  }

  function toSet (_) {
    const s = {},
      n = _.length;
    for (let i = 0; i < n; ++i) s[_[i]] = true;
    return s;
  }

  function Functions(codegen) {

    function fncall(name, args, cast, type) {
      let obj = codegen(args[0]);
      if (cast) {
        obj = cast + '(' + obj + ')';
        if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';
      }
      return obj + '.' + name + (type < 0 ? '' : type === 0 ?
        '()' :
        '(' + args.slice(1).map(codegen).join(',') + ')');
    }

    function fn(name, cast, type) {
      return args => fncall(name, args, cast, type);
    }

    const DATE = 'new Date',
          STRING = 'String',
          REGEXP = 'RegExp';

    return {
      // MATH functions
      isNaN:    'Number.isNaN',
      isFinite: 'Number.isFinite',
      abs:      'Math.abs',
      acos:     'Math.acos',
      asin:     'Math.asin',
      atan:     'Math.atan',
      atan2:    'Math.atan2',
      ceil:     'Math.ceil',
      cos:      'Math.cos',
      exp:      'Math.exp',
      floor:    'Math.floor',
      log:      'Math.log',
      max:      'Math.max',
      min:      'Math.min',
      pow:      'Math.pow',
      random:   'Math.random',
      round:    'Math.round',
      sin:      'Math.sin',
      sqrt:     'Math.sqrt',
      tan:      'Math.tan',

      clamp: function(args) {
        if (args.length < 3) error('Missing arguments to clamp function.');
        if (args.length > 3) error('Too many arguments to clamp function.');
        const a = args.map(codegen);
        return 'Math.max('+a[1]+', Math.min('+a[2]+','+a[0]+'))';
      },

      // DATE functions
      now:             'Date.now',
      utc:             'Date.UTC',
      datetime:        DATE,
      date:            fn('getDate', DATE, 0),
      day:             fn('getDay', DATE, 0),
      year:            fn('getFullYear', DATE, 0),
      month:           fn('getMonth', DATE, 0),
      hours:           fn('getHours', DATE, 0),
      minutes:         fn('getMinutes', DATE, 0),
      seconds:         fn('getSeconds', DATE, 0),
      milliseconds:    fn('getMilliseconds', DATE, 0),
      time:            fn('getTime', DATE, 0),
      timezoneoffset:  fn('getTimezoneOffset', DATE, 0),
      utcdate:         fn('getUTCDate', DATE, 0),
      utcday:          fn('getUTCDay', DATE, 0),
      utcyear:         fn('getUTCFullYear', DATE, 0),
      utcmonth:        fn('getUTCMonth', DATE, 0),
      utchours:        fn('getUTCHours', DATE, 0),
      utcminutes:      fn('getUTCMinutes', DATE, 0),
      utcseconds:      fn('getUTCSeconds', DATE, 0),
      utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),

      // sequence functions
      length:      fn('length', null, -1),
      join:        fn('join', null),
      indexof:     fn('indexOf', null),
      lastindexof: fn('lastIndexOf', null),
      slice:       fn('slice', null),

      reverse: function(args) {
        return '('+codegen(args[0])+').slice().reverse()';
      },

      // STRING functions
      parseFloat:  'parseFloat',
      parseInt:    'parseInt',
      upper:       fn('toUpperCase', STRING, 0),
      lower:       fn('toLowerCase', STRING, 0),
      substring:   fn('substring', STRING),
      split:       fn('split', STRING),
      replace:     fn('replace', STRING),
      trim:        fn('trim', STRING, 0),

      // REGEXP functions
      regexp:  REGEXP,
      test:    fn('test', REGEXP),

      // Control Flow functions
      if: function(args) {
          if (args.length < 3) error('Missing arguments to if function.');
          if (args.length > 3) error('Too many arguments to if function.');
          const a = args.map(codegen);
          return '('+a[0]+'?'+a[1]+':'+a[2]+')';
        }
    };
  }

  function stripQuotes(s) {
    const n = s && s.length - 1;
    return n && (
        (s[0]==='"' && s[n]==='"') ||
        (s[0]==='\'' && s[n]==='\'')
      ) ? s.slice(1, -1) : s;
  }

  function vgCodegen(opt) {
    opt = opt || {};

    const whitelist = opt.whitelist ? toSet(opt.whitelist) : {},
          blacklist = opt.blacklist ? toSet(opt.blacklist) : {},
          constants = opt.constants || Constants,
          functions = (opt.functions || Functions)(visit),
          globalvar = opt.globalvar,
          fieldvar = opt.fieldvar,
          outputGlobal = isFunction(globalvar)
            ? globalvar
            : id => `${globalvar}["${id}"]`;

    let globals = {},
        fields = {},
        memberDepth = 0;

    function visit(ast) {
      if (isString(ast)) return ast;
      const generator = Generators[ast.type];
      if (generator == null) error('Unsupported type: ' + ast.type);
      return generator(ast);
    }

    const Generators = {
      Literal: n => n.raw,

      Identifier: n => {
        const id = n.name;
        if (memberDepth > 0) {
          return id;
        } else if (has(blacklist, id)) {
          return error('Illegal identifier: ' + id);
        } else if (has(constants, id)) {
          return constants[id];
        } else if (has(whitelist, id)) {
          return id;
        } else {
          globals[id] = 1;
          return outputGlobal(id);
        }
      },

      MemberExpression: n => {
          const d = !n.computed,
                o = visit(n.object);
          if (d) memberDepth += 1;
          const p = visit(n.property);
          if (o === fieldvar) {
            // strip quotes to sanitize field name (#1653)
            fields[stripQuotes(p)] = 1;
          }
          if (d) memberDepth -= 1;
          return o + (d ? '.'+p : '['+p+']');
        },

      CallExpression: n => {
          if (n.callee.type !== 'Identifier') {
            error('Illegal callee type: ' + n.callee.type);
          }
          const callee = n.callee.name,
                args = n.arguments,
                fn = has(functions, callee) && functions[callee];
          if (!fn) error('Unrecognized function: ' + callee);
          return isFunction(fn)
            ? fn(args)
            : fn + '(' + args.map(visit).join(',') + ')';
        },

      ArrayExpression: n =>
          '[' + n.elements.map(visit).join(',') + ']',

      BinaryExpression: n =>
          '(' + visit(n.left) + n.operator + visit(n.right) + ')',

      UnaryExpression: n =>
          '(' + n.operator + visit(n.argument) + ')',

      ConditionalExpression: n =>
          '(' + visit(n.test) +
            '?' + visit(n.consequent) +
            ':' + visit(n.alternate) +
            ')',

      LogicalExpression: n =>
          '(' + visit(n.left) + n.operator + visit(n.right) + ')',

      ObjectExpression: n =>
          '{' + n.properties.map(visit).join(',') + '}',

      Property: n => {
          memberDepth += 1;
          const k = visit(n.key);
          memberDepth -= 1;
          return k + ':' + visit(n.value);
        }
    };

    function codegen(ast) {
      const result = {
        code:    visit(ast),
        globals: Object.keys(globals),
        fields:  Object.keys(fields)
      };
      globals = {};
      fields = {};
      return result;
    }

    codegen.functions = functions;
    codegen.constants = constants;

    return codegen;
  }

  const textDefault = {
    fill: "#000",
    font: "sans-serif",
    fontSize: 11,
    opacity: 1,
    baseline: "alphabetic"
  };
  // the browsers' default
  const BR_PROP_DEFAULT = {
    none: {},
    rect: { opacity: 1 },
    gradient: { opacity: 1 },
    group: { opacity: 1 },
    tick: { opacity: 1 },
    grid: { opacity: 1 },
    domain: { opacity: 1 },
    symbol: { opacity: 1, stroke: "transparent" },
    line: { opacity: 1, fill: "none" },
    // area: { opacity: 1, strokeWidth: "1px", stroke: "none" },
    area: { opacity: 1, strokeWidth: "0px" },
    trail: { opacity: 1, strokeWidth: "0px" },
    rule: { opacity: 1 },
    text: textDefault,
    title: textDefault
  };

  const DEFAULT_EASE = {
    mark: "cubic",
    line: "cubic",
    axis: "cubic",
    legend: "cubic",
    view: "cubic"
  };

  // From https://github.com/vega/vega/blob/master/packages/vega-parser/src/config.js
  /**
   * Standard configuration defaults for Vega specification parsing.
   * Users can provide their own (sub-)set of these default values
   * by passing in a config object to the top-level parse method.
   */
  const defaultFont = "sans-serif",
    defaultSymbolSize = 30,
    defaultStrokeWidth = 2,
    defaultColor = "#4c78a8",
    black = "#000",
    gray = "#888",
    lightGray = "#ddd";
  const vegaConfig = {
    // default visualization description
    description: "Vega visualization",

    // default padding around visualization
    padding: 0,

    // default for automatic sizing; options: 'none', 'pad', 'fit'
    // or provide an object (e.g., {'type': 'pad', 'resize': true})
    autosize: "pad",

    // default view background color
    // covers the entire view component
    background: null,

    // default event handling configuration
    // preventDefault for view-sourced event types except 'wheel'
    events: {
      defaults: {allow: ["wheel"]}
    },

    // defaults for top-level group marks
    // accepts mark properties (fill, stroke, etc)
    // covers the data rectangle within group width/height
    group: null,

    // defaults for basic mark types
    // each subset accepts mark properties (fill, stroke, etc)
    mark: null,
    arc: { fill: defaultColor },
    area: { fill: defaultColor },
    image: null,
    line: {
      stroke: defaultColor,
      strokeWidth: defaultStrokeWidth
    },
    path: { stroke: defaultColor },
    rect: { fill: defaultColor },
    rule: { stroke: black },
    shape: { stroke: defaultColor },
    symbol: {
      fill: defaultColor,
      size: 64
    },
    text: {
      fill: black,
      font: defaultFont,
      fontSize: 11
    },
    trail: {
      fill: defaultColor,
      size: defaultStrokeWidth
    },

    // style definitions
    style: {
      // axis & legend labels
      "guide-label": {
        fill: black,
        font: defaultFont,
        fontSize: 10
      },
      // axis & legend titles
      "guide-title": {
        fill: black,
        font: defaultFont,
        fontSize: 11,
        fontWeight: "bold"
      },
      // headers, including chart title
      "group-title": {
        fill: black,
        font: defaultFont,
        fontSize: 13,
        fontWeight: "bold"
      },
      // chart subtitle
      "group-subtitle": {
        fill: black,
        font: defaultFont,
        fontSize: 12
      },
      // defaults for styled point marks in Vega-Lite
      point: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth,
        shape: "circle"
      },
      circle: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth
      },
      square: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth,
        shape: "square"
      },
      // defaults for styled group marks in Vega-Lite
      cell: {
        fill: "transparent",
        stroke: lightGray
      }
    },

    // defaults for title
    title: {
      orient: "top",
      anchor: "middle",
      offset: 4,
      subtitlePadding: 3
    },

    // defaults for axes
    axis: {
      minExtent: 0,
      maxExtent: 200,
      bandPosition: 0.5,
      domain: true,
      domainWidth: 1,
      domainColor: gray,
      grid: false,
      gridWidth: 1,
      gridColor: lightGray,
      labels: true,
      labelAngle: 0,
      labelLimit: 180,
      labelOffset: 0,
      labelPadding: 2,
      ticks: true,
      tickColor: gray,
      tickOffset: 0,
      tickRound: true,
      tickSize: 5,
      tickWidth: 1,
      titlePadding: 4
    },

    // correction for centering bias
    axisBand: {
      tickOffset: -0.5
    },

    // defaults for cartographic projection
    projection: {
      type: "mercator"
    },

    // defaults for legends
    legend: {
      orient: "right",
      padding: 0,
      gridAlign: "each",
      columnPadding: 10,
      rowPadding: 2,
      symbolDirection: "vertical",
      gradientDirection: "vertical",
      gradientLength: 200,
      gradientThickness: 16,
      gradientStrokeColor: lightGray,
      gradientStrokeWidth: 0,
      gradientLabelOffset: 2,
      labelAlign: "left",
      labelBaseline: "middle",
      labelLimit: 160,
      labelOffset: 4,
      labelOverlap: true,
      symbolLimit: 30,
      symbolType: "circle",
      symbolSize: 100,
      symbolOffset: 0,
      symbolStrokeWidth: 1.5,
      symbolBaseFillColor: "transparent",
      symbolBaseStrokeColor: gray,
      titleLimit: 180,
      titleOrient: "top",
      titlePadding: 5,
      layout: {
        offset: 18,
        direction: "horizontal",
        left:   { direction: "vertical" },
        right:  { direction: "vertical" }
      }
    },

    // defaults for scale ranges
    range: {
      category: {
        scheme: "tableau10"
      },
      ordinal: {
        scheme: "blues"
      },
      heatmap: {
        scheme: "yellowgreenblue"
      },
      ramp: {
        scheme: "blues"
      },
      diverging: {
        scheme: "blueorange",
        extent: [1, 0]
      },
      symbol: [
        "circle",
        "square",
        "triangle-up",
        "cross",
        "diamond",
        "triangle-right",
        "triangle-down",
        "triangle-left"
      ]
    }
  };

  function encodify(obj) {
    return Object.keys(obj).reduce((encode, key) => {
      encode[key] = { value: obj[key] };
      return encode;
    }, {});
  }

  const DEFAULT_STYLE = Object.keys(vegaConfig.style).reduce(
    (styles, key) => {
      styles[key] = encodify(vegaConfig.style[key]);
      return styles;
    },
    {}
  );

  const EMPTY_ENCODE = {
    enter: { opacity: { value: 0 } },
    exit: { opacity: { value: 0 } },
    update: { }
  };


  function axisCompPos(spec) {
    if (!spec) {
      return {};
    }
    const scName = spec.scale;
    if (spec.orient === "left" || spec.orient === "right") {
      return { y: { scale: scName, field: "value", band: 0.5 } };
    }
    return { x: { scale: scName, field: "value", band: 0.5 } };
  }
  function legendBandPos(spec) {
    let grLength = spec ? spec.gradientLength : undefined;
    let grThickness = spec ? spec.gradientThickness : undefined;
    grLength = grLength || vegaConfig.legend.gradientLength;
    grThickness = grThickness || vegaConfig.legend.gradientThickness;

    if (spec && spec.direction === "horizontal") {
      return {
        x: { signal: "(1-datum.perc)", mult: grLength },
        x2: { signal: "(1-datum.perc2)", mult: grLength },
        y: { value: 0 },
        height: { value: grThickness }
      };
    }
    return {
      y: { signal: "(1-datum.perc)", mult: grLength },
      y2: { signal: "(1-datum.perc2)", mult: grLength },
      x: { value: 0 },
      width: { value: grThickness }
    };
  }

  function legendLablePos(spec) {
    const columns = !spec ? 1 : (spec.columns || (spec.direction === "vertical" ? 1 : 0));
    const clipHeight = (spec && spec.clipHeight) ? spec.clipHeight : null;

    if (spec.type === "symbol") {
      return {
        x: { signal: columns ? `datum['offset']` : `datum['size']`, offset: vegaConfig.legend.labelOffset },
        y: { signal: clipHeight ? `${clipHeight}` : `datum['size']`, mult: 0.5}
      };
    } else {
      let grLength = spec ? spec.gradientLength : undefined;
      grLength = isNaN(grLength) ? vegaConfig.legend.gradientLength : grLength;
      let grThickness = spec ? spec.gradientThickness : undefined;
      grThickness = isNaN(grThickness) ? vegaConfig.legend.gradientThickness : grThickness;
      let grLabelOffset = spec ? spec.gradientLabelOffset : undefined;
      grLabelOffset = isNaN(grLabelOffset) ? vegaConfig.legend.gradientLabelOffset : grLabelOffset;

      if (spec.direction === "vertical") {
        return {
          x: { value: 0, },
          y: { signal: `(1-datum.perc) * clamp(height, 64, ${grLength})` },
          dx: { value: grThickness + grLabelOffset }
        };
      }
      return {
        x: { signal: `(datum.perc) * clamp(width, 64, ${grLength})` },
        y: { value: 0, },
        dy: { value: grThickness + grLabelOffset }
      };
    }

  }


  function titlePos(orient) {
    if (orient === "top") {
      return {x: { signal: "width", mult: 0.5}, y: {value: -22}};
    } if (orient === "bottom") {
      return {x: { signal: "width", mult: 0.5}, y: {value: 22}};
    } if (orient === "right") {
      return {y: { signal: "height", mult: 0.5}, x: {value: 22}};
    }
    return {y: { signal: "height", mult: 0.5}, x: {value: -22}};

  }
  function titleAngle(orient) {
    if (orient === "left") {
      return 270;
    }
    if (orient === "right") {
      return 90;
    }
    return 0;
  }
  function baseline(orient) {
    if (orient === "top") {
      return "bottom";
    }
    if (orient === "bottom") {
      return "top";
    }
    return "middle";
  }
  function tickLength(attr, orient) {
    if (attr === "x2") {
      if (orient === "right") {
        return vegaConfig.axis.tickSize;
      }
      if (orient === "left") {
        return -vegaConfig.axis.tickSize;
      }
    } else if (attr === "y2") {
      if (orient === "bottom") {
        return vegaConfig.axis.tickSize;
      }
      if (orient === "top") {
        return -vegaConfig.axis.tickSize;
      }
    }
    return 0;
  }

  function axisLabelAlign(spec) {
    if (spec && spec.labelAlign) {
      return spec.labelAlign;
    }

    if (spec && spec.orient === "right") {
      return "left";
    }
    if (spec && spec.orient === "left") {
      return "right";
    }
    return "center";
  }

  function legendLabelAlign(spec) {
    if (spec && spec.labelAlign) {
      return spec.labelAlign;
    }

    if (spec && spec.orient === "right") {
      return "left";
    }
    if (spec && spec.orient === "left") {
      return "right";
    }
    return "center";
  }

  function lableAngle(orient, scaleType) {
    if (orient === "top" || orient === "bottom") {
      if (["band", "point"].indexOf(scaleType) >= 0) {
        return 270;
      }
    }
    return 0;
  }
  function axisTextDpos(attr, spec) {
    const orient = spec ? spec.orient : undefined;
    const posOffset = (spec.ticks !== false ?
        ( isNumber(spec.tickSize) ? spec.tickSize : vegaConfig.axis.tickSize)
         : 0)
      + (isNumber(spec.labelPadding) ? spec.labelPadding : vegaConfig.axis.labelPadding);


    if (attr === "dx") {
      if (orient === "right") {
        return posOffset;
      }
      if (orient === "left") {
        return -posOffset;
      }
    } else if (attr === "dy") {
      if (orient === "bottom") {
        return posOffset;
      }
      if (orient === "top") {
        return - posOffset;
      }
    }
    return 0;
  }

  function gridLength(orient, gridScale){
    if (orient === "bottom" || orient === "top") {
      if (!gridScale){
        return {
          y2: {signal: "height", mult: -1},
          y: {value: 0},
          x2: {value: 0}
        };
      }
      return {
        // y2: {signal: "height"},
        // y: {signal: "height", mult: -1},
        y2: {signal: "height", mult: -1},
        y: {value: 0},
        x2: {value: 0}
      };

    }

    if (orient === "right" || orient === "left") {
      if (!gridScale){
        return {
          x2: {signal: "width"},
          x: {value: 0},
          y2: {value: 0}
        };
      }
      return {
        x2: {signal: "width"},
        x: {value: 0},
        y2: {value: 0}
      };

    }

  }

  function domainLength(orient) {
    if (orient === "bottom" || orient === "top") {
      return {
        y2: { value: 0 },
        x2: { signal: "width" },
        y: { value: 0 },
        x: { value: 0 }
      };
    }
    if (orient === "right" || orient === "left") {
      return {
        y2: { signal: "height", mult: 1 },
        x2: { value: 0 },
        y: { value: 0 },
        x: { value: 0 }
      };
    }
    return {
      y2: { value: 0 },
      x2: { value: 0 }
    };
  }

  const LEGEND_SYMBOL_CHANNEL = [
    "fill",
    "opacity",
    "shape",
    "size",
    "stroke",
    "strokeDash",
    "strokeWidth"
  ];

  const DEFAULT_ENCODE_LEGEND = {

    title: () => {
      const defaultTitleEncode = {
        fontSize: { value: vegaConfig.style["guide-title"].fontSize },
        fontWeight: { value: "bold" }
      };

      return {
        update: defaultTitleEncode,
        enter: {...defaultTitleEncode, opacity: {value: 0}},
        exit: {...defaultTitleEncode, opacity: {value: 0}},
      };
    },
    labels: spec => {
      if (!spec) {
        return copy(EMPTY_ENCODE);
      }

      let defaultEncode = {
        ...legendLablePos(spec),
        text: { field: "label" },
        fontSize: { value: vegaConfig.style["guide-label"].fontSize },
        align: { value: legendLabelAlign(spec) },
        baseline: {
          value: spec.baseline || baseline(spec.orient)
        },
        angle: {
          value: spec.labelAngle || lableAngle(spec.orient, spec.scaleType)
        }
      };


      return {
        enter: {...defaultEncode, opacity: { value: 0 } },
        exit: {...defaultEncode, opacity: { value: 0 } },
        update: defaultEncode
      };
    },
    symbols: spec => {
      const columns = !spec ? 1 : (spec.columns || (spec.direction === "vertical" ? 1 : 0));
      const clipHeight = (spec && spec.clipHeight) ? spec.clipHeight : null;
      const defaultEncode = {
        y: { signal: clipHeight ? `${clipHeight}` : `datum['size']`, mult: 0.5},
        x: { signal: columns ? `datum['offset']` : `datum['size']`, mult: 0.5, offset: vegaConfig.legend.symbolOffset },
        shape: { value: vegaConfig.legend.symbolType },
        size: { value: vegaConfig.legend.symbolSize },
        strokeWidth: { value: vegaConfig.legend.symbolStrokeWidth }
      };

      if (spec) {
        if (!spec.fill) {
          defaultEncode.stroke = {
            value: vegaConfig.legend.symbolBaseStrokeColor
          };
          defaultEncode.fill = {
            value: vegaConfig.legend.symbolBaseFillColor
          };
        }

        LEGEND_SYMBOL_CHANNEL.forEach(channel => {
          if (channel === "shape") {
            defaultEncode[channel] = { value: spec.symbolType };
          }
          if (spec[channel]) {
            defaultEncode[channel] = { scale: spec[channel], field: "value" };
          }
        });
      }

      return {
        update: defaultEncode,
        enter: Object.assign({}, defaultEncode, { opacity: { value: 0 } }),
        exit: Object.assign({}, defaultEncode, { opacity: { value: 0 } })
      };
    },
    gradient: spec => {
      if (!spec) {
        return copy(EMPTY_ENCODE);
      }

      let grLength = spec.gradientLength ||
        {
          signal: `clamp(${spec.direction === "vertical" ? "height" : "width"}, 64, ${vegaConfig.legend.gradientLength})`
        },
        grThickness = spec.gradientThickness || vegaConfig.legend.gradientThickness;
      if (typeof grLength === "number") {
        grLength= {
          signal: `clamp(${spec.direction === "vertical" ? "height" : "width"}, 64, ${grLength})`
        };
      }
      const defaultEncode = {
        x: { value: 0 },
        y: { value: 0 },
        width:
          spec.direction === "vertical"
            ? { value: grThickness }
            : grLength,
        height:
          spec.direction === "vertical"
            ? grLength
            : { value: grThickness }
      };

      return {
        update: defaultEncode,
        enter: Object.assign({}, defaultEncode, { opacity: { value: 0 } }),
        exit: Object.assign({}, defaultEncode, { opacity: { value: 0 } })
      };
    },
    entries: () => {
      return copy(EMPTY_ENCODE);
    },
    legend: () => {
      return copy(EMPTY_ENCODE);
    },
    pairs: spec => {
      let defaultEncode = { y: { signal: "datum.index * 13" } };
      if (spec && spec.direction === "horizontal") {
        defaultEncode = { x: { signal: "datum.index * 50" } };
      }

      return {
        update: defaultEncode,
        enter: Object.assign({}, defaultEncode, { opacity: { value: 0 } }),
        exit: Object.assign({}, defaultEncode, { opacity: { value: 0 } })
      };
    },
    bands: spec => {
      let defaultEncode = {
        ...legendBandPos(spec),
        fill: {
          value: vegaConfig.legend.symbolBaseFillColor
        }
      };
      if (spec && (spec.fill || spec.stroke)) {
        defaultEncode.fill = { scale: spec.fill || spec.stroke, field: "value" };
      }

      return {
        update: defaultEncode,
        enter: {
          ...defaultEncode,
          opacity: { value: 0 }
        },
        exit: {
          ...defaultEncode,
          opacity: { value: 0 }
        }
      };
    }
  };

  const DEFAULT_ENCODE_MARK = {
    enter: { opacity: { value: 0 } },
    exit: { opacity: { value: 0 } },
    line: {
      update: {
        ...encodify(vegaConfig.line),
        fill: { value: "none" }
      }
    },
    area: {update: encodify(vegaConfig.area)},
    trail: {update: encodify(vegaConfig.trail)},
    symbol: { update: encodify(vegaConfig.symbol)  },
    rect: {    update: encodify(vegaConfig.rect) },
    rule: {    update: encodify(vegaConfig.rule)  },
    text: {    update: encodify(vegaConfig.text)  }
  };

  const DEFAULT_ENCODE_AXIS = {
    axis: () => {
      return copy(EMPTY_ENCODE);
    },
    labels: spec => {
      if (!spec) {
        return copy(EMPTY_ENCODE);
      }

      const orient = spec ? spec.orient : undefined;
      const scaleType = spec ? spec.scaleType : undefined;

      const defaultEncode = {
        ...axisCompPos(spec),
        text: { field: "label" },
        fontSize: {
          value: spec && spec.labelFontSize ? spec.labelFontSize : vegaConfig.style["guide-label"].fontSize
        },
        dx: { value: axisTextDpos("dx", spec) },
        dy: { value: axisTextDpos("dy", spec) },
        align: { value: axisLabelAlign(spec) },
        baseline: {
          value: spec && spec.baseline ? spec.baseline : baseline(orient)
        },
        angle: {
          value:
            spec && isNumber(spec.labelAngle)
              ? spec.labelAngle
              : lableAngle(orient, scaleType)
        }
      };

      return {
        enter: { ...defaultEncode, opacity: { value: 0 } },
        exit: { ...defaultEncode, opacity: { value: 0 } },
        update: defaultEncode
      };
    },
    ticks: spec => {
      if (!spec) {
        return copy(EMPTY_ENCODE);
      }

      const orient = spec ? spec.orient : undefined;
      const defaultEncode = Object.assign({}, axisCompPos(spec), {
        x2: { value: tickLength("x2", orient) },
        y2: { value: tickLength("y2", orient) },
        strokeWidth: { value: vegaConfig.axis.tickWidth },
        stroke: { value: vegaConfig.axis.tickColor }
      });
      return {
        enter: { ...defaultEncode, opacity: { value: 0 } },
        exit: { ...defaultEncode, opacity: { value: 0 } },
        update: defaultEncode
      };
    },
    grid: spec => {

      const orient = spec ? spec.orient : undefined;
      const gridScale = spec ? spec.gridScale : undefined;
      let defaultEncode = Object.assign(
        {},
        axisCompPos(spec),
        gridLength(orient, gridScale),
        {
          strokeWidth: { value: vegaConfig.axis.gridWidth },
          stroke: { value: vegaConfig.axis.gridColor }
        }
      );
      if (spec && spec.gridDash) {
        defaultEncode.strokeDasharray = {"value": spec.gridDash.join(",")};
      }

      return {
        enter: { ...defaultEncode, opacity: { value: 0 } },
        exit: { ...defaultEncode, opacity: { value: 0 } },
        update: defaultEncode
      };
    },
    title: spec => {


      const orient = spec ? spec.orient : undefined;
      const defaultEncode = Object.assign(
        {
          baseline: { value: baseline(orient) },
          align: { value: "center" },
          angle: { value: titleAngle(orient) },
          fontSize: { value: vegaConfig.style["guide-title"].fontSize },
          fontWeight: { value: "bold" }
        },
        titlePos(orient)
      );
      return {
        enter: { ...defaultEncode, opacity: { value: 0 } },
        exit: { ...defaultEncode, opacity: { value: 0 } },
        update: defaultEncode
      };
    },
    domain: spec => {

      const defaultEncode = {
        ...(spec ? domainLength(spec.orient) : {}),
        strokeWidth: { value: vegaConfig.axis.domainWidth },
        stroke: { value: vegaConfig.axis.domainColor }
      };

      return {
        enter: { ...defaultEncode, opacity: { value: 0 } },
        exit: { ...defaultEncode, opacity: { value: 0 } },
        update: defaultEncode
      };
    }
  };

  // DEFAULT enter means initials of the enter
  const DEFAULT_ENCODE = {
    mark: DEFAULT_ENCODE_MARK,
    axis: DEFAULT_ENCODE_AXIS,
    legend: DEFAULT_ENCODE_LEGEND
  };

  /* eslint-disable prefer-destructuring */

  function getEaseFn(easeFnName) {
    const name = easeFnName || DEFAULT_EASE.mark;
    return d3[`ease${name.slice(0, 1).toUpperCase() + name.slice(1)}`];
  }


  function findAfterSibling(scene, name) {
    let result;
    for (let i = 0; i < scene.items.length; i++) {
      const s = scene.items[i];
      if (s.name === name) {
        return scene.items[i + 1];
      }
      if (s.items) {
        result = findAfterSibling(s, name);
      }
    }
    return result;
  }

  function getJoinInfo(d, i, step, prop) {
    return d.__gemini__[step.stepId]
      ? d.__gemini__[step.stepId][prop]
      : undefined;
  }

  function findComp(scene, name, role) {
    let result = [];
    scene.items.forEach(item => {
      if (item.items) {
        result = result.concat(findComp(item, name, role));
      }

      if (item.role === role && item.name === name) {
        result.push(item);
      }
    });
    return result; // return the first item.
  }
  function svgRender(vegaScene) {
    const svg = new vega.SVGRenderer()
      .initialize(document.createElement("div"), 1, 1)
      .render(vegaScene)
      .svg();
    const p = new DOMParser();
    const dom = p.parseFromString(svg, "image/svg+xml");
    return dom.documentElement;
  }

  function gradientRender(d3RootSelection, d) {
    const s = vega.sceneFromJSON(vega.sceneToJSON(d.mark));
    s.items[0].fill = d.fill;
    const dom = svgRender(s);
    const gradientDom = dom.getElementsByTagName("defs")[0].firstElementChild;
    let d3DefsSelection = d3RootSelection.select("defs");
    if (d3DefsSelection.empty()) {
      d3DefsSelection = d3RootSelection.append("defs");
    }
    d3DefsSelection.node().appendChild(gradientDom);
    return `${window.location.origin + window.location.pathname}#${
    gradientDom.id
  }`;
  }


  function propMap(prop) {
    let propName = prop;
    let tweaks;
    if (typeof prop === "object") {
      propName = prop.name;
      tweaks = prop.tweaks;
    }
    let result = [];
    switch (propName) {
    case "text":
      result = result.concat([
        { type: "text", val: "text" },
        { type: "attr", val: "transform" },
        { type: "attr", val: "opacity" },
        { type: "attr", val: "font" },
        { type: "attr", val: "fontSize" },
        { type: "attr", val: "fontWeight" },
        { type: "style", val: "fill" }
      ]);
      break;
    case "title":
      result = result.concat([
        { type: "text", val: "text" },
        { type: "attr", val: "transform" },
        { type: "attr", val: "opacity" },
        { type: "attr", val: "font" },
        { type: "attr", val: "fontSize" },
        { type: "attr", val: "fontWeight" },
        { type: "style", val: "fill" }
      ]);
      break;
    case "tick":
      result = result.concat([
        { type: "attr", val: "transform" },
        { type: "attr", val: "x2" },
        { type: "attr", val: "y2" },
        { type: "style", val: "strokeWidth" },
        { type: "style", val: "stroke" },
        { type: "style", val: "opacity" }
      ]);
      break;
    case "grid":
      result = result.concat([
        { type: "attr", val: "transform" },
        { type: "attr", val: "x2" },
        { type: "attr", val: "y2" },
        { type: "style", val: "strokeWidth" },
        { type: "style", val: "stroke" },
        { type: "style", val: "strokeDasharray" },
        { type: "style", val: "opacity" }
      ]);
      break;
    case "domain":
      result = result.concat([
        { type: "attr", val: "transform" },
        { type: "attr", val: "x2" },
        { type: "attr", val: "y2" },
        { type: "style", val: "strokeWidth" },
        { type: "style", val: "stroke" },
        { type: "style", val: "opacity" }
      ]);
      break;
    case "rect":
      result = result.concat([
        { type: "attrTween", val: "d" },
        { type: "attr", val: "transform" },
        { type: "style", val: "opacity" },
        { type: "style", val: "fill" },
        { type: "style", val: "strokeWidth" },
        { type: "style", val: "stroke" }
      ]);
      break;
    case "gradient":
      result = result.concat([
        { type: "attr", val: "d" },
        { type: "style", val: "opacity" },
        { type: "style", val: "fill", defs: gradientRender },
        { type: "style", val: "strokeWidth" },
        { type: "style", val: "stroke" }
      ]);
      break;
    case "rule":
      result = result.concat([
        { type: "attr", val: "transform" },
        { type: "attr", val: "x2" },
        { type: "attr", val: "y2" },
        { type: "style", val: "strokeWidth" },
        { type: "style", val: "stroke" },
        { type: "style", val: "opacity" }
      ]);
      break;
    case "symbol":
      result = result.concat([
        { type: "attrTween", val: "d" },
        { type: "attr", val: "size" },
        { type: "attr", val: "transform" },
        { type: "style", val: "strokeWidth" },
        { type: "style", val: "stroke" },
        { type: "style", val: "opacity" },
        { type: "style", val: "fill" }
      ]);
      break;
    case "group":
      result = result.concat([
        { type: "attr", val: "transform" },
        { type: "style", val: "opacity" }
      ]);
      break;
    case "background":
      result = result.concat([{ type: "attr", val: "d" }]);
      break;
    case "line":
      result = result.concat([
        { type: "attrTween", val: "d" },
        { type: "style", val: "strokeWidth" },
        { type: "style", val: "stroke" },
        { type: "style", val: "opacity" },
        { type: "style", val: "fill" }
      ]);
      break;
    case "trail":
    case "area":
      result = result.concat([
        { type: "attrTween", val: "d" },
        { type: "style", val: "strokeWidth" },
        { type: "style", val: "stroke" },
        { type: "style", val: "opacity" },
        { type: "style", val: "fill" }
      ]);
      break;
    case "legend-pair":
      result = result.concat([{ type: "attr", val: "transform" }]);
      break;
    }
    if (prop.excludes) {
      prop.excludes.forEach(exclude => {
        result = result.filter(
          r => !(r.type === exclude.type && r.val === exclude.val)
        );
      });
    }
    if (result.length > 0) {
      result.forEach(p => {
        p.elmType = propName;
        if (tweaks) {
          tweaks
            .filter(twk => twk.type === p.type && twk.val === p.val)
            .forEach(twk => {
              p = Object.assign(p, twk);
            });
        }
      });
      return result;
    }
    if (propName === "align") {
      return [{ type: "attr", val: "text-anchor", elmType: "none" }];
    }
    return [{ type: "style", val: propName, elmType: "none" }];
  }

  function computeScale(scales, scNames, getScales) {
    const computed = Object.assign({}, scales);

    scNames.forEach(scName => {
      computed.initial[scName] = getScales.initial(scName);
      computed.final[scName] = getScales.final(scName);
    });
    return computed;
  }

  function isLinearMarktype(mtype) {
    return ["area", "line", "trail"].indexOf(mtype) >= 0;
  }

  function computeHasFacet(compSpec) {
    if (
      compSpec &&
      compSpec.parent &&
      compSpec.parent.from &&
      compSpec.parent.from.facet &&
      compSpec.parent.from.facet.data &&
      compSpec.parent.from.facet.name === compSpec.from.data
    ) {
      return true;
    }
    return false;
  }

  function getFacet(compSpec) {
    return computeHasFacet(compSpec) ? compSpec.parent.from.facet : undefined;
  }

  function isGroupingMarktype(marktype) {
    return marktype === "line" || marktype === "area" || marktype === "trail";
  }

  function findMark(marks, markName) {
    let result;
    for (let i = 0; i < marks.length; i++) {
      const m = marks[i];
      if (m.name === markName) {
        return m;
      }
      if (m.marks) {
        result = findMark(m.marks, markName);
        if (result) {
          break;
        }
      }
    }
    return result;
  }

  function findData(spec, dataName) {
    for (let i = 0; i < spec.data.length; i++) {
      if (spec.data[i].name === dataName) {
        return spec.data[i];
      }
    }
  }
  function findFilter(spec, name) {
    for (let i = 0; i < spec.data.length; i++) {
      const d = spec.data[i];
      if (d.transform) {
        const filter = d.transform.find(filter => filter.name === name);
        if (filter) {
          return filter;
        }
      }
    }
  }

  class Enumerator {
    constructor(enumDef, spec, rawInfo) {
      this.views = [];
      this.stopN = this.views.length;
      this.enumDef = enumDef;
      this.currSpec = spec;
      this.easeFn = getEaseFn(enumDef.ease);
      this.delay = enumDef.delay || 0;
      this.staggering = enumDef.staggering;
      this.rawInfo = rawInfo;
    }

    async init() {
      const workingSpec = copy(this.currSpec);

      const enumVals = computeFilteringValues(this.enumDef, this.rawInfo);
      const filter = findFilter(workingSpec, this.enumDef.filter);


      for (const v of enumVals) {
        this.views.push(await new vega.View(vega.parse(computeNewSpec(workingSpec, filter, v)), {
          renderer: "svg"
        }).runAsync());
      }
      this.stopN = this.views.length;
    }

    _getScales(stop_n) {
      return scName => {
        const view = this.views[stop_n];
        return view._runtime.scales[scName]
          ? view._runtime.scales[scName].value
          : undefined;
      };
    }

    getData(stop_n) {
      if (this.extractData && this.getId) {
        return this.extractData(this.views[stop_n]);
      }
      throw Error("Cannot return data without joining data.");
    }

    getDatum(id, stop_n) {
      if (this.extractData && this.getId) {
        const found = this.extractData(this.views[stop_n]).find(
          (d, i) => this.getId(d, i) === id
        );
        return found && found.datum ? found.datum : found;
      }
      throw Error("Cannot return data without joining data.");
    }

    joinData(extractData, identifyData) {
      this.extractData = extractData;
      this.getId = identifyData;
      let currDataKeys = this.extractData(this.views[0]).map(this.getId);

      this.joinDataInfo = this.views.slice(1).map(view => {
        const join = {
          update: [],
          enter: [],
          exit: []
        };
        const newDataKeys = extractData(view).map(this.getId);
        currDataKeys.forEach(cKey => {
          const foundIndex = newDataKeys.indexOf(cKey);
          if (foundIndex >= 0) {
            join.update.push(cKey);
          } else {
            join.exit.push(cKey);
          }
        });
        join.enter = newDataKeys.filter(nKey => currDataKeys.indexOf(nKey) < 0);

        currDataKeys = newDataKeys;

        return ["update", "enter", "exit"].reduce((accMap, set) => {
          return Object.assign(
            accMap,
            join[set].reduce((acc, key) => {
              acc[key] = set;
              return acc;
            }, {})
          );
        }, {});
      });
      this.allKeys = flatten(this.joinDataInfo.map(Object.keys)).unique();
      this.set = (id, stop_n) => this.joinDataInfo[stop_n][id];
    }

    getPropVal(prop, encodes, stop_n, id) {
      const d = this.extractData(this.views[stop_n]).find(
        (x, i) => this.getId(x, i) === id
      );
      const dSet = this.set(id, stop_n);
      if (!dSet) {
        return ["x2", "y2"].indexOf(prop.val) >= 0 ? 0 : "";
      }
      const getScales = {
        initial: this._getScales(stop_n),
        final: this._getScales(stop_n + 1)
      };
      return encodes[dSet].initial(prop, getScales, d);
    }

    interpolateAlongEnumMaker(prop, encodes, elem) {
      return id => {
        return t => {
          const stop_n = Math.min(Math.floor(t * (this.stopN - 1)), this.stopN - 2);
          let d_i = this.extractData(this.views[stop_n]).find(
            (x, i) => this.getId(x, i) === id
          );
          let d_f = this.extractData(this.views[stop_n + 1]).find(
            (x, i) => this.getId(x, i) === id
          );

          const dSet = this.set(id, stop_n);
          switch (dSet) {
          case "enter":
            d_i = d_f;
            break;
          case "exit":
            d_f = d_i;
            break;
          case "update":
            break;
          default:
            return ["x2", "y2"].indexOf(prop.val) >= 0 ? 0 : "";
          }
          const getScales = {
            initial: this._getScales(stop_n),
            final: this._getScales(stop_n + 1)
          };
          if (prop.type === "attrTween") {
            return encodes[dSet].custom.bind(elem)(prop, getScales, d_i, d_f)(
              t * (this.stopN - 1) - stop_n
            );
          }
          const valI = encodes[dSet].initial.bind(elem)(prop, getScales, d_i);
          const valF = encodes[dSet].final.bind(elem)(prop, getScales, d_f);

          return d3.interpolate(valI, valF)(t * (this.stopN - 1) - stop_n);
          // apply one of corresponding interpolation
        };
      };
    }
  }

  function computeFilteringValues(enumDef, rawInfo) {
    const filteringValues = enumDef.values || [];
    if (filteringValues.length === 0 && enumDef.stepSize) {
      // find initial value
      const iFilter = findFilter(rawInfo.sVis.spec, enumDef.filter);
      const iVal = parse(iFilter.expr).right.value;

      // find end value
      const fFilter = findFilter(rawInfo.eVis.spec, enumDef.filter);
      const fVal = parse(fFilter.expr).right.value;

      for (let v = iVal; v < fVal; v += enumDef.stepSize) {
        filteringValues.push(v);
      }

      filteringValues.push(fVal);
    }
    return filteringValues;
  }


  function computeNewSpec(workingSpec, filter, fVal) {
    const codegen = vgCodegen({
      whitelist: ["datum", "event", "signals"],
      globalvar: "global"
    });

    const parsedASTNode = parse(filter.expr);

    parsedASTNode.right.value = fVal;
    parsedASTNode.right.raw = fVal.toString();
    const newFilterExpr = codegen(parsedASTNode).code;
    filter.expr = newFilterExpr;

    return copy(workingSpec);
  }

  function enumerateSteps(block, rawInfo, enumDefs) {
    if (block.sync) {
      block.sync = block.sync.map(blk => enumerateSteps(blk, rawInfo, enumDefs));
    } else if (block.concat) {
      block.concat = block.concat.map(blk =>
        enumerateSteps(blk, rawInfo, enumDefs)
      );

      if (block.enumerator) {
        const foundEnumDef = enumDefs.find(
          enumDef => enumDef.name === block.enumerator
        );

        if (foundEnumDef) {
          const filteringValues = computeFilteringValues(foundEnumDef, rawInfo);
          return filteringValues.slice(1).reduce(
            (acc, fVal, i) => {
              const enumedConcatBlock = copy(block);
              enumedConcatBlock.concat.forEach(blk => {
                fetchEnumVal(blk, foundEnumDef, fVal);
              });
              enumedConcatBlock.enumerated = copy(foundEnumDef);
              enumedConcatBlock.enumerated.val = fVal;
              enumedConcatBlock.enumerated.N = filteringValues.length;
              enumedConcatBlock.enumerated.last =
                i === filteringValues.length - 2;

              acc.concat.push(enumedConcatBlock);
              return acc;
            },
            { concat: [] }
          );
        }
      }
    }
    return block;
  }

  function fetchEnumVal(block, enumDef, val) {
    if (block.sync || block.concat) {
      (block.sync || block.concat).forEach(blk => {
        fetchEnumVal(blk, enumDef, val);
      });
    } else if (Array.isArray(block.enumVals)) {
      block.enumerated.push({def: enumDef, val: val});
    } else {
      block.enumerated = [{def: enumDef, val: val}];
    }
  }

  function parse$1(spec, rawInfo){
    // const speckCheckResult = true; //specChecker(spec); TODO: when specChecker is included, it blocked loading the source map.
    const speckCheckResult = specChecker(spec);

    // Enumerator argument the concatBlock with enumerator
    let newSpec = copy(spec);
    newSpec.timeline = enumerateSteps(newSpec.timeline, rawInfo, newSpec.enumerators);


    // 1. reform the timline such that all blocks have duration.
    let parsedTimelineBlock = readBlock(newSpec.timeline, newSpec.totalDuration);
    let parsedSteps = assignTiming(parsedTimelineBlock, { sTime: 0 });

    // 2. attach staggering definitions
    parsedSteps.forEach(step => {
      if (["axis", "mark", "legend"].indexOf(step.compType) >= 0) {
        step.timing = attachStaggering(step.timing, newSpec.staggerings);
      }
    });
    // 3. enumerator definitions
    if (newSpec.enumerators) {
      newSpec.enumerators = newSpec.enumerators.map(enumerator => {
        return attachStaggering(enumerator, newSpec.staggerings);
      });

      parsedSteps.forEach((step, i) => {
        if (["axis", "mark", "legend"].indexOf(step.compType) >= 0) {
          step = attachEnumerators(step, newSpec.enumerators);
        }
      });
    }


    const schedule = new Schedule(parsedSteps);
    const resolves = collectResolves(parsedTimelineBlock, parsedSteps);

    const { conflictsPerAlterId } = check(schedule, resolves);


    return { schedule, resolves, conflictsPerAlterId };
  }


  function readBlock(block, totalDuration, multiplier = 1) {
    if (block.sync) {
      return readSyncBlock(block, totalDuration, multiplier);
    }
    if (block.concat) {
      return readConcatBlock(block, totalDuration, multiplier);
    }
    const delay =
      (block.delay
        ? isNumber(block.timing.delay.ratio)
          ? block.timing.delay.ratio * totalDuration
          : block.timing.delay
        : 0) * multiplier;

    const duration =
      (isNumber(block.timing.duration.ratio)
        ? block.timing.duration.ratio * totalDuration
        : block.timing.duration) * multiplier;
    const compType =
      typeof block.component === "object"
        ? Object.keys(block.component)[0]
        : block.component;
    const compName =
      typeof block.component === "object" ? block.component[compType] : undefined;

    return {
      duration,
      delay,
      timing: Object.assign({}, block.timing, { duration, delay }),
      change: block.change,
      enumerated: block.enumerated,
      enumerator: block.enumerator, // step enumerator
      compType,
      compName
    };
  }
  function readConcatBlock(concatBlock, totalDuration, multiplier = 1) {
    const concatenated = concatBlock.concat;
    let duration = 0;
    let alternateConcats = {};

    const newMult = concatBlock.enumerated ? 1 / concatBlock.enumerated.N : 1;

    const reformedBlocks = concatenated.map(block => {
      const newBlock = readBlock(block, totalDuration, multiplier * newMult);
      duration = duration + newBlock.timing.duration + newBlock.timing.delay;
      return newBlock;
    });

    if (concatBlock.autoScaleOrder) {
      // permutate the concat's order
      concatBlock.resolve = {
        autoScaleOrder: concatBlock.autoScaleOrder,
        alterName:
          concatBlock.autoScaleOrder.join("-") +
          (concatBlock.enumerated ? `_${concatBlock.enumerated.val}` : "")
      };
      let alternates = permutateOnlyContainNames(
        concatenated,
        concatBlock.resolve.autoScaleOrder
      );

      alternates.splice(0, 1);
      alternates = alternates.map(concatenated_i => {
        return concatenated_i.map(block => readBlock(block, totalDuration, multiplier * newMult));
      });
      alternateConcats = {
        alterName: concatBlock.resolve.alterName,
        alternates
      };
    }
    return Object.assign(
      {
        delay: 0,
        duration,
        timing: { delay: 0, duration },
        concat: reformedBlocks,
        resolve: concatBlock.resolve,
        enumerated: concatBlock.enumerated
      },
      alternateConcats
    );
  }

  function permutateOnlyContainNames(blocks, names) {
    const filtered = [];
    const indices = [];
    blocks.forEach((blk, i) => {
      if (containNames(blk)) {
        filtered.push(blk);
        indices.push(i);
      }
    });

    return permutate(filtered).map(permutatedOne => {
      return indices.reduce((acc, index, i) => {
        acc.splice(index, 1, permutatedOne[i]);
        return acc;
      }, copy(blocks));
    });

    function containNames(block) {
      if (block.sync || block.concat) {
        return (block.sync || block.concat).reduce((acc, blk) => {
          acc = acc || containNames(blk);
          return acc;
        }, false);
      }
      const compType = Object.keys(block.component)[0];
      return names.indexOf(block.component[compType]) >= 0;
    }
  }

  function readSyncBlock(syncBlock, totalDuration, multiplier = 1) {
    const anchor = syncBlock.anchor || "start";
    let duration = 0;
    const newBlocks = syncBlock.sync.map(block => {
      const newBlock = readBlock(block, totalDuration, multiplier);
      duration =
        duration > newBlock.timing.duration + newBlock.timing.delay
          ? duration
          : newBlock.timing.duration + newBlock.timing.delay;
      return newBlock;
    });

    return {
      delay: 0,
      duration,
      timing: { delay: 0, duration },
      anchor,
      sync: newBlocks
    };
  }

  function attachStaggering(item, staggerings) {
    if (!staggerings || staggerings.length <= 0 || !item) {
      return item;
    }

    const found = staggerings.find(stgDef => item.staggering === stgDef.name);
    return Object.assign(item, { staggering: found });
  }

  function attachEnumerators(item, enumerators) {
    if (!enumerators || enumerators.length <= 0 || !item) {
      return item;
    }

    const found = enumerators.find(
      enumeratorDef => item.enumerator === enumeratorDef.name
    );
    return Object.assign(item, { enumerator: found });
  }

  function assignTiming(block, timePointer) {
    let steps = [];
    const anchor = isNumber(timePointer.sTime) ? "s" : "e";
    let timestamp = anchor === "s" ? timePointer.sTime : timePointer.eTime;
    if (block.sync && block.anchor === "start") {
      block.sync.forEach(blk => {
        steps = steps.concat(
          assignTiming(blk, {
            sTime: anchor === "s" ? timestamp : timestamp - block.duration
          })
        );
      });
    } else if (block.sync && block.anchor === "end") {
      block.sync.forEach(blk => {
        steps = steps.concat(
          assignTiming(blk, {
            eTime: anchor === "e" ? timestamp : timestamp + block.duration
          })
        );
      });
    } else if (block.concat) {
      if (anchor === "e") {
        timestamp -= block.duration;
      }

      if (block.alternates) {
        block.alternates.forEach((alternate, i) => {
          let alterTimeStamp = timestamp;
          alternate.forEach(blk => {
            const alter = assignTiming(copy(blk), {
              sTime: alterTimeStamp
            }).map(step => {
              step.alterId = `${step.alterId || ""}${block.alterName}:${i}`;
              return step;
            });

            steps = steps.concat(alter);
            alterTimeStamp += blk.duration + blk.delay;
          });
        });
      }

      block.concat.forEach(blk => {
        const mainSteps = assignTiming(blk, { sTime: timestamp }).map(step => {
          step.alterId = step.alterId || `${block.alterName || ""}:main`;
          return copy(step);
        });
        steps = steps.concat(mainSteps);
        timestamp += blk.duration + blk.delay;
      });
    } else {
      if (anchor === "s") {
        block.sTime = timestamp;
        block.eTime = timestamp + block.duration + block.delay;
      } else {
        block.eTime = timestamp;
        block.sTime = timestamp - block.duration - block.delay;
      }
      steps = steps.concat([block]);
    }
    return steps;
  }

  // Join and return nextData
  function facetData(data, facetDef) {
    if (!facetDef) {
      return [
        {
          datum: {},
          mark: { role: "group", marktype: "group" },
          items: [{ items: data }]
        }
      ];
    }

    let {groupby} = facetDef;
    if (typeof groupby === "string") {
      groupby = [groupby];
    }
    return d3.groups(data, d => groupby.map(f => d.datum[f]).join("@@_@@"))
      .map(group => {
        const values  = group[1];
        let datum = groupby.reduce((datum, f) => {
          datum[f] = values[0].datum[f];
          return datum;
        }, { count: values.length });
        return {
          datum: datum,
          mark: {role: "group", marktype: "group"},
          items: [{items: values }]
        };
      });

  }
  function unpackData(data) {
    if (data[0].mark.marktype !== "group") {
      return data;
    }

    return data.reduce((unpacked, group) => {
      return unpacked.concat(group.items[0].items);
    }, []);
  }

  function getMarkData(view, compSpec, compName, marktype, facet) {
    let dataName = computeHasFacet(compSpec) ? compSpec.parent.name : compName;
    let data = view._runtime.data[dataName] ? (view._runtime.data[dataName].values.value) || [] : [];
    if (data.length === 0) {
      return data;
    }
    let isGroupingMtype = isGroupingMarktype(marktype || compSpec.type),
      hasFacet = computeHasFacet(compSpec);

    if ( isGroupingMtype && !hasFacet ) {
      return facetData(data, facet || (compSpec.parent.from ? compSpec.parent.from.facet : undefined));
    } if (!isGroupingMtype && hasFacet) {
      data = unpackData(data);
    }
    return data;
  }

  function getEmptyLegendData(compSpec) {
    if (compSpec.type === "symbol") {
      return {
        labels: [],
        symbols: [],
        pairs: [],
        title: []
      };
    } if (compSpec.type === "gradient") {
      return {
        labels: [],
        gradient: [],
        bands: [],
        title: []
      };
    }
  }
  function getLegendData(view, compName, compSpec) {
    const titleDatum = view._runtime.data[compName].values.value[0].items.find(
      item => item.role === "legend-title"
    ).items[0];
    let returnData = { title: [titleDatum] };
    if (compSpec.type === "symbol") {
      returnData = Object.assign(returnData, {
        labels: [],
        symbols: [],
        pairs: []
      });
      const fPairs = view._runtime.data[compName].values.value[0].items.find(
        item => item.role === "legend-entry"
      ).items[0].items[0].items;
      fPairs.forEach(pair => {
        returnData.pairs.push(pair);
        returnData.labels.push(
          pair.items.find(item => item.role === "legend-label").items[0]
        );
        returnData.symbols.push(
          pair.items.find(item => item.role === "legend-symbol").items[0]
        );
      });
    } else if (compSpec.type === "gradient") {
      returnData = Object.assign(returnData, {
        labels: [],
        gradient: [],
        bands: []
      });
      const entryG = view._runtime.data[compName].values.value[0].items.find(
        item => item.role === "legend-entry"
      ).items[0];
      let labelG; let bandG; let gradientG;
      if ((labelG = entryG.items.find(item => item.role === "legend-label"))) {
        returnData.labels = returnData.labels.concat(labelG.items);
      }
      if ((bandG = entryG.items.find(item => item.role === "legend-band"))) {
        returnData.bands = returnData.bands.concat(bandG.items);
      }
      if (
        (gradientG = entryG.items.find(item => item.role === "legend-gradient"))
      ) {
        returnData.gradient.push(gradientG.items[0]);
      }
    }
    return returnData;
  }

  function getEmptyAxisData() {
    return {
      tick: [],
      label: [],
      grid: []
    };
  }
  function getAxisData(view, compName) {
    return ["tick", "label", "grid"].reduce((acc, subComp) => {
      let data = view._runtime.data[compName].values.value[0].items
        .find(item => item.role === `axis-${subComp}`);

      data = data && data.items ? data.items : [];
      acc[subComp] = data;
      return acc;
    }, {});
  }

  var version = "4.17.0";

  function accessor$1 (fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
  }

  function getter$1 (path) {
    return path.length === 1 ? get1$1(path[0]) : getN$1(path);
  }

  const get1$1 = field => function (obj) {
    return obj[field];
  };

  const getN$1 = path => {
    const len = path.length;
    return function (obj) {
      for (let i = 0; i < len; ++i) {
        obj = obj[path[i]];
      }

      return obj;
    };
  };

  function error$1 (message) {
    throw Error(message);
  }

  function splitAccessPath$1 (p) {
    const path = [],
          n = p.length;
    let q = null,
        b = 0,
        s = '',
        i,
        j,
        c;
    p = p + '';

    function push() {
      path.push(s + p.substring(i, j));
      s = '';
      i = j + 1;
    }

    for (i = j = 0; j < n; ++j) {
      c = p[j];

      if (c === '\\') {
        s += p.substring(i, j);
        s += p.substring(++j, ++j);
        i = j;
      } else if (c === q) {
        push();
        q = null;
        b = -1;
      } else if (q) {
        continue;
      } else if (i === b && c === '"') {
        i = j + 1;
        q = c;
      } else if (i === b && c === "'") {
        i = j + 1;
        q = c;
      } else if (c === '.' && !b) {
        if (j > i) {
          push();
        } else {
          i = j + 1;
        }
      } else if (c === '[') {
        if (j > i) push();
        b = i = j + 1;
      } else if (c === ']') {
        if (!b) error$1('Access path missing open bracket: ' + p);
        if (b > 0) push();
        b = 0;
        i = j + 1;
      }
    }

    if (b) error$1('Access path missing closing bracket: ' + p);
    if (q) error$1('Access path missing closing quote: ' + p);

    if (j > i) {
      j++;
      push();
    }

    return path;
  }

  function field$1 (field, name, opt) {
    const path = splitAccessPath$1(field);
    field = path.length === 1 ? path[0] : field;
    return accessor$1((opt && opt.get || getter$1)(path), [field], name || field);
  }

  const id$1 = field$1('id');
  const identity$1 = accessor$1(_ => _, [], 'identity');
  const zero$1 = accessor$1(() => 0, [], 'zero');
  const one$1 = accessor$1(() => 1, [], 'one');
  const truthy$1 = accessor$1(() => true, [], 'true');
  const falsy$1 = accessor$1(() => false, [], 'false');

  function log$1(method, level, input) {
    const args = [level].concat([].slice.call(input));
    console[method].apply(console, args); // eslint-disable-line no-console
  }

  const None = 0;
  const Error$1 = 1;
  const Warn = 2;
  const Info = 3;
  const Debug = 4;
  function logger (_, method) {
    let level = _ || None;
    return {
      level(_) {
        if (arguments.length) {
          level = +_;
          return this;
        } else {
          return level;
        }
      },

      error() {
        if (level >= Error$1) log$1(method || 'error', 'ERROR', arguments);
        return this;
      },

      warn() {
        if (level >= Warn) log$1(method || 'warn', 'WARN', arguments);
        return this;
      },

      info() {
        if (level >= Info) log$1(method || 'log', 'INFO', arguments);
        return this;
      },

      debug() {
        if (level >= Debug) log$1(method || 'log', 'DEBUG', arguments);
        return this;
      }

    };
  }

  var isArray = Array.isArray;

  function isObject (_) {
    return _ === Object(_);
  }

  const isLegalKey = key => key !== '__proto__';

  function mergeConfig(...configs) {
    return configs.reduce((out, source) => {
      for (const key in source) {
        if (key === 'signals') {
          // for signals, we merge the signals arrays
          // source signals take precedence over
          // existing signals with the same name
          out.signals = mergeNamed(out.signals, source.signals);
        } else {
          // otherwise, merge objects subject to recursion constraints
          // for legend block, recurse for the layout entry only
          // for style block, recurse for all properties
          // otherwise, no recursion: objects overwrite, no merging
          const r = key === 'legend' ? {
            layout: 1
          } : key === 'style' ? true : null;
          writeConfig(out, key, source[key], r);
        }
      }

      return out;
    }, {});
  }
  function writeConfig(output, key, value, recurse) {
    if (!isLegalKey(key)) return;
    let k, o;

    if (isObject(value) && !isArray(value)) {
      o = isObject(output[key]) ? output[key] : output[key] = {};

      for (k in value) {
        if (recurse && (recurse === true || recurse[k])) {
          writeConfig(o, k, value[k]);
        } else if (isLegalKey(k)) {
          o[k] = value[k];
        }
      }
    } else {
      output[key] = value;
    }
  }

  function mergeNamed(a, b) {
    if (a == null) return b;
    const map = {},
          out = [];

    function add(_) {
      if (!map[_.name]) {
        map[_.name] = 1;
        out.push(_);
      }
    }

    b.forEach(add);
    a.forEach(add);
    return out;
  }

  function array (_) {
    return _ != null ? isArray(_) ? _ : [_] : [];
  }

  function isFunction$1 (_) {
    return typeof _ === 'function';
  }

  const hop$1 = Object.prototype.hasOwnProperty;
  function has$1 (object, property) {
    return hop$1.call(object, property);
  }

  function isBoolean (_) {
    return typeof _ === 'boolean';
  }

  function isNumber$1 (_) {
    return typeof _ === 'number';
  }

  function isString$1 (_) {
    return typeof _ === 'string';
  }

  function $(x) {
    return isArray(x) ? '[' + x.map($) + ']' : isObject(x) || isString$1(x) ? // Output valid JSON and JS source strings.
    // See http://timelessrepo.com/json-isnt-a-javascript-subset
    JSON.stringify(x).replace('\u2028', '\\u2028').replace('\u2029', '\\u2029') : x;
  }

  function toSet$1 (_) {
    const s = {},
          n = _.length;

    for (let i = 0; i < n; ++i) s[_[i]] = true;

    return s;
  }

  Array.prototype.flat||Object.defineProperty(Array.prototype,"flat",{configurable:!0,value:function r(){var t=isNaN(arguments[0])?1:Number(arguments[0]);return t?Array.prototype.reduce.call(this,function(a,e){return Array.isArray(e)?a.push.apply(a,r.call(e,t-1)):a.push(e),a},[]):Array.prototype.slice.call(this)},writable:!0}),Array.prototype.flatMap||Object.defineProperty(Array.prototype,"flatMap",{configurable:!0,value:function(r){return Array.prototype.map.apply(this,arguments).flat()},writable:!0});

  var clone_1 = createCommonjsModule(function (module) {
  var clone = (function() {

  function _instanceof(obj, type) {
    return type != null && obj instanceof type;
  }

  var nativeMap;
  try {
    nativeMap = Map;
  } catch(_) {
    // maybe a reference error because no `Map`. Give it a dummy value that no
    // value will ever be an instanceof.
    nativeMap = function() {};
  }

  var nativeSet;
  try {
    nativeSet = Set;
  } catch(_) {
    nativeSet = function() {};
  }

  var nativePromise;
  try {
    nativePromise = Promise;
  } catch(_) {
    nativePromise = function() {};
  }

  /**
   * Clones (copies) an Object using deep copying.
   *
   * This function supports circular references by default, but if you are certain
   * there are no circular references in your object, you can save some CPU time
   * by calling clone(obj, false).
   *
   * Caution: if `circular` is false and `parent` contains circular references,
   * your program may enter an infinite loop and crash.
   *
   * @param `parent` - the object to be cloned
   * @param `circular` - set to true if the object to be cloned may contain
   *    circular references. (optional - true by default)
   * @param `depth` - set to a number if the object is only to be cloned to
   *    a particular depth. (optional - defaults to Infinity)
   * @param `prototype` - sets the prototype to be used when cloning an object.
   *    (optional - defaults to parent prototype).
   * @param `includeNonEnumerable` - set to true if the non-enumerable properties
   *    should be cloned as well. Non-enumerable properties on the prototype
   *    chain will be ignored. (optional - false by default)
  */
  function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    if (typeof circular === 'object') {
      depth = circular.depth;
      prototype = circular.prototype;
      includeNonEnumerable = circular.includeNonEnumerable;
      circular = circular.circular;
    }
    // maintain two arrays for circular references, where corresponding parents
    // and children have the same index
    var allParents = [];
    var allChildren = [];

    var useBuffer = typeof Buffer != 'undefined';

    if (typeof circular == 'undefined')
      circular = true;

    if (typeof depth == 'undefined')
      depth = Infinity;

    // recurse this function so we don't reset allParents and allChildren
    function _clone(parent, depth) {
      // cloning null always returns null
      if (parent === null)
        return null;

      if (depth === 0)
        return parent;

      var child;
      var proto;
      if (typeof parent != 'object') {
        return parent;
      }

      if (_instanceof(parent, nativeMap)) {
        child = new nativeMap();
      } else if (_instanceof(parent, nativeSet)) {
        child = new nativeSet();
      } else if (_instanceof(parent, nativePromise)) {
        child = new nativePromise(function (resolve, reject) {
          parent.then(function(value) {
            resolve(_clone(value, depth - 1));
          }, function(err) {
            reject(_clone(err, depth - 1));
          });
        });
      } else if (clone.__isArray(parent)) {
        child = [];
      } else if (clone.__isRegExp(parent)) {
        child = new RegExp(parent.source, __getRegExpFlags(parent));
        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
      } else if (clone.__isDate(parent)) {
        child = new Date(parent.getTime());
      } else if (useBuffer && Buffer.isBuffer(parent)) {
        if (Buffer.allocUnsafe) {
          // Node.js >= 4.5.0
          child = Buffer.allocUnsafe(parent.length);
        } else {
          // Older Node.js versions
          child = new Buffer(parent.length);
        }
        parent.copy(child);
        return child;
      } else if (_instanceof(parent, Error)) {
        child = Object.create(parent);
      } else {
        if (typeof prototype == 'undefined') {
          proto = Object.getPrototypeOf(parent);
          child = Object.create(proto);
        }
        else {
          child = Object.create(prototype);
          proto = prototype;
        }
      }

      if (circular) {
        var index = allParents.indexOf(parent);

        if (index != -1) {
          return allChildren[index];
        }
        allParents.push(parent);
        allChildren.push(child);
      }

      if (_instanceof(parent, nativeMap)) {
        parent.forEach(function(value, key) {
          var keyChild = _clone(key, depth - 1);
          var valueChild = _clone(value, depth - 1);
          child.set(keyChild, valueChild);
        });
      }
      if (_instanceof(parent, nativeSet)) {
        parent.forEach(function(value) {
          var entryChild = _clone(value, depth - 1);
          child.add(entryChild);
        });
      }

      for (var i in parent) {
        var attrs;
        if (proto) {
          attrs = Object.getOwnPropertyDescriptor(proto, i);
        }

        if (attrs && attrs.set == null) {
          continue;
        }
        child[i] = _clone(parent[i], depth - 1);
      }

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(parent);
        for (var i = 0; i < symbols.length; i++) {
          // Don't need to worry about cloning a symbol because it is a primitive,
          // like a number or string.
          var symbol = symbols[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
            continue;
          }
          child[symbol] = _clone(parent[symbol], depth - 1);
          if (!descriptor.enumerable) {
            Object.defineProperty(child, symbol, {
              enumerable: false
            });
          }
        }
      }

      if (includeNonEnumerable) {
        var allPropertyNames = Object.getOwnPropertyNames(parent);
        for (var i = 0; i < allPropertyNames.length; i++) {
          var propertyName = allPropertyNames[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
          if (descriptor && descriptor.enumerable) {
            continue;
          }
          child[propertyName] = _clone(parent[propertyName], depth - 1);
          Object.defineProperty(child, propertyName, {
            enumerable: false
          });
        }
      }

      return child;
    }

    return _clone(parent, depth);
  }

  /**
   * Simple flat clone using prototype, accepts only objects, usefull for property
   * override on FLAT configuration object (no nested props).
   *
   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
   * works.
   */
  clone.clonePrototype = function clonePrototype(parent) {
    if (parent === null)
      return null;

    var c = function () {};
    c.prototype = parent;
    return new c();
  };

  // private utility functions

  function __objToStr(o) {
    return Object.prototype.toString.call(o);
  }
  clone.__objToStr = __objToStr;

  function __isDate(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Date]';
  }
  clone.__isDate = __isDate;

  function __isArray(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Array]';
  }
  clone.__isArray = __isArray;

  function __isRegExp(o) {
    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
  }
  clone.__isRegExp = __isRegExp;

  function __getRegExpFlags(re) {
    var flags = '';
    if (re.global) flags += 'g';
    if (re.ignoreCase) flags += 'i';
    if (re.multiline) flags += 'm';
    return flags;
  }
  clone.__getRegExpFlags = __getRegExpFlags;

  return clone;
  })();

  if ( module.exports) {
    module.exports = clone;
  }
  });

  function isLogicalOr(op) {
      return !!op.or;
  }
  function isLogicalAnd(op) {
      return !!op.and;
  }
  function isLogicalNot(op) {
      return !!op.not;
  }
  function forEachLeaf(op, fn) {
      if (isLogicalNot(op)) {
          forEachLeaf(op.not, fn);
      }
      else if (isLogicalAnd(op)) {
          for (const subop of op.and) {
              forEachLeaf(subop, fn);
          }
      }
      else if (isLogicalOr(op)) {
          for (const subop of op.or) {
              forEachLeaf(subop, fn);
          }
      }
      else {
          fn(op);
      }
  }
  function normalizeLogicalComposition(op, normalizer) {
      if (isLogicalNot(op)) {
          return { not: normalizeLogicalComposition(op.not, normalizer) };
      }
      else if (isLogicalAnd(op)) {
          return { and: op.and.map(o => normalizeLogicalComposition(o, normalizer)) };
      }
      else if (isLogicalOr(op)) {
          return { or: op.or.map(o => normalizeLogicalComposition(o, normalizer)) };
      }
      else {
          return normalizer(op);
      }
  }

  const deepEqual$1 = fastDeepEqual;
  const duplicate = clone_1;
  /**
   * Creates an object composed of the picked object properties.
   *
   * var object = {'a': 1, 'b': '2', 'c': 3};
   * pick(object, ['a', 'c']);
   * // → {'a': 1, 'c': 3}
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  function pick(obj, props) {
      const copy = {};
      for (const prop of props) {
          if (has$1(obj, prop)) {
              copy[prop] = obj[prop];
          }
      }
      return copy;
  }
  /**
   * The opposite of _.pick; this method creates an object composed of the own
   * and inherited enumerable string keyed properties of object that are not omitted.
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  function omit(obj, props) {
      const copy = Object.assign({}, obj);
      for (const prop of props) {
          delete copy[prop];
      }
      return copy;
  }
  /**
   * Monkey patch Set so that `stringify` produces a string representation of sets.
   */
  Set.prototype['toJSON'] = function () {
      return `Set(${[...this].map(x => fastJsonStableStringify(x)).join(',')})`;
  };
  /**
   * Converts any object to a string representation that can be consumed by humans.
   */
  const stringify = fastJsonStableStringify;
  /**
   * Converts any object to a string of limited size, or a number.
   */
  function hash(a) {
      if (isNumber$1(a)) {
          return a;
      }
      const str = isString$1(a) ? a : fastJsonStableStringify(a);
      // short strings can be used as hash directly, longer strings are hashed to reduce memory usage
      if (str.length < 250) {
          return str;
      }
      // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
      let h = 0;
      for (let i = 0; i < str.length; i++) {
          const char = str.charCodeAt(i);
          h = (h << 5) - h + char;
          h = h & h; // Convert to 32bit integer
      }
      return h;
  }
  function isNullOrFalse(x) {
      return x === false || x === null;
  }
  function contains$1(array, item) {
      return array.indexOf(item) > -1;
  }
  /**
   * Returns true if any item returns true.
   */
  function some(arr, f) {
      let i = 0;
      for (const [k, a] of arr.entries()) {
          if (f(a, k, i++)) {
              return true;
          }
      }
      return false;
  }
  /**
   * Returns true if all items return true.
   */
  function every(arr, f) {
      let i = 0;
      for (const [k, a] of arr.entries()) {
          if (!f(a, k, i++)) {
              return false;
          }
      }
      return true;
  }
  /**
   * recursively merges src into dest
   */
  function mergeDeep(dest, ...src) {
      for (const s of src) {
          deepMerge_(dest, s !== null && s !== void 0 ? s : {});
      }
      return dest;
  }
  function deepMerge_(dest, src) {
      for (const property of keys(src)) {
          writeConfig(dest, property, src[property], true);
      }
  }
  function unique(values, f) {
      const results = [];
      const u = {};
      let v;
      for (const val of values) {
          v = f(val);
          if (v in u) {
              continue;
          }
          u[v] = 1;
          results.push(val);
      }
      return results;
  }
  /**
   * Returns true if the two dictionaries disagree. Applies only to defined values.
   */
  function isEqual(dict, other) {
      const dictKeys = keys(dict);
      const otherKeys = keys(other);
      if (dictKeys.length !== otherKeys.length) {
          return false;
      }
      for (const key of dictKeys) {
          if (dict[key] !== other[key]) {
              return false;
          }
      }
      return true;
  }
  function setEqual(a, b) {
      if (a.size !== b.size) {
          return false;
      }
      for (const e of a) {
          if (!b.has(e)) {
              return false;
          }
      }
      return true;
  }
  function hasIntersection(a, b) {
      for (const key of a) {
          if (b.has(key)) {
              return true;
          }
      }
      return false;
  }
  function prefixGenerator(a) {
      const prefixes = new Set();
      for (const x of a) {
          const splitField = splitAccessPath$1(x);
          // Wrap every element other than the first in `[]`
          const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));
          const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));
          for (const y of computedPrefixes) {
              prefixes.add(y);
          }
      }
      return prefixes;
  }
  /**
   * Returns true if a and b have an intersection. Also return true if a or b are undefined
   * since this means we don't know what fields a node produces or depends on.
   */
  function fieldIntersection(a, b) {
      if (a === undefined || b === undefined) {
          return true;
      }
      return hasIntersection(prefixGenerator(a), prefixGenerator(b));
  }
  // eslint-disable-next-line @typescript-eslint/ban-types
  function isEmpty$1(obj) {
      return keys(obj).length === 0;
  }
  // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208
  const keys = Object.keys;
  const vals = Object.values;
  const entries = Object.entries;
  function isBoolean$1(b) {
      return b === true || b === false;
  }
  /**
   * Convert a string into a valid variable name
   */
  function varName(s) {
      // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _
      const alphanumericS = s.replace(/\W/g, '_');
      // Add _ if the string has leading numbers.
      return (s.match(/^\d+/) ? '_' : '') + alphanumericS;
  }
  function logicalExpr(op, cb) {
      if (isLogicalNot(op)) {
          return '!(' + logicalExpr(op.not, cb) + ')';
      }
      else if (isLogicalAnd(op)) {
          return '(' + op.and.map((and) => logicalExpr(and, cb)).join(') && (') + ')';
      }
      else if (isLogicalOr(op)) {
          return '(' + op.or.map((or) => logicalExpr(or, cb)).join(') || (') + ')';
      }
      else {
          return cb(op);
      }
  }
  /**
   * Delete nested property of an object, and delete the ancestors of the property if they become empty.
   */
  function deleteNestedProperty(obj, orderedProps) {
      if (orderedProps.length === 0) {
          return true;
      }
      const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion
      if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {
          delete obj[prop];
      }
      return isEmpty$1(obj);
  }
  function titleCase(s) {
      return s.charAt(0).toUpperCase() + s.substr(1);
  }
  /**
   * Converts a path to an access path with datum.
   * @param path The field name.
   * @param datum The string to use for `datum`.
   */
  function accessPathWithDatum(path, datum = 'datum') {
      const pieces = splitAccessPath$1(path);
      const prefixes = [];
      for (let i = 1; i <= pieces.length; i++) {
          const prefix = `[${pieces.slice(0, i).map($).join('][')}]`;
          prefixes.push(`${datum}${prefix}`);
      }
      return prefixes.join(' && ');
  }
  /**
   * Return access with datum to the flattened field.
   *
   * @param path The field name.
   * @param datum The string to use for `datum`.
   */
  function flatAccessWithDatum(path, datum = 'datum') {
      return `${datum}[${$(splitAccessPath$1(path).join('.'))}]`;
  }
  function escapePathAccess(string) {
      return string.replace(/(\[|\]|\.|'|")/g, '\\$1');
  }
  /**
   * Replaces path accesses with access to non-nested field.
   * For example, `foo["bar"].baz` becomes `foo\\.bar\\.baz`.
   */
  function replacePathInField(path) {
      return `${splitAccessPath$1(path).map(escapePathAccess).join('\\.')}`;
  }
  /**
   * Replace all occurrences of a string with another string.
   *
   * @param string the string to replace in
   * @param find the string to replace
   * @param replacement the replacement
   */
  function replaceAll(string, find, replacement) {
      return string.replace(new RegExp(find.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'g'), replacement);
  }
  /**
   * Remove path accesses with access from field.
   * For example, `foo["bar"].baz` becomes `foo.bar.baz`.
   */
  function removePathFromField(path) {
      return `${splitAccessPath$1(path).join('.')}`;
  }
  /**
   * Count the depth of the path. Returns 1 for fields that are not nested.
   */
  function accessPathDepth(path) {
      if (!path) {
          return 0;
      }
      return splitAccessPath$1(path).length;
  }
  /**
   * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.
   */
  function getFirstDefined(...args) {
      for (const arg of args) {
          if (arg !== undefined) {
              return arg;
          }
      }
      return undefined;
  }
  // variable used to generate id
  let idCounter = 42;
  /**
   * Returns a new random id every time it gets called.
   *
   * Has side effect!
   */
  function uniqueId(prefix) {
      const id = ++idCounter;
      return prefix ? String(prefix) + id : id;
  }
  /**
   * Resets the id counter used in uniqueId. This can be useful for testing.
   */
  function resetIdCounter() {
      idCounter = 42;
  }
  function internalField(name) {
      return isInternalField(name) ? name : `__${name}`;
  }
  function isInternalField(name) {
      return name.indexOf('__') === 0;
  }
  /**
   * Normalize angle to be within [0,360).
   */
  function normalizeAngle(angle) {
      if (angle === undefined) {
          return undefined;
      }
      return ((angle % 360) + 360) % 360;
  }
  /**
   * Returns whether the passed in value is a valid number.
   */
  function isNumeric(value) {
      if (isNumber$1(value)) {
          return true;
      }
      return !isNaN(value) && !isNaN(parseFloat(value));
  }

  const CONDITIONAL_AXIS_PROP_INDEX = {
      labelAlign: {
          part: 'labels',
          vgProp: 'align'
      },
      labelBaseline: {
          part: 'labels',
          vgProp: 'baseline'
      },
      labelColor: {
          part: 'labels',
          vgProp: 'fill'
      },
      labelFont: {
          part: 'labels',
          vgProp: 'font'
      },
      labelFontSize: {
          part: 'labels',
          vgProp: 'fontSize'
      },
      labelFontStyle: {
          part: 'labels',
          vgProp: 'fontStyle'
      },
      labelFontWeight: {
          part: 'labels',
          vgProp: 'fontWeight'
      },
      labelOpacity: {
          part: 'labels',
          vgProp: 'opacity'
      },
      labelOffset: null,
      labelPadding: null,
      gridColor: {
          part: 'grid',
          vgProp: 'stroke'
      },
      gridDash: {
          part: 'grid',
          vgProp: 'strokeDash'
      },
      gridDashOffset: {
          part: 'grid',
          vgProp: 'strokeDashOffset'
      },
      gridOpacity: {
          part: 'grid',
          vgProp: 'opacity'
      },
      gridWidth: {
          part: 'grid',
          vgProp: 'strokeWidth'
      },
      tickColor: {
          part: 'ticks',
          vgProp: 'stroke'
      },
      tickDash: {
          part: 'ticks',
          vgProp: 'strokeDash'
      },
      tickDashOffset: {
          part: 'ticks',
          vgProp: 'strokeDashOffset'
      },
      tickOpacity: {
          part: 'ticks',
          vgProp: 'opacity'
      },
      tickSize: null,
      tickWidth: {
          part: 'ticks',
          vgProp: 'strokeWidth'
      }
  };
  function isConditionalAxisValue(v) {
      return v && v['condition'];
  }
  const AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];
  /**
   * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.
   */
  const AXIS_PROPERTY_TYPE = {
      grid: 'grid',
      gridCap: 'grid',
      gridColor: 'grid',
      gridDash: 'grid',
      gridDashOffset: 'grid',
      gridOpacity: 'grid',
      gridScale: 'grid',
      gridWidth: 'grid',
      orient: 'main',
      bandPosition: 'both',
      aria: 'main',
      description: 'main',
      domain: 'main',
      domainCap: 'main',
      domainColor: 'main',
      domainDash: 'main',
      domainDashOffset: 'main',
      domainOpacity: 'main',
      domainWidth: 'main',
      format: 'main',
      formatType: 'main',
      labelAlign: 'main',
      labelAngle: 'main',
      labelBaseline: 'main',
      labelBound: 'main',
      labelColor: 'main',
      labelFlush: 'main',
      labelFlushOffset: 'main',
      labelFont: 'main',
      labelFontSize: 'main',
      labelFontStyle: 'main',
      labelFontWeight: 'main',
      labelLimit: 'main',
      labelLineHeight: 'main',
      labelOffset: 'main',
      labelOpacity: 'main',
      labelOverlap: 'main',
      labelPadding: 'main',
      labels: 'main',
      labelSeparation: 'main',
      maxExtent: 'main',
      minExtent: 'main',
      offset: 'both',
      position: 'main',
      tickCap: 'main',
      tickColor: 'main',
      tickDash: 'main',
      tickDashOffset: 'main',
      tickMinStep: 'main',
      tickOffset: 'both',
      tickOpacity: 'main',
      tickRound: 'both',
      ticks: 'main',
      tickSize: 'main',
      tickWidth: 'both',
      title: 'main',
      titleAlign: 'main',
      titleAnchor: 'main',
      titleAngle: 'main',
      titleBaseline: 'main',
      titleColor: 'main',
      titleFont: 'main',
      titleFontSize: 'main',
      titleFontStyle: 'main',
      titleFontWeight: 'main',
      titleLimit: 'main',
      titleLineHeight: 'main',
      titleOpacity: 'main',
      titlePadding: 'main',
      titleX: 'main',
      titleY: 'main',
      encode: 'both',
      scale: 'both',
      tickBand: 'both',
      tickCount: 'both',
      tickExtra: 'both',
      translate: 'both',
      values: 'both',
      zindex: 'both' // this is actually set afterward, so it doesn't matter
  };
  const COMMON_AXIS_PROPERTIES_INDEX = {
      orient: 1,
      aria: 1,
      bandPosition: 1,
      description: 1,
      domain: 1,
      domainCap: 1,
      domainColor: 1,
      domainDash: 1,
      domainDashOffset: 1,
      domainOpacity: 1,
      domainWidth: 1,
      format: 1,
      formatType: 1,
      grid: 1,
      gridCap: 1,
      gridColor: 1,
      gridDash: 1,
      gridDashOffset: 1,
      gridOpacity: 1,
      gridWidth: 1,
      labelAlign: 1,
      labelAngle: 1,
      labelBaseline: 1,
      labelBound: 1,
      labelColor: 1,
      labelFlush: 1,
      labelFlushOffset: 1,
      labelFont: 1,
      labelFontSize: 1,
      labelFontStyle: 1,
      labelFontWeight: 1,
      labelLimit: 1,
      labelLineHeight: 1,
      labelOffset: 1,
      labelOpacity: 1,
      labelOverlap: 1,
      labelPadding: 1,
      labels: 1,
      labelSeparation: 1,
      maxExtent: 1,
      minExtent: 1,
      offset: 1,
      position: 1,
      tickBand: 1,
      tickCap: 1,
      tickColor: 1,
      tickCount: 1,
      tickDash: 1,
      tickDashOffset: 1,
      tickExtra: 1,
      tickMinStep: 1,
      tickOffset: 1,
      tickOpacity: 1,
      tickRound: 1,
      ticks: 1,
      tickSize: 1,
      tickWidth: 1,
      title: 1,
      titleAlign: 1,
      titleAnchor: 1,
      titleAngle: 1,
      titleBaseline: 1,
      titleColor: 1,
      titleFont: 1,
      titleFontSize: 1,
      titleFontStyle: 1,
      titleFontWeight: 1,
      titleLimit: 1,
      titleLineHeight: 1,
      titleOpacity: 1,
      titlePadding: 1,
      titleX: 1,
      titleY: 1,
      translate: 1,
      values: 1,
      zindex: 1
  };
  const AXIS_PROPERTIES_INDEX = Object.assign(Object.assign({}, COMMON_AXIS_PROPERTIES_INDEX), { style: 1, labelExpr: 1, encoding: 1 });
  function isAxisProperty(prop) {
      return !!AXIS_PROPERTIES_INDEX[prop];
  }
  const AXIS_CONFIGS_INDEX = {
      axis: 1,
      axisBand: 1,
      axisBottom: 1,
      axisDiscrete: 1,
      axisLeft: 1,
      axisPoint: 1,
      axisQuantitative: 1,
      axisRight: 1,
      axisTemporal: 1,
      axisTop: 1,
      axisX: 1,
      axisXBand: 1,
      axisXDiscrete: 1,
      axisXPoint: 1,
      axisXQuantitative: 1,
      axisXTemporal: 1,
      axisY: 1,
      axisYBand: 1,
      axisYDiscrete: 1,
      axisYPoint: 1,
      axisYQuantitative: 1,
      axisYTemporal: 1
  };
  const AXIS_CONFIGS = keys(AXIS_CONFIGS_INDEX);

  const AGGREGATE_OP_INDEX = {
      argmax: 1,
      argmin: 1,
      average: 1,
      count: 1,
      distinct: 1,
      product: 1,
      max: 1,
      mean: 1,
      median: 1,
      min: 1,
      missing: 1,
      q1: 1,
      q3: 1,
      ci0: 1,
      ci1: 1,
      stderr: 1,
      stdev: 1,
      stdevp: 1,
      sum: 1,
      valid: 1,
      values: 1,
      variance: 1,
      variancep: 1
  };
  const MULTIDOMAIN_SORT_OP_INDEX = {
      count: 1,
      min: 1,
      max: 1
  };
  function isArgminDef(a) {
      return !!a && !!a['argmin'];
  }
  function isArgmaxDef(a) {
      return !!a && !!a['argmax'];
  }
  function isAggregateOp(a) {
      return isString$1(a) && !!AGGREGATE_OP_INDEX[a];
  }
  const COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];
  function isCountingAggregateOp(aggregate) {
      return isString$1(aggregate) && contains$1(COUNTING_OPS, aggregate);
  }
  function isMinMaxOp(aggregate) {
      return isString$1(aggregate) && contains$1(['min', 'max'], aggregate);
  }
  /** Additive-based aggregation operations. These can be applied to stack. */
  const SUM_OPS = ['count', 'sum', 'distinct', 'valid', 'missing'];
  /**
   * Aggregation operators that always produce values within the range [domainMin, domainMax].
   */
  const SHARED_DOMAIN_OPS = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];
  const SHARED_DOMAIN_OP_INDEX = toSet$1(SHARED_DOMAIN_OPS);

  /*
   * Constants and utilities for encoding channels (Visual variables)
   * such as 'x', 'y', 'color'.
   */
  var __rest = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  // Facet
  const ROW = 'row';
  const COLUMN = 'column';
  const FACET = 'facet';
  // Position
  const X = 'x';
  const Y = 'y';
  const X2 = 'x2';
  const Y2 = 'y2';
  // Arc-Position
  const RADIUS = 'radius';
  const RADIUS2 = 'radius2';
  const THETA = 'theta';
  const THETA2 = 'theta2';
  // Geo Position
  const LATITUDE = 'latitude';
  const LONGITUDE = 'longitude';
  const LATITUDE2 = 'latitude2';
  const LONGITUDE2 = 'longitude2';
  // Mark property with scale
  const COLOR = 'color';
  const FILL = 'fill';
  const STROKE = 'stroke';
  const SHAPE = 'shape';
  const SIZE = 'size';
  const ANGLE = 'angle';
  const OPACITY = 'opacity';
  const FILLOPACITY = 'fillOpacity';
  const STROKEOPACITY = 'strokeOpacity';
  const STROKEWIDTH = 'strokeWidth';
  const STROKEDASH = 'strokeDash';
  // Non-scale channel
  const TEXT = 'text';
  const ORDER = 'order';
  const DETAIL = 'detail';
  const KEY = 'key';
  const TOOLTIP = 'tooltip';
  const HREF = 'href';
  const URL$1 = 'url';
  const DESCRIPTION = 'description';
  const POSITION_CHANNEL_INDEX = {
      x: 1,
      y: 1,
      x2: 1,
      y2: 1
  };
  const POLAR_POSITION_CHANNEL_INDEX = {
      theta: 1,
      theta2: 1,
      radius: 1,
      radius2: 1
  };
  function isPolarPositionChannel(c) {
      return c in POLAR_POSITION_CHANNEL_INDEX;
  }
  const GEO_POSIITON_CHANNEL_INDEX = {
      longitude: 1,
      longitude2: 1,
      latitude: 1,
      latitude2: 1
  };
  function getPositionChannelFromLatLong(channel) {
      switch (channel) {
          case LATITUDE:
              return 'y';
          case LATITUDE2:
              return 'y2';
          case LONGITUDE:
              return 'x';
          case LONGITUDE2:
              return 'x2';
      }
  }
  function isGeoPositionChannel(c) {
      return c in GEO_POSIITON_CHANNEL_INDEX;
  }
  const GEOPOSITION_CHANNELS = keys(GEO_POSIITON_CHANNEL_INDEX);
  const UNIT_CHANNEL_INDEX = Object.assign(Object.assign(Object.assign(Object.assign({}, POSITION_CHANNEL_INDEX), POLAR_POSITION_CHANNEL_INDEX), GEO_POSIITON_CHANNEL_INDEX), { 
      // color
      color: 1, fill: 1, stroke: 1, 
      // other non-position with scale
      opacity: 1, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 1, strokeDash: 1, size: 1, angle: 1, shape: 1, 
      // channels without scales
      order: 1, text: 1, detail: 1, key: 1, tooltip: 1, href: 1, url: 1, description: 1 });
  function isColorChannel(channel) {
      return channel === COLOR || channel === FILL || channel === STROKE;
  }
  const FACET_CHANNEL_INDEX = {
      row: 1,
      column: 1,
      facet: 1
  };
  const FACET_CHANNELS = keys(FACET_CHANNEL_INDEX);
  const CHANNEL_INDEX = Object.assign(Object.assign({}, UNIT_CHANNEL_INDEX), FACET_CHANNEL_INDEX);
  const CHANNELS = keys(CHANNEL_INDEX);
  const SINGLE_DEF_CHANNEL_INDEX = __rest(CHANNEL_INDEX, ["order", "detail", "tooltip"]);
  const SINGLE_DEF_UNIT_CHANNEL_INDEX = __rest(SINGLE_DEF_CHANNEL_INDEX, ["row", "column", "facet"]);
  function isSingleDefUnitChannel(str) {
      return !!SINGLE_DEF_UNIT_CHANNEL_INDEX[str];
  }
  function isChannel(str) {
      return !!CHANNEL_INDEX[str];
  }
  const SECONDARY_RANGE_CHANNEL = [X2, Y2, LATITUDE2, LONGITUDE2, THETA2, RADIUS2];
  function isSecondaryRangeChannel(c) {
      const main = getMainRangeChannel(c);
      return main !== c;
  }
  /**
   * Get the main channel for a range channel. E.g. `x` for `x2`.
   */
  function getMainRangeChannel(channel) {
      switch (channel) {
          case X2:
              return X;
          case Y2:
              return Y;
          case LATITUDE2:
              return LATITUDE;
          case LONGITUDE2:
              return LONGITUDE;
          case THETA2:
              return THETA;
          case RADIUS2:
              return RADIUS;
      }
      return channel;
  }
  function getVgPositionChannel(channel) {
      if (isPolarPositionChannel(channel)) {
          switch (channel) {
              case THETA:
                  return 'startAngle';
              case THETA2:
                  return 'endAngle';
              case RADIUS:
                  return 'outerRadius';
              case RADIUS2:
                  return 'innerRadius';
          }
      }
      return channel;
  }
  /**
   * Get the main channel for a range channel. E.g. `x` for `x2`.
   */
  function getSecondaryRangeChannel(channel) {
      switch (channel) {
          case X:
              return X2;
          case Y:
              return Y2;
          case LATITUDE:
              return LATITUDE2;
          case LONGITUDE:
              return LONGITUDE2;
          case THETA:
              return THETA2;
          case RADIUS:
              return RADIUS2;
      }
      return undefined;
  }
  function getSizeChannel(channel) {
      switch (channel) {
          case X:
          case X2:
              return 'width';
          case Y:
          case Y2:
              return 'height';
      }
      return undefined;
  }
  /**
   * Get the main channel for a range channel. E.g. `x` for `x2`.
   */
  function getOffsetChannel(channel) {
      switch (channel) {
          case X:
              return 'xOffset';
          case Y:
              return 'yOffset';
          case X2:
              return 'x2Offset';
          case Y2:
              return 'y2Offset';
          case THETA:
              return 'thetaOffset';
          case RADIUS:
              return 'radiusOffset';
          case THETA2:
              return 'theta2Offset';
          case RADIUS2:
              return 'radius2Offset';
      }
      return undefined;
  }
  // NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;
  const // The rest of unit channels then have scale
  NONPOSITION_CHANNEL_INDEX = __rest(UNIT_CHANNEL_INDEX, ["x", "y", "x2", "y2", "latitude", "longitude", "latitude2", "longitude2", "theta", "theta2", "radius", "radius2"]);
  const NONPOSITION_CHANNELS = keys(NONPOSITION_CHANNEL_INDEX);
  const POSITION_SCALE_CHANNEL_INDEX = {
      x: 1,
      y: 1
  };
  const POSITION_SCALE_CHANNELS = keys(POSITION_SCALE_CHANNEL_INDEX);
  function isXorY(channel) {
      return channel in POSITION_SCALE_CHANNEL_INDEX;
  }
  const POLAR_POSITION_SCALE_CHANNEL_INDEX = {
      theta: 1,
      radius: 1
  };
  const POLAR_POSITION_SCALE_CHANNELS = keys(POLAR_POSITION_SCALE_CHANNEL_INDEX);
  function getPositionScaleChannel(sizeType) {
      return sizeType === 'width' ? X : Y;
  }
  // NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y
  const NONPOSITION_SCALE_CHANNEL_INDEX = __rest(NONPOSITION_CHANNEL_INDEX, ["text", "tooltip", "href", "url", "description", "detail", "key", "order"]);
  const NONPOSITION_SCALE_CHANNELS = keys(NONPOSITION_SCALE_CHANNEL_INDEX);
  function isNonPositionScaleChannel(channel) {
      return !!NONPOSITION_CHANNEL_INDEX[channel];
  }
  /**
   * @returns whether Vega supports legends for a particular channel
   */
  function supportLegend(channel) {
      switch (channel) {
          case COLOR:
          case FILL:
          case STROKE:
          case SIZE:
          case SHAPE:
          case OPACITY:
          case STROKEWIDTH:
          case STROKEDASH:
              return true;
          case FILLOPACITY:
          case STROKEOPACITY:
          case ANGLE:
              return false;
      }
  }
  // Declare SCALE_CHANNEL_INDEX
  const SCALE_CHANNEL_INDEX = Object.assign(Object.assign(Object.assign({}, POSITION_SCALE_CHANNEL_INDEX), POLAR_POSITION_SCALE_CHANNEL_INDEX), NONPOSITION_SCALE_CHANNEL_INDEX);
  /** List of channels with scales */
  const SCALE_CHANNELS = keys(SCALE_CHANNEL_INDEX);
  function isScaleChannel(channel) {
      return !!SCALE_CHANNEL_INDEX[channel];
  }
  /**
   * Return whether a channel supports a particular mark type.
   * @param channel  channel name
   * @param mark the mark type
   * @return whether the mark supports the channel
   */
  function supportMark(channel, mark) {
      return getSupportedMark(channel)[mark];
  }
  const ALL_MARKS = {
      // all marks
      arc: 'always',
      area: 'always',
      bar: 'always',
      circle: 'always',
      geoshape: 'always',
      image: 'always',
      line: 'always',
      rule: 'always',
      point: 'always',
      rect: 'always',
      square: 'always',
      trail: 'always',
      text: 'always',
      tick: 'always'
  };
  const ALL_MARKS_EXCEPT_GEOSHAPE = __rest(ALL_MARKS, ["geoshape"]);
  /**
   * Return a dictionary showing whether a channel supports mark type.
   * @param channel
   * @return A dictionary mapping mark types to 'always', 'binned', or undefined
   */
  function getSupportedMark(channel) {
      switch (channel) {
          case COLOR:
          case FILL:
          case STROKE:
          // falls through
          case DESCRIPTION:
          case DETAIL:
          case KEY:
          case TOOLTIP:
          case HREF:
          case ORDER: // TODO: revise (order might not support rect, which is not stackable?)
          case OPACITY:
          case FILLOPACITY:
          case STROKEOPACITY:
          case STROKEWIDTH:
          // falls through
          case FACET:
          case ROW: // falls through
          case COLUMN:
              return ALL_MARKS;
          case X:
          case Y:
          case LATITUDE:
          case LONGITUDE:
              // all marks except geoshape. geoshape does not use X, Y -- it uses a projection
              return ALL_MARKS_EXCEPT_GEOSHAPE;
          case X2:
          case Y2:
          case LATITUDE2:
          case LONGITUDE2:
              return {
                  area: 'always',
                  bar: 'always',
                  image: 'always',
                  rect: 'always',
                  rule: 'always',
                  circle: 'binned',
                  point: 'binned',
                  square: 'binned',
                  tick: 'binned',
                  line: 'binned',
                  trail: 'binned'
              };
          case SIZE:
              return {
                  point: 'always',
                  tick: 'always',
                  rule: 'always',
                  circle: 'always',
                  square: 'always',
                  bar: 'always',
                  text: 'always',
                  line: 'always',
                  trail: 'always'
              };
          case STROKEDASH:
              return {
                  line: 'always',
                  point: 'always',
                  tick: 'always',
                  rule: 'always',
                  circle: 'always',
                  square: 'always',
                  bar: 'always',
                  geoshape: 'always'
              };
          case SHAPE:
              return { point: 'always', geoshape: 'always' };
          case TEXT:
              return { text: 'always' };
          case ANGLE:
              return { point: 'always', square: 'always', text: 'always' };
          case URL$1:
              return { image: 'always' };
          case THETA:
              return { text: 'always', arc: 'always' };
          case RADIUS:
              return { text: 'always', arc: 'always' };
          case THETA2:
          case RADIUS2:
              return { arc: 'always' };
      }
  }
  function rangeType(channel) {
      switch (channel) {
          case X:
          case Y:
          case THETA:
          case RADIUS:
          case SIZE:
          case ANGLE:
          case STROKEWIDTH:
          case OPACITY:
          case FILLOPACITY:
          case STROKEOPACITY:
          // X2 and Y2 use X and Y scales, so they similarly have continuous range. [falls through]
          case X2:
          case Y2:
          case THETA2:
          case RADIUS2:
              return undefined;
          case FACET:
          case ROW:
          case COLUMN:
          case SHAPE:
          case STROKEDASH:
          // TEXT, TOOLTIP, URL, and HREF have no scale but have discrete output [falls through]
          case TEXT:
          case TOOLTIP:
          case HREF:
          case URL$1:
          case DESCRIPTION:
              return 'discrete';
          // Color can be either continuous or discrete, depending on scale type.
          case COLOR:
          case FILL:
          case STROKE:
              return 'flexible';
          // No scale, no range type.
          case LATITUDE:
          case LONGITUDE:
          case LATITUDE2:
          case LONGITUDE2:
          case DETAIL:
          case KEY:
          case ORDER:
              return undefined;
      }
  }

  /**
   * Create a key for the bin configuration. Not for prebinned bin.
   */
  function binToString(bin) {
      if (isBoolean(bin)) {
          bin = normalizeBin(bin, undefined);
      }
      return ('bin' +
          keys(bin)
              .map(p => (isSelectionExtent(bin[p]) ? varName(`_${p}_${entries(bin[p])}`) : varName(`_${p}_${bin[p]}`)))
              .join(''));
  }
  /**
   * Vega-Lite should bin the data.
   */
  function isBinning(bin) {
      return bin === true || (isBinParams(bin) && !bin.binned);
  }
  /**
   * The data is already binned and so Vega-Lite should not bin it again.
   */
  function isBinned(bin) {
      return bin === 'binned' || (isBinParams(bin) && bin.binned === true);
  }
  function isBinParams(bin) {
      return isObject(bin);
  }
  function isSelectionExtent(extent) {
      return extent === null || extent === void 0 ? void 0 : extent['selection'];
  }
  function autoMaxBins(channel) {
      switch (channel) {
          case ROW:
          case COLUMN:
          case SIZE:
          case COLOR:
          case FILL:
          case STROKE:
          case STROKEWIDTH:
          case OPACITY:
          case FILLOPACITY:
          case STROKEOPACITY:
          // Facets and Size shouldn't have too many bins
          // We choose 6 like shape to simplify the rule [falls through]
          case SHAPE:
              return 6; // Vega's "shape" has 6 distinct values
          case STROKEDASH:
              return 4; // We only provide 5 different stroke dash values (but 4 is more effective)
          default:
              return 10;
      }
  }

  function invalidSpec(spec) {
      return `Invalid specification ${JSON.stringify(spec)}. Make sure the specification includes at least one of the following properties: "mark", "layer", "facet", "hconcat", "vconcat", "concat", or "repeat".`;
  }
  // FIT
  const FIT_NON_SINGLE = 'Autosize "fit" only works for single views and layered views.';
  function containerSizeNonSingle(name) {
      const uName = name == 'width' ? 'Width' : 'Height';
      return `${uName} "container" only works for single views and layered views.`;
  }
  function containerSizeNotCompatibleWithAutosize(name) {
      const uName = name == 'width' ? 'Width' : 'Height';
      const fitDirection = name == 'width' ? 'x' : 'y';
      return `${uName} "container" only works well with autosize "fit" or "fit-${fitDirection}".`;
  }
  function droppingFit(channel) {
      return channel
          ? `Dropping "fit-${channel}" because spec has discrete ${getSizeChannel(channel)}.`
          : `Dropping "fit" because spec has discrete size.`;
  }
  // VIEW SIZE
  function unknownField(channel) {
      return `Unknown field for ${channel}. Cannot calculate view size.`;
  }
  // SELECTION
  function cannotProjectOnChannelWithoutField(channel) {
      return `Cannot project a selection on encoding channel "${channel}", which has no field.`;
  }
  function cannotProjectAggregate(channel, aggregate) {
      return `Cannot project a selection on encoding channel "${channel}" as it uses an aggregate function ("${aggregate}").`;
  }
  function nearestNotSupportForContinuous(mark) {
      return `The "nearest" transform is not supported for ${mark} marks.`;
  }
  function selectionNotSupported(mark) {
      return `Selection not supported for ${mark} yet.`;
  }
  function selectionNotFound(name) {
      return `Cannot find a selection named "${name}".`;
  }
  const SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';
  const LEGEND_BINDINGS_MUST_HAVE_PROJECTION = 'Legend bindings are only supported for selections over an individual field or encoding channel.';
  function noSameUnitLookup(name) {
      return (`Cannot define and lookup the "${name}" selection in the same view. ` +
          `Try moving the lookup into a second, layered view?`);
  }
  const NEEDS_SAME_SELECTION = 'The same selection must be used to override scale domains in a layered view.';
  const INTERVAL_INITIALIZED_WITH_X_Y = 'Interval selections should be initialized using "x" and/or "y" keys.';
  // REPEAT
  function noSuchRepeatedValue(field) {
      return `Unknown repeated value "${field}".`;
  }
  function columnsNotSupportByRowCol(type) {
      return `The "columns" property cannot be used when "${type}" has nested row/column.`;
  }
  // CONCAT / REPEAT
  const CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).';
  // DATA
  function unrecognizedParse(p) {
      return `Unrecognized parse "${p}".`;
  }
  function differentParse(field, local, ancestor) {
      return `An ancestor parsed field "${field}" as ${ancestor} but a child wants to parse the field as ${local}.`;
  }
  const ADD_SAME_CHILD_TWICE = 'Attempt to add the same child twice.';
  // TRANSFORMS
  function invalidTransformIgnored(transform) {
      return `Ignoring an invalid transform: ${stringify(transform)}.`;
  }
  const NO_FIELDS_NEEDS_AS = 'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.';
  // ENCODING & FACET
  function customFormatTypeNotAllowed(channel) {
      return `Config.customFormatTypes is not true, thus custom format type and format for channel ${channel} are dropped.`;
  }
  function projectionOverridden(opt) {
      const { parentProjection, projection } = opt;
      return `Layer's shared projection ${stringify(parentProjection)} is overridden by a child projection ${stringify(projection)}.`;
  }
  const REPLACE_ANGLE_WITH_THETA = 'Arc marks uses theta channel rather than angle, replacing angle with theta.';
  function primitiveChannelDef(channel, type, value) {
      return `Channel ${channel} is a ${type}. Converted to {value: ${stringify(value)}}.`;
  }
  function invalidFieldType(type) {
      return `Invalid field type "${type}".`;
  }
  function invalidFieldTypeForCountAggregate(type, aggregate) {
      return `Invalid field type "${type}" for aggregate: "${aggregate}", using "quantitative" instead.`;
  }
  function invalidAggregate(aggregate) {
      return `Invalid aggregation operator "${aggregate}".`;
  }
  function droppingColor(type, opt) {
      const { fill, stroke } = opt;
      return `Dropping color ${type} as the plot also has ${fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke'}.`;
  }
  function emptyFieldDef(fieldDef, channel) {
      return `Dropping ${stringify(fieldDef)} from channel "${channel}" since it does not contain any data field, datum, value, or signal.`;
  }
  const LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';
  function incompatibleChannel(channel, markOrFacet, when) {
      return `${channel} dropped as it is incompatible with "${markOrFacet}"${when ? ` when ${when}` : ''}.`;
  }
  function invalidEncodingChannel(channel) {
      return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;
  }
  function facetChannelShouldBeDiscrete(channel) {
      return `${channel} encoding should be discrete (ordinal / nominal / binned).`;
  }
  function facetChannelDropped(channels) {
      return `Facet encoding dropped as ${channels.join(' and ')} ${channels.length > 1 ? 'are' : 'is'} also specified.`;
  }
  function discreteChannelCannotEncode(channel, type) {
      return `Using discrete channel "${channel}" to encode "${type}" field can be misleading as it does not encode ${type === 'ordinal' ? 'order' : 'magnitude'}.`;
  }
  // MARK
  function rangeMarkAlignmentCannotBeExpression(align) {
      return `The ${align} for range marks cannot be an expression`;
  }
  function lineWithRange(hasX2, hasY2) {
      const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';
      return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;
  }
  function orientOverridden(original, actual) {
      return `Specified orient "${original}" overridden with "${actual}".`;
  }
  const RANGE_STEP_DEPRECATED = `Scale's "rangeStep" is deprecated and will be removed in Vega-Lite 5.0. Please use "width"/"height": {"step": ...} instead. See https://vega.github.io/vega-lite/docs/size.html.`;
  function cannotUseScalePropertyWithNonColor(prop) {
      return `Cannot use the scale property "${prop}" with non-color channel.`;
  }
  function unaggregateDomainHasNoEffectForRawField(fieldDef) {
      return `Using unaggregated domain with raw field has no effect (${stringify(fieldDef)}).`;
  }
  function unaggregateDomainWithNonSharedDomainOp(aggregate) {
      return `Unaggregated domain not applicable for "${aggregate}" since it produces values outside the origin domain of the source data.`;
  }
  function unaggregatedDomainWithLogScale(fieldDef) {
      return `Unaggregated domain is currently unsupported for log scale (${stringify(fieldDef)}).`;
  }
  function cannotApplySizeToNonOrientedMark(mark) {
      return `Cannot apply size to non-oriented mark "${mark}".`;
  }
  function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {
      return `Channel "${channel}" does not work with "${scaleType}" scale. We are using "${defaultScaleType}" scale instead.`;
  }
  function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {
      return `FieldDef does not work with "${scaleType}" scale. We are using "${defaultScaleType}" scale instead.`;
  }
  function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {
      return `${channel}-scale's "${propName}" is dropped as it does not work with ${scaleType} scale.`;
  }
  function stepDropped(channel) {
      return `The step for "${channel}" is dropped because the ${channel === 'width' ? 'x' : 'y'} is continuous.`;
  }
  function mergeConflictingProperty(property, propertyOf, v1, v2) {
      return `Conflicting ${propertyOf.toString()} property "${property.toString()}" (${stringify(v1)} and ${stringify(v2)}). Using ${stringify(v1)}.`;
  }
  function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {
      return `Conflicting ${propertyOf.toString()} property "${property.toString()}" (${stringify(v1)} and ${stringify(v2)}). Using the union of the two domains.`;
  }
  function independentScaleMeansIndependentGuide(channel) {
      return `Setting the scale to be independent for "${channel}" means we also have to set the guide (axis or legend) to be independent.`;
  }
  function domainSortDropped(sort) {
      return `Dropping sort property ${stringify(sort)} as unioned domains only support boolean or op "count", "min", and "max".`;
  }
  const MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';
  const FACETED_INDEPENDENT_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.';
  const FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.';
  const FACETED_INDEPENDENT_SAME_SOURCE = 'Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.';
  // STACK
  function cannotStackRangedMark(channel) {
      return `Cannot stack "${channel}" if there is already "${channel}2".`;
  }
  function cannotStackNonLinearScale(scaleType) {
      return `Cannot stack non-linear scale (${scaleType}).`;
  }
  function stackNonSummativeAggregate(aggregate) {
      return `Stacking is applied even though the aggregate function is non-summative ("${aggregate}").`;
  }
  // TIMEUNIT
  function invalidTimeUnit(unitName, value) {
      return `Invalid ${unitName}: ${stringify(value)}.`;
  }
  function droppedDay(d) {
      return `Dropping day from datetime ${stringify(d)} as day cannot be combined with other units.`;
  }
  function errorBarCenterAndExtentAreNotNeeded(center, extent) {
      return `${extent ? 'extent ' : ''}${extent && center ? 'and ' : ''}${center ? 'center ' : ''}${extent && center ? 'are ' : 'is '}not needed when data are aggregated.`;
  }
  function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {
      return `${center} is not usually used with ${extent} for ${mark}.`;
  }
  function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {
      return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;
  }
  function errorBand1DNotSupport(property) {
      return `1D error band does not support ${property}.`;
  }
  // CHANNEL
  function channelRequiredForBinned(channel) {
      return `Channel ${channel} is required for "binned" bin.`;
  }
  function channelShouldNotBeUsedForBinned(channel) {
      return `Channel ${channel} should not be used with "binned" bin.`;
  }
  function domainRequiredForThresholdScale(channel) {
      return `Domain for ${channel} is required for threshold scale.`;
  }

  /**
   * Vega-Lite's singleton logger utility.
   */
  var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
  };
  var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, privateMap) {
      if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
  };
  /**
   * Main (default) Vega Logger instance for Vega-Lite.
   */
  const main = logger(Warn);
  let current = main;
  /**
   * Set the singleton logger to be a custom logger.
   */
  function set(newLogger) {
      current = newLogger;
      return current;
  }
  /**
   * Reset the main logger to use the default Vega Logger.
   */
  function reset() {
      current = main;
      return current;
  }
  function warn(...args) {
      current.warn(...args);
  }
  function debug(...args) {
      current.debug(...args);
  }

  // DateTime definition object
  function isDateTime(o) {
      if (o && isObject(o)) {
          for (const part of TIMEUNIT_PARTS) {
              if (part in o) {
                  return true;
              }
          }
      }
      return false;
  }
  const MONTHS = [
      'january',
      'february',
      'march',
      'april',
      'may',
      'june',
      'july',
      'august',
      'september',
      'october',
      'november',
      'december'
  ];
  const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));
  const DAYS$1 = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  const SHORT_DAYS = DAYS$1.map(d => d.substr(0, 3));
  function normalizeQuarter(q) {
      if (isNumeric(q)) {
          q = +q;
      }
      if (isNumber$1(q)) {
          if (q > 4) {
              warn(invalidTimeUnit('quarter', q));
          }
          // We accept 1-based quarter, so need to readjust to 0-based quarter
          return q - 1;
      }
      else {
          // Invalid quarter
          throw new Error(invalidTimeUnit('quarter', q));
      }
  }
  function normalizeMonth(m) {
      if (isNumeric(m)) {
          m = +m;
      }
      if (isNumber$1(m)) {
          // We accept 1-based month, so need to readjust to 0-based month
          return m - 1;
      }
      else {
          const lowerM = m.toLowerCase();
          const monthIndex = MONTHS.indexOf(lowerM);
          if (monthIndex !== -1) {
              return monthIndex; // 0 for january, ...
          }
          const shortM = lowerM.substr(0, 3);
          const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);
          if (shortMonthIndex !== -1) {
              return shortMonthIndex;
          }
          // Invalid month
          throw new Error(invalidTimeUnit('month', m));
      }
  }
  function normalizeDay(d) {
      if (isNumeric(d)) {
          d = +d;
      }
      if (isNumber$1(d)) {
          // mod so that this can be both 0-based where 0 = sunday
          // and 1-based where 7=sunday
          return d % 7;
      }
      else {
          const lowerD = d.toLowerCase();
          const dayIndex = DAYS$1.indexOf(lowerD);
          if (dayIndex !== -1) {
              return dayIndex; // 0 for january, ...
          }
          const shortD = lowerD.substr(0, 3);
          const shortDayIndex = SHORT_DAYS.indexOf(shortD);
          if (shortDayIndex !== -1) {
              return shortDayIndex;
          }
          // Invalid day
          throw new Error(invalidTimeUnit('day', d));
      }
  }
  /**
   * @param d the date.
   * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.
   * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]
   */
  function dateTimeParts(d, normalize) {
      const parts = [];
      if (normalize && d.day !== undefined) {
          if (keys(d).length > 1) {
              warn(droppedDay(d));
              d = duplicate(d);
              delete d.day;
          }
      }
      if (d.year !== undefined) {
          parts.push(d.year);
      }
      else {
          // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega
          // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).
          parts.push(2012);
      }
      if (d.month !== undefined) {
          const month = normalize ? normalizeMonth(d.month) : d.month;
          parts.push(month);
      }
      else if (d.quarter !== undefined) {
          const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;
          parts.push(isNumber$1(quarter) ? quarter * 3 : quarter + '*3');
      }
      else {
          parts.push(0); // months start at zero in JS
      }
      if (d.date !== undefined) {
          parts.push(d.date);
      }
      else if (d.day !== undefined) {
          // HACK: Day only works as a standalone unit
          // This is only correct because we always set year to 2006 for day
          const day = normalize ? normalizeDay(d.day) : d.day;
          parts.push(isNumber$1(day) ? day + 1 : day + '+1');
      }
      else {
          parts.push(1); // Date starts at 1 in JS
      }
      // Note: can't use TimeUnit enum here as importing it will create
      // circular dependency problem!
      for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {
          const unit = d[timeUnit];
          parts.push(typeof unit === 'undefined' ? 0 : unit);
      }
      return parts;
  }
  /**
   * Return Vega expression for a date time.
   *
   * @param d the date time.
   * @returns the Vega expression.
   */
  function dateTimeToExpr(d) {
      const parts = dateTimeParts(d, true);
      const string = parts.join(', ');
      if (d.utc) {
          return `utc(${string})`;
      }
      else {
          return `datetime(${string})`;
      }
  }
  /**
   * Return Vega expression for a date time expression.
   *
   * @param d the internal date time object with expression.
   * @returns the Vega expression.
   */
  function dateTimeExprToExpr(d) {
      const parts = dateTimeParts(d, false);
      const string = parts.join(', ');
      if (d.utc) {
          return `utc(${string})`;
      }
      else {
          return `datetime(${string})`;
      }
  }
  /**
   * @param d the date time.
   * @returns the timestamp.
   */
  function dateTimeToTimestamp(d) {
      const parts = dateTimeParts(d, true);
      if (d.utc) {
          return +new Date(Date.UTC(...parts));
      }
      else {
          return +new Date(...parts);
      }
  }

  var __rest$1 = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  /** Time Unit that only corresponds to only one part of Date objects. */
  const LOCAL_SINGLE_TIMEUNIT_INDEX = {
      year: 1,
      quarter: 1,
      month: 1,
      week: 1,
      day: 1,
      dayofyear: 1,
      date: 1,
      hours: 1,
      minutes: 1,
      seconds: 1,
      milliseconds: 1
  };
  const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);
  function isLocalSingleTimeUnit(timeUnit) {
      return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];
  }
  function isUTCTimeUnit(t) {
      return t.startsWith('utc');
  }
  function getLocalTimeUnit(t) {
      return t.substr(3);
  }
  // In order of increasing specificity
  const VEGALITE_TIMEFORMAT = {
      'year-month': '%b %Y ',
      'year-month-date': '%b %d, %Y '
  };
  function getTimeUnitParts(timeUnit) {
      const parts = [];
      for (const part of TIMEUNIT_PARTS) {
          if (containsTimeUnit(timeUnit, part)) {
              parts.push(part);
          }
      }
      return parts;
  }
  /** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */
  function containsTimeUnit(fullTimeUnit, timeUnit) {
      const index = fullTimeUnit.indexOf(timeUnit);
      if (index < 0) {
          return false;
      }
      // exclude milliseconds
      if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {
          return false;
      }
      // exclude dayofyear
      if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {
          return false;
      }
      if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {
          return false;
      }
      return true;
  }
  /**
   * Returns Vega expression for a given timeUnit and fieldRef
   */
  function fieldExpr(fullTimeUnit, field, { end } = { end: false }) {
      const fieldRef = accessPathWithDatum(field);
      const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';
      function func(timeUnit) {
          if (timeUnit === 'quarter') {
              // quarter starting at 0 (0,3,6,9).
              return `(${utc}quarter(${fieldRef})-1)`;
          }
          else {
              return `${utc}${timeUnit}(${fieldRef})`;
          }
      }
      let lastTimeUnit;
      const dateExpr = {};
      for (const part of TIMEUNIT_PARTS) {
          if (containsTimeUnit(fullTimeUnit, part)) {
              dateExpr[part] = func(part);
              lastTimeUnit = part;
          }
      }
      if (end) {
          dateExpr[lastTimeUnit] += '+1';
      }
      return dateTimeExprToExpr(dateExpr);
  }
  function timeUnitSpecifierExpression(timeUnit) {
      if (!timeUnit) {
          return undefined;
      }
      const timeUnitParts = getTimeUnitParts(timeUnit);
      return `timeUnitSpecifier(${fastJsonStableStringify(timeUnitParts)}, ${fastJsonStableStringify(VEGALITE_TIMEFORMAT)})`;
  }
  /**
   * Returns the signal expression used for axis labels for a time unit.
   */
  function formatExpression(timeUnit, field, isUTCScale) {
      if (!timeUnit) {
          return undefined;
      }
      const expr = timeUnitSpecifierExpression(timeUnit);
      // We only use utcFormat for utc scale
      // For utc time units, the data is already converted as a part of timeUnit transform.
      // Thus, utc time units should use timeFormat to avoid shifting the time twice.
      const utc = isUTCScale || isUTCTimeUnit(timeUnit);
      return `${utc ? 'utc' : 'time'}Format(${field}, ${expr})`;
  }
  function normalizeTimeUnit(timeUnit) {
      if (!timeUnit) {
          return undefined;
      }
      let params;
      if (isString$1(timeUnit)) {
          params = {
              unit: timeUnit
          };
      }
      else if (isObject(timeUnit)) {
          params = Object.assign(Object.assign({}, timeUnit), (timeUnit.unit ? { unit: timeUnit.unit } : {}));
      }
      if (isUTCTimeUnit(params.unit)) {
          params.utc = true;
          params.unit = getLocalTimeUnit(params.unit);
      }
      return params;
  }
  function timeUnitToString(tu) {
      const _a = normalizeTimeUnit(tu), { utc } = _a, rest = __rest$1(_a, ["utc"]);
      if (rest.unit) {
          return ((utc ? 'utc' : '') +
              keys(rest)
                  .map(p => varName(`${p === 'unit' ? '' : `_${p}_`}${rest[p]}`))
                  .join(''));
      }
      else {
          // when maxbins is specified instead of units
          return ((utc ? 'utc' : '') +
              'timeunit' +
              keys(rest)
                  .map(p => varName(`_${p}_${rest[p]}`))
                  .join(''));
      }
  }

  function isSignalRef(o) {
      return o && !!o['signal'];
  }
  function isVgRangeStep(range) {
      return !!range['step'];
  }
  function isDataRefUnionedDomain(domain) {
      if (!isArray(domain)) {
          return 'fields' in domain && !('data' in domain);
      }
      return false;
  }
  function isFieldRefUnionDomain(domain) {
      if (!isArray(domain)) {
          return 'fields' in domain && 'data' in domain;
      }
      return false;
  }
  function isDataRefDomain(domain) {
      if (!isArray(domain)) {
          return 'field' in domain && 'data' in domain;
      }
      return false;
  }
  const VG_MARK_CONFIG_INDEX = {
      aria: 1,
      description: 1,
      ariaRole: 1,
      ariaRoleDescription: 1,
      blend: 1,
      opacity: 1,
      fill: 1,
      fillOpacity: 1,
      stroke: 1,
      strokeCap: 1,
      strokeWidth: 1,
      strokeOpacity: 1,
      strokeDash: 1,
      strokeDashOffset: 1,
      strokeJoin: 1,
      strokeOffset: 1,
      strokeMiterLimit: 1,
      startAngle: 1,
      endAngle: 1,
      padAngle: 1,
      innerRadius: 1,
      outerRadius: 1,
      size: 1,
      shape: 1,
      interpolate: 1,
      tension: 1,
      orient: 1,
      align: 1,
      baseline: 1,
      text: 1,
      dir: 1,
      dx: 1,
      dy: 1,
      ellipsis: 1,
      limit: 1,
      radius: 1,
      theta: 1,
      angle: 1,
      font: 1,
      fontSize: 1,
      fontWeight: 1,
      fontStyle: 1,
      lineBreak: 1,
      lineHeight: 1,
      cursor: 1,
      href: 1,
      tooltip: 1,
      cornerRadius: 1,
      cornerRadiusTopLeft: 1,
      cornerRadiusTopRight: 1,
      cornerRadiusBottomLeft: 1,
      cornerRadiusBottomRight: 1,
      aspect: 1,
      width: 1,
      height: 1,
      url: 1,
      smooth: 1
      // commented below are vg channel that do not have mark config.
      // x: 1,
      // y: 1,
      // x2: 1,
      // y2: 1,
      // xc'|'yc'
      // clip: 1,
      // path: 1,
      // url: 1,
  };
  const VG_MARK_CONFIGS = keys(VG_MARK_CONFIG_INDEX);
  const VG_MARK_INDEX = {
      arc: 1,
      area: 1,
      group: 1,
      image: 1,
      line: 1,
      path: 1,
      rect: 1,
      rule: 1,
      shape: 1,
      symbol: 1,
      text: 1,
      trail: 1
  };
  // Vega's cornerRadius channels.
  const VG_CORNERRADIUS_CHANNELS = [
      'cornerRadius',
      'cornerRadiusTopLeft',
      'cornerRadiusTopRight',
      'cornerRadiusBottomLeft',
      'cornerRadiusBottomRight'
  ];

  function isSelectionPredicate(predicate) {
      return predicate === null || predicate === void 0 ? void 0 : predicate['selection'];
  }
  function isFieldEqualPredicate(predicate) {
      return predicate && !!predicate.field && predicate.equal !== undefined;
  }
  function isFieldLTPredicate(predicate) {
      return predicate && !!predicate.field && predicate.lt !== undefined;
  }
  function isFieldLTEPredicate(predicate) {
      return predicate && !!predicate.field && predicate.lte !== undefined;
  }
  function isFieldGTPredicate(predicate) {
      return predicate && !!predicate.field && predicate.gt !== undefined;
  }
  function isFieldGTEPredicate(predicate) {
      return predicate && !!predicate.field && predicate.gte !== undefined;
  }
  function isFieldRangePredicate(predicate) {
      if (predicate && predicate.field) {
          if (isArray(predicate.range) && predicate.range.length === 2) {
              return true;
          }
          else if (isSignalRef(predicate.range)) {
              return true;
          }
      }
      return false;
  }
  function isFieldOneOfPredicate(predicate) {
      return (predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility
      );
  }
  function isFieldValidPredicate(predicate) {
      return predicate && !!predicate.field && predicate.valid !== undefined;
  }
  function isFieldPredicate(predicate) {
      return (isFieldOneOfPredicate(predicate) ||
          isFieldEqualPredicate(predicate) ||
          isFieldRangePredicate(predicate) ||
          isFieldLTPredicate(predicate) ||
          isFieldGTPredicate(predicate) ||
          isFieldLTEPredicate(predicate) ||
          isFieldGTEPredicate(predicate));
  }
  function predicateValueExpr(v, timeUnit) {
      return valueExpr(v, { timeUnit, wrapTime: true });
  }
  function predicateValuesExpr(vals, timeUnit) {
      return vals.map(v => predicateValueExpr(v, timeUnit));
  }
  // This method is used by Voyager. Do not change its behavior without changing Voyager.
  function fieldFilterExpression(predicate, useInRange = true) {
      var _a;
      const { field } = predicate;
      const timeUnit = (_a = normalizeTimeUnit(predicate.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
      const fieldExpr$1 = timeUnit
          ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.
              // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline
              // TODO: support utc
              'time(' + fieldExpr(timeUnit, field) + ')'
          : vgField(predicate, { expr: 'datum' });
      if (isFieldEqualPredicate(predicate)) {
          return fieldExpr$1 + '===' + predicateValueExpr(predicate.equal, timeUnit);
      }
      else if (isFieldLTPredicate(predicate)) {
          const upper = predicate.lt;
          return `${fieldExpr$1}<${predicateValueExpr(upper, timeUnit)}`;
      }
      else if (isFieldGTPredicate(predicate)) {
          const lower = predicate.gt;
          return `${fieldExpr$1}>${predicateValueExpr(lower, timeUnit)}`;
      }
      else if (isFieldLTEPredicate(predicate)) {
          const upper = predicate.lte;
          return `${fieldExpr$1}<=${predicateValueExpr(upper, timeUnit)}`;
      }
      else if (isFieldGTEPredicate(predicate)) {
          const lower = predicate.gte;
          return `${fieldExpr$1}>=${predicateValueExpr(lower, timeUnit)}`;
      }
      else if (isFieldOneOfPredicate(predicate)) {
          return `indexof([${predicateValuesExpr(predicate.oneOf, timeUnit).join(',')}], ${fieldExpr$1}) !== -1`;
      }
      else if (isFieldValidPredicate(predicate)) {
          return fieldValidPredicate(fieldExpr$1, predicate.valid);
      }
      else if (isFieldRangePredicate(predicate)) {
          const { range } = predicate;
          const lower = isSignalRef(range) ? { signal: `${range.signal}[0]` } : range[0];
          const upper = isSignalRef(range) ? { signal: `${range.signal}[1]` } : range[1];
          if (lower !== null && upper !== null && useInRange) {
              return ('inrange(' +
                  fieldExpr$1 +
                  ', [' +
                  predicateValueExpr(lower, timeUnit) +
                  ', ' +
                  predicateValueExpr(upper, timeUnit) +
                  '])');
          }
          const exprs = [];
          if (lower !== null) {
              exprs.push(`${fieldExpr$1} >= ${predicateValueExpr(lower, timeUnit)}`);
          }
          if (upper !== null) {
              exprs.push(`${fieldExpr$1} <= ${predicateValueExpr(upper, timeUnit)}`);
          }
          return exprs.length > 0 ? exprs.join(' && ') : 'true';
      }
      /* istanbul ignore next: it should never reach here */
      throw new Error(`Invalid field predicate: ${JSON.stringify(predicate)}`);
  }
  function fieldValidPredicate(fieldExpr, valid = true) {
      if (valid) {
          return `isValid(${fieldExpr}) && isFinite(+${fieldExpr})`;
      }
      else {
          return `!isValid(${fieldExpr}) || !isFinite(+${fieldExpr})`;
      }
  }
  function normalizePredicate(f) {
      var _a;
      if (isFieldPredicate(f) && f.timeUnit) {
          return Object.assign(Object.assign({}, f), { timeUnit: (_a = normalizeTimeUnit(f.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit });
      }
      return f;
  }

  /**
   * Data type based on level of measurement
   */
  const Type = {
      quantitative: 'quantitative',
      ordinal: 'ordinal',
      temporal: 'temporal',
      nominal: 'nominal',
      geojson: 'geojson'
  };
  const QUANTITATIVE = Type.quantitative;
  const ORDINAL = Type.ordinal;
  const TEMPORAL = Type.temporal;
  const NOMINAL = Type.nominal;
  const GEOJSON = Type.geojson;
  /**
   * Get full, lowercase type name for a given type.
   * @param  type
   * @return Full type name.
   */
  function getFullName(type) {
      if (type) {
          type = type.toLowerCase();
          switch (type) {
              case 'q':
              case QUANTITATIVE:
                  return 'quantitative';
              case 't':
              case TEMPORAL:
                  return 'temporal';
              case 'o':
              case ORDINAL:
                  return 'ordinal';
              case 'n':
              case NOMINAL:
                  return 'nominal';
              case GEOJSON:
                  return 'geojson';
          }
      }
      // If we get invalid input, return undefined type.
      return undefined;
  }

  var __rest$2 = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  const ScaleType = {
      // Continuous - Quantitative
      LINEAR: 'linear',
      LOG: 'log',
      POW: 'pow',
      SQRT: 'sqrt',
      SYMLOG: 'symlog',
      IDENTITY: 'identity',
      SEQUENTIAL: 'sequential',
      // Continuous - Time
      TIME: 'time',
      UTC: 'utc',
      // Discretizing scales
      QUANTILE: 'quantile',
      QUANTIZE: 'quantize',
      THRESHOLD: 'threshold',
      BIN_ORDINAL: 'bin-ordinal',
      // Discrete scales
      ORDINAL: 'ordinal',
      POINT: 'point',
      BAND: 'band'
  };
  /**
   * Index for scale categories -- only scale of the same categories can be merged together.
   * Current implementation is trying to be conservative and avoid merging scale type that might not work together
   */
  const SCALE_CATEGORY_INDEX = {
      linear: 'numeric',
      log: 'numeric',
      pow: 'numeric',
      sqrt: 'numeric',
      symlog: 'numeric',
      identity: 'numeric',
      sequential: 'numeric',
      time: 'time',
      utc: 'time',
      ordinal: 'ordinal',
      'bin-ordinal': 'bin-ordinal',
      point: 'ordinal-position',
      band: 'ordinal-position',
      quantile: 'discretizing',
      quantize: 'discretizing',
      threshold: 'discretizing'
  };
  /**
   * Whether the two given scale types can be merged together.
   */
  function scaleCompatible(scaleType1, scaleType2) {
      const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];
      const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];
      return (scaleCategory1 === scaleCategory2 ||
          (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||
          (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time'));
  }
  /**
   * Index for scale precedence -- high score = higher priority for merging.
   */
  const SCALE_PRECEDENCE_INDEX = {
      // numeric
      linear: 0,
      log: 1,
      pow: 1,
      sqrt: 1,
      symlog: 1,
      identity: 1,
      sequential: 1,
      // time
      time: 0,
      utc: 0,
      // ordinal-position -- these have higher precedence than continuous scales as they support more types of data
      point: 10,
      band: 11,
      // non grouped types
      ordinal: 0,
      'bin-ordinal': 0,
      quantile: 0,
      quantize: 0,
      threshold: 0
  };
  /**
   * Return scale categories -- only scale of the same categories can be merged together.
   */
  function scaleTypePrecedence(scaleType) {
      return SCALE_PRECEDENCE_INDEX[scaleType];
  }
  const CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];
  const CONTINUOUS_TO_CONTINUOUS_INDEX = toSet$1(CONTINUOUS_TO_CONTINUOUS_SCALES);
  const QUANTITATIVE_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog'];
  const QUANTITATIVE_SCALES_INDEX = toSet$1(QUANTITATIVE_SCALES);
  function isQuantitative(type) {
      return type in QUANTITATIVE_SCALES_INDEX;
  }
  const CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];
  const CONTINUOUS_TO_DISCRETE_INDEX = toSet$1(CONTINUOUS_TO_DISCRETE_SCALES);
  const CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat([
      'quantile',
      'quantize',
      'threshold',
      'sequential',
      'identity'
  ]);
  const CONTINUOUS_DOMAIN_INDEX = toSet$1(CONTINUOUS_DOMAIN_SCALES);
  const DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];
  const DISCRETE_DOMAIN_INDEX = toSet$1(DISCRETE_DOMAIN_SCALES);
  function hasDiscreteDomain(type) {
      return type in DISCRETE_DOMAIN_INDEX;
  }
  function hasContinuousDomain(type) {
      return type in CONTINUOUS_DOMAIN_INDEX;
  }
  function isContinuousToContinuous(type) {
      return type in CONTINUOUS_TO_CONTINUOUS_INDEX;
  }
  function isContinuousToDiscrete(type) {
      return type in CONTINUOUS_TO_DISCRETE_INDEX;
  }
  const defaultScaleConfig = {
      pointPadding: 0.5,
      barBandPaddingInner: 0.1,
      rectBandPaddingInner: 0,
      minBandSize: 2,
      minFontSize: 8,
      maxFontSize: 40,
      minOpacity: 0.3,
      maxOpacity: 0.8,
      // FIXME: revise if these *can* become ratios of width/height step
      minSize: 9,
      minStrokeWidth: 1,
      maxStrokeWidth: 4,
      quantileCount: 4,
      quantizeCount: 4
  };
  function isExtendedScheme(scheme) {
      return !isString$1(scheme) && !!scheme['name'];
  }
  function isSelectionDomain(domain) {
      return domain === null || domain === void 0 ? void 0 : domain['selection'];
  }
  function isDomainUnionWith(domain) {
      return domain && domain['unionWith'];
  }
  const SCALE_PROPERTY_INDEX = {
      type: 1,
      domain: 1,
      domainMax: 1,
      domainMin: 1,
      domainMid: 1,
      align: 1,
      range: 1,
      rangeMax: 1,
      rangeMin: 1,
      scheme: 1,
      bins: 1,
      // Other properties
      reverse: 1,
      round: 1,
      // quantitative / time
      clamp: 1,
      nice: 1,
      // quantitative
      base: 1,
      exponent: 1,
      constant: 1,
      interpolate: 1,
      zero: 1,
      // band/point
      padding: 1,
      paddingInner: 1,
      paddingOuter: 1
  };
  const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = __rest$2(SCALE_PROPERTY_INDEX, ["type", "domain", "range", "rangeMax", "rangeMin", "scheme"]);
  const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = keys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
  function scaleTypeSupportProperty(scaleType, propName) {
      switch (propName) {
          case 'type':
          case 'domain':
          case 'reverse':
          case 'range':
              return true;
          case 'scheme':
          case 'interpolate':
              return !contains$1(['point', 'band', 'identity'], scaleType);
          case 'bins':
              return !contains$1(['point', 'band', 'identity', 'ordinal'], scaleType);
          case 'round':
              return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';
          case 'padding':
          case 'rangeMin':
          case 'rangeMax':
              return isContinuousToContinuous(scaleType) || contains$1(['point', 'band'], scaleType);
          case 'paddingOuter':
          case 'align':
              return contains$1(['point', 'band'], scaleType);
          case 'paddingInner':
              return scaleType === 'band';
          case 'domainMax':
          case 'domainMid':
          case 'domainMin':
          case 'clamp':
              return isContinuousToContinuous(scaleType);
          case 'nice':
              return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';
          case 'exponent':
              return scaleType === 'pow';
          case 'base':
              return scaleType === 'log';
          case 'constant':
              return scaleType === 'symlog';
          case 'zero':
              return (hasContinuousDomain(scaleType) &&
                  !contains$1([
                      'log',
                      'time',
                      'utc',
                      'threshold',
                      'quantile' // quantile depends on distribution so zero does not matter
                  ], scaleType));
      }
  }
  /**
   * Returns undefined if the input channel supports the input scale property name
   */
  function channelScalePropertyIncompatability(channel, propName) {
      switch (propName) {
          case 'interpolate':
          case 'scheme':
          case 'domainMid':
              if (!isColorChannel(channel)) {
                  return cannotUseScalePropertyWithNonColor(channel);
              }
              return undefined;
          case 'align':
          case 'type':
          case 'bins':
          case 'domain':
          case 'domainMax':
          case 'domainMin':
          case 'range':
          case 'base':
          case 'exponent':
          case 'constant':
          case 'nice':
          case 'padding':
          case 'paddingInner':
          case 'paddingOuter':
          case 'rangeMax':
          case 'rangeMin':
          case 'reverse':
          case 'round':
          case 'clamp':
          case 'zero':
              return undefined; // GOOD!
      }
  }
  function scaleTypeSupportDataType(specifiedType, fieldDefType) {
      if (contains$1([ORDINAL, NOMINAL], fieldDefType)) {
          return specifiedType === undefined || hasDiscreteDomain(specifiedType);
      }
      else if (fieldDefType === TEMPORAL) {
          return contains$1([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);
      }
      else if (fieldDefType === QUANTITATIVE) {
          return contains$1([
              ScaleType.LOG,
              ScaleType.POW,
              ScaleType.SQRT,
              ScaleType.SYMLOG,
              ScaleType.QUANTILE,
              ScaleType.QUANTIZE,
              ScaleType.THRESHOLD,
              ScaleType.LINEAR,
              undefined
          ], specifiedType);
      }
      return true;
  }
  function channelSupportScaleType(channel, scaleType) {
      if (!isScaleChannel(channel)) {
          return false;
      }
      switch (channel) {
          case X:
          case Y:
          case THETA:
          case RADIUS:
              return isContinuousToContinuous(scaleType) || contains$1(['band', 'point'], scaleType);
          case SIZE: // TODO: size and opacity can support ordinal with more modification
          case STROKEWIDTH:
          case OPACITY:
          case FILLOPACITY:
          case STROKEOPACITY:
          case ANGLE:
              // Although it generally doesn't make sense to use band with size and opacity,
              // it can also work since we use band: 0.5 to get midpoint.
              return (isContinuousToContinuous(scaleType) ||
                  isContinuousToDiscrete(scaleType) ||
                  contains$1(['band', 'point', 'ordinal'], scaleType));
          case COLOR:
          case FILL:
          case STROKE:
              return scaleType !== 'band'; // band does not make sense with color
          case STROKEDASH:
              return scaleType === 'ordinal' || isContinuousToDiscrete(scaleType);
          case SHAPE:
              return scaleType === 'ordinal'; // shape = lookup only
      }
  }

  function isExprRef(o) {
      return o && !!o['expr'];
  }
  function replaceExprRefInIndex(index) {
      const props = keys(index || {});
      const newIndex = {};
      for (const prop of props) {
          newIndex[prop] = signalRefOrValue(index[prop]);
      }
      return newIndex;
  }

  /**
   * All types of primitive marks.
   */
  const Mark = {
      arc: 'arc',
      area: 'area',
      bar: 'bar',
      image: 'image',
      line: 'line',
      point: 'point',
      rect: 'rect',
      rule: 'rule',
      text: 'text',
      tick: 'tick',
      trail: 'trail',
      circle: 'circle',
      square: 'square',
      geoshape: 'geoshape'
  };
  const ARC = Mark.arc;
  const AREA = Mark.area;
  const BAR = Mark.bar;
  const IMAGE = Mark.image;
  const LINE = Mark.line;
  const POINT = Mark.point;
  const RECT = Mark.rect;
  const RULE = Mark.rule;
  const TEXT$1 = Mark.text;
  const TICK = Mark.tick;
  const TRAIL = Mark.trail;
  const CIRCLE = Mark.circle;
  const SQUARE = Mark.square;
  const GEOSHAPE = Mark.geoshape;
  function isPathMark(m) {
      return contains$1(['line', 'area', 'trail'], m);
  }
  function isRectBasedMark(m) {
      return contains$1(['rect', 'bar', 'image', 'arc' /* arc is rect/interval in polar coordinate */], m);
  }
  const PRIMITIVE_MARKS = keys(Mark);
  function isMarkDef(mark) {
      return mark['type'];
  }
  const PRIMITIVE_MARK_INDEX = toSet$1(PRIMITIVE_MARKS);
  const STROKE_CONFIG = [
      'stroke',
      'strokeWidth',
      'strokeDash',
      'strokeDashOffset',
      'strokeOpacity',
      'strokeJoin',
      'strokeMiterLimit'
  ];
  const FILL_CONFIG = ['fill', 'fillOpacity'];
  const FILL_STROKE_CONFIG = [...STROKE_CONFIG, ...FILL_CONFIG];
  const VL_ONLY_MARK_CONFIG_INDEX = {
      color: 1,
      filled: 1,
      invalid: 1,
      order: 1,
      radius2: 1,
      theta2: 1,
      timeUnitBand: 1,
      timeUnitBandPosition: 1
  };
  const VL_ONLY_MARK_CONFIG_PROPERTIES = keys(VL_ONLY_MARK_CONFIG_INDEX);
  const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
      area: ['line', 'point'],
      bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
      rect: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
      line: ['point'],
      tick: ['bandSize', 'thickness']
  };
  const defaultMarkConfig = {
      color: '#4c78a8',
      invalid: 'filter',
      timeUnitBand: 1
  };
  const MARK_CONFIG_INDEX = {
      mark: 1,
      arc: 1,
      area: 1,
      bar: 1,
      circle: 1,
      image: 1,
      line: 1,
      point: 1,
      rect: 1,
      rule: 1,
      square: 1,
      text: 1,
      tick: 1,
      trail: 1,
      geoshape: 1
  };
  const MARK_CONFIGS = keys(MARK_CONFIG_INDEX);
  const BAR_CORNER_RADIUS_INDEX = {
      horizontal: ['cornerRadiusTopRight', 'cornerRadiusBottomRight'],
      vertical: ['cornerRadiusTopLeft', 'cornerRadiusTopRight']
  };
  const DEFAULT_RECT_BAND_SIZE = 5;
  const defaultBarConfig = {
      binSpacing: 1,
      continuousBandSize: DEFAULT_RECT_BAND_SIZE,
      timeUnitBandPosition: 0.5
  };
  const defaultRectConfig = {
      binSpacing: 0,
      continuousBandSize: DEFAULT_RECT_BAND_SIZE,
      timeUnitBandPosition: 0.5
  };
  const defaultTickConfig = {
      thickness: 1
  };
  function getMarkType(m) {
      return isMarkDef(m) ? m.type : m;
  }

  function midPointRefWithPositionInvalidTest(params) {
      const { channel, channelDef, markDef, scale, config } = params;
      const ref = midPoint(params);
      // Wrap to check if the positional value is invalid, if so, plot the point on the min value
      if (
      // Only this for field def without counting aggregate (as count wouldn't be null)
      isFieldDef(channelDef) &&
          !isCountingAggregateOp(channelDef.aggregate) &&
          // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)
          scale &&
          isContinuousToContinuous(scale.get('type')) &&
          scale.get('zero') === false) {
          return wrapPositionInvalidTest({
              fieldDef: channelDef,
              channel,
              markDef,
              ref,
              config
          });
      }
      return ref;
  }
  function wrapPositionInvalidTest({ fieldDef, channel, markDef, ref, config }) {
      if (isPathMark(markDef.type)) {
          // path mark already use defined to skip points, no need to do it here.
          return ref;
      }
      const invalid = getMarkPropOrConfig('invalid', markDef, config);
      if (invalid === null) {
          // if there is no invalid filter, don't do the invalid test
          return ref;
      }
      return [fieldInvalidTestValueRef(fieldDef, channel), ref];
  }
  function fieldInvalidTestValueRef(fieldDef, channel) {
      const test = fieldInvalidPredicate(fieldDef, true);
      const mainChannel = getMainRangeChannel(channel); // we can cast here as the output can't be other things.
      const zeroValueRef = mainChannel === 'y'
          ? { field: { group: 'height' } }
          : // x / angle / radius can all use 0
              { value: 0 };
      return Object.assign({ test }, zeroValueRef);
  }
  function fieldInvalidPredicate(field, invalid = true) {
      return fieldValidPredicate(isString$1(field) ? field : vgField(field, { expr: 'datum' }), !invalid);
  }
  function datumDefToExpr(datumDef) {
      const { datum } = datumDef;
      if (isDateTime(datum)) {
          return dateTimeToExpr(datum);
      }
      return `${JSON.stringify(datum)}`;
  }
  function valueRefForFieldOrDatumDef(fieldDef, scaleName, opt, encode) {
      const ref = {};
      if (scaleName) {
          ref.scale = scaleName;
      }
      if (isDatumDef(fieldDef)) {
          const { datum } = fieldDef;
          if (isDateTime(datum)) {
              ref.signal = dateTimeToExpr(datum);
          }
          else if (isSignalRef(datum)) {
              ref.signal = datum.signal;
          }
          else if (isExprRef(datum)) {
              ref.signal = datum.expr;
          }
          else {
              ref.value = datum;
          }
      }
      else {
          ref.field = vgField(fieldDef, opt);
      }
      if (encode) {
          const { offset, band } = encode;
          if (offset) {
              ref.offset = offset;
          }
          if (band) {
              ref.band = band;
          }
      }
      return ref;
  }
  /**
   * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.
   */
  function interpolatedSignalRef({ scaleName, fieldOrDatumDef, fieldOrDatumDef2, offset, startSuffix, band = 0.5 }) {
      const expr = 0 < band && band < 1 ? 'datum' : undefined;
      const start = vgField(fieldOrDatumDef, { expr, suffix: startSuffix });
      const end = fieldOrDatumDef2 !== undefined
          ? vgField(fieldOrDatumDef2, { expr })
          : vgField(fieldOrDatumDef, { suffix: 'end', expr });
      const ref = {};
      if (band === 0 || band === 1) {
          ref.scale = scaleName;
          const val = band === 0 ? start : end;
          ref.field = val;
      }
      else {
          const datum = `${band} * ${start} + ${1 - band} * ${end}`;
          ref.signal = `scale("${scaleName}", ${datum})`;
      }
      if (offset) {
          ref.offset = offset;
      }
      return ref;
  }
  /**
   * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.
   */
  function midPoint({ channel, channelDef, channel2Def, markDef, config, scaleName, scale, stack, offset, defaultRef, band }) {
      var _a;
      // TODO: datum support
      if (channelDef) {
          /* istanbul ignore else */
          if (isFieldOrDatumDef(channelDef)) {
              if (isTypedFieldDef(channelDef)) {
                  band = band !== null && band !== void 0 ? band : getBand({
                      channel,
                      fieldDef: channelDef,
                      fieldDef2: channel2Def,
                      markDef,
                      stack,
                      config,
                      isMidPoint: true
                  });
                  const { bin, timeUnit, type } = channelDef;
                  if (isBinning(bin) || (band && timeUnit && type === TEMPORAL)) {
                      // Use middle only for x an y to place marks in the center between start and end of the bin range.
                      // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.
                      if (stack && stack.impute) {
                          // For stack, we computed bin_mid so we can impute.
                          return valueRefForFieldOrDatumDef(channelDef, scaleName, { binSuffix: 'mid' }, { offset });
                      }
                      if (band) {
                          // if band = 0, no need to call interpolation
                          // For non-stack, we can just calculate bin mid on the fly using signal.
                          return interpolatedSignalRef({ scaleName, fieldOrDatumDef: channelDef, band, offset });
                      }
                      return valueRefForFieldOrDatumDef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {}, {
                          offset
                      });
                  }
                  else if (isBinned(bin)) {
                      if (isFieldDef(channel2Def)) {
                          return interpolatedSignalRef({
                              scaleName,
                              fieldOrDatumDef: channelDef,
                              fieldOrDatumDef2: channel2Def,
                              band,
                              offset
                          });
                      }
                      else {
                          const channel2 = channel === X ? X2 : Y2;
                          warn(channelRequiredForBinned(channel2));
                      }
                  }
              }
              const scaleType = scale === null || scale === void 0 ? void 0 : scale.get('type');
              return valueRefForFieldOrDatumDef(channelDef, scaleName, hasDiscreteDomain(scaleType) ? { binSuffix: 'range' } : {}, // no need for bin suffix if there is no scale
              {
                  offset,
                  // For band, to get mid point, need to offset by half of the band
                  band: scaleType === 'band' ? (_a = band !== null && band !== void 0 ? band : channelDef.band) !== null && _a !== void 0 ? _a : 0.5 : undefined
              });
          }
          else if (isValueDef(channelDef)) {
              const value = channelDef.value;
              const offsetMixins = offset ? { offset } : {};
              return Object.assign(Object.assign({}, widthHeightValueOrSignalRef(channel, value)), offsetMixins);
          }
          // If channelDef is neither field def or value def, it's a condition-only def.
          // In such case, we will use default ref.
      }
      if (isFunction$1(defaultRef)) {
          defaultRef = defaultRef();
      }
      if (defaultRef) {
          // for non-position, ref could be undefined.
          return Object.assign(Object.assign({}, defaultRef), (offset ? { offset } : {}));
      }
      return defaultRef;
  }
  /**
   * Convert special "width" and "height" values in Vega-Lite into Vega value ref.
   */
  function widthHeightValueOrSignalRef(channel, value) {
      if (contains$1(['x', 'x2'], channel) && value === 'width') {
          return { field: { group: 'width' } };
      }
      else if (contains$1(['y', 'y2'], channel) && value === 'height') {
          return { field: { group: 'height' } };
      }
      return signalOrValueRef(value);
  }

  function isCustomFormatType(formatType) {
      return formatType && formatType !== 'number' && formatType !== 'time';
  }
  function customFormatExpr(formatType, field, format) {
      return `${formatType}(${field}${format ? `, ${JSON.stringify(format)}` : ''})`;
  }
  const BIN_RANGE_DELIMITER = ' \u2013 ';
  function formatSignalRef({ fieldOrDatumDef, format, formatType, expr, normalizeStack, config }) {
      var _a, _b;
      if (isCustomFormatType(formatType)) {
          return formatCustomType({
              fieldOrDatumDef,
              format,
              formatType,
              expr,
              config
          });
      }
      const field = fieldToFormat(fieldOrDatumDef, expr, normalizeStack);
      if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
          const signal = timeFormatExpression(field, isFieldDef(fieldOrDatumDef) ? (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : undefined, format, config.timeFormat, isScaleFieldDef(fieldOrDatumDef) && ((_b = fieldOrDatumDef.scale) === null || _b === void 0 ? void 0 : _b.type) === ScaleType.UTC);
          return signal ? { signal } : undefined;
      }
      format = numberFormat(channelDefType(fieldOrDatumDef), format, config);
      if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
          const endField = vgField(fieldOrDatumDef, { expr, binSuffix: 'end' });
          return {
              signal: binFormatExpression(field, endField, format, formatType, config)
          };
      }
      else if (format || channelDefType(fieldOrDatumDef) === 'quantitative') {
          return {
              signal: `${formatExpr(field, format)}`
          };
      }
      else {
          return { signal: `isValid(${field}) ? ${field} : ""+${field}` };
      }
  }
  function fieldToFormat(fieldOrDatumDef, expr, normalizeStack) {
      if (isFieldDef(fieldOrDatumDef)) {
          if (normalizeStack) {
              return `${vgField(fieldOrDatumDef, { expr, suffix: 'end' })}-${vgField(fieldOrDatumDef, {
                expr,
                suffix: 'start'
            })}`;
          }
          else {
              return vgField(fieldOrDatumDef, { expr });
          }
      }
      else {
          return datumDefToExpr(fieldOrDatumDef);
      }
  }
  function formatCustomType({ fieldOrDatumDef, format, formatType, expr, normalizeStack, config, field }) {
      field = field !== null && field !== void 0 ? field : fieldToFormat(fieldOrDatumDef, expr, normalizeStack);
      if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
          const endField = vgField(fieldOrDatumDef, { expr, binSuffix: 'end' });
          return {
              signal: binFormatExpression(field, endField, format, formatType, config)
          };
      }
      return { signal: customFormatExpr(formatType, field, format) };
  }
  function guideFormat(fieldOrDatumDef, type, format, formatType, config, omitTimeFormatConfig // axis doesn't use config.timeFormat
  ) {
      var _a;
      if (isCustomFormatType(formatType)) {
          return undefined; // handled in encode block
      }
      if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
          const timeUnit = isFieldDef(fieldOrDatumDef) ? (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : undefined;
          return timeFormat(format, timeUnit, config, omitTimeFormatConfig);
      }
      return numberFormat(type, format, config);
  }
  function guideFormatType(formatType, fieldOrDatumDef, scaleType) {
      if (formatType && (isSignalRef(formatType) || formatType === 'number' || formatType === 'time')) {
          return formatType;
      }
      if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) && scaleType !== 'time' && scaleType !== 'utc') {
          return 'time';
      }
      return undefined;
  }
  /**
   * Returns number format for a fieldDef.
   */
  function numberFormat(type, specifiedFormat, config) {
      // Specified format in axis/legend has higher precedence than fieldDef.format
      if (isString$1(specifiedFormat)) {
          return specifiedFormat;
      }
      if (type === QUANTITATIVE) {
          // we only apply the default if the field is quantitative
          return config.numberFormat;
      }
      return undefined;
  }
  /**
   * Returns time format for a fieldDef for use in guides.
   */
  function timeFormat(specifiedFormat, timeUnit, config, omitTimeFormatConfig) {
      if (specifiedFormat) {
          return specifiedFormat;
      }
      if (timeUnit) {
          return {
              signal: timeUnitSpecifierExpression(timeUnit)
          };
      }
      return omitTimeFormatConfig ? undefined : config.timeFormat;
  }
  function formatExpr(field, format) {
      return `format(${field}, "${format || ''}")`;
  }
  function binNumberFormatExpr(field, format, formatType, config) {
      var _a;
      if (isCustomFormatType(formatType)) {
          return customFormatExpr(formatType, field, format);
      }
      return formatExpr(field, (_a = (isString$1(format) ? format : undefined)) !== null && _a !== void 0 ? _a : config.numberFormat);
  }
  function binFormatExpression(startField, endField, format, formatType, config) {
      const start = binNumberFormatExpr(startField, format, formatType, config);
      const end = binNumberFormatExpr(endField, format, formatType, config);
      return `${fieldValidPredicate(startField, false)} ? "null" : ${start} + "${BIN_RANGE_DELIMITER}" + ${end}`;
  }
  /**
   * Returns the time expression used for axis/legend labels or text mark for a temporal field
   */
  function timeFormatExpression(field, timeUnit, format, rawTimeFormat, // should be provided only for actual text and headers, not axis/legend labels
  isUTCScale) {
      if (!timeUnit || format) {
          // If there is no time unit, or if user explicitly specifies format for axis/legend/text.
          format = isString$1(format) ? format : rawTimeFormat; // only use provided timeFormat if there is no timeUnit.
          return `${isUTCScale ? 'utc' : 'time'}Format(${field}, '${format}')`;
      }
      else {
          return formatExpression(timeUnit, field, isUTCScale);
      }
  }

  const DEFAULT_SORT_OP = 'min';
  const SORT_BY_CHANNEL_INDEX = {
      x: 1,
      y: 1,
      color: 1,
      fill: 1,
      stroke: 1,
      strokeWidth: 1,
      size: 1,
      shape: 1,
      fillOpacity: 1,
      strokeOpacity: 1,
      opacity: 1,
      text: 1
  };
  function isSortByChannel(c) {
      return c in SORT_BY_CHANNEL_INDEX;
  }
  function isSortByEncoding(sort) {
      return !!sort && !!sort['encoding'];
  }
  function isSortField(sort) {
      return !!sort && (sort['op'] === 'count' || !!sort['field']);
  }
  function isSortArray(sort) {
      return !!sort && isArray(sort);
  }

  function isFacetMapping(f) {
      return 'row' in f || 'column' in f;
  }
  function isFacetFieldDef(channelDef) {
      return !!channelDef && 'header' in channelDef;
  }
  function isFacetSpec(spec) {
      return 'facet' in spec;
  }

  var __rest$3 = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function isConditionalSelection(c) {
      return c['selection'];
  }
  function isRepeatRef(field) {
      return field && !isString$1(field) && 'repeat' in field;
  }
  function toFieldDefBase(fieldDef) {
      const { field, timeUnit, bin, aggregate } = fieldDef;
      return Object.assign(Object.assign(Object.assign(Object.assign({}, (timeUnit ? { timeUnit } : {})), (bin ? { bin } : {})), (aggregate ? { aggregate } : {})), { field });
  }
  function isSortableFieldDef(fieldDef) {
      return 'sort' in fieldDef;
  }
  function getBand({ channel, fieldDef, fieldDef2, markDef: mark, stack, config, isMidPoint }) {
      if (isFieldOrDatumDef(fieldDef) && fieldDef.band !== undefined) {
          return fieldDef.band;
      }
      if (isFieldDef(fieldDef)) {
          const { timeUnit, bin } = fieldDef;
          if (timeUnit && !fieldDef2) {
              if (isMidPoint) {
                  return getMarkConfig('timeUnitBandPosition', mark, config);
              }
              else {
                  return isRectBasedMark(mark.type) ? getMarkConfig('timeUnitBand', mark, config) : 0;
              }
          }
          else if (isBinning(bin)) {
              return isRectBasedMark(mark.type) && !isMidPoint ? 1 : 0.5;
          }
      }
      if ((stack === null || stack === void 0 ? void 0 : stack.fieldChannel) === channel && isMidPoint) {
          return 0.5;
      }
      return undefined;
  }
  function hasBand(channel, fieldDef, fieldDef2, stack, markDef, config) {
      if (isBinning(fieldDef.bin) || (fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal')) {
          return !!getBand({ channel, fieldDef, fieldDef2, stack, markDef, config });
      }
      return false;
  }
  function isConditionalDef(channelDef) {
      return !!channelDef && 'condition' in channelDef;
  }
  /**
   * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef
   */
  function hasConditionalFieldDef(channelDef) {
      const condition = channelDef && channelDef['condition'];
      return !!condition && !isArray(condition) && isFieldDef(condition);
  }
  function hasConditionalFieldOrDatumDef(channelDef) {
      const condition = channelDef && channelDef['condition'];
      return !!condition && !isArray(condition) && isFieldOrDatumDef(condition);
  }
  function hasConditionalValueDef(channelDef) {
      const condition = channelDef && channelDef['condition'];
      return !!condition && (isArray(condition) || isValueDef(condition));
  }
  function isFieldDef(channelDef) {
      // TODO: we can't use field in channelDef here as it's somehow failing runtime test
      return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');
  }
  function channelDefType(channelDef) {
      return channelDef && channelDef['type'];
  }
  function isDatumDef(channelDef) {
      return !!channelDef && 'datum' in channelDef;
  }
  function isContinuousFieldOrDatumDef(cd) {
      // TODO: make datum support DateTime object
      return (isTypedFieldDef(cd) && isContinuous(cd)) || isNumericDataDef(cd);
  }
  function isNumericDataDef(cd) {
      return isDatumDef(cd) && isNumber$1(cd.datum);
  }
  function isFieldOrDatumDef(channelDef) {
      return isFieldDef(channelDef) || isDatumDef(channelDef);
  }
  function isTypedFieldDef(channelDef) {
      return !!channelDef && ('field' in channelDef || channelDef['aggregate'] === 'count') && 'type' in channelDef;
  }
  function isValueDef(channelDef) {
      return channelDef && 'value' in channelDef && 'value' in channelDef;
  }
  function isScaleFieldDef(channelDef) {
      return !!channelDef && ('scale' in channelDef || 'sort' in channelDef);
  }
  function isPositionFieldOrDatumDef(channelDef) {
      return channelDef && ('axis' in channelDef || 'stack' in channelDef || 'impute' in channelDef);
  }
  function isMarkPropFieldOrDatumDef(channelDef) {
      return !!channelDef && 'legend' in channelDef;
  }
  function isStringFieldOrDatumDef(channelDef) {
      return !!channelDef && ('format' in channelDef || 'formatType' in channelDef);
  }
  function toStringFieldDef(fieldDef) {
      // omit properties that don't exist in string field defs
      return omit(fieldDef, ['legend', 'axis', 'header', 'scale']);
  }
  function isOpFieldDef(fieldDef) {
      return 'op' in fieldDef;
  }
  /**
   * Get a Vega field reference from a Vega-Lite field def.
   */
  function vgField(fieldDef, opt = {}) {
      var _a, _b, _c;
      let field = fieldDef.field;
      const prefix = opt.prefix;
      let suffix = opt.suffix;
      let argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped
      if (isCount(fieldDef)) {
          field = internalField('count');
      }
      else {
          let fn;
          if (!opt.nofn) {
              if (isOpFieldDef(fieldDef)) {
                  fn = fieldDef.op;
              }
              else {
                  const { bin, aggregate, timeUnit } = fieldDef;
                  if (isBinning(bin)) {
                      fn = binToString(bin);
                      suffix = ((_a = opt.binSuffix) !== null && _a !== void 0 ? _a : '') + ((_b = opt.suffix) !== null && _b !== void 0 ? _b : '');
                  }
                  else if (aggregate) {
                      if (isArgmaxDef(aggregate)) {
                          argAccessor = `["${field}"]`;
                          field = `argmax_${aggregate.argmax}`;
                      }
                      else if (isArgminDef(aggregate)) {
                          argAccessor = `["${field}"]`;
                          field = `argmin_${aggregate.argmin}`;
                      }
                      else {
                          fn = String(aggregate);
                      }
                  }
                  else if (timeUnit) {
                      fn = timeUnitToString(timeUnit);
                      suffix = ((!contains$1(['range', 'mid'], opt.binSuffix) && opt.binSuffix) || '') + ((_c = opt.suffix) !== null && _c !== void 0 ? _c : '');
                  }
              }
          }
          if (fn) {
              field = field ? `${fn}_${field}` : fn;
          }
      }
      if (suffix) {
          field = `${field}_${suffix}`;
      }
      if (prefix) {
          field = `${prefix}_${field}`;
      }
      if (opt.forAs) {
          return removePathFromField(field);
      }
      else if (opt.expr) {
          // Expression to access flattened field. No need to escape dots.
          return flatAccessWithDatum(field, opt.expr) + argAccessor;
      }
      else {
          // We flattened all fields so paths should have become dot.
          return replacePathInField(field) + argAccessor;
      }
  }
  function isDiscrete(def) {
      switch (def.type) {
          case 'nominal':
          case 'ordinal':
          case 'geojson':
              return true;
          case 'quantitative':
              return isFieldDef(def) && !!def.bin;
          case 'temporal':
              return false;
      }
      throw new Error(invalidFieldType(def.type));
  }
  function isContinuous(fieldDef) {
      return !isDiscrete(fieldDef);
  }
  function isCount(fieldDef) {
      return fieldDef.aggregate === 'count';
  }
  function verbalTitleFormatter(fieldDef, config) {
      var _a;
      const { field, bin, timeUnit, aggregate } = fieldDef;
      if (aggregate === 'count') {
          return config.countTitle;
      }
      else if (isBinning(bin)) {
          return `${field} (binned)`;
      }
      else if (timeUnit) {
          const unit = (_a = normalizeTimeUnit(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
          if (unit) {
              return `${field} (${getTimeUnitParts(unit).join('-')})`;
          }
      }
      else if (aggregate) {
          if (isArgmaxDef(aggregate)) {
              return `${field} for max ${aggregate.argmax}`;
          }
          else if (isArgminDef(aggregate)) {
              return `${field} for min ${aggregate.argmin}`;
          }
          else {
              return `${titleCase(aggregate)} of ${field}`;
          }
      }
      return field;
  }
  function functionalTitleFormatter(fieldDef) {
      const { aggregate, bin, timeUnit, field } = fieldDef;
      if (isArgmaxDef(aggregate)) {
          return `${field} for argmax(${aggregate.argmax})`;
      }
      else if (isArgminDef(aggregate)) {
          return `${field} for argmin(${aggregate.argmin})`;
      }
      const timeUnitParams = normalizeTimeUnit(timeUnit);
      const fn = aggregate || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.unit) || ((timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.maxbins) && 'timeunit') || (isBinning(bin) && 'bin');
      if (fn) {
          return fn.toUpperCase() + '(' + field + ')';
      }
      else {
          return field;
      }
  }
  const defaultTitleFormatter = (fieldDef, config) => {
      switch (config.fieldTitle) {
          case 'plain':
              return fieldDef.field;
          case 'functional':
              return functionalTitleFormatter(fieldDef);
          default:
              return verbalTitleFormatter(fieldDef, config);
      }
  };
  let titleFormatter = defaultTitleFormatter;
  function setTitleFormatter(formatter) {
      titleFormatter = formatter;
  }
  function resetTitleFormatter() {
      setTitleFormatter(defaultTitleFormatter);
  }
  function title$1(fieldOrDatumDef, config, { allowDisabling, includeDefault = true }) {
      var _a, _b;
      const guideTitle = (_a = getGuide(fieldOrDatumDef)) === null || _a === void 0 ? void 0 : _a.title;
      if (!isFieldDef(fieldOrDatumDef)) {
          return guideTitle;
      }
      const fieldDef = fieldOrDatumDef;
      const def = includeDefault ? defaultTitle(fieldDef, config) : undefined;
      if (allowDisabling) {
          return getFirstDefined(guideTitle, fieldDef.title, def);
      }
      else {
          return (_b = guideTitle !== null && guideTitle !== void 0 ? guideTitle : fieldDef.title) !== null && _b !== void 0 ? _b : def;
      }
  }
  function getGuide(fieldDef) {
      if (isPositionFieldOrDatumDef(fieldDef) && fieldDef.axis) {
          return fieldDef.axis;
      }
      else if (isMarkPropFieldOrDatumDef(fieldDef) && fieldDef.legend) {
          return fieldDef.legend;
      }
      else if (isFacetFieldDef(fieldDef) && fieldDef.header) {
          return fieldDef.header;
      }
      return undefined;
  }
  function defaultTitle(fieldDef, config) {
      return titleFormatter(fieldDef, config);
  }
  function getFormatMixins(fieldDef) {
      var _a;
      if (isStringFieldOrDatumDef(fieldDef)) {
          const { format, formatType } = fieldDef;
          return { format, formatType };
      }
      else {
          const guide = (_a = getGuide(fieldDef)) !== null && _a !== void 0 ? _a : {};
          const { format, formatType } = guide;
          return { format, formatType };
      }
  }
  function defaultType(fieldDef, channel) {
      var _a;
      switch (channel) {
          case 'latitude':
          case 'longitude':
              return 'quantitative';
          case 'row':
          case 'column':
          case 'facet':
          case 'shape':
          case 'strokeDash':
              return 'nominal';
          case 'order':
              return 'ordinal';
      }
      if (isSortableFieldDef(fieldDef) && isArray(fieldDef.sort)) {
          return 'ordinal';
      }
      const { aggregate, bin, timeUnit } = fieldDef;
      if (timeUnit) {
          return 'temporal';
      }
      if (bin || (aggregate && !isArgmaxDef(aggregate) && !isArgminDef(aggregate))) {
          return 'quantitative';
      }
      if (isScaleFieldDef(fieldDef) && ((_a = fieldDef.scale) === null || _a === void 0 ? void 0 : _a.type)) {
          switch (SCALE_CATEGORY_INDEX[fieldDef.scale.type]) {
              case 'numeric':
              case 'discretizing':
                  return 'quantitative';
              case 'time':
                  return 'temporal';
          }
      }
      return 'nominal';
  }
  /**
   * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.
   * @param channelDef
   */
  function getFieldDef(channelDef) {
      if (isFieldDef(channelDef)) {
          return channelDef;
      }
      else if (hasConditionalFieldDef(channelDef)) {
          return channelDef.condition;
      }
      return undefined;
  }
  function getFieldOrDatumDef(channelDef) {
      if (isFieldOrDatumDef(channelDef)) {
          return channelDef;
      }
      else if (hasConditionalFieldOrDatumDef(channelDef)) {
          return channelDef.condition;
      }
      return undefined;
  }
  /**
   * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.
   */
  function initChannelDef(channelDef, channel, config, opt = {}) {
      if (isString$1(channelDef) || isNumber$1(channelDef) || isBoolean(channelDef)) {
          const primitiveType = isString$1(channelDef) ? 'string' : isNumber$1(channelDef) ? 'number' : 'boolean';
          warn(primitiveChannelDef(channel, primitiveType, channelDef));
          return { value: channelDef };
      }
      // If a fieldDef contains a field, we need type.
      if (isFieldOrDatumDef(channelDef)) {
          return initFieldOrDatumDef(channelDef, channel, config, opt);
      }
      else if (hasConditionalFieldOrDatumDef(channelDef)) {
          return Object.assign(Object.assign({}, channelDef), { 
              // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>
              condition: initFieldOrDatumDef(channelDef.condition, channel, config, opt) });
      }
      return channelDef;
  }
  function initFieldOrDatumDef(fd, channel, config, opt) {
      if (isStringFieldOrDatumDef(fd)) {
          const { format, formatType } = fd, rest = __rest$3(fd, ["format", "formatType"]);
          if (isCustomFormatType(formatType) && !config.customFormatTypes) {
              warn(customFormatTypeNotAllowed(channel));
              return initFieldOrDatumDef(rest, channel, config, opt);
          }
      }
      else {
          const guideType = isPositionFieldOrDatumDef(fd)
              ? 'axis'
              : isMarkPropFieldOrDatumDef(fd)
                  ? 'legend'
                  : isFacetFieldDef(fd)
                      ? 'header'
                      : null;
          if (guideType && fd[guideType]) {
              const _a = fd[guideType], { format, formatType } = _a, newGuide = __rest$3(_a, ["format", "formatType"]);
              if (isCustomFormatType(formatType) && !config.customFormatTypes) {
                  warn(customFormatTypeNotAllowed(channel));
                  return initFieldOrDatumDef(Object.assign(Object.assign({}, fd), { [guideType]: newGuide }), channel, config, opt);
              }
          }
      }
      if (isFieldDef(fd)) {
          return initFieldDef(fd, channel, opt);
      }
      return initDatumDef(fd);
  }
  function initDatumDef(datumDef) {
      let type = datumDef['type'];
      if (type) {
          return datumDef;
      }
      const { datum } = datumDef;
      type = isNumber$1(datum) ? 'quantitative' : isString$1(datum) ? 'nominal' : isDateTime(datum) ? 'temporal' : undefined;
      return Object.assign(Object.assign({}, datumDef), { type });
  }
  function initFieldDef(fd, channel, { compositeMark = false } = {}) {
      const { aggregate, timeUnit, bin, field } = fd;
      const fieldDef = Object.assign({}, fd);
      // Drop invalid aggregate
      if (!compositeMark && aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {
          warn(invalidAggregate(aggregate));
          delete fieldDef.aggregate;
      }
      // Normalize Time Unit
      if (timeUnit) {
          fieldDef.timeUnit = normalizeTimeUnit(timeUnit);
      }
      if (field) {
          fieldDef.field = `${field}`;
      }
      // Normalize bin
      if (isBinning(bin)) {
          fieldDef.bin = normalizeBin(bin, channel);
      }
      if (isBinned(bin) && !isXorY(channel)) {
          warn(channelShouldNotBeUsedForBinned(channel));
      }
      // Normalize Type
      if (isTypedFieldDef(fieldDef)) {
          const { type } = fieldDef;
          const fullType = getFullName(type);
          if (type !== fullType) {
              // convert short type to full type
              fieldDef.type = fullType;
          }
          if (type !== 'quantitative') {
              if (isCountingAggregateOp(aggregate)) {
                  warn(invalidFieldTypeForCountAggregate(type, aggregate));
                  fieldDef.type = 'quantitative';
              }
          }
      }
      else if (!isSecondaryRangeChannel(channel)) {
          // If type is empty / invalid, then augment with default type
          const newType = defaultType(fieldDef, channel);
          fieldDef['type'] = newType;
      }
      if (isTypedFieldDef(fieldDef)) {
          const { compatible, warning } = channelCompatibility(fieldDef, channel) || {};
          if (compatible === false) {
              warn(warning);
          }
      }
      if (isSortableFieldDef(fieldDef) && isString$1(fieldDef.sort)) {
          const { sort } = fieldDef;
          if (isSortByChannel(sort)) {
              return Object.assign(Object.assign({}, fieldDef), { sort: { encoding: sort } });
          }
          const sub = sort.substr(1);
          if (sort.charAt(0) === '-' && isSortByChannel(sub)) {
              return Object.assign(Object.assign({}, fieldDef), { sort: { encoding: sub, order: 'descending' } });
          }
      }
      if (isFacetFieldDef(fieldDef)) {
          const { header } = fieldDef;
          const { orient } = header, rest = __rest$3(header, ["orient"]);
          if (orient) {
              return Object.assign(Object.assign({}, fieldDef), { header: Object.assign(Object.assign({}, rest), { labelOrient: header.labelOrient || orient, titleOrient: header.titleOrient || orient }) });
          }
      }
      return fieldDef;
  }
  function normalizeBin(bin, channel) {
      if (isBoolean(bin)) {
          return { maxbins: autoMaxBins(channel) };
      }
      else if (bin === 'binned') {
          return {
              binned: true
          };
      }
      else if (!bin.maxbins && !bin.step) {
          return Object.assign(Object.assign({}, bin), { maxbins: autoMaxBins(channel) });
      }
      else {
          return bin;
      }
  }
  const COMPATIBLE = { compatible: true };
  function channelCompatibility(fieldDef, channel) {
      const type = fieldDef.type;
      if (type === 'geojson' && channel !== 'shape') {
          return {
              compatible: false,
              warning: `Channel ${channel} should not be used with a geojson data.`
          };
      }
      switch (channel) {
          case ROW:
          case COLUMN:
          case FACET:
              if (isContinuous(fieldDef)) {
                  return {
                      compatible: false,
                      warning: facetChannelShouldBeDiscrete(channel)
                  };
              }
              return COMPATIBLE;
          case X:
          case Y:
          case COLOR:
          case FILL:
          case STROKE:
          case TEXT:
          case DETAIL:
          case KEY:
          case TOOLTIP:
          case HREF:
          case URL$1:
          case ANGLE:
          case THETA:
          case RADIUS:
          case DESCRIPTION:
              return COMPATIBLE;
          case LONGITUDE:
          case LONGITUDE2:
          case LATITUDE:
          case LATITUDE2:
              if (type !== QUANTITATIVE) {
                  return {
                      compatible: false,
                      warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`
                  };
              }
              return COMPATIBLE;
          case OPACITY:
          case FILLOPACITY:
          case STROKEOPACITY:
          case STROKEWIDTH:
          case SIZE:
          case THETA2:
          case RADIUS2:
          case X2:
          case Y2:
              if (type === 'nominal' && !fieldDef['sort']) {
                  return {
                      compatible: false,
                      warning: `Channel ${channel} should not be used with an unsorted discrete field.`
                  };
              }
              return COMPATIBLE;
          case STROKEDASH:
              if (!contains$1(['ordinal', 'nominal'], fieldDef.type)) {
                  return {
                      compatible: false,
                      warning: 'StrokeDash channel should be used with only discrete data.'
                  };
              }
              return COMPATIBLE;
          case SHAPE:
              if (!contains$1(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {
                  return {
                      compatible: false,
                      warning: 'Shape channel should be used with only either discrete or geojson data.'
                  };
              }
              return COMPATIBLE;
          case ORDER:
              if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {
                  return {
                      compatible: false,
                      warning: `Channel order is inappropriate for nominal field, which has no inherent order.`
                  };
              }
              return COMPATIBLE;
      }
  }
  /**
   * Check if the field def uses a time format or does not use any format but is temporal
   * (this does not cover field defs that are temporal but use a number format).
   */
  function isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) {
      const { formatType } = getFormatMixins(fieldOrDatumDef);
      return formatType === 'time' || (!formatType && isTimeFieldDef(fieldOrDatumDef));
  }
  /**
   * Check if field def has type `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.
   */
  function isTimeFieldDef(def) {
      return def && (def['type'] === 'temporal' || (isFieldDef(def) && !!def.timeUnit));
  }
  /**
   * Getting a value associated with a fielddef.
   * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)
   */
  function valueExpr(v, { timeUnit, type, wrapTime, undefinedIfExprNotRequired }) {
      var _a;
      const unit = timeUnit && ((_a = normalizeTimeUnit(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit);
      let isTime = unit || type === 'temporal';
      let expr;
      if (isExprRef(v)) {
          expr = v.expr;
      }
      else if (isSignalRef(v)) {
          expr = v.signal;
      }
      else if (isDateTime(v)) {
          isTime = true;
          expr = dateTimeToExpr(v);
      }
      else if (isString$1(v) || isNumber$1(v)) {
          if (isTime) {
              expr = `datetime(${JSON.stringify(v)})`;
              if (isLocalSingleTimeUnit(unit)) {
                  // for single timeUnit, we will use dateTimeToExpr to convert number/string to match the timeUnit
                  if ((isNumber$1(v) && v < 10000) || (isString$1(v) && isNaN(Date.parse(v)))) {
                      expr = dateTimeToExpr({ [unit]: v });
                  }
              }
          }
      }
      if (expr) {
          return wrapTime && isTime ? `time(${expr})` : expr;
      }
      // number or boolean or normal string
      return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);
  }
  /**
   * Standardize value array -- convert each value to Vega expression if applicable
   */
  function valueArray(fieldOrDatumDef, values) {
      const { type } = fieldOrDatumDef;
      return values.map(v => {
          const expr = valueExpr(v, {
              timeUnit: isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.timeUnit : undefined,
              type,
              undefinedIfExprNotRequired: true
          });
          // return signal for the expression if we need an expression
          if (expr !== undefined) {
              return { signal: expr };
          }
          // otherwise just return the original value
          return v;
      });
  }
  /**
   * Checks whether a fieldDef for a particular channel requires a computed bin range.
   */
  function binRequiresRange(fieldDef, channel) {
      if (!isBinning(fieldDef.bin)) {
          console.warn('Only call this method for binned field defs.');
          return false;
      }
      // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.
      // We could check whether the axis or legend exists (not disabled) but that seems overkill.
      return isScaleChannel(channel) && contains$1(['ordinal', 'nominal'], fieldDef.type);
  }

  var __rest$4 = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function extractTitleConfig(titleConfig) {
      const { 
      // These are non-mark title config that need to be hardcoded
      anchor, frame, offset, orient, 
      // color needs to be redirect to fill
      color, 
      // subtitle properties
      subtitleColor, subtitleFont, subtitleFontSize, subtitleFontStyle, subtitleFontWeight, subtitleLineHeight, subtitlePadding } = titleConfig, 
      // The rest are mark config.
      rest = __rest$4(titleConfig, ["anchor", "frame", "offset", "orient", "color", "subtitleColor", "subtitleFont", "subtitleFontSize", "subtitleFontStyle", "subtitleFontWeight", "subtitleLineHeight", "subtitlePadding"]);
      const titleMarkConfig = Object.assign(Object.assign({}, rest), (color ? { fill: color } : {}));
      // These are non-mark title config that need to be hardcoded
      const nonMark = Object.assign(Object.assign(Object.assign(Object.assign({}, (anchor ? { anchor } : {})), (frame ? { frame } : {})), (offset ? { offset } : {})), (orient ? { orient } : {}));
      // subtitle part can stay in config.title since header titles do not use subtitle
      const subtitle = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (subtitleColor ? { subtitleColor } : {})), (subtitleFont ? { subtitleFont } : {})), (subtitleFontSize ? { subtitleFontSize } : {})), (subtitleFontStyle ? { subtitleFontStyle } : {})), (subtitleFontWeight ? { subtitleFontWeight } : {})), (subtitleLineHeight ? { subtitleLineHeight } : {})), (subtitlePadding ? { subtitlePadding } : {}));
      const subtitleMarkConfig = pick(titleMarkConfig, ['align', 'baseline', 'dx', 'dy', 'limit']);
      return { titleMarkConfig, subtitleMarkConfig, nonMark, subtitle };
  }
  function isText(v) {
      return isString$1(v) || (isArray(v) && isString$1(v[0]));
  }

  var __rest$5 = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function signalOrValueRefWithCondition(val) {
      const condition = isArray(val.condition)
          ? val.condition.map(conditionalSignalRefOrValue)
          : conditionalSignalRefOrValue(val.condition);
      return Object.assign(Object.assign({}, signalRefOrValue(val)), { condition });
  }
  function signalRefOrValue(value) {
      if (isExprRef(value)) {
          const { expr } = value, rest = __rest$5(value, ["expr"]);
          return Object.assign({ signal: expr }, rest);
      }
      return value;
  }
  function conditionalSignalRefOrValue(value) {
      if (isExprRef(value)) {
          const { expr } = value, rest = __rest$5(value, ["expr"]);
          return Object.assign({ signal: expr }, rest);
      }
      return value;
  }
  function signalOrValueRef(value) {
      if (isExprRef(value)) {
          const { expr } = value, rest = __rest$5(value, ["expr"]);
          return Object.assign({ signal: expr }, rest);
      }
      if (isSignalRef(value)) {
          return value;
      }
      return value !== undefined ? { value } : undefined;
  }
  function exprFromValueOrSignalRef(ref) {
      if (isSignalRef(ref)) {
          return ref.signal;
      }
      return $(ref.value);
  }
  function signalOrStringValue(v) {
      if (isSignalRef(v)) {
          return v.signal;
      }
      return v == null ? null : $(v);
  }
  function applyMarkConfig(e, model, propsList) {
      for (const property of propsList) {
          const value = getMarkConfig(property, model.markDef, model.config);
          if (value !== undefined) {
              e[property] = signalOrValueRef(value);
          }
      }
      return e;
  }
  function getStyles(mark) {
      var _a;
      return [].concat(mark.type, (_a = mark.style) !== null && _a !== void 0 ? _a : []);
  }
  function getMarkPropOrConfig(channel, mark, config, opt = {}) {
      const { vgChannel, ignoreVgConfig } = opt;
      if (vgChannel && mark[vgChannel] !== undefined) {
          return mark[vgChannel];
      }
      else if (mark[channel] !== undefined) {
          return mark[channel];
      }
      else if (ignoreVgConfig && (!vgChannel || vgChannel === channel)) {
          return undefined;
      }
      return getMarkConfig(channel, mark, config, opt);
  }
  /**
   * Return property value from style or mark specific config property if exists.
   * Otherwise, return general mark specific config.
   */
  function getMarkConfig(channel, mark, config, { vgChannel } = {}) {
      return getFirstDefined(
      // style config has highest precedence
      vgChannel ? getMarkStyleConfig(channel, mark, config.style) : undefined, getMarkStyleConfig(channel, mark, config.style), 
      // then mark-specific config
      vgChannel ? config[mark.type][vgChannel] : undefined, config[mark.type][channel], // Need to cast because MarkDef doesn't perfectly match with AnyMarkConfig, but if the type isn't available, we'll get nothing here, which is fine
      // If there is vgChannel, skip vl channel.
      // For example, vl size for text is vg fontSize, but config.mark.size is only for point size.
      vgChannel ? config.mark[vgChannel] : config.mark[channel] // Need to cast for the same reason as above
      );
  }
  function getMarkStyleConfig(prop, mark, styleConfigIndex) {
      return getStyleConfig(prop, getStyles(mark), styleConfigIndex);
  }
  function getStyleConfig(p, styles, styleConfigIndex) {
      styles = array(styles);
      let value;
      for (const style of styles) {
          const styleConfig = styleConfigIndex[style];
          if (styleConfig && styleConfig[p] !== undefined) {
              value = styleConfig[p];
          }
      }
      return value;
  }
  /**
   * Return Vega sort parameters (tuple of field and order).
   */
  function sortParams(orderDef, fieldRefOption) {
      return array(orderDef).reduce((s, orderChannelDef) => {
          var _a;
          s.field.push(vgField(orderChannelDef, fieldRefOption));
          s.order.push((_a = orderChannelDef.sort) !== null && _a !== void 0 ? _a : 'ascending');
          return s;
      }, { field: [], order: [] });
  }
  function mergeTitleFieldDefs(f1, f2) {
      const merged = [...f1];
      f2.forEach(fdToMerge => {
          for (const fieldDef1 of merged) {
              // If already exists, no need to append to merged array
              if (deepEqual$1(fieldDef1, fdToMerge)) {
                  return;
              }
          }
          merged.push(fdToMerge);
      });
      return merged;
  }
  function mergeTitle(title1, title2) {
      if (deepEqual$1(title1, title2) || !title2) {
          // if titles are the same or title2 is falsy
          return title1;
      }
      else if (!title1) {
          // if title1 is falsy
          return title2;
      }
      else {
          return [...array(title1), ...array(title2)].join(', ');
      }
  }
  function mergeTitleComponent(v1, v2) {
      const v1Val = v1.value;
      const v2Val = v2.value;
      if (v1Val == null || v2Val === null) {
          return {
              explicit: v1.explicit,
              value: null
          };
      }
      else if ((isText(v1Val) || isSignalRef(v1Val)) && (isText(v2Val) || isSignalRef(v2Val))) {
          return {
              explicit: v1.explicit,
              value: mergeTitle(v1Val, v2Val)
          };
      }
      else if (isText(v1Val) || isSignalRef(v1Val)) {
          return {
              explicit: v1.explicit,
              value: v1Val
          };
      }
      else if (isText(v2Val) || isSignalRef(v2Val)) {
          return {
              explicit: v1.explicit,
              value: v2Val
          };
      }
      else if (!isText(v1Val) && !isSignalRef(v1Val) && !isText(v2Val) && !isSignalRef(v2Val)) {
          return {
              explicit: v1.explicit,
              value: mergeTitleFieldDefs(v1Val, v2Val)
          };
      }
      /* istanbul ignore next: Condition should not happen -- only for warning in development. */
      throw new Error('It should never reach here');
  }

  function isUnitSpec(spec) {
      return 'mark' in spec;
  }

  class CompositeMarkNormalizer {
      constructor(name, run) {
          this.name = name;
          this.run = run;
      }
      hasMatchingType(spec) {
          if (isUnitSpec(spec)) {
              return getMarkType(spec.mark) === this.name;
          }
          return false;
      }
  }

  var __rest$6 = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function channelHasField(encoding, channel) {
      const channelDef = encoding && encoding[channel];
      if (channelDef) {
          if (isArray(channelDef)) {
              return some(channelDef, fieldDef => !!fieldDef.field);
          }
          else {
              return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);
          }
      }
      return false;
  }
  function isAggregate(encoding) {
      return some(CHANNELS, channel => {
          if (channelHasField(encoding, channel)) {
              const channelDef = encoding[channel];
              if (isArray(channelDef)) {
                  return some(channelDef, fieldDef => !!fieldDef.aggregate);
              }
              else {
                  const fieldDef = getFieldDef(channelDef);
                  return fieldDef && !!fieldDef.aggregate;
              }
          }
          return false;
      });
  }
  function extractTransformsFromEncoding(oldEncoding, config) {
      const groupby = [];
      const bins = [];
      const timeUnits = [];
      const aggregate = [];
      const encoding = {};
      forEach(oldEncoding, (channelDef, channel) => {
          // Extract potential embedded transformations along with remaining properties
          if (isFieldDef(channelDef)) {
              const { field, aggregate: aggOp, bin, timeUnit } = channelDef, remaining = __rest$6(channelDef, ["field", "aggregate", "bin", "timeUnit"]);
              if (aggOp || timeUnit || bin) {
                  const guide = getGuide(channelDef);
                  const isTitleDefined = guide && guide.title;
                  let newField = vgField(channelDef, { forAs: true });
                  const newFieldDef = Object.assign(Object.assign(Object.assign({}, (isTitleDefined ? [] : { title: title$1(channelDef, config, { allowDisabling: true }) })), remaining), { 
                      // Always overwrite field
                      field: newField });
                  if (aggOp) {
                      let op;
                      if (isArgmaxDef(aggOp)) {
                          op = 'argmax';
                          newField = vgField({ op: 'argmax', field: aggOp.argmax }, { forAs: true });
                          newFieldDef.field = `${newField}.${field}`;
                      }
                      else if (isArgminDef(aggOp)) {
                          op = 'argmin';
                          newField = vgField({ op: 'argmin', field: aggOp.argmin }, { forAs: true });
                          newFieldDef.field = `${newField}.${field}`;
                      }
                      else if (aggOp !== 'boxplot' && aggOp !== 'errorbar' && aggOp !== 'errorband') {
                          op = aggOp;
                      }
                      if (op) {
                          const aggregateEntry = {
                              op,
                              as: newField
                          };
                          if (field) {
                              aggregateEntry.field = field;
                          }
                          aggregate.push(aggregateEntry);
                      }
                  }
                  else {
                      groupby.push(newField);
                      if (isTypedFieldDef(channelDef) && isBinning(bin)) {
                          bins.push({ bin, field, as: newField });
                          // Add additional groupbys for range and end of bins
                          groupby.push(vgField(channelDef, { binSuffix: 'end' }));
                          if (binRequiresRange(channelDef, channel)) {
                              groupby.push(vgField(channelDef, { binSuffix: 'range' }));
                          }
                          // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively
                          if (isXorY(channel)) {
                              const secondaryChannel = {
                                  field: newField + '_end'
                              };
                              encoding[channel + '2'] = secondaryChannel;
                          }
                          newFieldDef.bin = 'binned';
                          if (!isSecondaryRangeChannel(channel)) {
                              newFieldDef['type'] = QUANTITATIVE;
                          }
                      }
                      else if (timeUnit) {
                          timeUnits.push({
                              timeUnit,
                              field,
                              as: newField
                          });
                          // define the format type for later compilation
                          const formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && 'time';
                          if (formatType) {
                              if (channel === TEXT || channel === TOOLTIP) {
                                  newFieldDef['formatType'] = formatType;
                              }
                              else if (isNonPositionScaleChannel(channel)) {
                                  newFieldDef['legend'] = Object.assign({ formatType }, newFieldDef['legend']);
                              }
                              else if (isXorY(channel)) {
                                  newFieldDef['axis'] = Object.assign({ formatType }, newFieldDef['axis']);
                              }
                          }
                      }
                  }
                  // now the field should refer to post-transformed field instead
                  encoding[channel] = newFieldDef;
              }
              else {
                  groupby.push(field);
                  encoding[channel] = oldEncoding[channel];
              }
          }
          else {
              // For value def / signal ref / datum def, just copy
              encoding[channel] = oldEncoding[channel];
          }
      });
      return {
          bins,
          timeUnits,
          aggregate,
          groupby,
          encoding
      };
  }
  function markChannelCompatible(encoding, channel, mark) {
      const markSupported = supportMark(channel, mark);
      if (!markSupported) {
          return false;
      }
      else if (markSupported === 'binned') {
          const primaryFieldDef = encoding[channel === X2 ? X : Y];
          // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef
          // has "binned" data and thus need x2/y2 to specify the bin-end field.
          if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {
              return true;
          }
          else {
              return false;
          }
      }
      return true;
  }
  function initEncoding(encoding, mark, filled, config) {
      return keys(encoding).reduce((normalizedEncoding, channel) => {
          if (!isChannel(channel)) {
              // Drop invalid channel
              warn(invalidEncodingChannel(channel));
              return normalizedEncoding;
          }
          const channelDef = encoding[channel];
          if (channel === 'angle' && mark === 'arc' && !encoding.theta) {
              warn(REPLACE_ANGLE_WITH_THETA);
              channel = THETA;
          }
          if (!markChannelCompatible(encoding, channel, mark)) {
              // Drop unsupported channel
              warn(incompatibleChannel(channel, mark));
              return normalizedEncoding;
          }
          // Drop line's size if the field is aggregated.
          if (channel === SIZE && mark === 'line') {
              const fieldDef = getFieldDef(encoding[channel]);
              if (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.aggregate) {
                  warn(LINE_WITH_VARYING_SIZE);
                  return normalizedEncoding;
              }
          }
          // Drop color if either fill or stroke is specified
          if (channel === COLOR && (filled ? 'fill' in encoding : 'stroke' in encoding)) {
              warn(droppingColor('encoding', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));
              return normalizedEncoding;
          }
          if (channel === DETAIL ||
              (channel === ORDER && !isArray(channelDef) && !isValueDef(channelDef)) ||
              (channel === TOOLTIP && isArray(channelDef))) {
              if (channelDef) {
                  // Array of fieldDefs for detail channel (or production rule)
                  normalizedEncoding[channel] = array(channelDef).reduce((defs, fieldDef) => {
                      if (!isFieldDef(fieldDef)) {
                          warn(emptyFieldDef(fieldDef, channel));
                      }
                      else {
                          defs.push(initFieldDef(fieldDef, channel));
                      }
                      return defs;
                  }, []);
              }
          }
          else {
              if (channel === TOOLTIP && channelDef === null) {
                  // Preserve null so we can use it to disable tooltip
                  normalizedEncoding[channel] = null;
              }
              else if (!isFieldDef(channelDef) &&
                  !isDatumDef(channelDef) &&
                  !isValueDef(channelDef) &&
                  !isConditionalDef(channelDef) &&
                  !isSignalRef(channelDef)) {
                  warn(emptyFieldDef(channelDef, channel));
                  return normalizedEncoding;
              }
              normalizedEncoding[channel] = initChannelDef(channelDef, channel, config);
          }
          return normalizedEncoding;
      }, {});
  }
  /**
   * For composite marks, we have to call initChannelDef during init so we can infer types earlier.
   */
  function normalizeEncoding(encoding, config) {
      const normalizedEncoding = {};
      for (const channel of keys(encoding)) {
          const newChannelDef = initChannelDef(encoding[channel], channel, config, { compositeMark: true });
          normalizedEncoding[channel] = newChannelDef;
      }
      return normalizedEncoding;
  }
  function fieldDefs(encoding) {
      const arr = [];
      for (const channel of keys(encoding)) {
          if (channelHasField(encoding, channel)) {
              const channelDef = encoding[channel];
              const channelDefArray = array(channelDef);
              for (const def of channelDefArray) {
                  if (isFieldDef(def)) {
                      arr.push(def);
                  }
                  else if (hasConditionalFieldDef(def)) {
                      arr.push(def.condition);
                  }
              }
          }
      }
      return arr;
  }
  function forEach(mapping, f, thisArg) {
      if (!mapping) {
          return;
      }
      for (const channel of keys(mapping)) {
          const el = mapping[channel];
          if (isArray(el)) {
              for (const channelDef of el) {
                  f.call(thisArg, channelDef, channel);
              }
          }
          else {
              f.call(thisArg, el, channel);
          }
      }
  }
  function reduce(mapping, f, init, thisArg) {
      if (!mapping) {
          return init;
      }
      return keys(mapping).reduce((r, channel) => {
          const map = mapping[channel];
          if (isArray(map)) {
              return map.reduce((r1, channelDef) => {
                  return f.call(thisArg, r1, channelDef, channel);
              }, r);
          }
          else {
              return f.call(thisArg, r, map, channel);
          }
      }, init);
  }
  /**
   * Returns list of path grouping fields for the given encoding
   */
  function pathGroupingFields(mark, encoding) {
      return keys(encoding).reduce((details, channel) => {
          switch (channel) {
              // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, aria label, cursor should not cause lines to group
              case X:
              case Y:
              case HREF:
              case DESCRIPTION:
              case URL$1:
              case X2:
              case Y2:
              case THETA:
              case THETA2:
              case RADIUS:
              case RADIUS2:
              // falls through
              case LATITUDE:
              case LONGITUDE:
              case LATITUDE2:
              case LONGITUDE2:
              // TODO: case 'cursor':
              // text, shape, shouldn't be a part of line/trail/area [falls through]
              case TEXT:
              case SHAPE:
              case ANGLE:
              // falls through
              // tooltip fields should not be added to group by [falls through]
              case TOOLTIP:
                  return details;
              case ORDER:
                  // order should not group line / trail
                  if (mark === 'line' || mark === 'trail') {
                      return details;
                  }
              // but order should group area for stacking (falls through)
              case DETAIL:
              case KEY: {
                  const channelDef = encoding[channel];
                  if (isArray(channelDef) || isFieldDef(channelDef)) {
                      for (const fieldDef of array(channelDef)) {
                          if (!fieldDef.aggregate) {
                              details.push(vgField(fieldDef, {}));
                          }
                      }
                  }
                  return details;
              }
              case SIZE:
                  if (mark === 'trail') {
                      // For trail, size should not group trail lines.
                      return details;
                  }
              // For line, size should group lines.
              // falls through
              case COLOR:
              case FILL:
              case STROKE:
              case OPACITY:
              case FILLOPACITY:
              case STROKEOPACITY:
              case STROKEDASH:
              case STROKEWIDTH: {
                  // TODO strokeDashOffset:
                  // falls through
                  const fieldDef = getFieldDef(encoding[channel]);
                  if (fieldDef && !fieldDef.aggregate) {
                      details.push(vgField(fieldDef, {}));
                  }
                  return details;
              }
          }
      }, []);
  }

  var __rest$7 = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function filterTooltipWithAggregatedField(oldEncoding) {
      const { tooltip } = oldEncoding, filteredEncoding = __rest$7(oldEncoding, ["tooltip"]);
      if (!tooltip) {
          return { filteredEncoding };
      }
      let customTooltipWithAggregatedField;
      let customTooltipWithoutAggregatedField;
      if (isArray(tooltip)) {
          for (const t of tooltip) {
              if (t.aggregate) {
                  if (!customTooltipWithAggregatedField) {
                      customTooltipWithAggregatedField = [];
                  }
                  customTooltipWithAggregatedField.push(t);
              }
              else {
                  if (!customTooltipWithoutAggregatedField) {
                      customTooltipWithoutAggregatedField = [];
                  }
                  customTooltipWithoutAggregatedField.push(t);
              }
          }
          if (customTooltipWithAggregatedField) {
              filteredEncoding.tooltip = customTooltipWithAggregatedField;
          }
      }
      else {
          if (tooltip['aggregate']) {
              filteredEncoding.tooltip = tooltip;
          }
          else {
              customTooltipWithoutAggregatedField = tooltip;
          }
      }
      if (isArray(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) {
          customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];
      }
      return { customTooltipWithoutAggregatedField, filteredEncoding };
  }
  function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {
      if ('tooltip' in encodingWithoutContinuousAxis) {
          return { tooltip: encodingWithoutContinuousAxis.tooltip };
      }
      const fiveSummaryTooltip = tooltipSummary.map(({ fieldPrefix, titlePrefix }) => {
          const mainTitle = withFieldName ? ` of ${getTitle(continuousAxisChannelDef)}` : '';
          return {
              field: fieldPrefix + continuousAxisChannelDef.field,
              type: continuousAxisChannelDef.type,
              title: isSignalRef(titlePrefix) ? { signal: titlePrefix + `"${escape(mainTitle)}"` } : titlePrefix + mainTitle
          };
      });
      const tooltipFieldDefs = fieldDefs(encodingWithoutContinuousAxis).map(toStringFieldDef);
      return {
          tooltip: [
              ...fiveSummaryTooltip,
              // need to cast because TextFieldDef supports fewer types of bin
              ...unique(tooltipFieldDefs, hash)
          ]
      };
  }
  function getTitle(continuousAxisChannelDef) {
      const { title, field } = continuousAxisChannelDef;
      return getFirstDefined(title, field);
  }
  function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {
      const { scale, axis } = continuousAxisChannelDef;
      return ({ partName, mark, positionPrefix, endPositionPrefix = undefined, extraEncoding = {} }) => {
          const title = getTitle(continuousAxisChannelDef);
          return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {
              mark,
              encoding: Object.assign(Object.assign(Object.assign({ [continuousAxis]: Object.assign(Object.assign(Object.assign({ field: positionPrefix + '_' + continuousAxisChannelDef.field, type: continuousAxisChannelDef.type }, (title !== undefined ? { title } : {})), (scale !== undefined ? { scale } : {})), (axis !== undefined ? { axis } : {})) }, (isString$1(endPositionPrefix)
                  ? {
                      [continuousAxis + '2']: {
                          field: endPositionPrefix + '_' + continuousAxisChannelDef.field
                      }
                  }
                  : {})), sharedEncoding), extraEncoding)
          });
      };
  }
  function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {
      const { clip, color, opacity } = markDef;
      const mark = markDef.type;
      if (markDef[part] || (markDef[part] === undefined && compositeMarkConfig[part])) {
          return [
              Object.assign(Object.assign({}, partBaseSpec), { mark: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, compositeMarkConfig[part]), (clip ? { clip } : {})), (color ? { color } : {})), (opacity ? { opacity } : {})), (isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : { type: partBaseSpec.mark })), { style: `${mark}-${part}` }), (isBoolean(markDef[part]) ? {} : markDef[part])) })
          ];
      }
      return [];
  }
  function compositeMarkContinuousAxis(spec, orient, compositeMark) {
      const { encoding } = spec;
      const continuousAxis = orient === 'vertical' ? 'y' : 'x';
      const continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.
      const continuousAxisChannelDef2 = encoding[continuousAxis + '2'];
      const continuousAxisChannelDefError = encoding[continuousAxis + 'Error'];
      const continuousAxisChannelDefError2 = encoding[continuousAxis + 'Error2'];
      return {
          continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),
          continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),
          continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),
          continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),
          continuousAxis
      };
  }
  function filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {
      if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {
          const { aggregate } = continuousAxisChannelDef, continuousAxisWithoutAggregate = __rest$7(continuousAxisChannelDef, ["aggregate"]);
          if (aggregate !== compositeMark) {
              warn(errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));
          }
          return continuousAxisWithoutAggregate;
      }
      else {
          return continuousAxisChannelDef;
      }
  }
  function compositeMarkOrient(spec, compositeMark) {
      const { mark, encoding } = spec;
      const { x, y } = encoding;
      if (isMarkDef(mark) && mark.orient) {
          return mark.orient;
      }
      if (isContinuousFieldOrDatumDef(x)) {
          // x is continuous
          if (isContinuousFieldOrDatumDef(y)) {
              // both x and y are continuous
              const xAggregate = isFieldDef(x) && x.aggregate;
              const yAggregate = isFieldDef(y) && y.aggregate;
              if (!xAggregate && yAggregate === compositeMark) {
                  return 'vertical';
              }
              else if (!yAggregate && xAggregate === compositeMark) {
                  return 'horizontal';
              }
              else if (xAggregate === compositeMark && yAggregate === compositeMark) {
                  throw new Error('Both x and y cannot have aggregate');
              }
              else {
                  if (isFieldOrDatumDefForTimeFormat(y) && !isFieldOrDatumDefForTimeFormat(x)) {
                      // y is temporal but x is not
                      return 'horizontal';
                  }
                  // default orientation for two continuous
                  return 'vertical';
              }
          }
          return 'horizontal';
      }
      else if (isContinuousFieldOrDatumDef(y)) {
          // y is continuous but x is not
          return 'vertical';
      }
      else {
          // Neither x nor y is continuous.
          throw new Error(`Need a valid continuous axis for ${compositeMark}s`);
      }
  }

  var __rest$8 = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  const BOXPLOT = 'boxplot';
  const BOXPLOT_PARTS = ['box', 'median', 'outliers', 'rule', 'ticks'];
  const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);
  function getBoxPlotType(extent) {
      if (isNumber$1(extent)) {
          return 'tukey';
      }
      // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`. However, I'm not exposing this for now.
      return extent;
  }
  function normalizeBoxPlot(spec, { config }) {
      var _a, _b;
      // Need to initEncoding first so we can infer type
      spec = Object.assign(Object.assign({}, spec), { encoding: normalizeEncoding(spec.encoding, config) });
      const { mark, encoding: _encoding, selection, projection: _p } = spec, outerSpec = __rest$8(spec, ["mark", "encoding", "selection", "projection"]);
      const markDef = isMarkDef(mark) ? mark : { type: mark };
      // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support
      if (selection) {
          warn(selectionNotSupported('boxplot'));
      }
      const extent = (_a = markDef.extent) !== null && _a !== void 0 ? _a : config.boxplot.extent;
      const sizeValue = getMarkPropOrConfig('size', markDef, // TODO: https://github.com/vega/vega-lite/issues/6245
      config);
      const boxPlotType = getBoxPlotType(extent);
      const { bins, timeUnits, transform, continuousAxisChannelDef, continuousAxis, groupby, aggregate, encodingWithoutContinuousAxis, ticksOrient, boxOrient, customTooltipWithoutAggregatedField } = boxParams(spec, extent, config);
      const { color, size } = encodingWithoutContinuousAxis, encodingWithoutSizeColorAndContinuousAxis = __rest$8(encodingWithoutContinuousAxis, ["color", "size"]);
      const makeBoxPlotPart = (sharedEncoding) => {
          return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);
      };
      const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);
      const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);
      const makeBoxPlotMidTick = makeBoxPlotPart(Object.assign(Object.assign({}, encodingWithoutSizeColorAndContinuousAxis), (size ? { size } : {})));
      const fiveSummaryTooltipEncoding = getCompositeMarkTooltip([
          { fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_', titlePrefix: 'Max' },
          { fieldPrefix: 'upper_box_', titlePrefix: 'Q3' },
          { fieldPrefix: 'mid_box_', titlePrefix: 'Median' },
          { fieldPrefix: 'lower_box_', titlePrefix: 'Q1' },
          { fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_', titlePrefix: 'Min' }
      ], continuousAxisChannelDef, encodingWithoutContinuousAxis);
      // ## Whisker Layers
      const endTick = { type: 'tick', color: 'black', opacity: 1, orient: ticksOrient, invalid: null, aria: false };
      const whiskerTooltipEncoding = boxPlotType === 'min-max'
          ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker
          : // for tukey / k-IQR, just show upper/lower-whisker
              getCompositeMarkTooltip([
                  { fieldPrefix: 'upper_whisker_', titlePrefix: 'Upper Whisker' },
                  { fieldPrefix: 'lower_whisker_', titlePrefix: 'Lower Whisker' }
              ], continuousAxisChannelDef, encodingWithoutContinuousAxis);
      const whiskerLayers = [
          ...makeBoxPlotExtent({
              partName: 'rule',
              mark: { type: 'rule', invalid: null, aria: false },
              positionPrefix: 'lower_whisker',
              endPositionPrefix: 'lower_box',
              extraEncoding: whiskerTooltipEncoding
          }),
          ...makeBoxPlotExtent({
              partName: 'rule',
              mark: { type: 'rule', invalid: null, aria: false },
              positionPrefix: 'upper_box',
              endPositionPrefix: 'upper_whisker',
              extraEncoding: whiskerTooltipEncoding
          }),
          ...makeBoxPlotExtent({
              partName: 'ticks',
              mark: endTick,
              positionPrefix: 'lower_whisker',
              extraEncoding: whiskerTooltipEncoding
          }),
          ...makeBoxPlotExtent({
              partName: 'ticks',
              mark: endTick,
              positionPrefix: 'upper_whisker',
              extraEncoding: whiskerTooltipEncoding
          })
      ];
      // ## Box Layers
      // TODO: support hiding certain mark parts
      const boxLayers = [
          ...(boxPlotType !== 'tukey' ? whiskerLayers : []),
          ...makeBoxPlotBox({
              partName: 'box',
              mark: Object.assign(Object.assign({ type: 'bar' }, (sizeValue ? { size: sizeValue } : {})), { orient: boxOrient, invalid: null, ariaRoleDescription: 'box' }),
              positionPrefix: 'lower_box',
              endPositionPrefix: 'upper_box',
              extraEncoding: fiveSummaryTooltipEncoding
          }),
          ...makeBoxPlotMidTick({
              partName: 'median',
              mark: Object.assign(Object.assign(Object.assign({ type: 'tick', invalid: null }, (isObject(config.boxplot.median) && config.boxplot.median.color ? { color: config.boxplot.median.color } : {})), (sizeValue ? { size: sizeValue } : {})), { orient: ticksOrient, aria: false }),
              positionPrefix: 'mid_box',
              extraEncoding: fiveSummaryTooltipEncoding
          })
      ];
      if (boxPlotType === 'min-max') {
          return Object.assign(Object.assign({}, outerSpec), { transform: ((_b = outerSpec.transform) !== null && _b !== void 0 ? _b : []).concat(transform), layer: boxLayers });
      }
      // Tukey Box Plot
      const lowerBoxExpr = `datum["lower_box_${continuousAxisChannelDef.field}"]`;
      const upperBoxExpr = `datum["upper_box_${continuousAxisChannelDef.field}"]`;
      const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;
      const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;
      const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;
      const fieldExpr = `datum["${continuousAxisChannelDef.field}"]`;
      const joinaggregateTransform = {
          joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),
          groupby
      };
      const filteredWhiskerSpec = {
          transform: [
              {
                  filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`
              },
              {
                  aggregate: [
                      {
                          op: 'min',
                          field: continuousAxisChannelDef.field,
                          as: 'lower_whisker_' + continuousAxisChannelDef.field
                      },
                      {
                          op: 'max',
                          field: continuousAxisChannelDef.field,
                          as: 'upper_whisker_' + continuousAxisChannelDef.field
                      },
                      // preserve lower_box / upper_box
                      {
                          op: 'min',
                          field: 'lower_box_' + continuousAxisChannelDef.field,
                          as: 'lower_box_' + continuousAxisChannelDef.field
                      },
                      {
                          op: 'max',
                          field: 'upper_box_' + continuousAxisChannelDef.field,
                          as: 'upper_box_' + continuousAxisChannelDef.field
                      },
                      ...aggregate
                  ],
                  groupby
              }
          ],
          layer: whiskerLayers
      };
      const encodingWithoutSizeColorContinuousAxisAndTooltip = __rest$8(encodingWithoutSizeColorAndContinuousAxis, ["tooltip"]);
      const { scale, axis } = continuousAxisChannelDef;
      const title = getTitle(continuousAxisChannelDef);
      const axisWithoutTitle = omit(axis, ['title']);
      const outlierLayersMixins = partLayerMixins(markDef, 'outliers', config.boxplot, {
          transform: [{ filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})` }],
          mark: 'point',
          encoding: Object.assign(Object.assign(Object.assign({ [continuousAxis]: Object.assign(Object.assign(Object.assign({ field: continuousAxisChannelDef.field, type: continuousAxisChannelDef.type }, (title !== undefined ? { title } : {})), (scale !== undefined ? { scale } : {})), (isEmpty$1(axisWithoutTitle) ? {} : { axis: axisWithoutTitle })) }, encodingWithoutSizeColorContinuousAxisAndTooltip), (color ? { color } : {})), (customTooltipWithoutAggregatedField ? { tooltip: customTooltipWithoutAggregatedField } : {}))
      })[0];
      let filteredLayersMixins;
      const filteredLayersMixinsTransforms = [...bins, ...timeUnits, joinaggregateTransform];
      if (outlierLayersMixins) {
          filteredLayersMixins = {
              transform: filteredLayersMixinsTransforms,
              layer: [outlierLayersMixins, filteredWhiskerSpec]
          };
      }
      else {
          filteredLayersMixins = filteredWhiskerSpec;
          filteredLayersMixins.transform.unshift(...filteredLayersMixinsTransforms);
      }
      return Object.assign(Object.assign({}, outerSpec), { layer: [
              filteredLayersMixins,
              {
                  // boxplot
                  transform,
                  layer: boxLayers
              }
          ] });
  }
  function boxParamsQuartiles(continousAxisField) {
      return [
          {
              op: 'q1',
              field: continousAxisField,
              as: 'lower_box_' + continousAxisField
          },
          {
              op: 'q3',
              field: continousAxisField,
              as: 'upper_box_' + continousAxisField
          }
      ];
  }
  function boxParams(spec, extent, config) {
      const orient = compositeMarkOrient(spec, BOXPLOT);
      const { continuousAxisChannelDef, continuousAxis } = compositeMarkContinuousAxis(spec, orient, BOXPLOT);
      const continuousFieldName = continuousAxisChannelDef.field;
      const boxPlotType = getBoxPlotType(extent);
      const boxplotSpecificAggregate = [
          ...boxParamsQuartiles(continuousFieldName),
          {
              op: 'median',
              field: continuousFieldName,
              as: 'mid_box_' + continuousFieldName
          },
          {
              op: 'min',
              field: continuousFieldName,
              as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName
          },
          {
              op: 'max',
              field: continuousFieldName,
              as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName
          }
      ];
      const postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey'
          ? []
          : [
              // This is for the  original k-IQR, which we do not expose
              {
                  calculate: `datum["upper_box_${continuousFieldName}"] - datum["lower_box_${continuousFieldName}"]`,
                  as: 'iqr_' + continuousFieldName
              },
              {
                  calculate: `min(datum["upper_box_${continuousFieldName}"] + datum["iqr_${continuousFieldName}"] * ${extent}, datum["max_${continuousFieldName}"])`,
                  as: 'upper_whisker_' + continuousFieldName
              },
              {
                  calculate: `max(datum["lower_box_${continuousFieldName}"] - datum["iqr_${continuousFieldName}"] * ${extent}, datum["min_${continuousFieldName}"])`,
                  as: 'lower_whisker_' + continuousFieldName
              }
          ];
      const _a = spec.encoding, _b = continuousAxis, oldContinuousAxisChannelDef = _a[_b], oldEncodingWithoutContinuousAxis = __rest$8(_a, [typeof _b === "symbol" ? _b : _b + ""]);
      const { customTooltipWithoutAggregatedField, filteredEncoding } = filterTooltipWithAggregatedField(oldEncodingWithoutContinuousAxis);
      const { bins, timeUnits, aggregate, groupby, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(filteredEncoding, config);
      const ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';
      const boxOrient = orient;
      const transform = [
          ...bins,
          ...timeUnits,
          {
              aggregate: [...aggregate, ...boxplotSpecificAggregate],
              groupby
          },
          ...postAggregateCalculates
      ];
      return {
          bins,
          timeUnits,
          transform,
          groupby,
          aggregate,
          continuousAxisChannelDef,
          continuousAxis,
          encodingWithoutContinuousAxis,
          ticksOrient,
          boxOrient,
          customTooltipWithoutAggregatedField
      };
  }

  var __rest$9 = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  const ERRORBAR = 'errorbar';
  const ERRORBAR_PARTS = ['ticks', 'rule'];
  const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);
  function normalizeErrorBar(spec, { config }) {
      // Need to initEncoding first so we can infer type
      spec = Object.assign(Object.assign({}, spec), { encoding: normalizeEncoding(spec.encoding, config) });
      const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, ticksOrient, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAR, config);
      delete encodingWithoutContinuousAxis['size'];
      const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);
      const thickness = markDef.thickness;
      const size = markDef.size;
      const tick = Object.assign(Object.assign({ type: 'tick', orient: ticksOrient, aria: false }, (thickness !== undefined ? { thickness } : {})), (size !== undefined ? { size } : {}));
      const layer = [
          ...makeErrorBarPart({
              partName: 'ticks',
              mark: tick,
              positionPrefix: 'lower',
              extraEncoding: tooltipEncoding
          }),
          ...makeErrorBarPart({
              partName: 'ticks',
              mark: tick,
              positionPrefix: 'upper',
              extraEncoding: tooltipEncoding
          }),
          ...makeErrorBarPart({
              partName: 'rule',
              mark: Object.assign({ type: 'rule', ariaRoleDescription: 'errorbar' }, (thickness !== undefined ? { size: thickness } : {})),
              positionPrefix: 'lower',
              endPositionPrefix: 'upper',
              extraEncoding: tooltipEncoding
          })
      ];
      return Object.assign(Object.assign(Object.assign({}, outerSpec), { transform }), (layer.length > 1 ? { layer } : Object.assign({}, layer[0])));
  }
  function errorBarOrientAndInputType(spec, compositeMark) {
      const { encoding } = spec;
      if (errorBarIsInputTypeRaw(encoding)) {
          return {
              orient: compositeMarkOrient(spec, compositeMark),
              inputType: 'raw'
          };
      }
      const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);
      const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);
      const x = encoding.x;
      const y = encoding.y;
      if (isTypeAggregatedUpperLower) {
          // type is aggregated-upper-lower
          if (isTypeAggregatedError) {
              throw new Error(`${compositeMark} cannot be both type aggregated-upper-lower and aggregated-error`);
          }
          const x2 = encoding.x2;
          const y2 = encoding.y2;
          if (isFieldOrDatumDef(x2) && isFieldOrDatumDef(y2)) {
              // having both x, x2 and y, y2
              throw new Error(`${compositeMark} cannot have both x2 and y2`);
          }
          else if (isFieldOrDatumDef(x2)) {
              if (isContinuousFieldOrDatumDef(x)) {
                  // having x, x2 quantitative and field y, y2 are not specified
                  return { orient: 'horizontal', inputType: 'aggregated-upper-lower' };
              }
              else {
                  // having x, x2 that are not both quantitative
                  throw new Error(`Both x and x2 have to be quantitative in ${compositeMark}`);
              }
          }
          else if (isFieldOrDatumDef(y2)) {
              // y2 is a FieldDef
              if (isContinuousFieldOrDatumDef(y)) {
                  // having y, y2 quantitative and field x, x2 are not specified
                  return { orient: 'vertical', inputType: 'aggregated-upper-lower' };
              }
              else {
                  // having y, y2 that are not both quantitative
                  throw new Error(`Both y and y2 have to be quantitative in ${compositeMark}`);
              }
          }
          throw new Error('No ranged axis');
      }
      else {
          // type is aggregated-error
          const xError = encoding.xError;
          const xError2 = encoding.xError2;
          const yError = encoding.yError;
          const yError2 = encoding.yError2;
          if (isFieldOrDatumDef(xError2) && !isFieldOrDatumDef(xError)) {
              // having xError2 without xError
              throw new Error(`${compositeMark} cannot have xError2 without xError`);
          }
          if (isFieldOrDatumDef(yError2) && !isFieldOrDatumDef(yError)) {
              // having yError2 without yError
              throw new Error(`${compositeMark} cannot have yError2 without yError`);
          }
          if (isFieldOrDatumDef(xError) && isFieldOrDatumDef(yError)) {
              // having both xError and yError
              throw new Error(`${compositeMark} cannot have both xError and yError with both are quantiative`);
          }
          else if (isFieldOrDatumDef(xError)) {
              if (isContinuousFieldOrDatumDef(x)) {
                  // having x and xError that are all quantitative
                  return { orient: 'horizontal', inputType: 'aggregated-error' };
              }
              else {
                  // having x, xError, and xError2 that are not all quantitative
                  throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');
              }
          }
          else if (isFieldOrDatumDef(yError)) {
              if (isContinuousFieldOrDatumDef(y)) {
                  // having y and yError that are all quantitative
                  return { orient: 'vertical', inputType: 'aggregated-error' };
              }
              else {
                  // having y, yError, and yError2 that are not all quantitative
                  throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');
              }
          }
          throw new Error('No ranged axis');
      }
  }
  function errorBarIsInputTypeRaw(encoding) {
      return ((isFieldOrDatumDef(encoding.x) || isFieldOrDatumDef(encoding.y)) &&
          !isFieldOrDatumDef(encoding.x2) &&
          !isFieldOrDatumDef(encoding.y2) &&
          !isFieldOrDatumDef(encoding.xError) &&
          !isFieldOrDatumDef(encoding.xError2) &&
          !isFieldOrDatumDef(encoding.yError) &&
          !isFieldOrDatumDef(encoding.yError2));
  }
  function errorBarIsInputTypeAggregatedUpperLower(encoding) {
      return isFieldOrDatumDef(encoding.x2) || isFieldOrDatumDef(encoding.y2);
  }
  function errorBarIsInputTypeAggregatedError(encoding) {
      return (isFieldOrDatumDef(encoding.xError) ||
          isFieldOrDatumDef(encoding.xError2) ||
          isFieldOrDatumDef(encoding.yError) ||
          isFieldOrDatumDef(encoding.yError2));
  }
  function errorBarParams(spec, compositeMark, config) {
      var _a;
      // TODO: use selection
      const { mark, encoding, selection, projection: _p } = spec, outerSpec = __rest$9(spec, ["mark", "encoding", "selection", "projection"]);
      const markDef = isMarkDef(mark) ? mark : { type: mark };
      // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support
      if (selection) {
          warn(selectionNotSupported(compositeMark));
      }
      const { orient, inputType } = errorBarOrientAndInputType(spec, compositeMark);
      const { continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, continuousAxis } = compositeMarkContinuousAxis(spec, orient, compositeMark);
      const { errorBarSpecificAggregate, postAggregateCalculates, tooltipSummary, tooltipTitleWithFieldName } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);
      const _b = encoding, _c = continuousAxis, oldContinuousAxisChannelDef = _b[_c], _d = continuousAxis === 'x' ? 'x2' : 'y2', oldContinuousAxisChannelDef2 = _b[_d], _e = continuousAxis === 'x' ? 'xError' : 'yError', oldContinuousAxisChannelDefError = _b[_e], _f = continuousAxis === 'x' ? 'xError2' : 'yError2', oldContinuousAxisChannelDefError2 = _b[_f], oldEncodingWithoutContinuousAxis = __rest$9(_b, [typeof _c === "symbol" ? _c : _c + "", typeof _d === "symbol" ? _d : _d + "", typeof _e === "symbol" ? _e : _e + "", typeof _f === "symbol" ? _f : _f + ""]);
      const { bins, timeUnits, aggregate: oldAggregate, groupby: oldGroupBy, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);
      const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];
      const groupby = inputType !== 'raw' ? [] : oldGroupBy;
      const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);
      return {
          transform: [
              ...((_a = outerSpec.transform) !== null && _a !== void 0 ? _a : []),
              ...bins,
              ...timeUnits,
              ...(aggregate.length === 0 ? [] : [{ aggregate, groupby }]),
              ...postAggregateCalculates
          ],
          groupby,
          continuousAxisChannelDef,
          continuousAxis,
          encodingWithoutContinuousAxis,
          ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',
          markDef,
          outerSpec,
          tooltipEncoding
      };
  }
  function errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {
      let errorBarSpecificAggregate = [];
      let postAggregateCalculates = [];
      const continuousFieldName = continuousAxisChannelDef.field;
      let tooltipSummary;
      let tooltipTitleWithFieldName = false;
      if (inputType === 'raw') {
          const center = markDef.center
              ? markDef.center
              : markDef.extent
                  ? markDef.extent === 'iqr'
                      ? 'median'
                      : 'mean'
                  : config.errorbar.center;
          const extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';
          if ((center === 'median') !== (extent === 'iqr')) {
              warn(errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));
          }
          if (extent === 'stderr' || extent === 'stdev') {
              errorBarSpecificAggregate = [
                  { op: extent, field: continuousFieldName, as: 'extent_' + continuousFieldName },
                  { op: center, field: continuousFieldName, as: 'center_' + continuousFieldName }
              ];
              postAggregateCalculates = [
                  {
                      calculate: `datum["center_${continuousFieldName}"] + datum["extent_${continuousFieldName}"]`,
                      as: 'upper_' + continuousFieldName
                  },
                  {
                      calculate: `datum["center_${continuousFieldName}"] - datum["extent_${continuousFieldName}"]`,
                      as: 'lower_' + continuousFieldName
                  }
              ];
              tooltipSummary = [
                  { fieldPrefix: 'center_', titlePrefix: titleCase(center) },
                  { fieldPrefix: 'upper_', titlePrefix: getTitlePrefix(center, extent, '+') },
                  { fieldPrefix: 'lower_', titlePrefix: getTitlePrefix(center, extent, '-') }
              ];
              tooltipTitleWithFieldName = true;
          }
          else {
              let centerOp;
              let lowerExtentOp;
              let upperExtentOp;
              if (extent === 'ci') {
                  centerOp = 'mean';
                  lowerExtentOp = 'ci0';
                  upperExtentOp = 'ci1';
              }
              else {
                  centerOp = 'median';
                  lowerExtentOp = 'q1';
                  upperExtentOp = 'q3';
              }
              errorBarSpecificAggregate = [
                  { op: lowerExtentOp, field: continuousFieldName, as: 'lower_' + continuousFieldName },
                  { op: upperExtentOp, field: continuousFieldName, as: 'upper_' + continuousFieldName },
                  { op: centerOp, field: continuousFieldName, as: 'center_' + continuousFieldName }
              ];
              tooltipSummary = [
                  {
                      fieldPrefix: 'upper_',
                      titlePrefix: title$1({ field: continuousFieldName, aggregate: upperExtentOp, type: 'quantitative' }, config, {
                          allowDisabling: false
                      })
                  },
                  {
                      fieldPrefix: 'lower_',
                      titlePrefix: title$1({ field: continuousFieldName, aggregate: lowerExtentOp, type: 'quantitative' }, config, {
                          allowDisabling: false
                      })
                  },
                  {
                      fieldPrefix: 'center_',
                      titlePrefix: title$1({ field: continuousFieldName, aggregate: centerOp, type: 'quantitative' }, config, {
                          allowDisabling: false
                      })
                  }
              ];
          }
      }
      else {
          if (markDef.center || markDef.extent) {
              warn(errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));
          }
          if (inputType === 'aggregated-upper-lower') {
              tooltipSummary = [];
              postAggregateCalculates = [
                  { calculate: `datum["${continuousAxisChannelDef2.field}"]`, as: 'upper_' + continuousFieldName },
                  { calculate: `datum["${continuousFieldName}"]`, as: 'lower_' + continuousFieldName }
              ];
          }
          else if (inputType === 'aggregated-error') {
              tooltipSummary = [{ fieldPrefix: '', titlePrefix: continuousFieldName }];
              postAggregateCalculates = [
                  {
                      calculate: `datum["${continuousFieldName}"] + datum["${continuousAxisChannelDefError.field}"]`,
                      as: 'upper_' + continuousFieldName
                  }
              ];
              if (continuousAxisChannelDefError2) {
                  postAggregateCalculates.push({
                      calculate: `datum["${continuousFieldName}"] + datum["${continuousAxisChannelDefError2.field}"]`,
                      as: 'lower_' + continuousFieldName
                  });
              }
              else {
                  postAggregateCalculates.push({
                      calculate: `datum["${continuousFieldName}"] - datum["${continuousAxisChannelDefError.field}"]`,
                      as: 'lower_' + continuousFieldName
                  });
              }
          }
          for (const postAggregateCalculate of postAggregateCalculates) {
              tooltipSummary.push({
                  fieldPrefix: postAggregateCalculate.as.substring(0, 6),
                  titlePrefix: replaceAll(replaceAll(postAggregateCalculate.calculate, 'datum["', ''), '"]', '')
              });
          }
      }
      return { postAggregateCalculates, errorBarSpecificAggregate, tooltipSummary, tooltipTitleWithFieldName };
  }
  function getTitlePrefix(center, extent, operation) {
      return titleCase(center) + ' ' + operation + ' ' + extent;
  }

  const ERRORBAND = 'errorband';
  const ERRORBAND_PARTS = ['band', 'borders'];
  const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);
  function normalizeErrorBand(spec, { config }) {
      // Need to initEncoding first so we can infer type
      spec = Object.assign(Object.assign({}, spec), { encoding: normalizeEncoding(spec.encoding, config) });
      const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAND, config);
      const errorBandDef = markDef;
      const makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);
      const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;
      let bandMark = { type: is2D ? 'area' : 'rect' };
      let bordersMark = { type: is2D ? 'line' : 'rule' };
      const interpolate = Object.assign(Object.assign({}, (errorBandDef.interpolate ? { interpolate: errorBandDef.interpolate } : {})), (errorBandDef.tension && errorBandDef.interpolate ? { tension: errorBandDef.tension } : {}));
      if (is2D) {
          bandMark = Object.assign(Object.assign(Object.assign({}, bandMark), interpolate), { ariaRoleDescription: 'errorband' });
          bordersMark = Object.assign(Object.assign(Object.assign({}, bordersMark), interpolate), { aria: false });
      }
      else if (errorBandDef.interpolate) {
          warn(errorBand1DNotSupport('interpolate'));
      }
      else if (errorBandDef.tension) {
          warn(errorBand1DNotSupport('tension'));
      }
      return Object.assign(Object.assign({}, outerSpec), { transform, layer: [
              ...makeErrorBandPart({
                  partName: 'band',
                  mark: bandMark,
                  positionPrefix: 'lower',
                  endPositionPrefix: 'upper',
                  extraEncoding: tooltipEncoding
              }),
              ...makeErrorBandPart({
                  partName: 'borders',
                  mark: bordersMark,
                  positionPrefix: 'lower',
                  extraEncoding: tooltipEncoding
              }),
              ...makeErrorBandPart({
                  partName: 'borders',
                  mark: bordersMark,
                  positionPrefix: 'upper',
                  extraEncoding: tooltipEncoding
              })
          ] });
  }

  /**
   * Registry index for all composite mark's normalizer
   */
  const compositeMarkRegistry = {};
  function add(mark, run, parts) {
      const normalizer = new CompositeMarkNormalizer(mark, run);
      compositeMarkRegistry[mark] = { normalizer, parts };
  }
  function getAllCompositeMarks() {
      return keys(compositeMarkRegistry);
  }
  add(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);
  add(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);
  add(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);

  const VL_ONLY_LEGEND_CONFIG = [
      'gradientHorizontalMaxLength',
      'gradientHorizontalMinLength',
      'gradientVerticalMaxLength',
      'gradientVerticalMinLength',
      'unselectedOpacity'
  ];

  const HEADER_TITLE_PROPERTIES_MAP = {
      titleAlign: 'align',
      titleAnchor: 'anchor',
      titleAngle: 'angle',
      titleBaseline: 'baseline',
      titleColor: 'color',
      titleFont: 'font',
      titleFontSize: 'fontSize',
      titleFontStyle: 'fontStyle',
      titleFontWeight: 'fontWeight',
      titleLimit: 'limit',
      titleLineHeight: 'lineHeight',
      titleOrient: 'orient',
      titlePadding: 'offset'
  };
  const HEADER_LABEL_PROPERTIES_MAP = {
      labelAlign: 'align',
      labelAnchor: 'anchor',
      labelAngle: 'angle',
      labelBaseline: 'baseline',
      labelColor: 'color',
      labelFont: 'font',
      labelFontSize: 'fontSize',
      labelFontStyle: 'fontStyle',
      labelFontWeight: 'fontWeight',
      labelLimit: 'limit',
      labelLineHeight: 'lineHeight',
      labelOrient: 'orient',
      labelPadding: 'offset'
  };
  const HEADER_TITLE_PROPERTIES = keys(HEADER_TITLE_PROPERTIES_MAP);
  const HEADER_LABEL_PROPERTIES = keys(HEADER_LABEL_PROPERTIES_MAP);
  const HEADER_CONFIGS_INDEX = {
      header: 1,
      headerRow: 1,
      headerColumn: 1,
      headerFacet: 1
  };
  const HEADER_CONFIGS = keys(HEADER_CONFIGS_INDEX);

  const LEGEND_SCALE_CHANNELS = [
      'size',
      'shape',
      'fill',
      'stroke',
      'strokeDash',
      'strokeWidth',
      'opacity'
  ];
  const defaultLegendConfig = {
      gradientHorizontalMaxLength: 200,
      gradientHorizontalMinLength: 100,
      gradientVerticalMaxLength: 200,
      gradientVerticalMinLength: 64,
      unselectedOpacity: 0.35
  };
  const COMMON_LEGEND_PROPERTY_INDEX = {
      aria: 1,
      clipHeight: 1,
      columnPadding: 1,
      columns: 1,
      cornerRadius: 1,
      description: 1,
      direction: 1,
      fillColor: 1,
      format: 1,
      formatType: 1,
      gradientLength: 1,
      gradientOpacity: 1,
      gradientStrokeColor: 1,
      gradientStrokeWidth: 1,
      gradientThickness: 1,
      gridAlign: 1,
      labelAlign: 1,
      labelBaseline: 1,
      labelColor: 1,
      labelFont: 1,
      labelFontSize: 1,
      labelFontStyle: 1,
      labelFontWeight: 1,
      labelLimit: 1,
      labelOffset: 1,
      labelOpacity: 1,
      labelOverlap: 1,
      labelPadding: 1,
      labelSeparation: 1,
      legendX: 1,
      legendY: 1,
      offset: 1,
      orient: 1,
      padding: 1,
      rowPadding: 1,
      strokeColor: 1,
      symbolDash: 1,
      symbolDashOffset: 1,
      symbolFillColor: 1,
      symbolLimit: 1,
      symbolOffset: 1,
      symbolOpacity: 1,
      symbolSize: 1,
      symbolStrokeColor: 1,
      symbolStrokeWidth: 1,
      symbolType: 1,
      tickCount: 1,
      tickMinStep: 1,
      title: 1,
      titleAlign: 1,
      titleAnchor: 1,
      titleBaseline: 1,
      titleColor: 1,
      titleFont: 1,
      titleFontSize: 1,
      titleFontStyle: 1,
      titleFontWeight: 1,
      titleLimit: 1,
      titleLineHeight: 1,
      titleOpacity: 1,
      titleOrient: 1,
      titlePadding: 1,
      type: 1,
      values: 1,
      zindex: 1
  };

  var __rest$a = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function assembleParameterSignals(params) {
      const signals = [];
      for (const param of params || []) {
          const { expr, bind } = param, rest = __rest$a(param, ["expr", "bind"]);
          if (bind && expr) {
              // Vega's InitSignal -- apply expr to "init"
              const signal = Object.assign(Object.assign({}, rest), { bind, init: expr });
              signals.push(signal);
          }
          else {
              const signal = Object.assign(Object.assign(Object.assign({}, rest), (expr ? { update: expr } : {})), (bind ? { bind } : {}));
              signals.push(signal);
          }
      }
      return signals;
  }

  const SELECTION_ID = '_vgsid_';
  const defaultConfig = {
      single: {
          on: 'click',
          fields: [SELECTION_ID],
          resolve: 'global',
          empty: 'all',
          clear: 'dblclick'
      },
      multi: {
          on: 'click',
          fields: [SELECTION_ID],
          toggle: 'event.shiftKey',
          resolve: 'global',
          empty: 'all',
          clear: 'dblclick'
      },
      interval: {
          on: '[mousedown, window:mouseup] > window:mousemove!',
          encodings: ['x', 'y'],
          translate: '[mousedown, window:mouseup] > window:mousemove!',
          zoom: 'wheel!',
          mark: { fill: '#333', fillOpacity: 0.125, stroke: 'white' },
          resolve: 'global',
          clear: 'dblclick'
      }
  };
  function isLegendBinding(bind) {
      return !!bind && (bind === 'legend' || !!bind.legend);
  }
  function isLegendStreamBinding(bind) {
      return isLegendBinding(bind) && isObject(bind);
  }

  function isAnyConcatSpec(spec) {
      return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);
  }
  function isConcatSpec(spec) {
      return 'concat' in spec;
  }
  function isVConcatSpec(spec) {
      return 'vconcat' in spec;
  }
  function isHConcatSpec(spec) {
      return 'hconcat' in spec;
  }

  function isStep(size) {
      return isObject(size) && size['step'] !== undefined;
  }
  function isFrameMixins(o) {
      return o['view'] || o['width'] || o['height'];
  }
  const DEFAULT_SPACING = 20;
  const COMPOSITION_LAYOUT_INDEX = {
      align: 1,
      bounds: 1,
      center: 1,
      columns: 1,
      spacing: 1
  };
  const COMPOSITION_LAYOUT_PROPERTIES = keys(COMPOSITION_LAYOUT_INDEX);
  function extractCompositionLayout(spec, specType, config) {
      var _a, _b;
      const compositionConfig = config[specType];
      const layout = {};
      // Apply config first
      const { spacing: spacingConfig, columns } = compositionConfig;
      if (spacingConfig !== undefined) {
          layout.spacing = spacingConfig;
      }
      if (columns !== undefined) {
          if ((isFacetSpec(spec) && !isFacetMapping(spec.facet)) || isConcatSpec(spec)) {
              layout.columns = columns;
          }
      }
      if (isVConcatSpec(spec)) {
          layout.columns = 1;
      }
      // Then copy properties from the spec
      for (const prop of COMPOSITION_LAYOUT_PROPERTIES) {
          if (spec[prop] !== undefined) {
              if (prop === 'spacing') {
                  const spacing = spec[prop];
                  layout[prop] = isNumber$1(spacing)
                      ? spacing
                      : {
                          row: (_a = spacing.row) !== null && _a !== void 0 ? _a : spacingConfig,
                          column: (_b = spacing.column) !== null && _b !== void 0 ? _b : spacingConfig
                      };
              }
              else {
                  layout[prop] = spec[prop];
              }
          }
      }
      return layout;
  }

  var __rest$b = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function getViewConfigContinuousSize(viewConfig, channel) {
      var _a;
      return (_a = viewConfig[channel]) !== null && _a !== void 0 ? _a : viewConfig[channel === 'width' ? 'continuousWidth' : 'continuousHeight']; // get width/height for backwards compatibility
  }
  function getViewConfigDiscreteStep(viewConfig, channel) {
      const size = getViewConfigDiscreteSize(viewConfig, channel);
      return isStep(size) ? size.step : DEFAULT_STEP;
  }
  function getViewConfigDiscreteSize(viewConfig, channel) {
      var _a;
      const size = (_a = viewConfig[channel]) !== null && _a !== void 0 ? _a : viewConfig[channel === 'width' ? 'discreteWidth' : 'discreteHeight']; // get width/height for backwards compatibility
      return getFirstDefined(size, { step: viewConfig.step });
  }
  const DEFAULT_STEP = 20;
  const defaultViewConfig = {
      continuousWidth: 200,
      continuousHeight: 200,
      step: DEFAULT_STEP
  };
  const defaultConfig$1 = {
      background: 'white',
      padding: 5,
      timeFormat: '%b %d, %Y',
      countTitle: 'Count of Records',
      view: defaultViewConfig,
      mark: defaultMarkConfig,
      arc: {},
      area: {},
      bar: defaultBarConfig,
      circle: {},
      geoshape: {},
      image: {},
      line: {},
      point: {},
      rect: defaultRectConfig,
      rule: { color: 'black' },
      square: {},
      text: { color: 'black' },
      tick: defaultTickConfig,
      trail: {},
      boxplot: {
          size: 14,
          extent: 1.5,
          box: {},
          median: { color: 'white' },
          outliers: {},
          rule: {},
          ticks: null
      },
      errorbar: {
          center: 'mean',
          rule: true,
          ticks: false
      },
      errorband: {
          band: {
              opacity: 0.3
          },
          borders: false
      },
      scale: defaultScaleConfig,
      projection: {},
      legend: defaultLegendConfig,
      header: { titlePadding: 10, labelPadding: 10 },
      headerColumn: {},
      headerRow: {},
      headerFacet: {},
      selection: defaultConfig,
      style: {},
      title: {},
      facet: { spacing: DEFAULT_SPACING },
      concat: { spacing: DEFAULT_SPACING }
  };
  // Tableau10 color palette, copied from `vegaScale.scheme('tableau10')`
  const tab10 = [
      '#4c78a8',
      '#f58518',
      '#e45756',
      '#72b7b2',
      '#54a24b',
      '#eeca3b',
      '#b279a2',
      '#ff9da6',
      '#9d755d',
      '#bab0ac'
  ];
  const DEFAULT_FONT_SIZE = {
      text: 11,
      guideLabel: 10,
      guideTitle: 11,
      groupTitle: 13,
      groupSubtitle: 12
  };
  const DEFAULT_COLOR = {
      blue: tab10[0],
      orange: tab10[1],
      red: tab10[2],
      teal: tab10[3],
      green: tab10[4],
      yellow: tab10[5],
      purple: tab10[6],
      pink: tab10[7],
      brown: tab10[8],
      gray0: '#000',
      gray1: '#111',
      gray2: '#222',
      gray3: '#333',
      gray4: '#444',
      gray5: '#555',
      gray6: '#666',
      gray7: '#777',
      gray8: '#888',
      gray9: '#999',
      gray10: '#aaa',
      gray11: '#bbb',
      gray12: '#ccc',
      gray13: '#ddd',
      gray14: '#eee',
      gray15: '#fff'
  };
  function colorSignalConfig(color = {}) {
      return {
          signals: [
              {
                  name: 'color',
                  value: isObject(color) ? Object.assign(Object.assign({}, DEFAULT_COLOR), color) : DEFAULT_COLOR
              }
          ],
          mark: { color: { signal: 'color.blue' } },
          rule: { color: { signal: 'color.gray0' } },
          text: {
              color: { signal: 'color.gray0' }
          },
          style: {
              'guide-label': {
                  fill: { signal: 'color.gray0' }
              },
              'guide-title': {
                  fill: { signal: 'color.gray0' }
              },
              'group-title': {
                  fill: { signal: 'color.gray0' }
              },
              'group-subtitle': {
                  fill: { signal: 'color.gray0' }
              },
              cell: {
                  stroke: { signal: 'color.gray8' }
              }
          },
          axis: {
              domainColor: { signal: 'color.gray13' },
              gridColor: { signal: 'color.gray8' },
              tickColor: { signal: 'color.gray13' }
          },
          range: {
              category: [
                  { signal: 'color.blue' },
                  { signal: 'color.orange' },
                  { signal: 'color.red' },
                  { signal: 'color.teal' },
                  { signal: 'color.green' },
                  { signal: 'color.yellow' },
                  { signal: 'color.purple' },
                  { signal: 'color.pink' },
                  { signal: 'color.brown' },
                  { signal: 'color.grey8' }
              ]
          }
      };
  }
  function fontSizeSignalConfig(fontSize) {
      return {
          signals: [
              {
                  name: 'fontSize',
                  value: isObject(fontSize) ? Object.assign(Object.assign({}, DEFAULT_FONT_SIZE), fontSize) : DEFAULT_FONT_SIZE
              }
          ],
          text: {
              fontSize: { signal: 'fontSize.text' }
          },
          style: {
              'guide-label': {
                  fontSize: { signal: 'fontSize.guideLabel' }
              },
              'guide-title': {
                  fontSize: { signal: 'fontSize.guideTitle' }
              },
              'group-title': {
                  fontSize: { signal: 'fontSize.groupTitle' }
              },
              'group-subtitle': {
                  fontSize: { signal: 'fontSize.groupSubtitle' }
              }
          }
      };
  }
  function fontConfig(font) {
      return {
          text: { font },
          style: {
              'guide-label': { font },
              'guide-title': { font },
              'group-title': { font },
              'group-subtitle': { font }
          }
      };
  }
  function getAxisConfigInternal(axisConfig) {
      const props = keys(axisConfig || {});
      const axisConfigInternal = {};
      for (const prop of props) {
          const val = axisConfig[prop];
          axisConfigInternal[prop] = isConditionalAxisValue(val)
              ? signalOrValueRefWithCondition(val)
              : signalRefOrValue(val);
      }
      return axisConfigInternal;
  }
  function getStyleConfigInternal(styleConfig) {
      const props = keys(styleConfig);
      const styleConfigInternal = {};
      for (const prop of props) {
          // We need to cast to cheat a bit here since styleConfig can be either mark config or axis config
          styleConfigInternal[prop] = getAxisConfigInternal(styleConfig[prop]);
      }
      return styleConfigInternal;
  }
  const configPropsWithExpr = [
      ...MARK_CONFIGS,
      ...AXIS_CONFIGS,
      ...HEADER_CONFIGS,
      'background',
      'padding',
      'legend',
      'lineBreak',
      'scale',
      'style',
      'title',
      'view'
  ];
  /**
   * Merge specified config with default config and config for the `color` flag,
   * then replace all expressions with signals
   */
  function initConfig(specifiedConfig = {}) {
      const { color, font, fontSize } = specifiedConfig, restConfig = __rest$b(specifiedConfig, ["color", "font", "fontSize"]);
      const mergedConfig = mergeConfig({}, defaultConfig$1, font ? fontConfig(font) : {}, color ? colorSignalConfig(color) : {}, fontSize ? fontSizeSignalConfig(fontSize) : {}, restConfig || {});
      const outputConfig = omit(mergedConfig, configPropsWithExpr);
      for (const prop of ['background', 'lineBreak', 'padding']) {
          if (mergedConfig[prop]) {
              outputConfig[prop] = signalRefOrValue(mergedConfig[prop]);
          }
      }
      for (const markConfigType of MARK_CONFIGS) {
          if (mergedConfig[markConfigType]) {
              outputConfig[markConfigType] = replaceExprRefInIndex(mergedConfig[markConfigType]);
          }
      }
      for (const axisConfigType of AXIS_CONFIGS) {
          if (mergedConfig[axisConfigType]) {
              outputConfig[axisConfigType] = getAxisConfigInternal(mergedConfig[axisConfigType]);
          }
      }
      for (const headerConfigType of HEADER_CONFIGS) {
          if (mergedConfig[headerConfigType]) {
              outputConfig[headerConfigType] = replaceExprRefInIndex(mergedConfig[headerConfigType]);
          }
      }
      if (mergedConfig.legend) {
          outputConfig.legend = replaceExprRefInIndex(mergedConfig.legend);
      }
      if (mergedConfig.scale) {
          outputConfig.scale = replaceExprRefInIndex(mergedConfig.scale);
      }
      if (mergedConfig.style) {
          outputConfig.style = getStyleConfigInternal(mergedConfig.style);
      }
      if (mergedConfig.title) {
          outputConfig.title = replaceExprRefInIndex(mergedConfig.title);
      }
      if (mergedConfig.view) {
          outputConfig.view = replaceExprRefInIndex(mergedConfig.view);
      }
      return outputConfig;
  }
  const MARK_STYLES = ['view', ...PRIMITIVE_MARKS];
  const VL_ONLY_CONFIG_PROPERTIES = [
      'color',
      'fontSize',
      'background',
      'padding',
      'facet',
      'concat',
      'numberFormat',
      'timeFormat',
      'countTitle',
      'header',
      'axisQuantitative',
      'axisTemporal',
      'axisDiscrete',
      'axisPoint',
      'axisXBand',
      'axisXPoint',
      'axisXDiscrete',
      'axisXQuantitative',
      'axisXTemporal',
      'axisYBand',
      'axisYPoint',
      'axisYDiscrete',
      'axisYQuantitative',
      'axisYTemporal',
      'scale',
      'selection',
      'overlay' // FIXME: Redesign and unhide this
  ];
  const VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = Object.assign({ view: ['continuousWidth', 'continuousHeight', 'discreteWidth', 'discreteHeight', 'step'] }, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);
  function stripAndRedirectConfig(config) {
      config = duplicate(config);
      for (const prop of VL_ONLY_CONFIG_PROPERTIES) {
          delete config[prop];
      }
      if (config.axis) {
          // delete condition axis config
          for (const prop in config.axis) {
              if (isConditionalAxisValue(config.axis[prop])) {
                  delete config.axis[prop];
              }
          }
      }
      if (config.legend) {
          for (const prop of VL_ONLY_LEGEND_CONFIG) {
              delete config.legend[prop];
          }
      }
      // Remove Vega-Lite only generic mark config
      if (config.mark) {
          for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {
              delete config.mark[prop];
          }
          if (config.mark.tooltip && isObject(config.mark.tooltip)) {
              delete config.mark.tooltip;
          }
      }
      if (config.params) {
          config.signals = (config.signals || []).concat(assembleParameterSignals(config.params));
          delete config.params;
      }
      for (const markType of MARK_STYLES) {
          // Remove Vega-Lite-only mark config
          for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {
              delete config[markType][prop];
          }
          // Remove Vega-Lite only mark-specific config
          const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];
          if (vlOnlyMarkSpecificConfigs) {
              for (const prop of vlOnlyMarkSpecificConfigs) {
                  delete config[markType][prop];
              }
          }
          // Redirect mark config to config.style so that mark config only affect its own mark type
          // without affecting other marks that share the same underlying Vega marks.
          // For example, config.rect should not affect bar marks.
          redirectConfigToStyleConfig(config, markType);
      }
      for (const m of getAllCompositeMarks()) {
          // Clean up the composite mark config as we don't need them in the output specs anymore
          delete config[m];
      }
      redirectTitleConfig(config);
      // Remove empty config objects.
      for (const prop in config) {
          if (isObject(config[prop]) && isEmpty$1(config[prop])) {
              delete config[prop];
          }
      }
      return isEmpty$1(config) ? undefined : config;
  }
  /**
   *
   * Redirect config.title -- so that title config do not affect header labels,
   * which also uses `title` directive to implement.
   *
   * For subtitle configs in config.title, keep them in config.title as header titles never have subtitles.
   */
  function redirectTitleConfig(config) {
      const { titleMarkConfig, subtitleMarkConfig, subtitle } = extractTitleConfig(config.title);
      // set config.style if title/subtitleMarkConfig is not an empty object
      if (!isEmpty$1(titleMarkConfig)) {
          config.style['group-title'] = Object.assign(Object.assign({}, config.style['group-title']), titleMarkConfig // config.title has higher precedence than config.style.group-title in Vega
          );
      }
      if (!isEmpty$1(subtitleMarkConfig)) {
          config.style['group-subtitle'] = Object.assign(Object.assign({}, config.style['group-subtitle']), subtitleMarkConfig);
      }
      // subtitle part can stay in config.title since header titles do not use subtitle
      if (!isEmpty$1(subtitle)) {
          config.title = subtitle;
      }
      else {
          delete config.title;
      }
  }
  function redirectConfigToStyleConfig(config, prop, // string = composite mark
  toProp, compositeMarkPart) {
      const propConfig = compositeMarkPart ? config[prop][compositeMarkPart] : config[prop];
      if (prop === 'view') {
          toProp = 'cell'; // View's default style is "cell"
      }
      const style = Object.assign(Object.assign({}, propConfig), config.style[toProp !== null && toProp !== void 0 ? toProp : prop]);
      // set config.style if it is not an empty object
      if (!isEmpty$1(style)) {
          config.style[toProp !== null && toProp !== void 0 ? toProp : prop] = style;
      }
      if (!compositeMarkPart) {
          // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.
          delete config[prop];
      }
  }

  function isLayerSpec(spec) {
      return 'layer' in spec;
  }

  function isRepeatSpec(spec) {
      return 'repeat' in spec;
  }
  function isLayerRepeatSpec(spec) {
      return !isArray(spec.repeat) && spec.repeat['layer'];
  }

  var __rest$c = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  class SpecMapper {
      map(spec, params) {
          if (isFacetSpec(spec)) {
              return this.mapFacet(spec, params);
          }
          else if (isRepeatSpec(spec)) {
              return this.mapRepeat(spec, params);
          }
          else if (isHConcatSpec(spec)) {
              return this.mapHConcat(spec, params);
          }
          else if (isVConcatSpec(spec)) {
              return this.mapVConcat(spec, params);
          }
          else if (isConcatSpec(spec)) {
              return this.mapConcat(spec, params);
          }
          else {
              return this.mapLayerOrUnit(spec, params);
          }
      }
      mapLayerOrUnit(spec, params) {
          if (isLayerSpec(spec)) {
              return this.mapLayer(spec, params);
          }
          else if (isUnitSpec(spec)) {
              return this.mapUnit(spec, params);
          }
          throw new Error(invalidSpec(spec));
      }
      mapLayer(spec, params) {
          return Object.assign(Object.assign({}, spec), { layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params)) });
      }
      mapHConcat(spec, params) {
          return Object.assign(Object.assign({}, spec), { hconcat: spec.hconcat.map(subspec => this.map(subspec, params)) });
      }
      mapVConcat(spec, params) {
          return Object.assign(Object.assign({}, spec), { vconcat: spec.vconcat.map(subspec => this.map(subspec, params)) });
      }
      mapConcat(spec, params) {
          const { concat } = spec, rest = __rest$c(spec, ["concat"]);
          return Object.assign(Object.assign({}, rest), { concat: concat.map(subspec => this.map(subspec, params)) });
      }
      mapFacet(spec, params) {
          return Object.assign(Object.assign({}, spec), { 
              // TODO: remove "any" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760
              spec: this.map(spec.spec, params) });
      }
      mapRepeat(spec, params) {
          return Object.assign(Object.assign({}, spec), { 
              // as any is required here since TS cannot infer that the output type satisfies the input type
              spec: this.map(spec.spec, params) });
      }
  }

  const STACK_OFFSET_INDEX = {
      zero: 1,
      center: 1,
      normalize: 1
  };
  function isStackOffset(s) {
      return s in STACK_OFFSET_INDEX;
  }
  const STACKABLE_MARKS = new Set([ARC, BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT$1, TICK]);
  const STACK_BY_DEFAULT_MARKS = new Set([BAR, AREA, ARC]);
  function potentialStackedChannel(encoding, x) {
      var _a, _b;
      const y = x === 'x' ? 'y' : 'radius';
      const xDef = encoding[x];
      const yDef = encoding[y];
      if (isFieldDef(xDef) && isFieldDef(yDef)) {
          if (channelDefType(xDef) === 'quantitative' && channelDefType(yDef) === 'quantitative') {
              if (xDef.stack) {
                  return x;
              }
              else if (yDef.stack) {
                  return y;
              }
              const xAggregate = isFieldDef(xDef) && !!xDef.aggregate;
              const yAggregate = isFieldDef(yDef) && !!yDef.aggregate;
              // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y
              if (xAggregate !== yAggregate) {
                  return xAggregate ? x : y;
              }
              else {
                  const xScale = (_a = xDef.scale) === null || _a === void 0 ? void 0 : _a.type;
                  const yScale = (_b = yDef.scale) === null || _b === void 0 ? void 0 : _b.type;
                  if (xScale && xScale !== 'linear') {
                      return y;
                  }
                  else if (yScale && yScale !== 'linear') {
                      return x;
                  }
              }
          }
          else if (channelDefType(xDef) === 'quantitative') {
              return x;
          }
          else if (channelDefType(yDef) === 'quantitative') {
              return y;
          }
      }
      else if (channelDefType(xDef) === 'quantitative') {
          return x;
      }
      else if (channelDefType(yDef) === 'quantitative') {
          return y;
      }
      return undefined;
  }
  function getDimensionChannel(channel) {
      switch (channel) {
          case 'x':
              return 'y';
          case 'y':
              return 'x';
          case 'theta':
              return 'radius';
          case 'radius':
              return 'theta';
      }
  }
  // Note: CompassQL uses this method and only pass in required properties of each argument object.
  // If required properties change, make sure to update CompassQL.
  function stack(m, encoding, opt = {}) {
      const mark = isMarkDef(m) ? m.type : m;
      // Should have stackable mark
      if (!STACKABLE_MARKS.has(mark)) {
          return null;
      }
      // Run potential stacked twice, one for Cartesian and another for Polar,
      // so text marks can be stacked in any of the coordinates.
      // Note: The logic here is not perfectly correct.  If we want to support stacked dot plots where each dot is a pie chart with label, we have to change the stack logic here to separate Cartesian stacking for polar stacking.
      // However, since we probably never want to do that, let's just note the limitation here.
      const fieldChannel = potentialStackedChannel(encoding, 'x') || potentialStackedChannel(encoding, 'theta');
      if (!fieldChannel) {
          return null;
      }
      const stackedFieldDef = encoding[fieldChannel];
      const stackedField = isFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;
      let dimensionChannel = getDimensionChannel(fieldChannel);
      let dimensionDef = encoding[dimensionChannel];
      let dimensionField = isFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined;
      // avoid grouping by the stacked field
      if (dimensionField === stackedField) {
          dimensionField = undefined;
          dimensionDef = undefined;
          dimensionChannel = undefined;
      }
      // Should have grouping level of detail that is different from the dimension field
      const stackBy = NONPOSITION_CHANNELS.reduce((sc, channel) => {
          // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)
          if (channel !== 'tooltip' && channelHasField(encoding, channel)) {
              const channelDef = encoding[channel];
              for (const cDef of array(channelDef)) {
                  const fieldDef = getFieldDef(cDef);
                  if (fieldDef.aggregate) {
                      continue;
                  }
                  // Check whether the channel's field is identical to x/y's field or if the channel is a repeat
                  const f = vgField(fieldDef, {});
                  if (
                  // if fielddef is a repeat, just include it in the stack by
                  !f ||
                      // otherwise, the field must be different from x and y fields.
                      f !== dimensionField) {
                      sc.push({ channel, fieldDef });
                  }
              }
          }
          return sc;
      }, []);
      // Automatically determine offset
      let offset;
      if (stackedFieldDef.stack !== undefined) {
          if (isBoolean(stackedFieldDef.stack)) {
              offset = stackedFieldDef.stack ? 'zero' : null;
          }
          else {
              offset = stackedFieldDef.stack;
          }
      }
      else if (stackBy.length > 0 && STACK_BY_DEFAULT_MARKS.has(mark)) {
          // Bar and Area with sum ops are automatically stacked by default
          offset = 'zero';
      }
      if (!offset || !isStackOffset(offset)) {
          return null;
      }
      if (isAggregate(encoding) && stackBy.length === 0) {
          return null;
      }
      // warn when stacking non-linear
      if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {
          if (opt.disallowNonLinearStack) {
              return null;
          }
          else {
              warn(cannotStackNonLinearScale(stackedFieldDef.scale.type));
          }
      }
      // Check if it is a ranged mark
      if (isFieldOrDatumDef(encoding[getSecondaryRangeChannel(fieldChannel)])) {
          if (stackedFieldDef.stack !== undefined) {
              warn(cannotStackRangedMark(fieldChannel));
          }
          return null;
      }
      // Warn if stacking non-summative aggregate
      if (isFieldDef(stackedFieldDef) && stackedFieldDef.aggregate && !contains$1(SUM_OPS, stackedFieldDef.aggregate)) {
          warn(stackNonSummativeAggregate(stackedFieldDef.aggregate));
      }
      return {
          groupbyChannel: dimensionDef ? dimensionChannel : undefined,
          groupbyField: dimensionField,
          fieldChannel,
          impute: stackedFieldDef.impute === null ? false : isPathMark(mark),
          stackBy,
          offset
      };
  }

  var __rest$d = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function dropLineAndPoint(markDef) {
      const mark = __rest$d(markDef, ["point", "line"]);
      return keys(mark).length > 1 ? mark : mark.type;
  }
  function dropLineAndPointFromConfig(config) {
      for (const mark of ['line', 'area', 'rule', 'trail']) {
          if (config[mark]) {
              config = Object.assign(Object.assign({}, config), { 
                  // TODO: remove as any
                  [mark]: omit(config[mark], ['point', 'line']) });
          }
      }
      return config;
  }
  function getPointOverlay(markDef, markConfig = {}, encoding) {
      if (markDef.point === 'transparent') {
          return { opacity: 0 };
      }
      else if (markDef.point) {
          // truthy : true or object
          return isObject(markDef.point) ? markDef.point : {};
      }
      else if (markDef.point !== undefined) {
          // false or null
          return null;
      }
      else {
          // undefined (not disabled)
          if (markConfig.point || encoding.shape) {
              // enable point overlay if config[mark].point is truthy or if encoding.shape is provided
              return isObject(markConfig.point) ? markConfig.point : {};
          }
          // markDef.point is defined as falsy
          return undefined;
      }
  }
  function getLineOverlay(markDef, markConfig = {}) {
      if (markDef.line) {
          // true or object
          return markDef.line === true ? {} : markDef.line;
      }
      else if (markDef.line !== undefined) {
          // false or null
          return null;
      }
      else {
          // undefined (not disabled)
          if (markConfig.line) {
              // enable line overlay if config[mark].line is truthy
              return markConfig.line === true ? {} : markConfig.line;
          }
          // markDef.point is defined as falsy
          return undefined;
      }
  }
  class PathOverlayNormalizer {
      constructor() {
          this.name = 'path-overlay';
      }
      hasMatchingType(spec, config) {
          if (isUnitSpec(spec)) {
              const { mark, encoding } = spec;
              const markDef = isMarkDef(mark) ? mark : { type: mark };
              switch (markDef.type) {
                  case 'line':
                  case 'rule':
                  case 'trail':
                      return !!getPointOverlay(markDef, config[markDef.type], encoding);
                  case 'area':
                      return (
                      // false / null are also included as we want to remove the properties
                      !!getPointOverlay(markDef, config[markDef.type], encoding) ||
                          !!getLineOverlay(markDef, config[markDef.type]));
              }
          }
          return false;
      }
      run(spec, params, normalize) {
          const { config } = params;
          const { selection, projection, mark, encoding: e } = spec, outerSpec = __rest$d(spec, ["selection", "projection", "mark", "encoding"]);
          // Need to call normalizeEncoding because we need the inferred types to correctly determine stack
          const encoding = normalizeEncoding(e, config);
          const markDef = isMarkDef(mark) ? mark : { type: mark };
          const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);
          const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);
          const layer = [
              Object.assign(Object.assign({}, (selection ? { selection } : {})), { mark: dropLineAndPoint(Object.assign(Object.assign({}, (markDef.type === 'area' && markDef.opacity === undefined && markDef.fillOpacity === undefined
                      ? { opacity: 0.7 }
                      : {})), markDef)), 
                  // drop shape from encoding as this might be used to trigger point overlay
                  encoding: omit(encoding, ['shape']) })
          ];
          // FIXME: determine rules for applying selections.
          // Need to copy stack config to overlayed layer
          const stackProps = stack(markDef, encoding);
          let overlayEncoding = encoding;
          if (stackProps) {
              const { fieldChannel: stackFieldChannel, offset } = stackProps;
              overlayEncoding = Object.assign(Object.assign({}, encoding), { [stackFieldChannel]: Object.assign(Object.assign({}, encoding[stackFieldChannel]), (offset ? { stack: offset } : {})) });
          }
          if (lineOverlay) {
              layer.push(Object.assign(Object.assign({}, (projection ? { projection } : {})), { mark: Object.assign(Object.assign({ type: 'line' }, pick(markDef, ['clip', 'interpolate', 'tension', 'tooltip'])), lineOverlay), encoding: overlayEncoding }));
          }
          if (pointOverlay) {
              layer.push(Object.assign(Object.assign({}, (projection ? { projection } : {})), { mark: Object.assign(Object.assign({ type: 'point', opacity: 1, filled: true }, pick(markDef, ['clip', 'tooltip'])), pointOverlay), encoding: overlayEncoding }));
          }
          return normalize(Object.assign(Object.assign({}, outerSpec), { layer }), Object.assign(Object.assign({}, params), { config: dropLineAndPointFromConfig(config) }));
      }
  }

  var __rest$e = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  class RangeStepNormalizer {
      constructor() {
          this.name = 'RangeStep';
      }
      hasMatchingType(spec) {
          var _a;
          if (isUnitSpec(spec) && spec.encoding) {
              for (const channel of POSITION_SCALE_CHANNELS) {
                  const def = spec.encoding[channel];
                  if (def && isFieldOrDatumDef(def)) {
                      if ((_a = def === null || def === void 0 ? void 0 : def.scale) === null || _a === void 0 ? void 0 : _a['rangeStep']) {
                          return true;
                      }
                  }
              }
          }
          return false;
      }
      run(spec) {
          var _a;
          const sizeMixins = {};
          let encoding = Object.assign({}, spec.encoding);
          for (const channel of POSITION_SCALE_CHANNELS) {
              const sizeType = getSizeChannel(channel);
              const def = encoding[channel];
              if (def && isFieldOrDatumDef(def)) {
                  if ((_a = def === null || def === void 0 ? void 0 : def.scale) === null || _a === void 0 ? void 0 : _a['rangeStep']) {
                      const { scale } = def, defWithoutScale = __rest$e(def, ["scale"]);
                      const _b = scale, scaleWithoutRangeStep = __rest$e(_b, ["rangeStep"]);
                      sizeMixins[sizeType] = { step: scale['rangeStep'] };
                      warn(RANGE_STEP_DEPRECATED);
                      encoding = Object.assign(Object.assign({}, encoding), { [channel]: Object.assign(Object.assign({}, defWithoutScale), (isEmpty$1(scaleWithoutRangeStep) ? {} : { scale: scaleWithoutRangeStep })) });
                  }
              }
          }
          return Object.assign(Object.assign(Object.assign({}, sizeMixins), spec), { encoding });
      }
  }

  var __rest$f = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function replaceRepeaterInFacet(facet, repeater) {
      if (!repeater) {
          return facet;
      }
      if (isFacetMapping(facet)) {
          return replaceRepeaterInMapping(facet, repeater);
      }
      return replaceRepeaterInFieldDef(facet, repeater);
  }
  function replaceRepeaterInEncoding(encoding, repeater) {
      if (!repeater) {
          return encoding;
      }
      return replaceRepeaterInMapping(encoding, repeater);
  }
  /**
   * Replaces repeated value and returns if the repeated value is valid.
   */
  function replaceRepeatInProp(prop, o, repeater) {
      const val = o[prop];
      if (isRepeatRef(val)) {
          if (val.repeat in repeater) {
              return Object.assign(Object.assign({}, o), { [prop]: repeater[val.repeat] });
          }
          else {
              warn(noSuchRepeatedValue(val.repeat));
              return undefined;
          }
      }
      return o;
  }
  /**
   * Replace repeater values in a field def with the concrete field name.
   */
  function replaceRepeaterInFieldDef(fieldDef, repeater) {
      fieldDef = replaceRepeatInProp('field', fieldDef, repeater);
      if (fieldDef === undefined) {
          // the field def should be ignored
          return undefined;
      }
      else if (fieldDef === null) {
          return null;
      }
      if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {
          const sort = replaceRepeatInProp('field', fieldDef.sort, repeater);
          fieldDef = Object.assign(Object.assign({}, fieldDef), (sort ? { sort } : {}));
      }
      return fieldDef;
  }
  function replaceRepeaterInFieldOrDatumDef(def, repeater) {
      if (isFieldDef(def)) {
          return replaceRepeaterInFieldDef(def, repeater);
      }
      else {
          const datumDef = replaceRepeatInProp('datum', def, repeater);
          if (datumDef !== def && !datumDef.type) {
              datumDef.type = 'nominal';
          }
          return datumDef;
      }
  }
  function replaceRepeaterInChannelDef(channelDef, repeater) {
      if (isFieldOrDatumDef(channelDef)) {
          const fd = replaceRepeaterInFieldOrDatumDef(channelDef, repeater);
          if (fd) {
              return fd;
          }
          else if (isConditionalDef(channelDef)) {
              return { condition: channelDef.condition };
          }
      }
      else {
          if (hasConditionalFieldOrDatumDef(channelDef)) {
              const fd = replaceRepeaterInFieldOrDatumDef(channelDef.condition, repeater);
              if (fd) {
                  return Object.assign(Object.assign({}, channelDef), { condition: fd });
              }
              else {
                  const channelDefWithoutCondition = __rest$f(channelDef, ["condition"]);
                  return channelDefWithoutCondition;
              }
          }
          return channelDef;
      }
      return undefined;
  }
  function replaceRepeaterInMapping(mapping, repeater) {
      const out = {};
      for (const channel in mapping) {
          if (has$1(mapping, channel)) {
              const channelDef = mapping[channel];
              if (isArray(channelDef)) {
                  // array cannot have condition
                  out[channel] = channelDef // somehow we need to cast it here
                      .map(cd => replaceRepeaterInChannelDef(cd, repeater))
                      .filter(cd => cd);
              }
              else {
                  const cd = replaceRepeaterInChannelDef(channelDef, repeater);
                  if (cd !== undefined) {
                      out[channel] = cd;
                  }
              }
          }
      }
      return out;
  }

  class RuleForRangedLineNormalizer {
      constructor() {
          this.name = 'RuleForRangedLine';
      }
      hasMatchingType(spec) {
          if (isUnitSpec(spec)) {
              const { encoding, mark } = spec;
              if (mark === 'line') {
                  for (const channel of SECONDARY_RANGE_CHANNEL) {
                      const mainChannel = getMainRangeChannel(channel);
                      const mainChannelDef = encoding[mainChannel];
                      if (encoding[channel]) {
                          if ((isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin)) || isDatumDef(mainChannelDef)) {
                              return true;
                          }
                      }
                  }
              }
          }
          return false;
      }
      run(spec, params, normalize) {
          const { encoding } = spec;
          warn(lineWithRange(!!encoding.x2, !!encoding.y2));
          return normalize(Object.assign(Object.assign({}, spec), { mark: 'rule' }), params);
      }
  }

  var __rest$g = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  class CoreNormalizer extends SpecMapper {
      constructor() {
          super(...arguments);
          this.nonFacetUnitNormalizers = [
              boxPlotNormalizer,
              errorBarNormalizer,
              errorBandNormalizer,
              new PathOverlayNormalizer(),
              new RuleForRangedLineNormalizer(),
              new RangeStepNormalizer()
          ];
      }
      map(spec, params) {
          // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.
          if (isUnitSpec(spec)) {
              const hasRow = channelHasField(spec.encoding, ROW);
              const hasColumn = channelHasField(spec.encoding, COLUMN);
              const hasFacet = channelHasField(spec.encoding, FACET);
              if (hasRow || hasColumn || hasFacet) {
                  return this.mapFacetedUnit(spec, params);
              }
          }
          return super.map(spec, params);
      }
      // This is for normalizing non-facet unit
      mapUnit(spec, params) {
          const { parentEncoding, parentProjection } = params;
          const encoding = replaceRepeaterInEncoding(spec.encoding, params.repeater);
          const specWithReplacedEncoding = Object.assign(Object.assign({}, spec), (encoding ? { encoding } : {}));
          if (parentEncoding || parentProjection) {
              return this.mapUnitWithParentEncodingOrProjection(specWithReplacedEncoding, params);
          }
          const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);
          for (const unitNormalizer of this.nonFacetUnitNormalizers) {
              if (unitNormalizer.hasMatchingType(specWithReplacedEncoding, params.config)) {
                  return unitNormalizer.run(specWithReplacedEncoding, params, normalizeLayerOrUnit);
              }
          }
          return specWithReplacedEncoding;
      }
      mapRepeat(spec, params) {
          if (isLayerRepeatSpec(spec)) {
              return this.mapLayerRepeat(spec, params);
          }
          else {
              return this.mapNonLayerRepeat(spec, params);
          }
      }
      mapLayerRepeat(spec, params) {
          const { repeat, spec: childSpec } = spec, rest = __rest$g(spec, ["repeat", "spec"]);
          const { row, column, layer } = repeat;
          const { repeater = {}, repeaterPrefix = '' } = params;
          if (row || column) {
              return this.mapRepeat(Object.assign(Object.assign({}, spec), { repeat: Object.assign(Object.assign({}, (row ? { row } : {})), (column ? { column } : {})), spec: {
                      repeat: { layer },
                      spec: childSpec
                  } }), params);
          }
          else {
              return Object.assign(Object.assign({}, rest), { layer: layer.map(layerValue => {
                      const childRepeater = Object.assign(Object.assign({}, repeater), { layer: layerValue });
                      const childName = (childSpec.name || '') + repeaterPrefix + `child__layer_${varName(layerValue)}`;
                      const child = this.mapLayerOrUnit(childSpec, Object.assign(Object.assign({}, params), { repeater: childRepeater, repeaterPrefix: childName }));
                      child.name = childName;
                      return child;
                  }) });
          }
      }
      mapNonLayerRepeat(spec, params) {
          var _a;
          const { repeat, spec: childSpec, data } = spec, remainingProperties = __rest$g(spec, ["repeat", "spec", "data"]);
          if (!isArray(repeat) && spec.columns) {
              // is repeat with row/column
              spec = omit(spec, ['columns']);
              warn(columnsNotSupportByRowCol('repeat'));
          }
          const concat = [];
          const { repeater = {}, repeaterPrefix = '' } = params;
          const row = (!isArray(repeat) && repeat.row) || [repeater ? repeater.row : null];
          const column = (!isArray(repeat) && repeat.column) || [repeater ? repeater.column : null];
          const repeatValues = (isArray(repeat) && repeat) || [repeater ? repeater.repeat : null];
          // cross product
          for (const repeatValue of repeatValues) {
              for (const rowValue of row) {
                  for (const columnValue of column) {
                      const childRepeater = {
                          repeat: repeatValue,
                          row: rowValue,
                          column: columnValue,
                          layer: repeater.layer
                      };
                      const childName = (childSpec.name || '') +
                          repeaterPrefix +
                          'child__' +
                          (isArray(repeat)
                              ? `${varName(repeatValue)}`
                              : (repeat.row ? `row_${varName(rowValue)}` : '') +
                                  (repeat.column ? `column_${varName(columnValue)}` : ''));
                      const child = this.map(childSpec, Object.assign(Object.assign({}, params), { repeater: childRepeater, repeaterPrefix: childName }));
                      child.name = childName;
                      // we move data up
                      concat.push(omit(child, ['data']));
                  }
              }
          }
          const columns = isArray(repeat) ? spec.columns : repeat.column ? repeat.column.length : 1;
          return Object.assign(Object.assign({ data: (_a = childSpec.data) !== null && _a !== void 0 ? _a : data, align: 'all' }, remainingProperties), { columns,
              concat });
      }
      mapFacet(spec, params) {
          const { facet } = spec;
          if (isFacetMapping(facet) && spec.columns) {
              // is facet with row/column
              spec = omit(spec, ['columns']);
              warn(columnsNotSupportByRowCol('facet'));
          }
          return super.mapFacet(spec, params);
      }
      mapUnitWithParentEncodingOrProjection(spec, params) {
          const { encoding, projection } = spec;
          const { parentEncoding, parentProjection, config } = params;
          const mergedProjection = mergeProjection({ parentProjection, projection });
          const mergedEncoding = mergeEncoding({
              parentEncoding,
              encoding: replaceRepeaterInEncoding(encoding, params.repeater)
          });
          return this.mapUnit(Object.assign(Object.assign(Object.assign({}, spec), (mergedProjection ? { projection: mergedProjection } : {})), (mergedEncoding ? { encoding: mergedEncoding } : {})), { config });
      }
      mapFacetedUnit(spec, params) {
          // New encoding in the inside spec should not contain row / column
          // as row/column should be moved to facet
          const _a = spec.encoding, { row, column, facet } = _a, encoding = __rest$g(_a, ["row", "column", "facet"]);
          // Mark and encoding should be moved into the inner spec
          const { mark, width, projection, height, view, selection, encoding: _ } = spec, outerSpec = __rest$g(spec, ["mark", "width", "projection", "height", "view", "selection", "encoding"]);
          const { facetMapping, layout } = this.getFacetMappingAndLayout({ row, column, facet }, params);
          const newEncoding = replaceRepeaterInEncoding(encoding, params.repeater);
          return this.mapFacet(Object.assign(Object.assign(Object.assign({}, outerSpec), layout), { 
              // row / column has higher precedence than facet
              facet: facetMapping, spec: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (width ? { width } : {})), (height ? { height } : {})), (view ? { view } : {})), (projection ? { projection } : {})), { mark, encoding: newEncoding }), (selection ? { selection } : {})) }), params);
      }
      getFacetMappingAndLayout(facets, params) {
          var _a;
          const { row, column, facet } = facets;
          if (row || column) {
              if (facet) {
                  warn(facetChannelDropped([...(row ? [ROW] : []), ...(column ? [COLUMN] : [])]));
              }
              const facetMapping = {};
              const layout = {};
              for (const channel of [ROW, COLUMN]) {
                  const def = facets[channel];
                  if (def) {
                      const defWithoutLayout = __rest$g(def, ["align", "center", "spacing", "columns"]);
                      facetMapping[channel] = defWithoutLayout;
                      for (const prop of ['align', 'center', 'spacing']) {
                          if (def[prop] !== undefined) {
                              layout[prop] = (_a = layout[prop]) !== null && _a !== void 0 ? _a : {};
                              layout[prop][channel] = def[prop];
                          }
                      }
                  }
              }
              return { facetMapping, layout };
          }
          else {
              const { align, center, spacing, columns } = facet, facetMapping = __rest$g(facet, ["align", "center", "spacing", "columns"]);
              return {
                  facetMapping: replaceRepeaterInFacet(facetMapping, params.repeater),
                  layout: Object.assign(Object.assign(Object.assign(Object.assign({}, (align ? { align } : {})), (center ? { center } : {})), (spacing ? { spacing } : {})), (columns ? { columns } : {}))
              };
          }
      }
      mapLayer(spec, _a) {
          // Special handling for extended layer spec
          var { parentEncoding, parentProjection } = _a, otherParams = __rest$g(_a, ["parentEncoding", "parentProjection"]);
          const { encoding, projection } = spec, rest = __rest$g(spec, ["encoding", "projection"]);
          const params = Object.assign(Object.assign({}, otherParams), { parentEncoding: mergeEncoding({ parentEncoding, encoding, layer: true }), parentProjection: mergeProjection({ parentProjection, projection }) });
          return super.mapLayer(rest, params);
      }
  }
  function mergeEncoding({ parentEncoding, encoding = {}, layer }) {
      let merged = {};
      if (parentEncoding) {
          const channels = new Set([...keys(parentEncoding), ...keys(encoding)]);
          for (const channel of channels) {
              const channelDef = encoding[channel];
              const parentChannelDef = parentEncoding[channel];
              if (isFieldOrDatumDef(channelDef)) {
                  // Field/Datum Def can inherit properties from its parent
                  // Note that parentChannelDef doesn't have to be a field/datum def if the channelDef is already one.
                  const mergedChannelDef = Object.assign(Object.assign({}, parentChannelDef), channelDef);
                  merged[channel] = mergedChannelDef;
              }
              else if (hasConditionalFieldOrDatumDef(channelDef)) {
                  merged[channel] = Object.assign(Object.assign({}, channelDef), { condition: Object.assign(Object.assign({}, parentChannelDef), channelDef.condition) });
              }
              else if (channelDef || channelDef === null) {
                  merged[channel] = channelDef;
              }
              else if (layer ||
                  isValueDef(parentChannelDef) ||
                  isSignalRef(parentChannelDef) ||
                  isFieldOrDatumDef(parentChannelDef) ||
                  isArray(parentChannelDef)) {
                  merged[channel] = parentChannelDef;
              }
          }
      }
      else {
          merged = encoding;
      }
      return !merged || isEmpty$1(merged) ? undefined : merged;
  }
  function mergeProjection(opt) {
      const { parentProjection, projection } = opt;
      if (parentProjection && projection) {
          warn(projectionOverridden({ parentProjection, projection }));
      }
      return projection !== null && projection !== void 0 ? projection : parentProjection;
  }

  function normalize(spec, config) {
      if (config === undefined) {
          config = initConfig(spec.config);
      }
      const normalizedSpec = normalizeGenericSpec(spec, config);
      const { width, height } = spec;
      const autosize = normalizeAutoSize(normalizedSpec, { width, height, autosize: spec.autosize }, config);
      return Object.assign(Object.assign({}, normalizedSpec), (autosize ? { autosize } : {}));
  }
  const normalizer = new CoreNormalizer();
  /**
   * Decompose extended unit specs into composition of pure unit specs.
   */
  function normalizeGenericSpec(spec, config = {}) {
      return normalizer.map(spec, { config });
  }
  function _normalizeAutoSize(autosize) {
      return isString$1(autosize) ? { type: autosize } : autosize !== null && autosize !== void 0 ? autosize : {};
  }
  /**
   * Normalize autosize and deal with width or height == "container".
   */
  function normalizeAutoSize(spec, sizeInfo, config) {
      let { width, height } = sizeInfo;
      const isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);
      const autosizeDefault = {};
      if (!isFitCompatible) {
          // If spec is not compatible with autosize == "fit", discard width/height == container
          if (width == 'container') {
              warn(containerSizeNonSingle('width'));
              width = undefined;
          }
          if (height == 'container') {
              warn(containerSizeNonSingle('height'));
              height = undefined;
          }
      }
      else {
          // Default autosize parameters to fit when width/height is "container"
          if (width == 'container' && height == 'container') {
              autosizeDefault.type = 'fit';
              autosizeDefault.contains = 'padding';
          }
          else if (width == 'container') {
              autosizeDefault.type = 'fit-x';
              autosizeDefault.contains = 'padding';
          }
          else if (height == 'container') {
              autosizeDefault.type = 'fit-y';
              autosizeDefault.contains = 'padding';
          }
      }
      const autosize = Object.assign(Object.assign(Object.assign({ type: 'pad' }, autosizeDefault), (config ? _normalizeAutoSize(config.autosize) : {})), _normalizeAutoSize(spec.autosize));
      if (autosize.type === 'fit' && !isFitCompatible) {
          warn(FIT_NON_SINGLE);
          autosize.type = 'pad';
      }
      if (width == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-x')) {
          warn(containerSizeNotCompatibleWithAutosize('width'));
      }
      if (height == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-y')) {
          warn(containerSizeNotCompatibleWithAutosize('height'));
      }
      // Delete autosize property if it's Vega's default
      if (deepEqual$1(autosize, { type: 'pad' })) {
          return undefined;
      }
      return autosize;
  }

  function isFitType(autoSizeType) {
      return autoSizeType === 'fit' || autoSizeType === 'fit-x' || autoSizeType === 'fit-y';
  }
  function getFitType(sizeType) {
      return sizeType ? `fit-${getPositionScaleChannel(sizeType)}` : 'fit';
  }
  const TOP_LEVEL_PROPERTIES = [
      'background',
      'padding'
      // We do not include "autosize" here as it is supported by only unit and layer specs and thus need to be normalized
  ];
  function extractTopLevelProperties(t, includeParams) {
      const o = {};
      for (const p of TOP_LEVEL_PROPERTIES) {
          if (t && t[p] !== undefined) {
              o[p] = signalRefOrValue(t[p]);
          }
      }
      if (includeParams) {
          o.params = t.params;
      }
      return o;
  }

  /**
   * Generic class for storing properties that are explicitly specified
   * and implicitly determined by the compiler.
   * This is important for scale/axis/legend merging as
   * we want to prioritize properties that users explicitly specified.
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  class Split {
      constructor(explicit = {}, implicit = {}) {
          this.explicit = explicit;
          this.implicit = implicit;
      }
      clone() {
          return new Split(duplicate(this.explicit), duplicate(this.implicit));
      }
      combine() {
          // FIXME remove "as any".
          // Add "as any" to avoid an error "Spread types may only be created from object types".
          return Object.assign(Object.assign({}, this.explicit), this.implicit);
      }
      get(key) {
          // Explicit has higher precedence
          return getFirstDefined(this.explicit[key], this.implicit[key]);
      }
      getWithExplicit(key) {
          // Explicit has higher precedence
          if (this.explicit[key] !== undefined) {
              return { explicit: true, value: this.explicit[key] };
          }
          else if (this.implicit[key] !== undefined) {
              return { explicit: false, value: this.implicit[key] };
          }
          return { explicit: false, value: undefined };
      }
      setWithExplicit(key, value) {
          if (value.value !== undefined) {
              this.set(key, value.value, value.explicit);
          }
      }
      set(key, value, explicit) {
          delete this[explicit ? 'implicit' : 'explicit'][key];
          this[explicit ? 'explicit' : 'implicit'][key] = value;
          return this;
      }
      copyKeyFromSplit(key, s) {
          // Explicit has higher precedence
          if (s.explicit[key] !== undefined) {
              this.set(key, s.explicit[key], true);
          }
          else if (s.implicit[key] !== undefined) {
              this.set(key, s.implicit[key], false);
          }
      }
      copyKeyFromObject(key, s) {
          // Explicit has higher precedence
          if (s[key] !== undefined) {
              this.set(key, s[key], true);
          }
      }
      /**
       * Merge split object into this split object. Properties from the other split
       * overwrite properties from this split.
       */
      copyAll(other) {
          for (const key of keys(other.combine())) {
              const val = other.getWithExplicit(key);
              this.setWithExplicit(key, val);
          }
      }
  }
  function makeExplicit(value) {
      return {
          explicit: true,
          value
      };
  }
  function makeImplicit(value) {
      return {
          explicit: false,
          value
      };
  }
  function tieBreakByComparing(compare) {
      return (v1, v2, property, propertyOf) => {
          const diff = compare(v1.value, v2.value);
          if (diff > 0) {
              return v1;
          }
          else if (diff < 0) {
              return v2;
          }
          return defaultTieBreaker(v1, v2, property, propertyOf);
      };
  }
  function defaultTieBreaker(v1, v2, property, propertyOf) {
      if (v1.explicit && v2.explicit) {
          warn(mergeConflictingProperty(property, propertyOf, v1.value, v2.value));
      }
      // If equal score, prefer v1.
      return v1;
  }
  function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker = defaultTieBreaker) {
      if (v1 === undefined || v1.value === undefined) {
          // For first run
          return v2;
      }
      if (v1.explicit && !v2.explicit) {
          return v1;
      }
      else if (v2.explicit && !v1.explicit) {
          return v2;
      }
      else if (deepEqual$1(v1.value, v2.value)) {
          return v1;
      }
      else {
          return tieBreaker(v1, v2, property, propertyOf);
      }
  }

  /**
   * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)
   * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the
   * same field again (or differently).
   */
  class AncestorParse extends Split {
      constructor(explicit = {}, implicit = {}, parseNothing = false) {
          super(explicit, implicit);
          this.explicit = explicit;
          this.implicit = implicit;
          this.parseNothing = parseNothing;
      }
      clone() {
          const clone = super.clone();
          clone.parseNothing = this.parseNothing;
          return clone;
      }
  }

  function isUrlData(data) {
      return 'url' in data;
  }
  function isInlineData(data) {
      return 'values' in data;
  }
  function isNamedData(data) {
      return 'name' in data && !isUrlData(data) && !isInlineData(data) && !isGenerator(data);
  }
  function isGenerator(data) {
      return data && (isSequenceGenerator(data) || isSphereGenerator(data) || isGraticuleGenerator(data));
  }
  function isSequenceGenerator(data) {
      return 'sequence' in data;
  }
  function isSphereGenerator(data) {
      return 'sphere' in data;
  }
  function isGraticuleGenerator(data) {
      return 'graticule' in data;
  }
  var DataSourceType;
  (function (DataSourceType) {
      DataSourceType[DataSourceType["Raw"] = 0] = "Raw";
      DataSourceType[DataSourceType["Main"] = 1] = "Main";
      DataSourceType[DataSourceType["Row"] = 2] = "Row";
      DataSourceType[DataSourceType["Column"] = 3] = "Column";
      DataSourceType[DataSourceType["Lookup"] = 4] = "Lookup";
  })(DataSourceType || (DataSourceType = {}));

  function isFilter(t) {
      return 'filter' in t;
  }
  function isImputeSequence(t) {
      return (t === null || t === void 0 ? void 0 : t['stop']) !== undefined;
  }
  function isLookup(t) {
      return 'lookup' in t;
  }
  function isLookupData(from) {
      return 'data' in from;
  }
  function isLookupSelection(from) {
      return 'selection' in from;
  }
  function isPivot(t) {
      return 'pivot' in t;
  }
  function isDensity(t) {
      return 'density' in t;
  }
  function isQuantile(t) {
      return 'quantile' in t;
  }
  function isRegression(t) {
      return 'regression' in t;
  }
  function isLoess(t) {
      return 'loess' in t;
  }
  function isSample(t) {
      return 'sample' in t;
  }
  function isWindow(t) {
      return 'window' in t;
  }
  function isJoinAggregate(t) {
      return 'joinaggregate' in t;
  }
  function isFlatten(t) {
      return 'flatten' in t;
  }
  function isCalculate(t) {
      return 'calculate' in t;
  }
  function isBin(t) {
      return 'bin' in t;
  }
  function isImpute(t) {
      return 'impute' in t;
  }
  function isTimeUnit(t) {
      return 'timeUnit' in t;
  }
  function isAggregate$1(t) {
      return 'aggregate' in t;
  }
  function isStack(t) {
      return 'stack' in t;
  }
  function isFold(t) {
      return 'fold' in t;
  }
  function normalizeTransform(transform) {
      return transform.map(t => {
          if (isFilter(t)) {
              return {
                  filter: normalizeLogicalComposition(t.filter, normalizePredicate)
              };
          }
          return t;
      });
  }

  const VIEW = 'view',
        LBRACK = '[',
        RBRACK = ']',
        LBRACE = '{',
        RBRACE = '}',
        COLON = ':',
        COMMA = ',',
        NAME = '@',
        GT = '>',
        ILLEGAL$1 = /[[\]{}]/,
        DEFAULT_MARKS = {
    '*': 1,
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
  };
  let DEFAULT_SOURCE, MARKS;
  /**
   * Parse an event selector string.
   * Returns an array of event stream definitions.
   */

  function eventSelector (selector, source, marks) {
    DEFAULT_SOURCE = source || VIEW;
    MARKS = marks || DEFAULT_MARKS;
    return parseMerge(selector.trim()).map(parseSelector);
  }

  function isMarkType(type) {
    return MARKS[type];
  }

  function find(s, i, endChar, pushChar, popChar) {
    const n = s.length;
    let count = 0,
        c;

    for (; i < n; ++i) {
      c = s[i];
      if (!count && c === endChar) return i;else if (popChar && popChar.indexOf(c) >= 0) --count;else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
    }

    return i;
  }

  function parseMerge(s) {
    const output = [],
          n = s.length;
    let start = 0,
        i = 0;

    while (i < n) {
      i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
      output.push(s.substring(start, i).trim());
      start = ++i;
    }

    if (output.length === 0) {
      throw 'Empty event selector: ' + s;
    }

    return output;
  }

  function parseSelector(s) {
    return s[0] === '[' ? parseBetween(s) : parseStream(s);
  }

  function parseBetween(s) {
    const n = s.length;
    let i = 1,
        b;
    i = find(s, i, RBRACK, LBRACK, RBRACK);

    if (i === n) {
      throw 'Empty between selector: ' + s;
    }

    b = parseMerge(s.substring(1, i));

    if (b.length !== 2) {
      throw 'Between selector must have two elements: ' + s;
    }

    s = s.slice(i + 1).trim();

    if (s[0] !== GT) {
      throw 'Expected \'>\' after between selector: ' + s;
    }

    b = b.map(parseSelector);
    const stream = parseSelector(s.slice(1).trim());

    if (stream.between) {
      return {
        between: b,
        stream: stream
      };
    } else {
      stream.between = b;
    }

    return stream;
  }

  function parseStream(s) {
    const stream = {
      source: DEFAULT_SOURCE
    },
          source = [];
    let throttle = [0, 0],
        markname = 0,
        start = 0,
        n = s.length,
        i = 0,
        j,
        filter; // extract throttle from end

    if (s[n - 1] === RBRACE) {
      i = s.lastIndexOf(LBRACE);

      if (i >= 0) {
        try {
          throttle = parseThrottle(s.substring(i + 1, n - 1));
        } catch (e) {
          throw 'Invalid throttle specification: ' + s;
        }

        s = s.slice(0, i).trim();
        n = s.length;
      } else throw 'Unmatched right brace: ' + s;

      i = 0;
    }

    if (!n) throw s; // set name flag based on first char

    if (s[0] === NAME) markname = ++i; // extract first part of multi-part stream selector

    j = find(s, i, COLON);

    if (j < n) {
      source.push(s.substring(start, j).trim());
      start = i = ++j;
    } // extract remaining part of stream selector


    i = find(s, i, LBRACK);

    if (i === n) {
      source.push(s.substring(start, n).trim());
    } else {
      source.push(s.substring(start, i).trim());
      filter = [];
      start = ++i;
      if (start === n) throw 'Unmatched left bracket: ' + s;
    } // extract filters


    while (i < n) {
      i = find(s, i, RBRACK);
      if (i === n) throw 'Unmatched left bracket: ' + s;
      filter.push(s.substring(start, i).trim());
      if (i < n - 1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;
      start = ++i;
    } // marshall event stream specification


    if (!(n = source.length) || ILLEGAL$1.test(source[n - 1])) {
      throw 'Invalid event selector: ' + s;
    }

    if (n > 1) {
      stream.type = source[1];

      if (markname) {
        stream.markname = source[0].slice(1);
      } else if (isMarkType(source[0])) {
        stream.marktype = source[0];
      } else {
        stream.source = source[0];
      }
    } else {
      stream.type = source[0];
    }

    if (stream.type.slice(-1) === '!') {
      stream.consume = true;
      stream.type = stream.type.slice(0, -1);
    }

    if (filter != null) stream.filter = filter;
    if (throttle[0]) stream.throttle = throttle[0];
    if (throttle[1]) stream.debounce = throttle[1];
    return stream;
  }

  function parseThrottle(s) {
    const a = s.split(COMMA);
    if (!s.length || a.length > 2) throw s;
    return a.map(_ => {
      const x = +_;
      if (x !== x) throw s;
      return x;
    });
  }

  /**
   * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition
   * or a simple mixin if channel def has no condition.
   */
  function wrapCondition(model, channelDef, vgChannel, refFn) {
      const condition = isConditionalDef(channelDef) && channelDef.condition;
      const valueRef = refFn(channelDef);
      if (condition) {
          const conditions = array(condition);
          const vgConditions = conditions.map(c => {
              const conditionValueRef = refFn(c);
              const test = isConditionalSelection(c)
                  ? parseSelectionPredicate(model, c.selection) // FIXME: remove casting once TS is no longer dumb about it
                  : expression(model, c.test); // FIXME: remove casting once TS is no longer dumb about it
              return Object.assign({ test }, conditionValueRef);
          });
          return {
              [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]
          };
      }
      else {
          return valueRef !== undefined ? { [vgChannel]: valueRef } : {};
      }
  }

  function text(model, channel = 'text') {
      const channelDef = model.encoding[channel];
      return wrapCondition(model, channelDef, channel, cDef => textRef(cDef, model.config));
  }
  function textRef(channelDef, config, expr = 'datum') {
      // text
      if (channelDef) {
          if (isValueDef(channelDef)) {
              return signalOrValueRef(channelDef.value);
          }
          if (isFieldOrDatumDef(channelDef)) {
              const { format, formatType } = getFormatMixins(channelDef);
              return formatSignalRef({ fieldOrDatumDef: channelDef, format, formatType, expr, config });
          }
      }
      return undefined;
  }

  function tooltip(model, opt = {}) {
      const { encoding, markDef, config, stack } = model;
      const channelDef = encoding.tooltip;
      if (isArray(channelDef)) {
          return { tooltip: tooltipRefForEncoding({ tooltip: channelDef }, stack, config, opt) };
      }
      else {
          const datum = opt.reactiveGeom ? 'datum.datum' : 'datum';
          return wrapCondition(model, channelDef, 'tooltip', cDef => {
              // use valueRef based on channelDef first
              const tooltipRefFromChannelDef = textRef(cDef, config, datum);
              if (tooltipRefFromChannelDef) {
                  return tooltipRefFromChannelDef;
              }
              if (cDef === null) {
                  // Allow using encoding.tooltip = null to disable tooltip
                  return undefined;
              }
              let markTooltip = getMarkPropOrConfig('tooltip', markDef, config);
              if (markTooltip === true) {
                  markTooltip = { content: 'encoding' };
              }
              if (isString$1(markTooltip)) {
                  return { value: markTooltip };
              }
              else if (isObject(markTooltip)) {
                  // `tooltip` is `{fields: 'encodings' | 'fields'}`
                  if (isSignalRef(markTooltip)) {
                      return markTooltip;
                  }
                  else if (markTooltip.content === 'encoding') {
                      return tooltipRefForEncoding(encoding, stack, config, opt);
                  }
                  else {
                      return { signal: datum };
                  }
              }
              return undefined;
          });
      }
  }
  function tooltipData(encoding, stack, config, { reactiveGeom } = {}) {
      const toSkip = {};
      const expr = reactiveGeom ? 'datum.datum' : 'datum';
      const tuples = [];
      function add(fDef, channel) {
          const mainChannel = getMainRangeChannel(channel);
          const fieldDef = isTypedFieldDef(fDef)
              ? fDef
              : Object.assign(Object.assign({}, fDef), { type: encoding[mainChannel].type // for secondary field def, copy type from main channel
               });
          const title = fieldDef.title || defaultTitle(fieldDef, config);
          const key = array(title).join(', ');
          let value;
          if (isXorY(channel)) {
              const channel2 = channel === 'x' ? 'x2' : 'y2';
              const fieldDef2 = getFieldDef(encoding[channel2]);
              if (isBinned(fieldDef.bin) && fieldDef2) {
                  const startField = vgField(fieldDef, { expr });
                  const endField = vgField(fieldDef2, { expr });
                  const { format, formatType } = getFormatMixins(fieldDef);
                  value = binFormatExpression(startField, endField, format, formatType, config);
                  toSkip[channel2] = true;
              }
              else if (stack && stack.fieldChannel === channel && stack.offset === 'normalize') {
                  const { format, formatType } = getFormatMixins(fieldDef);
                  value = formatSignalRef({ fieldOrDatumDef: fieldDef, format, formatType, expr, config, normalizeStack: true })
                      .signal;
              }
          }
          value = value !== null && value !== void 0 ? value : textRef(fieldDef, config, expr).signal;
          tuples.push({ channel, key, value });
      }
      forEach(encoding, (channelDef, channel) => {
          if (isFieldDef(channelDef)) {
              add(channelDef, channel);
          }
          else if (hasConditionalFieldDef(channelDef)) {
              add(channelDef.condition, channel);
          }
      });
      const out = {};
      for (const { channel, key, value } of tuples) {
          if (!toSkip[channel] && !out[key]) {
              out[key] = value;
          }
      }
      return out;
  }
  function tooltipRefForEncoding(encoding, stack, config, { reactiveGeom } = {}) {
      const data = tooltipData(encoding, stack, config, { reactiveGeom });
      const keyValues = entries(data).map(([key, value]) => `"${key}": ${value}`);
      return keyValues.length > 0 ? { signal: `{${keyValues.join(', ')}}` } : undefined;
  }

  function aria(model) {
      const { markDef, config } = model;
      const enableAria = getMarkPropOrConfig('aria', markDef, config);
      // We can ignore other aria properties if ariaHidden is true.
      if (enableAria === false) {
          // getMarkGroups sets aria to false already so we don't have to set it in the encode block
          return {};
      }
      return Object.assign(Object.assign(Object.assign({}, (enableAria ? { aria: enableAria } : {})), ariaRoleDescription(model)), description$1(model));
  }
  function ariaRoleDescription(model) {
      const { mark, markDef, config } = model;
      if (config.aria === false) {
          return {};
      }
      const ariaRoleDesc = getMarkPropOrConfig('ariaRoleDescription', markDef, config);
      if (ariaRoleDesc != null) {
          return { ariaRoleDescription: { value: ariaRoleDesc } };
      }
      return mark in VG_MARK_INDEX ? {} : { ariaRoleDescription: { value: mark } };
  }
  function description$1(model) {
      const { encoding, markDef, config, stack } = model;
      const channelDef = encoding.description;
      if (channelDef) {
          return wrapCondition(model, channelDef, 'description', cDef => textRef(cDef, model.config));
      }
      // Use default from mark def or config if defined.
      // Functions in encode usually just return undefined but since we are defining a default below, we need to check the default here.
      const descriptionValue = getMarkPropOrConfig('description', markDef, config);
      if (descriptionValue != null) {
          return {
              description: signalOrValueRef(descriptionValue)
          };
      }
      if (config.aria === false) {
          return {};
      }
      const data = tooltipData(encoding, stack, config);
      if (isEmpty$1(data)) {
          return undefined;
      }
      return {
          description: {
              signal: entries(data)
                  .map(([key, value], index) => `"${index > 0 ? '; ' : ''}${key}: " + (${value})`)
                  .join(' + ')
          }
      };
  }

  /**
   * Return encode for non-positional channels with scales. (Text doesn't have scale.)
   */
  function nonPosition(channel, model, opt = {}) {
      const { markDef, encoding, config } = model;
      const { vgChannel } = opt;
      let { defaultRef, defaultValue } = opt;
      if (defaultRef === undefined) {
          // prettier-ignore
          defaultValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : getMarkPropOrConfig(channel, markDef, config, { vgChannel, ignoreVgConfig: true });
          if (defaultValue !== undefined) {
              defaultRef = signalOrValueRef(defaultValue);
          }
      }
      const channelDef = encoding[channel];
      return wrapCondition(model, channelDef, vgChannel !== null && vgChannel !== void 0 ? vgChannel : channel, cDef => {
          return midPoint({
              channel,
              channelDef: cDef,
              markDef,
              config,
              scaleName: model.scaleName(channel),
              scale: model.getScaleComponent(channel),
              stack: null,
              defaultRef
          });
      });
  }

  function color(model, opt = { filled: undefined }) {
      var _a, _b, _c, _d;
      const { markDef, encoding, config } = model;
      const { type: markType } = markDef;
      // Allow filled to be overridden (for trail's "filled")
      const filled = (_a = opt.filled) !== null && _a !== void 0 ? _a : getMarkPropOrConfig('filled', markDef, config);
      const transparentIfNeeded = contains$1(['bar', 'point', 'circle', 'square', 'geoshape'], markType)
          ? 'transparent'
          : undefined;
      const defaultFill = (_c = (_b = getMarkPropOrConfig(filled === true ? 'color' : undefined, markDef, config, { vgChannel: 'fill' })) !== null && _b !== void 0 ? _b : 
      // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
      config.mark[filled === true && 'color']) !== null && _c !== void 0 ? _c : 
      // If there is no fill, always fill symbols, bar, geoshape
      // with transparent fills https://github.com/vega/vega-lite/issues/1316
      transparentIfNeeded;
      const defaultStroke = (_d = getMarkPropOrConfig(filled === false ? 'color' : undefined, markDef, config, { vgChannel: 'stroke' })) !== null && _d !== void 0 ? _d : 
      // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
      config.mark[filled === false && 'color'];
      const colorVgChannel = filled ? 'fill' : 'stroke';
      const fillStrokeMarkDefAndConfig = Object.assign(Object.assign({}, (defaultFill ? { fill: signalOrValueRef(defaultFill) } : {})), (defaultStroke ? { stroke: signalOrValueRef(defaultStroke) } : {}));
      if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {
          warn(droppingColor('property', { fill: 'fill' in markDef, stroke: 'stroke' in markDef }));
      }
      return Object.assign(Object.assign(Object.assign(Object.assign({}, fillStrokeMarkDefAndConfig), nonPosition('color', model, {
          vgChannel: colorVgChannel,
          defaultValue: filled ? defaultFill : defaultStroke
      })), nonPosition('fill', model, {
          // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding
          defaultValue: encoding.fill ? defaultFill : undefined
      })), nonPosition('stroke', model, {
          // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding
          defaultValue: encoding.stroke ? defaultStroke : undefined
      }));
  }

  function zindex(model) {
      const { encoding, mark } = model;
      const order = encoding.order;
      if (!isPathMark(mark) && isValueDef(order)) {
          return wrapCondition(model, order, 'zindex', cd => signalOrValueRef(cd.value));
      }
      return {};
  }

  function getOffset(channel, markDef) {
      const offsetChannel = getOffsetChannel(channel);
      // TODO: in the future read from encoding channel too
      const markDefOffsetValue = markDef[offsetChannel];
      if (markDefOffsetValue) {
          return markDefOffsetValue;
      }
      return undefined;
  }

  /**
   * Return encode for point (non-band) position channels.
   */
  function pointPosition(channel, model, { defaultPos, vgChannel, isMidPoint }) {
      const { encoding, markDef, config, stack } = model;
      const channelDef = encoding[channel];
      const channel2Def = encoding[getSecondaryRangeChannel(channel)];
      const scaleName = model.scaleName(channel);
      const scale = model.getScaleComponent(channel);
      const offset = getOffset(channel, markDef);
      // Get default position or position from mark def
      const defaultRef = pointPositionDefaultRef({
          model,
          defaultPos,
          channel,
          scaleName,
          scale
      });
      const valueRef = !channelDef && isXorY(channel) && (encoding.latitude || encoding.longitude)
          ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.
              { field: model.getName(channel) }
          : positionRef({
              channel,
              channelDef,
              channel2Def,
              markDef,
              config,
              isMidPoint,
              scaleName,
              scale,
              stack,
              offset,
              defaultRef
          });
      return valueRef ? { [vgChannel || channel]: valueRef } : undefined;
  }
  // TODO: we need to find a way to refactor these so that scaleName is a part of scale
  // but that's complicated. For now, this is a huge step moving forward.
  /**
   * @return Vega ValueRef for normal x- or y-position without projection
   */
  function positionRef(params) {
      const { channel, channelDef, isMidPoint, scaleName, stack, offset, markDef, config } = params;
      // This isn't a part of midPoint because we use midPoint for non-position too
      if (isFieldOrDatumDef(channelDef) && stack && channel === stack.fieldChannel) {
          if (isFieldDef(channelDef)) {
              const band = getBand({
                  channel,
                  fieldDef: channelDef,
                  isMidPoint,
                  markDef,
                  stack,
                  config
              });
              if (band !== undefined) {
                  return interpolatedSignalRef({
                      scaleName,
                      fieldOrDatumDef: channelDef,
                      startSuffix: 'start',
                      band,
                      offset
                  });
              }
          }
          // x or y use stack_end so that stacked line's point mark use stack_end too.
          return valueRefForFieldOrDatumDef(channelDef, scaleName, { suffix: 'end' }, { offset });
      }
      return midPointRefWithPositionInvalidTest(params);
  }
  function pointPositionDefaultRef({ model, defaultPos, channel, scaleName, scale }) {
      const { markDef, config } = model;
      return () => {
          const mainChannel = getMainRangeChannel(channel);
          const vgChannel = getVgPositionChannel(channel);
          const definedValueOrConfig = getMarkPropOrConfig(channel, markDef, config, { vgChannel });
          if (definedValueOrConfig !== undefined) {
              return widthHeightValueOrSignalRef(channel, definedValueOrConfig);
          }
          switch (defaultPos) {
              case 'zeroOrMin':
              case 'zeroOrMax':
                  if (scaleName) {
                      const scaleType = scale.get('type');
                      if (contains$1([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) ;
                      else {
                          if (scale.domainDefinitelyIncludesZero()) {
                              return {
                                  scale: scaleName,
                                  value: 0
                              };
                          }
                      }
                  }
                  if (defaultPos === 'zeroOrMin') {
                      return mainChannel === 'y' ? { field: { group: 'height' } } : { value: 0 };
                  }
                  else {
                      // zeroOrMax
                      switch (mainChannel) {
                          case 'radius':
                              // max of radius is min(width, height) / 2
                              return {
                                  signal: `min(${model.width.signal},${model.height.signal})/2`
                              };
                          case 'theta':
                              return { signal: '2*PI' };
                          case 'x':
                              return { field: { group: 'width' } };
                          case 'y':
                              return { value: 0 };
                      }
                  }
                  break;
              case 'mid': {
                  const sizeRef = model[getSizeChannel(channel)];
                  return Object.assign(Object.assign({}, sizeRef), { mult: 0.5 });
              }
          }
          // defaultPos === null
          return undefined;
      };
  }

  const ALIGNED_X_CHANNEL = {
      left: 'x',
      center: 'xc',
      right: 'x2'
  };
  const BASELINED_Y_CHANNEL = {
      top: 'y',
      middle: 'yc',
      bottom: 'y2'
  };
  function vgAlignedPositionChannel(channel, markDef, config, defaultAlign = 'middle') {
      if (channel === 'radius' || channel === 'theta') {
          return getVgPositionChannel(channel);
      }
      const alignChannel = channel === 'x' ? 'align' : 'baseline';
      const align = getMarkPropOrConfig(alignChannel, markDef, config);
      let alignExcludingSignal;
      if (isSignalRef(align)) {
          warn(rangeMarkAlignmentCannotBeExpression(alignChannel));
          alignExcludingSignal = undefined;
      }
      else {
          alignExcludingSignal = align;
      }
      if (channel === 'x') {
          return ALIGNED_X_CHANNEL[alignExcludingSignal || (defaultAlign === 'top' ? 'left' : 'center')];
      }
      else {
          return BASELINED_Y_CHANNEL[alignExcludingSignal || defaultAlign];
      }
  }

  /**
   * Utility for area/rule position, which can be either point or range. (One of the axes should be point and the other should be range.)
   */
  function pointOrRangePosition(channel, model, { defaultPos, defaultPos2, range }) {
      if (range) {
          return rangePosition(channel, model, { defaultPos, defaultPos2 });
      }
      return pointPosition(channel, model, { defaultPos });
  }
  function rangePosition(channel, model, { defaultPos, defaultPos2 }) {
      const { markDef, config } = model;
      const channel2 = getSecondaryRangeChannel(channel);
      const sizeChannel = getSizeChannel(channel);
      const pos2Mixins = pointPosition2OrSize(model, defaultPos2, channel2);
      const vgChannel = pos2Mixins[sizeChannel]
          ? // If there is width/height, we need to position the marks based on the alignment.
              vgAlignedPositionChannel(channel, markDef, config)
          : // Otherwise, make sure to apply to the right Vg Channel (for arc mark)
              getVgPositionChannel(channel);
      return Object.assign(Object.assign({}, pointPosition(channel, model, { defaultPos, vgChannel })), pos2Mixins);
  }
  /**
   * Return encode for x2, y2.
   * If channel is not specified, return one channel based on orientation.
   */
  function pointPosition2OrSize(model, defaultPos, channel) {
      const { encoding, mark, markDef, stack, config } = model;
      const baseChannel = getMainRangeChannel(channel);
      const sizeChannel = getSizeChannel(channel);
      const vgChannel = getVgPositionChannel(channel);
      const channelDef = encoding[baseChannel];
      const scaleName = model.scaleName(baseChannel);
      const scale = model.getScaleComponent(baseChannel);
      const offset = channel in encoding || channel in markDef
          ? getOffset(channel, model.markDef)
          : getOffset(baseChannel, model.markDef);
      if (!channelDef && (channel === 'x2' || channel === 'y2') && (encoding.latitude || encoding.longitude)) {
          // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.
          return { [vgChannel]: { field: model.getName(channel) } };
      }
      const valueRef = position2Ref({
          channel,
          channelDef,
          channel2Def: encoding[channel],
          markDef,
          config,
          scaleName,
          scale,
          stack,
          offset,
          defaultRef: undefined
      });
      if (valueRef !== undefined) {
          return { [vgChannel]: valueRef };
      }
      // TODO: check width/height encoding here once we add them
      // no x2/y2 encoding, then try to read x2/y2 or width/height based on precedence:
      // markDef > config.style > mark-specific config (config[mark]) > general mark config (config.mark)
      return (position2orSize(channel, markDef) ||
          position2orSize(channel, {
              [channel]: getMarkStyleConfig(channel, markDef, config.style),
              [sizeChannel]: getMarkStyleConfig(sizeChannel, markDef, config.style)
          }) ||
          position2orSize(channel, config[mark]) ||
          position2orSize(channel, config.mark) || {
          [vgChannel]: pointPositionDefaultRef({
              model,
              defaultPos,
              channel,
              scaleName,
              scale
          })()
      });
  }
  function position2Ref({ channel, channelDef, channel2Def, markDef, config, scaleName, scale, stack, offset, defaultRef }) {
      if (isFieldOrDatumDef(channelDef) &&
          stack &&
          // If fieldChannel is X and channel is X2 (or Y and Y2)
          channel.charAt(0) === stack.fieldChannel.charAt(0)) {
          return valueRefForFieldOrDatumDef(channelDef, scaleName, { suffix: 'start' }, { offset });
      }
      return midPointRefWithPositionInvalidTest({
          channel,
          channelDef: channel2Def,
          scaleName,
          scale,
          stack,
          markDef,
          config,
          offset,
          defaultRef
      });
  }
  function position2orSize(channel, markDef) {
      const sizeChannel = getSizeChannel(channel);
      const vgChannel = getVgPositionChannel(channel);
      if (markDef[vgChannel] !== undefined) {
          return { [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[vgChannel]) };
      }
      else if (markDef[channel] !== undefined) {
          return { [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[channel]) };
      }
      else if (markDef[sizeChannel]) {
          return { [sizeChannel]: widthHeightValueOrSignalRef(channel, markDef[sizeChannel]) };
      }
      return undefined;
  }

  function rectPosition(model, channel, mark) {
      var _a, _b, _c, _d;
      const { config, encoding, markDef, stack } = model;
      const channel2 = getSecondaryRangeChannel(channel);
      const sizeChannel = getSizeChannel(channel);
      const channelDef = encoding[channel];
      const channelDef2 = encoding[channel2];
      const scale = model.getScaleComponent(channel);
      const scaleType = scale ? scale.get('type') : undefined;
      const scaleName = model.scaleName(channel);
      const orient = markDef.orient;
      const hasSizeDef = (_b = (_a = encoding[sizeChannel]) !== null && _a !== void 0 ? _a : encoding.size) !== null && _b !== void 0 ? _b : getMarkPropOrConfig('size', markDef, config, { vgChannel: sizeChannel });
      const isBarBand = mark === 'bar' && (channel === 'x' ? orient === 'vertical' : orient === 'horizontal');
      // x, x2, and width -- we must specify two of these in all conditions
      if (isFieldDef(channelDef) &&
          (isBinning(channelDef.bin) || isBinned(channelDef.bin) || (channelDef.timeUnit && !channelDef2)) &&
          !hasSizeDef &&
          !hasDiscreteDomain(scaleType)) {
          const band = getBand({ channel, fieldDef: channelDef, stack, markDef, config });
          const axis = (_c = model.component.axes[channel]) === null || _c === void 0 ? void 0 : _c[0];
          const axisTranslate = (_d = axis === null || axis === void 0 ? void 0 : axis.get('translate')) !== null && _d !== void 0 ? _d : 0.5; // vega default is 0.5
          return rectBinPosition({
              fieldDef: channelDef,
              fieldDef2: channelDef2,
              channel,
              markDef,
              scaleName,
              band,
              axisTranslate,
              spacing: isXorY(channel) ? getMarkPropOrConfig('binSpacing', markDef, config) : undefined,
              reverse: scale.get('reverse'),
              config
          });
      }
      else if (((isFieldOrDatumDef(channelDef) && hasDiscreteDomain(scaleType)) || isBarBand) && !channelDef2) {
          return positionAndSize(mark, channelDef, channel, model);
      }
      else {
          return rangePosition(channel, model, { defaultPos: 'zeroOrMax', defaultPos2: 'zeroOrMin' });
      }
  }
  function defaultSizeRef(mark, sizeChannel, scaleName, scale, config, band) {
      if (scale) {
          const scaleType = scale.get('type');
          if (scaleType === 'point' || scaleType === 'band') {
              if (config[mark].discreteBandSize !== undefined) {
                  return { value: config[mark].discreteBandSize };
              }
              if (scaleType === ScaleType.POINT) {
                  const scaleRange = scale.get('range');
                  if (isVgRangeStep(scaleRange) && isNumber$1(scaleRange.step)) {
                      return { value: scaleRange.step - 2 };
                  }
                  return { value: DEFAULT_STEP - 2 };
              }
              else {
                  // BAND
                  return { scale: scaleName, band };
              }
          }
          else {
              // continuous scale
              return { value: config[mark].continuousBandSize };
          }
      }
      // No Scale
      const step = getViewConfigDiscreteStep(config.view, sizeChannel);
      const value = getFirstDefined(
      // No scale is like discrete bar (with one item)
      config[mark].discreteBandSize, step - 2);
      return value !== undefined ? { value } : undefined;
  }
  /**
   * Output position encoding and its size encoding for continuous, point, and band scales.
   */
  function positionAndSize(mark, fieldDef, channel, model) {
      var _a;
      const { markDef, encoding, config, stack } = model;
      const orient = markDef.orient;
      const scaleName = model.scaleName(channel);
      const scale = model.getScaleComponent(channel);
      const vgSizeChannel = getSizeChannel(channel);
      const channel2 = getSecondaryRangeChannel(channel);
      // use "size" channel for bars, if there is orient and the channel matches the right orientation
      const useVlSizeChannel = (orient === 'horizontal' && channel === 'y') || (orient === 'vertical' && channel === 'x');
      const sizeFromMarkOrConfig = getMarkPropOrConfig(useVlSizeChannel ? 'size' : vgSizeChannel, markDef, config, {
          vgChannel: vgSizeChannel
      });
      // Use size encoding / mark property / config if it exists
      let sizeMixins;
      if (encoding.size || sizeFromMarkOrConfig !== undefined) {
          if (useVlSizeChannel) {
              sizeMixins = nonPosition('size', model, { vgChannel: vgSizeChannel, defaultValue: sizeFromMarkOrConfig });
          }
          else {
              warn(cannotApplySizeToNonOrientedMark(markDef.type));
          }
      }
      // Otherwise, apply default value
      const band = (_a = (isFieldOrDatumDef(fieldDef) ? getBand({ channel, fieldDef, markDef, stack, config }) : undefined)) !== null && _a !== void 0 ? _a : 1;
      sizeMixins = sizeMixins || { [vgSizeChannel]: defaultSizeRef(mark, vgSizeChannel, scaleName, scale, config, band) };
      /*
        Band scales with size value and all point scales, use xc/yc + band=0.5
    
        Otherwise (band scales that has size based on a band ref), use x/y with position band = (1 - size_band) / 2.
        In this case, size_band is the band specified in the x/y-encoding.
        By default band is 1, so `(1 - band) / 2` = 0.
        If band is 0.6, the the x/y position in such case should be `(1 - band) / 2` = 0.2
       */
      const center = (scale === null || scale === void 0 ? void 0 : scale.get('type')) !== 'band' || !('band' in sizeMixins[vgSizeChannel]);
      const vgChannel = vgAlignedPositionChannel(channel, markDef, config, center ? 'middle' : 'top');
      const offset = getOffset(channel, markDef);
      const posRef = midPointRefWithPositionInvalidTest({
          channel,
          channelDef: fieldDef,
          markDef,
          config,
          scaleName,
          scale,
          stack,
          offset,
          defaultRef: pointPositionDefaultRef({ model, defaultPos: 'mid', channel, scaleName, scale }),
          band: center ? 0.5 : (1 - band) / 2
      });
      if (vgSizeChannel) {
          return Object.assign({ [vgChannel]: posRef }, sizeMixins);
      }
      else {
          // otherwise, we must simulate size by setting position2 = position + size
          // (for theta/radius since Vega doesn't have thetaWidth/radiusWidth)
          const vgChannel2 = getVgPositionChannel(channel2);
          const sizeRef = sizeMixins[vgSizeChannel];
          const sizeOffset = offset ? Object.assign(Object.assign({}, sizeRef), { offset }) : sizeRef;
          return {
              [vgChannel]: posRef,
              // posRef might be an array that wraps position invalid test
              [vgChannel2]: isArray(posRef)
                  ? [posRef[0], Object.assign(Object.assign({}, posRef[1]), { offset: sizeOffset })]
                  : Object.assign(Object.assign({}, posRef), { offset: sizeOffset })
          };
      }
  }
  function getBinSpacing(channel, spacing, reverse, translate, offset) {
      if (isPolarPositionChannel(channel)) {
          return 0;
      }
      const spacingOffset = channel === 'x' || channel === 'y2' ? -spacing / 2 : spacing / 2;
      if (isSignalRef(reverse) || isSignalRef(offset) || isSignalRef(translate)) {
          const reverseExpr = signalOrStringValue(reverse);
          const offsetExpr = signalOrStringValue(offset);
          const translateExpr = signalOrStringValue(translate);
          const t = translateExpr ? `${translateExpr} + ` : '';
          const r = reverseExpr ? `(${reverseExpr} ? -1 : 1) * ` : '';
          const o = offsetExpr ? `(${offsetExpr} + ${spacingOffset})` : spacingOffset;
          return {
              signal: t + r + o
          };
      }
      else {
          offset = offset || 0;
          return translate + (reverse ? -offset - spacingOffset : +offset + spacingOffset);
      }
  }
  function rectBinPosition({ fieldDef, fieldDef2, channel, band, scaleName, markDef, spacing = 0, axisTranslate, reverse, config }) {
      const channel2 = getSecondaryRangeChannel(channel);
      const vgChannel = getVgPositionChannel(channel);
      const vgChannel2 = getVgPositionChannel(channel2);
      const offset = getOffset(channel, markDef);
      if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {
          return {
              [vgChannel2]: rectBinRef({
                  channel,
                  fieldDef,
                  scaleName,
                  markDef,
                  band: (1 - band) / 2,
                  offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset),
                  config
              }),
              [vgChannel]: rectBinRef({
                  channel,
                  fieldDef,
                  scaleName,
                  markDef,
                  band: 1 - (1 - band) / 2,
                  offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset),
                  config
              })
          };
      }
      else if (isBinned(fieldDef.bin)) {
          const startRef = valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, { offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset) });
          if (isFieldDef(fieldDef2)) {
              return {
                  [vgChannel2]: startRef,
                  [vgChannel]: valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, { offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset) })
              };
          }
          else if (isBinParams(fieldDef.bin) && fieldDef.bin.step) {
              return {
                  [vgChannel2]: startRef,
                  [vgChannel]: {
                      signal: `scale("${scaleName}", ${vgField(fieldDef, { expr: 'datum' })} + ${fieldDef.bin.step})`,
                      offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)
                  }
              };
          }
      }
      warn(channelRequiredForBinned(channel2));
      return undefined;
  }
  /**
   * Value Ref for binned fields
   */
  function rectBinRef({ channel, fieldDef, scaleName, markDef, band, offset, config }) {
      const r = interpolatedSignalRef({
          scaleName,
          fieldOrDatumDef: fieldDef,
          band,
          offset
      });
      return wrapPositionInvalidTest({
          fieldDef,
          channel,
          markDef,
          ref: r,
          config
      });
  }

  const ALWAYS_IGNORE = new Set(['aria']);
  function baseEncodeEntry(model, ignore) {
      const { fill = undefined, stroke = undefined } = ignore.color === 'include' ? color(model) : {};
      return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, markDefProperties(model.markDef, ignore)), wrapAllFieldsInvalid(model, 'fill', fill)), wrapAllFieldsInvalid(model, 'stroke', stroke)), nonPosition('opacity', model)), nonPosition('fillOpacity', model)), nonPosition('strokeOpacity', model)), nonPosition('strokeWidth', model)), nonPosition('strokeDash', model)), zindex(model)), tooltip(model)), text(model, 'href')), aria(model));
  }
  // TODO: mark VgValueRef[] as readonly after https://github.com/vega/vega/pull/1987
  function wrapAllFieldsInvalid(model, channel, valueRef) {
      const { config, mark, markDef } = model;
      const invalid = getMarkPropOrConfig('invalid', markDef, config);
      if (invalid === 'hide' && valueRef && !isPathMark(mark)) {
          // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.
          // For path marks, we will use "defined" property and skip these values instead.
          const test = allFieldsInvalidPredicate(model, { invalid: true, channels: SCALE_CHANNELS });
          if (test) {
              return {
                  [channel]: [
                      // prepend the invalid case
                      // TODO: support custom value
                      { test, value: null },
                      ...array(valueRef)
                  ]
              };
          }
      }
      return valueRef ? { [channel]: valueRef } : {};
  }
  function markDefProperties(mark, ignore) {
      return VG_MARK_CONFIGS.reduce((m, prop) => {
          if (!ALWAYS_IGNORE.has(prop) && mark[prop] !== undefined && ignore[prop] !== 'ignore') {
              m[prop] = signalOrValueRef(mark[prop]);
          }
          return m;
      }, {});
  }
  function allFieldsInvalidPredicate(model, { invalid = false, channels }) {
      const filterIndex = channels.reduce((aggregator, channel) => {
          const scaleComponent = model.getScaleComponent(channel);
          if (scaleComponent) {
              const scaleType = scaleComponent.get('type');
              const field = model.vgField(channel, { expr: 'datum' });
              // While discrete domain scales can handle invalid values, continuous scales can't.
              if (field && hasContinuousDomain(scaleType)) {
                  aggregator[field] = true;
              }
          }
          return aggregator;
      }, {});
      const fields = keys(filterIndex);
      if (fields.length > 0) {
          const op = invalid ? '||' : '&&';
          return fields.map(field => fieldInvalidPredicate(field, invalid)).join(` ${op} `);
      }
      return undefined;
  }

  function defined(model) {
      const { config, markDef } = model;
      const invalid = getMarkPropOrConfig('invalid', markDef, config);
      if (invalid) {
          const signal = allFieldsInvalidPredicate$1(model, { channels: POSITION_SCALE_CHANNELS });
          if (signal) {
              return { defined: { signal } };
          }
      }
      return {};
  }
  function allFieldsInvalidPredicate$1(model, { invalid = false, channels }) {
      const filterIndex = channels.reduce((aggregator, channel) => {
          const scaleComponent = model.getScaleComponent(channel);
          if (scaleComponent) {
              const scaleType = scaleComponent.get('type');
              const field = model.vgField(channel, { expr: 'datum' });
              // While discrete domain scales can handle invalid values, continuous scales can't.
              if (field && hasContinuousDomain(scaleType)) {
                  aggregator[field] = true;
              }
          }
          return aggregator;
      }, {});
      const fields = keys(filterIndex);
      if (fields.length > 0) {
          const op = invalid ? '||' : '&&';
          return fields.map(field => fieldInvalidPredicate(field, invalid)).join(` ${op} `);
      }
      return undefined;
  }
  function valueIfDefined(prop, value) {
      if (value !== undefined) {
          return { [prop]: signalOrValueRef(value) };
      }
      return undefined;
  }

  const VORONOI = 'voronoi';
  const nearest = {
      has: selCmpt => {
          return selCmpt.type !== 'interval' && selCmpt.nearest;
      },
      parse: (model, selCmpt) => {
          // Scope selection events to the voronoi mark to prevent capturing
          // events that occur on the group mark (https://github.com/vega/vega/issues/2112).
          if (selCmpt.events) {
              for (const s of selCmpt.events) {
                  s.markname = model.getName(VORONOI);
              }
          }
      },
      marks: (model, selCmpt, marks) => {
          const { x, y } = selCmpt.project.hasChannel;
          const markType = model.mark;
          if (isPathMark(markType)) {
              warn(nearestNotSupportForContinuous(markType));
              return marks;
          }
          const cellDef = {
              name: model.getName(VORONOI),
              type: 'path',
              interactive: true,
              from: { data: model.getName('marks') },
              encode: {
                  update: Object.assign({ fill: { value: 'transparent' }, strokeWidth: { value: 0.35 }, stroke: { value: 'transparent' }, isVoronoi: { value: true } }, tooltip(model, { reactiveGeom: true }))
              },
              transform: [
                  {
                      type: 'voronoi',
                      x: { expr: x || !y ? 'datum.datum.x || 0' : '0' },
                      y: { expr: y || !x ? 'datum.datum.y || 0' : '0' },
                      size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]
                  }
              ]
          };
          let index = 0;
          let exists = false;
          marks.forEach((mark, i) => {
              var _a;
              const name = (_a = mark.name) !== null && _a !== void 0 ? _a : '';
              if (name === model.component.mark[0].name) {
                  index = i;
              }
              else if (name.indexOf(VORONOI) >= 0) {
                  exists = true;
              }
          });
          if (!exists) {
              marks.splice(index + 1, 0, cellDef);
          }
          return marks;
      }
  };

  /**
   * A node in the dataflow tree.
   */
  class DataFlowNode {
      constructor(parent, debugName) {
          this.debugName = debugName;
          this._children = [];
          this._parent = null;
          if (parent) {
              this.parent = parent;
          }
      }
      /**
       * Clone this node with a deep copy but don't clone links to children or parents.
       */
      clone() {
          throw new Error('Cannot clone node');
      }
      get parent() {
          return this._parent;
      }
      /**
       * Set the parent of the node and also add this node to the parent's children.
       */
      set parent(parent) {
          this._parent = parent;
          if (parent) {
              parent.addChild(this);
          }
      }
      get children() {
          return this._children;
      }
      numChildren() {
          return this._children.length;
      }
      addChild(child, loc) {
          // do not add the same child twice
          if (this._children.indexOf(child) > -1) {
              warn(ADD_SAME_CHILD_TWICE);
              return;
          }
          if (loc !== undefined) {
              this._children.splice(loc, 0, child);
          }
          else {
              this._children.push(child);
          }
      }
      removeChild(oldChild) {
          const loc = this._children.indexOf(oldChild);
          this._children.splice(loc, 1);
          return loc;
      }
      /**
       * Remove node from the dataflow.
       */
      remove() {
          let loc = this._parent.removeChild(this);
          for (const child of this._children) {
              // do not use the set method because we want to insert at a particular location
              child._parent = this._parent;
              this._parent.addChild(child, loc++);
          }
      }
      /**
       * Insert another node as a parent of this node.
       */
      insertAsParentOf(other) {
          const parent = other.parent;
          parent.removeChild(this);
          this.parent = parent;
          other.parent = this;
      }
      swapWithParent() {
          const parent = this._parent;
          const newParent = parent.parent;
          // reconnect the children
          for (const child of this._children) {
              child.parent = parent;
          }
          // remove old links
          this._children = []; // equivalent to removing every child link one by one
          parent.removeChild(this);
          parent.parent.removeChild(parent);
          // swap two nodes
          this.parent = newParent;
          parent.parent = this;
      }
  }
  class OutputNode extends DataFlowNode {
      /**
       * @param source The name of the source. Will change in assemble.
       * @param type The type of the output node.
       * @param refCounts A global ref counter map.
       */
      constructor(parent, source, type, refCounts) {
          super(parent, source);
          this.type = type;
          this.refCounts = refCounts;
          this._source = this._name = source;
          if (this.refCounts && !(this._name in this.refCounts)) {
              this.refCounts[this._name] = 0;
          }
      }
      clone() {
          const cloneObj = new this.constructor();
          cloneObj.debugName = 'clone_' + this.debugName;
          cloneObj._source = this._source;
          cloneObj._name = 'clone_' + this._name;
          cloneObj.type = this.type;
          cloneObj.refCounts = this.refCounts;
          cloneObj.refCounts[cloneObj._name] = 0;
          return cloneObj;
      }
      dependentFields() {
          return new Set();
      }
      producedFields() {
          return new Set();
      }
      hash() {
          if (this._hash === undefined) {
              this._hash = `Output ${uniqueId()}`;
          }
          return this._hash;
      }
      /**
       * Request the datasource name and increase the ref counter.
       *
       * During the parsing phase, this will return the simple name such as 'main' or 'raw'.
       * It is crucial to request the name from an output node to mark it as a required node.
       * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.
       *
       * In the assemble phase, this will return the correct name.
       */
      getSource() {
          this.refCounts[this._name]++;
          return this._source;
      }
      isRequired() {
          return !!this.refCounts[this._name];
      }
      setSource(source) {
          this._source = source;
      }
  }

  var __rest$h = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  class TimeUnitNode extends DataFlowNode {
      constructor(parent, formula) {
          super(parent);
          this.formula = formula;
      }
      clone() {
          return new TimeUnitNode(null, duplicate(this.formula));
      }
      static makeFromEncoding(parent, model) {
          const formula = model.reduceFieldDef((timeUnitComponent, fieldDef, channel) => {
              const { field, timeUnit } = fieldDef;
              const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;
              const band = isUnitModel(model) && hasBand(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config);
              if (timeUnit) {
                  const as = vgField(fieldDef, { forAs: true });
                  timeUnitComponent[hash({
                      as,
                      field,
                      timeUnit
                  })] = Object.assign({ as,
                      field,
                      timeUnit }, (band ? { band: true } : {}));
              }
              return timeUnitComponent;
          }, {});
          if (isEmpty$1(formula)) {
              return null;
          }
          return new TimeUnitNode(parent, formula);
      }
      static makeFromTransform(parent, t) {
          const _a = Object.assign({}, t), { timeUnit } = _a, other = __rest$h(_a, ["timeUnit"]);
          const normalizedTimeUnit = normalizeTimeUnit(timeUnit);
          const component = Object.assign(Object.assign({}, other), { timeUnit: normalizedTimeUnit });
          return new TimeUnitNode(parent, {
              [hash(component)]: component
          });
      }
      /**
       * Merge together TimeUnitNodes assigning the children of `other` to `this`
       * and removing `other`.
       */
      merge(other) {
          this.formula = Object.assign({}, this.formula);
          // if the same hash happen twice, merge "band"
          for (const key in other.formula) {
              if (!this.formula[key] || other.formula[key].band) {
                  // copy if it's not a duplicate or if we need to copy band over
                  this.formula[key] = other.formula[key];
              }
          }
          for (const child of other.children) {
              other.removeChild(child);
              child.parent = this;
          }
          other.remove();
      }
      /**
       * Remove time units coming from the other node.
       */
      removeFormulas(fields) {
          const newFormula = {};
          for (const [key, timeUnit] of entries(this.formula)) {
              if (!fields.has(timeUnit.as)) {
                  newFormula[key] = timeUnit;
              }
          }
          this.formula = newFormula;
      }
      producedFields() {
          return new Set(vals(this.formula).map(f => f.as));
      }
      dependentFields() {
          return new Set(vals(this.formula).map(f => f.field));
      }
      hash() {
          return `TimeUnit ${hash(this.formula)}`;
      }
      assemble() {
          const transforms = [];
          for (const f of vals(this.formula)) {
              const { field, as, timeUnit } = f;
              const _a = normalizeTimeUnit(timeUnit), { unit, utc } = _a, params = __rest$h(_a, ["unit", "utc"]);
              transforms.push(Object.assign(Object.assign(Object.assign(Object.assign({ field: replacePathInField(field), type: 'timeunit' }, (unit ? { units: getTimeUnitParts(unit) } : {})), (utc ? { timezone: 'utc' } : {})), params), { as: [as, `${as}_end`] }));
          }
          return transforms;
      }
  }

  var __rest$i = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  const TUPLE_FIELDS = '_tuple_fields';
  class SelectionProjectionComponent {
      constructor(...items) {
          this.items = items;
          this.hasChannel = {};
          this.hasField = {};
      }
  }
  const project = {
      has: () => {
          return true; // This transform handles its own defaults, so always run parse.
      },
      parse: (model, selCmpt, selDef) => {
          var _a, _b, _c;
          const name = selCmpt.name;
          const proj = (_a = selCmpt.project) !== null && _a !== void 0 ? _a : (selCmpt.project = new SelectionProjectionComponent());
          const parsed = {};
          const timeUnits = {};
          const signals = new Set();
          const signalName = (p, range) => {
              const suffix = range === 'visual' ? p.channel : p.field;
              let sg = varName(`${name}_${suffix}`);
              for (let counter = 1; signals.has(sg); counter++) {
                  sg = varName(`${name}_${suffix}_${counter}`);
              }
              signals.add(sg);
              return { [range]: sg };
          };
          // If no explicit projection (either fields or encodings) is specified, set some defaults.
          // If an initial value is set, try to infer projections.
          // Otherwise, use the default configuration.
          if (!selDef.fields && !selDef.encodings) {
              const cfg = model.config.selection[selDef.type];
              if (selDef.init) {
                  for (const init of array(selDef.init)) {
                      for (const key of keys(init)) {
                          if (isSingleDefUnitChannel(key)) {
                              (selDef.encodings || (selDef.encodings = [])).push(key);
                          }
                          else {
                              if (selDef.type === 'interval') {
                                  warn(INTERVAL_INITIALIZED_WITH_X_Y);
                                  selDef.encodings = cfg.encodings;
                              }
                              else {
                                  (selDef.fields || (selDef.fields = [])).push(key);
                              }
                          }
                      }
                  }
              }
              else {
                  selDef.encodings = cfg.encodings;
                  selDef.fields = cfg.fields;
              }
          }
          // TODO: find a possible channel mapping for these fields.
          for (const field of (_b = selDef.fields) !== null && _b !== void 0 ? _b : []) {
              const p = { type: 'E', field };
              p.signals = Object.assign({}, signalName(p, 'data'));
              proj.items.push(p);
              proj.hasField[field] = p;
          }
          for (const channel of (_c = selDef.encodings) !== null && _c !== void 0 ? _c : []) {
              const fieldDef = model.fieldDef(channel);
              if (fieldDef) {
                  let field = fieldDef.field;
                  if (fieldDef.aggregate) {
                      warn(cannotProjectAggregate(channel, fieldDef.aggregate));
                      continue;
                  }
                  else if (!field) {
                      warn(cannotProjectOnChannelWithoutField(channel));
                      continue;
                  }
                  if (fieldDef.timeUnit) {
                      field = model.vgField(channel);
                      // Construct TimeUnitComponents which will be combined into a
                      // TimeUnitNode. This node may need to be inserted into the
                      // dataflow if the selection is used across views that do not
                      // have these time units defined.
                      const component = {
                          timeUnit: fieldDef.timeUnit,
                          as: field,
                          field: fieldDef.field
                      };
                      timeUnits[hash(component)] = component;
                  }
                  // Prevent duplicate projections on the same field.
                  // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).
                  if (!parsed[field]) {
                      // Determine whether the tuple will store enumerated or ranged values.
                      // Interval selections store ranges for continuous scales, and enumerations otherwise.
                      // Single/multi selections store ranges for binned fields, and enumerations otherwise.
                      let type = 'E';
                      if (selCmpt.type === 'interval') {
                          const scaleType = model.getScaleComponent(channel).get('type');
                          if (hasContinuousDomain(scaleType)) {
                              type = 'R';
                          }
                      }
                      else if (fieldDef.bin) {
                          type = 'R-RE';
                      }
                      const p = { field, channel, type };
                      p.signals = Object.assign(Object.assign({}, signalName(p, 'data')), signalName(p, 'visual'));
                      proj.items.push((parsed[field] = p));
                      proj.hasField[field] = proj.hasChannel[channel] = parsed[field];
                  }
              }
              else {
                  warn(cannotProjectOnChannelWithoutField(channel));
              }
          }
          if (selDef.init) {
              const parseInit = (i) => {
                  return proj.items.map(p => (i[p.channel] !== undefined ? i[p.channel] : i[p.field]));
              };
              if (selDef.type === 'interval') {
                  selCmpt.init = parseInit(selDef.init);
              }
              else {
                  const init = array(selDef.init);
                  selCmpt.init = init.map(parseInit);
              }
          }
          if (!isEmpty$1(timeUnits)) {
              proj.timeUnit = new TimeUnitNode(null, timeUnits);
          }
      },
      signals: (model, selCmpt, allSignals) => {
          const name = selCmpt.name + TUPLE_FIELDS;
          const hasSignal = allSignals.filter(s => s.name === name);
          return hasSignal.length > 0
              ? allSignals
              : allSignals.concat({
                  name,
                  value: selCmpt.project.items.map(proj => {
                      const rest = __rest$i(proj, ["signals", "hasLegend"]);
                      rest.field = replacePathInField(rest.field);
                      return rest;
                  })
              });
      }
  };

  const inputBindings = {
      has: selCmpt => {
          return (selCmpt.type === 'single' &&
              selCmpt.resolve === 'global' &&
              selCmpt.bind &&
              selCmpt.bind !== 'scales' &&
              !isLegendBinding(selCmpt.bind));
      },
      parse: (model, selCmpt, selDef, origDef) => {
          // Binding a selection to input widgets disables default direct manipulation interaction.
          // A user can choose to re-enable it by explicitly specifying triggering input events.
          if (!origDef.on)
              delete selCmpt.events;
          if (!origDef.clear)
              delete selCmpt.clear;
      },
      topLevelSignals: (model, selCmpt, signals) => {
          const name = selCmpt.name;
          const proj = selCmpt.project;
          const bind = selCmpt.bind;
          const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).
          const datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';
          proj.items.forEach((p, i) => {
              var _a, _b;
              const sgname = varName(`${name}_${p.field}`);
              const hasSignal = signals.filter(s => s.name === sgname);
              if (!hasSignal.length) {
                  signals.unshift(Object.assign(Object.assign({ name: sgname }, (init ? { init: assembleInit(init[i]) } : { value: null })), { on: selCmpt.events
                          ? [
                              {
                                  events: selCmpt.events,
                                  update: `datum && item().mark.marktype !== 'group' ? ${datum}[${$(p.field)}] : null`
                              }
                          ]
                          : [], bind: (_b = (_a = bind[p.field]) !== null && _a !== void 0 ? _a : bind[p.channel]) !== null && _b !== void 0 ? _b : bind }));
              }
          });
          return signals;
      },
      signals: (model, selCmpt, signals) => {
          const name = selCmpt.name;
          const proj = selCmpt.project;
          const signal = signals.filter(s => s.name === name + TUPLE)[0];
          const fields = name + TUPLE_FIELDS;
          const values = proj.items.map(p => varName(`${name}_${p.field}`));
          const valid = values.map(v => `${v} !== null`).join(' && ');
          if (values.length) {
              signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;
          }
          delete signal.value;
          delete signal.on;
          return signals;
      }
  };

  const TOGGLE = '_toggle';
  const toggle = {
      has: selCmpt => {
          return selCmpt.type === 'multi' && !!selCmpt.toggle;
      },
      signals: (model, selCmpt, signals) => {
          return signals.concat({
              name: selCmpt.name + TOGGLE,
              value: false,
              on: [{ events: selCmpt.events, update: selCmpt.toggle }]
          });
      },
      modifyExpr: (model, selCmpt) => {
          const tpl = selCmpt.name + TUPLE;
          const signal = selCmpt.name + TOGGLE;
          return (`${signal} ? null : ${tpl}, ` +
              (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) +
              `${signal} ? ${tpl} : null`);
      }
  };

  const clear = {
      has: selCmpt => {
          return selCmpt.clear !== undefined && selCmpt.clear !== false;
      },
      parse: (model, selCmpt, selDef) => {
          if (selDef.clear) {
              selCmpt.clear = isString$1(selDef.clear) ? eventSelector(selDef.clear, 'scope') : selDef.clear;
          }
      },
      topLevelSignals: (model, selCmpt, signals) => {
          if (inputBindings.has(selCmpt)) {
              for (const proj of selCmpt.project.items) {
                  const idx = signals.findIndex(n => n.name === varName(`${selCmpt.name}_${proj.field}`));
                  if (idx !== -1) {
                      signals[idx].on.push({ events: selCmpt.clear, update: 'null' });
                  }
              }
          }
          return signals;
      },
      signals: (model, selCmpt, signals) => {
          function addClear(idx, update) {
              if (idx !== -1 && signals[idx].on) {
                  signals[idx].on.push({ events: selCmpt.clear, update });
              }
          }
          // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.
          if (selCmpt.type === 'interval') {
              for (const proj of selCmpt.project.items) {
                  const vIdx = signals.findIndex(n => n.name === proj.signals.visual);
                  addClear(vIdx, '[0, 0]');
                  if (vIdx === -1) {
                      const dIdx = signals.findIndex(n => n.name === proj.signals.data);
                      addClear(dIdx, 'null');
                  }
              }
          }
          else {
              let tIdx = signals.findIndex(n => n.name === selCmpt.name + TUPLE);
              addClear(tIdx, 'null');
              if (toggle.has(selCmpt)) {
                  tIdx = signals.findIndex(n => n.name === selCmpt.name + TOGGLE);
                  addClear(tIdx, 'false');
              }
          }
          return signals;
      }
  };

  const scaleBindings = {
      has: selCmpt => {
          return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';
      },
      parse: (model, selCmpt) => {
          const bound = (selCmpt.scales = []);
          for (const proj of selCmpt.project.items) {
              const channel = proj.channel;
              if (!isScaleChannel(channel)) {
                  continue;
              }
              const scale = model.getScaleComponent(channel);
              const scaleType = scale ? scale.get('type') : undefined;
              if (!scale || !hasContinuousDomain(scaleType)) {
                  warn(SCALE_BINDINGS_CONTINUOUS);
                  continue;
              }
              const extent = { selection: selCmpt.name, field: proj.field };
              scale.set('selectionExtent', extent, true);
              bound.push(proj);
          }
      },
      topLevelSignals: (model, selCmpt, signals) => {
          const bound = selCmpt.scales.filter(proj => signals.filter(s => s.name === proj.signals.data).length === 0);
          // Top-level signals are only needed for multiview displays and if this
          // view's top-level signals haven't already been generated.
          if (!model.parent || isTopLevelLayer(model) || bound.length === 0) {
              return signals;
          }
          // vlSelectionResolve does not account for the behavior of bound scales in
          // multiview displays. Each unit view adds a tuple to the store, but the
          // state of the selection is the unit selection most recently updated. This
          // state is captured by the top-level signals that we insert and "push
          // outer" to from within the units. We need to reassemble this state into
          // the top-level named signal, except no single selCmpt has a global view.
          const namedSg = signals.filter(s => s.name === selCmpt.name)[0];
          let update = namedSg.update;
          if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {
              namedSg.update = `{${bound.map(proj => `${$(proj.field)}: ${proj.signals.data}`).join(', ')}}`;
          }
          else {
              for (const proj of bound) {
                  const mapping = `${$(proj.field)}: ${proj.signals.data}`;
                  if (update.indexOf(mapping) < 0) {
                      update = `${update.substring(0, update.length - 1)}, ${mapping}}`;
                  }
              }
              namedSg.update = update;
          }
          return signals.concat(bound.map(proj => ({ name: proj.signals.data })));
      },
      signals: (model, selCmpt, signals) => {
          // Nested signals need only push to top-level signals with multiview displays.
          if (model.parent && !isTopLevelLayer(model)) {
              for (const proj of selCmpt.scales) {
                  const signal = signals.filter(s => s.name === proj.signals.data)[0];
                  signal.push = 'outer';
                  delete signal.value;
                  delete signal.update;
              }
          }
          return signals;
      }
  };
  function domain(model, channel) {
      const scale = $(model.scaleName(channel));
      return `domain(${scale})`;
  }
  function isTopLevelLayer(model) {
      var _a;
      return model.parent && isLayerModel(model.parent) && ((_a = !model.parent.parent) !== null && _a !== void 0 ? _a : isTopLevelLayer(model.parent.parent));
  }

  const legendBindings = {
      has: (selCmpt) => {
          const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);
          const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;
          if (spec && !projLen) {
              warn(LEGEND_BINDINGS_MUST_HAVE_PROJECTION);
          }
          return spec && projLen;
      },
      parse: (model, selCmpt, selDef, origDef) => {
          var _a;
          // Binding a selection to a legend disables default direct manipulation interaction.
          // A user can choose to re-enable it by explicitly specifying triggering input events.
          if (!origDef.on)
              delete selCmpt.events;
          if (!origDef.clear)
              delete selCmpt.clear;
          if (origDef.on || origDef.clear) {
              const legendFilter = 'event.item && indexof(event.item.mark.role, "legend") < 0';
              for (const evt of selCmpt.events) {
                  evt.filter = array((_a = evt.filter) !== null && _a !== void 0 ? _a : []);
                  if (evt.filter.indexOf(legendFilter) < 0) {
                      evt.filter.push(legendFilter);
                  }
              }
          }
          const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';
          const stream = isString$1(evt) ? eventSelector(evt, 'view') : array(evt);
          selCmpt.bind = { legend: { merge: stream } };
      },
      topLevelSignals: (model, selCmpt, signals) => {
          const selName = selCmpt.name;
          const stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;
          const markName = (name) => (s) => {
              const ds = duplicate(s);
              ds.markname = name;
              return ds;
          };
          for (const proj of selCmpt.project.items) {
              if (!proj.hasLegend)
                  continue;
              const prefix = `${varName(proj.field)}_legend`;
              const sgName = `${selName}_${prefix}`;
              const hasSignal = signals.filter(s => s.name === sgName);
              if (hasSignal.length === 0) {
                  const events = stream.merge
                      .map(markName(`${prefix}_symbols`))
                      .concat(stream.merge.map(markName(`${prefix}_labels`)))
                      .concat(stream.merge.map(markName(`${prefix}_entries`)));
                  signals.unshift(Object.assign(Object.assign({ name: sgName }, (!selCmpt.init ? { value: null } : {})), { on: [
                          // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.
                          { events, update: 'datum.value || item().items[0].items[0].datum.value', force: true },
                          { events: stream.merge, update: `!event.item || !datum ? null : ${sgName}`, force: true }
                      ] }));
              }
          }
          return signals;
      },
      signals: (model, selCmpt, signals) => {
          const name = selCmpt.name;
          const proj = selCmpt.project;
          const tuple = signals.find(s => s.name === name + TUPLE);
          const fields = name + TUPLE_FIELDS;
          const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${varName(p.field)}_legend`));
          const valid = values.map(v => `${v} !== null`).join(' && ');
          const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;
          if (selCmpt.events && values.length > 0) {
              tuple.on.push({
                  events: values.map(signal => ({ signal })),
                  update
              });
          }
          else if (values.length > 0) {
              tuple.update = update;
              delete tuple.value;
              delete tuple.on;
          }
          const toggle = signals.find(s => s.name === name + TOGGLE);
          const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;
          if (toggle) {
              if (!selCmpt.events)
                  toggle.on[0].events = events;
              else
                  toggle.on.push(Object.assign(Object.assign({}, toggle.on[0]), { events }));
          }
          return signals;
      }
  };
  function parseInteractiveLegend(model, channel, legendCmpt) {
      var _a;
      const field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;
      forEachSelection(model, selCmpt => {
          var _a, _b;
          const proj = (_a = selCmpt.project.hasField[field]) !== null && _a !== void 0 ? _a : selCmpt.project.hasChannel[channel];
          if (proj && legendBindings.has(selCmpt)) {
              const legendSelections = (_b = legendCmpt.get('selections')) !== null && _b !== void 0 ? _b : [];
              legendSelections.push(selCmpt.name);
              legendCmpt.set('selections', legendSelections, false);
              proj.hasLegend = true;
          }
      });
  }

  const ANCHOR = '_translate_anchor';
  const DELTA = '_translate_delta';
  const translate = {
      has: selCmpt => {
          return selCmpt.type === 'interval' && selCmpt.translate;
      },
      signals: (model, selCmpt, signals) => {
          const name = selCmpt.name;
          const hasScales = scaleBindings.has(selCmpt);
          const anchor = name + ANCHOR;
          const { x, y } = selCmpt.project.hasChannel;
          let events = eventSelector(selCmpt.translate, 'scope');
          if (!hasScales) {
              events = events.map(e => ((e.between[0].markname = name + BRUSH), e));
          }
          signals.push({
              name: anchor,
              value: {},
              on: [
                  {
                      events: events.map(e => e.between[0]),
                      update: '{x: x(unit), y: y(unit)' +
                          (x !== undefined ? ', extent_x: ' + (hasScales ? domain(model, X) : `slice(${x.signals.visual})`) : '') +
                          (y !== undefined ? ', extent_y: ' + (hasScales ? domain(model, Y) : `slice(${y.signals.visual})`) : '') +
                          '}'
                  }
              ]
          }, {
              name: name + DELTA,
              value: {},
              on: [
                  {
                      events: events,
                      update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`
                  }
              ]
          });
          if (x !== undefined) {
              onDelta(model, selCmpt, x, 'width', signals);
          }
          if (y !== undefined) {
              onDelta(model, selCmpt, y, 'height', signals);
          }
          return signals;
      }
  };
  function onDelta(model, selCmpt, proj, size, signals) {
      var _a;
      const name = selCmpt.name;
      const anchor = name + ANCHOR;
      const delta = name + DELTA;
      const channel = proj.channel;
      const hasScales = scaleBindings.has(selCmpt);
      const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];
      const sizeSg = model.getSizeSignalRef(size).signal;
      const scaleCmpt = model.getScaleComponent(channel);
      const scaleType = scaleCmpt.get('type');
      const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.
      const extent = `${anchor}.extent_${channel}`;
      const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);
      const panFn = !hasScales
          ? 'panLinear'
          : scaleType === 'log'
              ? 'panLog'
              : scaleType === 'pow'
                  ? 'panPow'
                  : 'panLinear';
      const update = `${panFn}(${extent}, ${offset}` +
          (hasScales && scaleType === 'pow' ? `, ${(_a = scaleCmpt.get('exponent')) !== null && _a !== void 0 ? _a : 1}` : '') +
          ')';
      signal.on.push({
          events: { signal: delta },
          update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`
      });
  }

  const ANCHOR$1 = '_zoom_anchor';
  const DELTA$1 = '_zoom_delta';
  const zoom = {
      has: selCmpt => {
          return selCmpt.type === 'interval' && selCmpt.zoom;
      },
      signals: (model, selCmpt, signals) => {
          const name = selCmpt.name;
          const hasScales = scaleBindings.has(selCmpt);
          const delta = name + DELTA$1;
          const { x, y } = selCmpt.project.hasChannel;
          const sx = $(model.scaleName(X));
          const sy = $(model.scaleName(Y));
          let events = eventSelector(selCmpt.zoom, 'scope');
          if (!hasScales) {
              events = events.map(e => ((e.markname = name + BRUSH), e));
          }
          signals.push({
              name: name + ANCHOR$1,
              on: [
                  {
                      events: events,
                      update: !hasScales
                          ? `{x: x(unit), y: y(unit)}`
                          : '{' +
                              [sx ? `x: invert(${sx}, x(unit))` : '', sy ? `y: invert(${sy}, y(unit))` : '']
                                  .filter(expr => !!expr)
                                  .join(', ') +
                              '}'
                  }
              ]
          }, {
              name: delta,
              on: [
                  {
                      events: events,
                      force: true,
                      update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'
                  }
              ]
          });
          if (x !== undefined) {
              onDelta$1(model, selCmpt, x, 'width', signals);
          }
          if (y !== undefined) {
              onDelta$1(model, selCmpt, y, 'height', signals);
          }
          return signals;
      }
  };
  function onDelta$1(model, selCmpt, proj, size, signals) {
      var _a;
      const name = selCmpt.name;
      const channel = proj.channel;
      const hasScales = scaleBindings.has(selCmpt);
      const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];
      const sizeSg = model.getSizeSignalRef(size).signal;
      const scaleCmpt = model.getScaleComponent(channel);
      const scaleType = scaleCmpt.get('type');
      const base = hasScales ? domain(model, channel) : signal.name;
      const delta = name + DELTA$1;
      const anchor = `${name}${ANCHOR$1}.${channel}`;
      const zoomFn = !hasScales
          ? 'zoomLinear'
          : scaleType === 'log'
              ? 'zoomLog'
              : scaleType === 'pow'
                  ? 'zoomPow'
                  : 'zoomLinear';
      const update = `${zoomFn}(${base}, ${anchor}, ${delta}` +
          (hasScales && scaleType === 'pow' ? `, ${(_a = scaleCmpt.get('exponent')) !== null && _a !== void 0 ? _a : 1}` : '') +
          ')';
      signal.on.push({
          events: { signal: delta },
          update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`
      });
  }

  const compilers = [project, toggle, scaleBindings, legendBindings, translate, zoom, inputBindings, nearest, clear];
  function forEachTransform(selCmpt, cb) {
      for (const t of compilers) {
          if (t.has(selCmpt)) {
              cb(t);
          }
      }
  }

  var __rest$j = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function assembleInit(init, isExpr = true, wrap = identity$1) {
      if (isArray(init)) {
          const assembled = init.map(v => assembleInit(v, isExpr, wrap));
          return isExpr ? `[${assembled.join(', ')}]` : assembled;
      }
      else if (isDateTime(init)) {
          if (isExpr) {
              return wrap(dateTimeToExpr(init));
          }
          else {
              return wrap(dateTimeToTimestamp(init));
          }
      }
      return isExpr ? wrap(JSON.stringify(init)) : init;
  }
  function assembleUnitSelectionSignals(model, signals) {
      forEachSelection(model, (selCmpt, selCompiler) => {
          const name = selCmpt.name;
          let modifyExpr = selCompiler.modifyExpr(model, selCmpt);
          signals.push(...selCompiler.signals(model, selCmpt));
          forEachTransform(selCmpt, txCompiler => {
              if (txCompiler.signals) {
                  signals = txCompiler.signals(model, selCmpt, signals);
              }
              if (txCompiler.modifyExpr) {
                  modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);
              }
          });
          signals.push({
              name: name + MODIFY,
              on: [
                  {
                      events: { signal: selCmpt.name + TUPLE },
                      update: `modify(${$(selCmpt.name + STORE)}, ${modifyExpr})`
                  }
              ]
          });
      });
      return cleanupEmptyOnArray(signals);
  }
  function assembleFacetSignals(model, signals) {
      if (model.component.selection && keys(model.component.selection).length) {
          const name = $(model.getName('cell'));
          signals.unshift({
              name: 'facet',
              value: {},
              on: [
                  {
                      events: eventSelector('mousemove', 'scope'),
                      update: `isTuple(facet) ? facet : group(${name}).datum`
                  }
              ]
          });
      }
      return cleanupEmptyOnArray(signals);
  }
  function assembleTopLevelSignals(model, signals) {
      let hasSelections = false;
      forEachSelection(model, (selCmpt, selCompiler) => {
          const name = selCmpt.name;
          const store = $(name + STORE);
          const hasSg = signals.filter(s => s.name === name);
          if (hasSg.length === 0) {
              const resolve = selCmpt.resolve === 'global' ? 'union' : selCmpt.resolve;
              const isMulti = selCmpt.type === 'multi' ? ', true)' : ')';
              signals.push({
                  name: selCmpt.name,
                  update: `${VL_SELECTION_RESOLVE}(${store}, ${$(resolve)}${isMulti}`
              });
          }
          hasSelections = true;
          if (selCompiler.topLevelSignals) {
              signals = selCompiler.topLevelSignals(model, selCmpt, signals);
          }
          forEachTransform(selCmpt, txCompiler => {
              if (txCompiler.topLevelSignals) {
                  signals = txCompiler.topLevelSignals(model, selCmpt, signals);
              }
          });
      });
      if (hasSelections) {
          const hasUnit = signals.filter(s => s.name === 'unit');
          if (hasUnit.length === 0) {
              signals.unshift({
                  name: 'unit',
                  value: {},
                  on: [{ events: 'mousemove', update: 'isTuple(group()) ? group() : unit' }]
              });
          }
      }
      return cleanupEmptyOnArray(signals);
  }
  function assembleUnitSelectionData(model, data) {
      const dataCopy = [...data];
      forEachSelection(model, selCmpt => {
          const init = { name: selCmpt.name + STORE };
          if (selCmpt.init) {
              const fields = selCmpt.project.items.map(proj => {
                  const rest = __rest$j(proj, ["signals"]);
                  return rest;
              });
              const insert = selCmpt.init.map(i => assembleInit(i, false));
              init.values =
                  selCmpt.type === 'interval'
                      ? [{ unit: unitName(model, { escape: false }), fields, values: insert }]
                      : insert.map(i => ({ unit: unitName(model, { escape: false }), fields, values: i }));
          }
          const contains = dataCopy.filter(d => d.name === selCmpt.name + STORE);
          if (!contains.length) {
              dataCopy.push(init);
          }
      });
      return dataCopy;
  }
  function assembleUnitSelectionMarks(model, marks) {
      forEachSelection(model, (selCmpt, selCompiler) => {
          marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;
          forEachTransform(selCmpt, txCompiler => {
              if (txCompiler.marks) {
                  marks = txCompiler.marks(model, selCmpt, marks);
              }
          });
      });
      return marks;
  }
  function assembleLayerSelectionMarks(model, marks) {
      for (const child of model.children) {
          if (isUnitModel(child)) {
              marks = assembleUnitSelectionMarks(child, marks);
          }
      }
      return marks;
  }
  function assembleSelectionScaleDomain(model, extent) {
      const name = extent.selection;
      const selCmpt = model.getSelectionComponent(name, varName(name));
      return { signal: parseSelectionBinExtent(selCmpt, extent) };
  }
  function cleanupEmptyOnArray(signals) {
      return signals.map(s => {
          if (s.on && !s.on.length)
              delete s.on;
          return s;
      });
  }

  var __rest$k = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  const BRUSH = '_brush';
  const SCALE_TRIGGER = '_scale_trigger';
  const interval = {
      signals: (model, selCmpt) => {
          const name = selCmpt.name;
          const fieldsSg = name + TUPLE_FIELDS;
          const hasScales = scaleBindings.has(selCmpt);
          const signals = [];
          const dataSignals = [];
          const scaleTriggers = [];
          if (selCmpt.translate && !hasScales) {
              const filterExpr = `!event.item || event.item.mark.name !== ${$(name + BRUSH)}`;
              events(selCmpt, (on, evt) => {
                  var _a;
                  const filters = array((_a = evt.between[0].filter) !== null && _a !== void 0 ? _a : (evt.between[0].filter = []));
                  if (filters.indexOf(filterExpr) < 0) {
                      filters.push(filterExpr);
                  }
                  return on;
              });
          }
          selCmpt.project.items.forEach((proj, i) => {
              const channel = proj.channel;
              if (channel !== X && channel !== Y) {
                  warn('Interval selections only support x and y encoding channels.');
                  return;
              }
              const init = selCmpt.init ? selCmpt.init[i] : null;
              const cs = channelSignals(model, selCmpt, proj, init);
              const dname = proj.signals.data;
              const vname = proj.signals.visual;
              const scaleName = $(model.scaleName(channel));
              const scaleType = model.getScaleComponent(channel).get('type');
              const toNum = hasContinuousDomain(scaleType) ? '+' : '';
              signals.push(...cs);
              dataSignals.push(dname);
              scaleTriggers.push({
                  scaleName: model.scaleName(channel),
                  expr: `(!isArray(${dname}) || ` +
                      `(${toNum}invert(${scaleName}, ${vname})[0] === ${toNum}${dname}[0] && ` +
                      `${toNum}invert(${scaleName}, ${vname})[1] === ${toNum}${dname}[1]))`
              });
          });
          // Proxy scale reactions to ensure that an infinite loop doesn't occur
          // when an interval selection filter touches the scale.
          if (!hasScales) {
              signals.push({
                  name: name + SCALE_TRIGGER,
                  value: {},
                  on: [
                      {
                          events: scaleTriggers.map(t => ({ scale: t.scaleName })),
                          update: scaleTriggers.map(t => t.expr).join(' && ') + ` ? ${name + SCALE_TRIGGER} : {}`
                      }
                  ]
              });
          }
          // Only add an interval to the store if it has valid data extents. Data extents
          // are set to null if pixel extents are equal to account for intervals over
          // ordinal/nominal domains which, when inverted, will still produce a valid datum.
          const init = selCmpt.init;
          const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;
          return signals.concat(Object.assign(Object.assign({ name: name + TUPLE }, (init ? { init: `{${update}: ${assembleInit(init)}}` } : {})), { on: [
                  {
                      events: [{ signal: dataSignals.join(' || ') }],
                      update: dataSignals.join(' && ') + ` ? {${update}: [${dataSignals}]} : null`
                  }
              ] }));
      },
      modifyExpr: (model, selCmpt) => {
          const tpl = selCmpt.name + TUPLE;
          return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);
      },
      marks: (model, selCmpt, marks) => {
          const name = selCmpt.name;
          const { x, y } = selCmpt.project.hasChannel;
          const xvname = x && x.signals.visual;
          const yvname = y && y.signals.visual;
          const store = `data(${$(selCmpt.name + STORE)})`;
          // Do not add a brush if we're binding to scales.
          if (scaleBindings.has(selCmpt)) {
              return marks;
          }
          const update = {
              x: x !== undefined ? { signal: `${xvname}[0]` } : { value: 0 },
              y: y !== undefined ? { signal: `${yvname}[0]` } : { value: 0 },
              x2: x !== undefined ? { signal: `${xvname}[1]` } : { field: { group: 'width' } },
              y2: y !== undefined ? { signal: `${yvname}[1]` } : { field: { group: 'height' } }
          };
          // If the selection is resolved to global, only a single interval is in
          // the store. Wrap brush mark's encodings with a production rule to test
          // this based on the `unit` property. Hide the brush mark if it corresponds
          // to a unit different from the one in the store.
          if (selCmpt.resolve === 'global') {
              for (const key of keys(update)) {
                  update[key] = [
                      Object.assign({ test: `${store}.length && ${store}[0].unit === ${unitName(model)}` }, update[key]),
                      { value: 0 }
                  ];
              }
          }
          // Two brush marks ensure that fill colors and other aesthetic choices do
          // not interefere with the core marks, but that the brushed region can still
          // be interacted with (e.g., dragging it around).
          const _a = selCmpt.mark, { fill, fillOpacity, cursor } = _a, stroke = __rest$k(_a, ["fill", "fillOpacity", "cursor"]);
          const vgStroke = keys(stroke).reduce((def, k) => {
              def[k] = [
                  {
                      test: [x !== undefined && `${xvname}[0] !== ${xvname}[1]`, y !== undefined && `${yvname}[0] !== ${yvname}[1]`]
                          .filter(t => t)
                          .join(' && '),
                      value: stroke[k]
                  },
                  { value: null }
              ];
              return def;
          }, {});
          return [
              {
                  name: name + BRUSH + '_bg',
                  type: 'rect',
                  clip: true,
                  encode: {
                      enter: {
                          fill: { value: fill },
                          fillOpacity: { value: fillOpacity }
                      },
                      update: update
                  }
              },
              ...marks,
              {
                  name: name + BRUSH,
                  type: 'rect',
                  clip: true,
                  encode: {
                      enter: Object.assign(Object.assign({}, (cursor ? { cursor: { value: cursor } } : {})), { fill: { value: 'transparent' } }),
                      update: Object.assign(Object.assign({}, update), vgStroke)
                  }
              }
          ];
      }
  };
  /**
   * Returns the visual and data signals for an interval selection.
   */
  function channelSignals(model, selCmpt, proj, init) {
      const channel = proj.channel;
      const vname = proj.signals.visual;
      const dname = proj.signals.data;
      const hasScales = scaleBindings.has(selCmpt);
      const scaleName = $(model.scaleName(channel));
      const scale = model.getScaleComponent(channel);
      const scaleType = scale ? scale.get('type') : undefined;
      const scaled = (str) => `scale(${scaleName}, ${str})`;
      const size = model.getSizeSignalRef(channel === X ? 'width' : 'height').signal;
      const coord = `${channel}(unit)`;
      const on = events(selCmpt, (def, evt) => {
          return [
              ...def,
              { events: evt.between[0], update: `[${coord}, ${coord}]` },
              { events: evt, update: `[${vname}[0], clamp(${coord}, 0, ${size})]` } // Brush End
          ];
      });
      // React to pan/zooms of continuous scales. Non-continuous scales
      // (band, point) cannot be pan/zoomed and any other changes
      // to their domains (e.g., filtering) should clear the brushes.
      on.push({
          events: { signal: selCmpt.name + SCALE_TRIGGER },
          update: hasContinuousDomain(scaleType) ? `[${scaled(`${dname}[0]`)}, ${scaled(`${dname}[1]`)}]` : `[0, 0]`
      });
      return hasScales
          ? [{ name: dname, on: [] }]
          : [
              Object.assign(Object.assign({ name: vname }, (init ? { init: assembleInit(init, true, scaled) } : { value: [] })), { on: on }),
              Object.assign(Object.assign({ name: dname }, (init ? { init: assembleInit(init) } : {})), { on: [
                      {
                          events: { signal: vname },
                          update: `${vname}[0] === ${vname}[1] ? null : invert(${scaleName}, ${vname})`
                      }
                  ] })
          ];
  }
  function events(selCmpt, cb) {
      return selCmpt.events.reduce((on, evt) => {
          if (!evt.between) {
              warn(`${evt} is not an ordered event stream for interval selections.`);
              return on;
          }
          return cb(on, evt);
      }, []);
  }

  function singleOrMultiSignals(model, selCmpt) {
      const name = selCmpt.name;
      const fieldsSg = name + TUPLE_FIELDS;
      const project = selCmpt.project;
      const datum = '(item().isVoronoi ? datum.datum : datum)';
      const values = project.items
          .map(p => {
          const fieldDef = model.fieldDef(p.channel);
          // Binned fields should capture extents, for a range test against the raw field.
          return fieldDef && fieldDef.bin
              ? `[${datum}[${$(model.vgField(p.channel, {}))}], ` +
                  `${datum}[${$(model.vgField(p.channel, { binSuffix: 'end' }))}]]`
              : `${datum}[${$(p.field)}]`;
      })
          .join(', ');
      // Only add a discrete selection to the store if a datum is present _and_
      // the interaction isn't occurring on a group mark. This guards against
      // polluting interactive state with invalid values in faceted displays
      // as the group marks are also data-driven. We force the update to account
      // for constant null states but varying toggles (e.g., shift-click in
      // whitespace followed by a click in whitespace; the store should only
      // be cleared on the second click).
      const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;
      const events = selCmpt.events;
      return [
          {
              name: name + TUPLE,
              on: events
                  ? [
                      {
                          events,
                          update: `datum && item().mark.marktype !== 'group' ? {${update}: [${values}]} : null`,
                          force: true
                      }
                  ]
                  : []
          }
      ];
  }
  const multi = {
      signals: singleOrMultiSignals,
      modifyExpr: (model, selCmpt) => {
          const tpl = selCmpt.name + TUPLE;
          return tpl + ', ' + (selCmpt.resolve === 'global' ? 'null' : `{unit: ${unitName(model)}}`);
      }
  };

  const single = {
      signals: singleOrMultiSignals,
      modifyExpr: (model, selCmpt) => {
          const tpl = selCmpt.name + TUPLE;
          return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);
      }
  };

  const STORE = '_store';
  const TUPLE = '_tuple';
  const MODIFY = '_modify';
  const VL_SELECTION_RESOLVE = 'vlSelectionResolve';
  const compilers$1 = { single, multi, interval };
  function forEachSelection(model, cb) {
      const selections = model.component.selection;
      if (selections) {
          for (const sel of vals(selections)) {
              const success = cb(sel, compilers$1[sel.type]);
              if (success === true)
                  break;
          }
      }
  }
  function getFacetModel(model) {
      let parent = model.parent;
      while (parent) {
          if (isFacetModel(parent)) {
              break;
          }
          parent = parent.parent;
      }
      return parent;
  }
  function unitName(model, { escape } = { escape: true }) {
      let name = escape ? $(model.name) : model.name;
      const facetModel = getFacetModel(model);
      if (facetModel) {
          const { facet } = facetModel;
          for (const channel of FACET_CHANNELS) {
              if (facet[channel]) {
                  name += ` + '__facet_${channel}_' + (facet[${$(facetModel.vgField(channel))}])`;
              }
          }
      }
      return name;
  }
  function requiresSelectionId(model) {
      let identifier = false;
      forEachSelection(model, selCmpt => {
          identifier = identifier || selCmpt.project.items.some(proj => proj.field === SELECTION_ID);
      });
      return identifier;
  }

  function accessor$2 (fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
  }

  function getter$2 (path) {
    return path.length === 1 ? get1$2(path[0]) : getN$2(path);
  }
  const get1$2 = field => function (obj) {
    return obj[field];
  };
  const getN$2 = path => {
    const len = path.length;
    return function (obj) {
      for (let i = 0; i < len; ++i) {
        obj = obj[path[i]];
      }
      return obj;
    };
  };

  function error$2 (message) {
    throw Error(message);
  }

  function splitAccessPath$2 (p) {
    const path = [],
      n = p.length;
    let q = null,
      b = 0,
      s = '',
      i,
      j,
      c;
    p = p + '';
    function push() {
      path.push(s + p.substring(i, j));
      s = '';
      i = j + 1;
    }
    for (i = j = 0; j < n; ++j) {
      c = p[j];
      if (c === '\\') {
        s += p.substring(i, j++);
        i = j;
      } else if (c === q) {
        push();
        q = null;
        b = -1;
      } else if (q) {
        continue;
      } else if (i === b && c === '"') {
        i = j + 1;
        q = c;
      } else if (i === b && c === "'") {
        i = j + 1;
        q = c;
      } else if (c === '.' && !b) {
        if (j > i) {
          push();
        } else {
          i = j + 1;
        }
      } else if (c === '[') {
        if (j > i) push();
        b = i = j + 1;
      } else if (c === ']') {
        if (!b) error$2('Access path missing open bracket: ' + p);
        if (b > 0) push();
        b = 0;
        i = j + 1;
      }
    }
    if (b) error$2('Access path missing closing bracket: ' + p);
    if (q) error$2('Access path missing closing quote: ' + p);
    if (j > i) {
      j++;
      push();
    }
    return path;
  }

  function field$2 (field, name, opt) {
    const path = splitAccessPath$2(field);
    field = path.length === 1 ? path[0] : field;
    return accessor$2((opt && opt.get || getter$2)(path), [field], name || field);
  }

  const id$2 = field$2('id');
  const identity$2 = accessor$2(_ => _, [], 'identity');
  const zero$2 = accessor$2(() => 0, [], 'zero');
  const one$2 = accessor$2(() => 1, [], 'one');
  const truthy$2 = accessor$2(() => true, [], 'true');
  const falsy$2 = accessor$2(() => false, [], 'false');

  const RawCode$1 = 'RawCode';
  const Literal$1 = 'Literal';
  const Property$1 = 'Property';
  const Identifier$1 = 'Identifier';
  const ArrayExpression$1 = 'ArrayExpression';
  const BinaryExpression$1 = 'BinaryExpression';
  const CallExpression$1 = 'CallExpression';
  const ConditionalExpression$1 = 'ConditionalExpression';
  const LogicalExpression$1 = 'LogicalExpression';
  const MemberExpression$1 = 'MemberExpression';
  const ObjectExpression$1 = 'ObjectExpression';
  const UnaryExpression$1 = 'UnaryExpression';
  function ASTNode$1(type) {
    this.type = type;
  }

  ASTNode$1.prototype.visit = function (visitor) {
    let c, i, n;
    if (visitor(this)) return 1;

    for (c = children$1(this), i = 0, n = c.length; i < n; ++i) {
      if (c[i].visit(visitor)) return 1;
    }
  };

  function children$1(node) {
    switch (node.type) {
      case ArrayExpression$1:
        return node.elements;

      case BinaryExpression$1:
      case LogicalExpression$1:
        return [node.left, node.right];

      case CallExpression$1:
        return [node.callee].concat(node.arguments);

      case ConditionalExpression$1:
        return [node.test, node.consequent, node.alternate];

      case MemberExpression$1:
        return [node.object, node.property];

      case ObjectExpression$1:
        return node.properties;

      case Property$1:
        return [node.key, node.value];

      case UnaryExpression$1:
        return [node.argument];

      case Identifier$1:
      case Literal$1:
      case RawCode$1:
      default:
        return [];
    }
  }

  /*
    The following expression parser is based on Esprima (http://esprima.org/).
    Original header comment and license for Esprima is included here:

    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
  var TokenName$1, source$1, index$1, length$1, lookahead$1;
  var TokenBooleanLiteral$1 = 1,
      TokenEOF$1 = 2,
      TokenIdentifier$1 = 3,
      TokenKeyword$1 = 4,
      TokenNullLiteral$1 = 5,
      TokenNumericLiteral$1 = 6,
      TokenPunctuator$1 = 7,
      TokenStringLiteral$1 = 8,
      TokenRegularExpression$1 = 9;
  TokenName$1 = {};
  TokenName$1[TokenBooleanLiteral$1] = 'Boolean';
  TokenName$1[TokenEOF$1] = '<end>';
  TokenName$1[TokenIdentifier$1] = 'Identifier';
  TokenName$1[TokenKeyword$1] = 'Keyword';
  TokenName$1[TokenNullLiteral$1] = 'Null';
  TokenName$1[TokenNumericLiteral$1] = 'Numeric';
  TokenName$1[TokenPunctuator$1] = 'Punctuator';
  TokenName$1[TokenStringLiteral$1] = 'String';
  TokenName$1[TokenRegularExpression$1] = 'RegularExpression';
  var SyntaxArrayExpression$1 = 'ArrayExpression',
      SyntaxBinaryExpression$1 = 'BinaryExpression',
      SyntaxCallExpression$1 = 'CallExpression',
      SyntaxConditionalExpression$1 = 'ConditionalExpression',
      SyntaxIdentifier$1 = 'Identifier',
      SyntaxLiteral$1 = 'Literal',
      SyntaxLogicalExpression$1 = 'LogicalExpression',
      SyntaxMemberExpression$1 = 'MemberExpression',
      SyntaxObjectExpression$1 = 'ObjectExpression',
      SyntaxProperty$1 = 'Property',
      SyntaxUnaryExpression$1 = 'UnaryExpression'; // Error messages should be identical to V8.

  var MessageUnexpectedToken$1 = 'Unexpected token %0',
      MessageUnexpectedNumber$1 = 'Unexpected number',
      MessageUnexpectedString$1 = 'Unexpected string',
      MessageUnexpectedIdentifier$1 = 'Unexpected identifier',
      MessageUnexpectedReserved$1 = 'Unexpected reserved word',
      MessageUnexpectedEOS$1 = 'Unexpected end of input',
      MessageInvalidRegExp$1 = 'Invalid regular expression',
      MessageUnterminatedRegExp$1 = 'Invalid regular expression: missing /',
      MessageStrictOctalLiteral$1 = 'Octal literals are not allowed in strict mode.',
      MessageStrictDuplicateProperty$1 = 'Duplicate data property in object literal not allowed in strict mode';
  var ILLEGAL$2 = 'ILLEGAL',
      DISABLED$1 = 'Disabled.'; // See also tools/generate-unicode-regex.py.

  var RegexNonAsciiIdentifierStart$1 = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'),
      // eslint-disable-next-line no-misleading-character-class
  RegexNonAsciiIdentifierPart$1 = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'); // Ensure the condition is true, otherwise throw an error.
  // This is only to have a better contract semantic, i.e. another safety net
  // to catch a logic error. The condition shall be fulfilled in normal case.
  // Do NOT use this to enforce a certain condition on any user input.

  function assert$1(condition, message) {
    /* istanbul ignore next */
    if (!condition) {
      throw new Error('ASSERT: ' + message);
    }
  }

  function isDecimalDigit$1(ch) {
    return ch >= 0x30 && ch <= 0x39; // 0..9
  }

  function isHexDigit$1(ch) {
    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
  }

  function isOctalDigit$1(ch) {
    return '01234567'.indexOf(ch) >= 0;
  } // 7.2 White Space


  function isWhiteSpace$1(ch) {
    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;
  } // 7.3 Line Terminators


  function isLineTerminator$1(ch) {
    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
  } // 7.6 Identifier Names and Identifiers


  function isIdentifierStart$1(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && RegexNonAsciiIdentifierStart$1.test(String.fromCharCode(ch));
  }

  function isIdentifierPart$1(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch >= 0x30 && ch <= 0x39 || // 0..9
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && RegexNonAsciiIdentifierPart$1.test(String.fromCharCode(ch));
  } // 7.6.1.1 Keywords


  const keywords$1 = {
    'if': 1,
    'in': 1,
    'do': 1,
    'var': 1,
    'for': 1,
    'new': 1,
    'try': 1,
    'let': 1,
    'this': 1,
    'else': 1,
    'case': 1,
    'void': 1,
    'with': 1,
    'enum': 1,
    'while': 1,
    'break': 1,
    'catch': 1,
    'throw': 1,
    'const': 1,
    'yield': 1,
    'class': 1,
    'super': 1,
    'return': 1,
    'typeof': 1,
    'delete': 1,
    'switch': 1,
    'export': 1,
    'import': 1,
    'public': 1,
    'static': 1,
    'default': 1,
    'finally': 1,
    'extends': 1,
    'package': 1,
    'private': 1,
    'function': 1,
    'continue': 1,
    'debugger': 1,
    'interface': 1,
    'protected': 1,
    'instanceof': 1,
    'implements': 1
  };

  function skipComment$1() {
    while (index$1 < length$1) {
      const ch = source$1.charCodeAt(index$1);

      if (isWhiteSpace$1(ch) || isLineTerminator$1(ch)) {
        ++index$1;
      } else {
        break;
      }
    }
  }

  function scanHexEscape$1(prefix) {
    var i,
        len,
        ch,
        code = 0;
    len = prefix === 'u' ? 4 : 2;

    for (i = 0; i < len; ++i) {
      if (index$1 < length$1 && isHexDigit$1(source$1[index$1])) {
        ch = source$1[index$1++];
        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
      } else {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      }
    }

    return String.fromCharCode(code);
  }

  function scanUnicodeCodePointEscape$1() {
    var ch, code, cu1, cu2;
    ch = source$1[index$1];
    code = 0; // At least, one hex digit is required.

    if (ch === '}') {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }

    while (index$1 < length$1) {
      ch = source$1[index$1++];

      if (!isHexDigit$1(ch)) {
        break;
      }

      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
    }

    if (code > 0x10FFFF || ch !== '}') {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    } // UTF-16 Encoding


    if (code <= 0xFFFF) {
      return String.fromCharCode(code);
    }

    cu1 = (code - 0x10000 >> 10) + 0xD800;
    cu2 = (code - 0x10000 & 1023) + 0xDC00;
    return String.fromCharCode(cu1, cu2);
  }

  function getEscapedIdentifier$1() {
    var ch, id;
    ch = source$1.charCodeAt(index$1++);
    id = String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

    if (ch === 0x5C) {
      if (source$1.charCodeAt(index$1) !== 0x75) {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      }

      ++index$1;
      ch = scanHexEscape$1('u');

      if (!ch || ch === '\\' || !isIdentifierStart$1(ch.charCodeAt(0))) {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      }

      id = ch;
    }

    while (index$1 < length$1) {
      ch = source$1.charCodeAt(index$1);

      if (!isIdentifierPart$1(ch)) {
        break;
      }

      ++index$1;
      id += String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

      if (ch === 0x5C) {
        id = id.substr(0, id.length - 1);

        if (source$1.charCodeAt(index$1) !== 0x75) {
          throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
        }

        ++index$1;
        ch = scanHexEscape$1('u');

        if (!ch || ch === '\\' || !isIdentifierPart$1(ch.charCodeAt(0))) {
          throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
        }

        id += ch;
      }
    }

    return id;
  }

  function getIdentifier$1() {
    var start, ch;
    start = index$1++;

    while (index$1 < length$1) {
      ch = source$1.charCodeAt(index$1);

      if (ch === 0x5C) {
        // Blackslash (U+005C) marks Unicode escape sequence.
        index$1 = start;
        return getEscapedIdentifier$1();
      }

      if (isIdentifierPart$1(ch)) {
        ++index$1;
      } else {
        break;
      }
    }

    return source$1.slice(start, index$1);
  }

  function scanIdentifier$1() {
    var start, id, type;
    start = index$1; // Backslash (U+005C) starts an escaped character.

    id = source$1.charCodeAt(index$1) === 0x5C ? getEscapedIdentifier$1() : getIdentifier$1(); // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.

    if (id.length === 1) {
      type = TokenIdentifier$1;
    } else if (keywords$1.hasOwnProperty(id)) {
      // eslint-disable-line no-prototype-builtins
      type = TokenKeyword$1;
    } else if (id === 'null') {
      type = TokenNullLiteral$1;
    } else if (id === 'true' || id === 'false') {
      type = TokenBooleanLiteral$1;
    } else {
      type = TokenIdentifier$1;
    }

    return {
      type: type,
      value: id,
      start: start,
      end: index$1
    };
  } // 7.7 Punctuators


  function scanPunctuator$1() {
    var start = index$1,
        code = source$1.charCodeAt(index$1),
        code2,
        ch1 = source$1[index$1],
        ch2,
        ch3,
        ch4;

    switch (code) {
      // Check for most common single-character punctuators.
      case 0x2E: // . dot

      case 0x28: // ( open bracket

      case 0x29: // ) close bracket

      case 0x3B: // ; semicolon

      case 0x2C: // , comma

      case 0x7B: // { open curly brace

      case 0x7D: // } close curly brace

      case 0x5B: // [

      case 0x5D: // ]

      case 0x3A: // :

      case 0x3F: // ?

      case 0x7E:
        // ~
        ++index$1;
        return {
          type: TokenPunctuator$1,
          value: String.fromCharCode(code),
          start: start,
          end: index$1
        };

      default:
        code2 = source$1.charCodeAt(index$1 + 1); // '=' (U+003D) marks an assignment or comparison operator.

        if (code2 === 0x3D) {
          switch (code) {
            case 0x2B: // +

            case 0x2D: // -

            case 0x2F: // /

            case 0x3C: // <

            case 0x3E: // >

            case 0x5E: // ^

            case 0x7C: // |

            case 0x25: // %

            case 0x26: // &

            case 0x2A:
              // *
              index$1 += 2;
              return {
                type: TokenPunctuator$1,
                value: String.fromCharCode(code) + String.fromCharCode(code2),
                start: start,
                end: index$1
              };

            case 0x21: // !

            case 0x3D:
              // =
              index$1 += 2; // !== and ===

              if (source$1.charCodeAt(index$1) === 0x3D) {
                ++index$1;
              }

              return {
                type: TokenPunctuator$1,
                value: source$1.slice(start, index$1),
                start: start,
                end: index$1
              };
          }
        }

    } // 4-character punctuator: >>>=


    ch4 = source$1.substr(index$1, 4);

    if (ch4 === '>>>=') {
      index$1 += 4;
      return {
        type: TokenPunctuator$1,
        value: ch4,
        start: start,
        end: index$1
      };
    } // 3-character punctuators: === !== >>> <<= >>=


    ch3 = ch4.substr(0, 3);

    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
      index$1 += 3;
      return {
        type: TokenPunctuator$1,
        value: ch3,
        start: start,
        end: index$1
      };
    } // Other 2-character punctuators: ++ -- << >> && ||


    ch2 = ch3.substr(0, 2);

    if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {
      index$1 += 2;
      return {
        type: TokenPunctuator$1,
        value: ch2,
        start: start,
        end: index$1
      };
    }

    if (ch2 === '//') {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    } // 1-character punctuators: < > = ! + - * % & | ^ /


    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
      ++index$1;
      return {
        type: TokenPunctuator$1,
        value: ch1,
        start: start,
        end: index$1
      };
    }

    throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
  } // 7.8.3 Numeric Literals


  function scanHexLiteral$1(start) {
    let number = '';

    while (index$1 < length$1) {
      if (!isHexDigit$1(source$1[index$1])) {
        break;
      }

      number += source$1[index$1++];
    }

    if (number.length === 0) {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }

    if (isIdentifierStart$1(source$1.charCodeAt(index$1))) {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }

    return {
      type: TokenNumericLiteral$1,
      value: parseInt('0x' + number, 16),
      start: start,
      end: index$1
    };
  }

  function scanOctalLiteral$1(start) {
    let number = '0' + source$1[index$1++];

    while (index$1 < length$1) {
      if (!isOctalDigit$1(source$1[index$1])) {
        break;
      }

      number += source$1[index$1++];
    }

    if (isIdentifierStart$1(source$1.charCodeAt(index$1)) || isDecimalDigit$1(source$1.charCodeAt(index$1))) {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }

    return {
      type: TokenNumericLiteral$1,
      value: parseInt(number, 8),
      octal: true,
      start: start,
      end: index$1
    };
  }

  function scanNumericLiteral$1() {
    var number, start, ch;
    ch = source$1[index$1];
    assert$1(isDecimalDigit$1(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
    start = index$1;
    number = '';

    if (ch !== '.') {
      number = source$1[index$1++];
      ch = source$1[index$1]; // Hex number starts with '0x'.
      // Octal number starts with '0'.

      if (number === '0') {
        if (ch === 'x' || ch === 'X') {
          ++index$1;
          return scanHexLiteral$1(start);
        }

        if (isOctalDigit$1(ch)) {
          return scanOctalLiteral$1(start);
        } // decimal number starts with '0' such as '09' is illegal.


        if (ch && isDecimalDigit$1(ch.charCodeAt(0))) {
          throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
        }
      }

      while (isDecimalDigit$1(source$1.charCodeAt(index$1))) {
        number += source$1[index$1++];
      }

      ch = source$1[index$1];
    }

    if (ch === '.') {
      number += source$1[index$1++];

      while (isDecimalDigit$1(source$1.charCodeAt(index$1))) {
        number += source$1[index$1++];
      }

      ch = source$1[index$1];
    }

    if (ch === 'e' || ch === 'E') {
      number += source$1[index$1++];
      ch = source$1[index$1];

      if (ch === '+' || ch === '-') {
        number += source$1[index$1++];
      }

      if (isDecimalDigit$1(source$1.charCodeAt(index$1))) {
        while (isDecimalDigit$1(source$1.charCodeAt(index$1))) {
          number += source$1[index$1++];
        }
      } else {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      }
    }

    if (isIdentifierStart$1(source$1.charCodeAt(index$1))) {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }

    return {
      type: TokenNumericLiteral$1,
      value: parseFloat(number),
      start: start,
      end: index$1
    };
  } // 7.8.4 String Literals


  function scanStringLiteral$1() {
    var str = '',
        quote,
        start,
        ch,
        code,
        octal = false;
    quote = source$1[index$1];
    assert$1(quote === '\'' || quote === '"', 'String literal must starts with a quote');
    start = index$1;
    ++index$1;

    while (index$1 < length$1) {
      ch = source$1[index$1++];

      if (ch === quote) {
        quote = '';
        break;
      } else if (ch === '\\') {
        ch = source$1[index$1++];

        if (!ch || !isLineTerminator$1(ch.charCodeAt(0))) {
          switch (ch) {
            case 'u':
            case 'x':
              if (source$1[index$1] === '{') {
                ++index$1;
                str += scanUnicodeCodePointEscape$1();
              } else {
                str += scanHexEscape$1(ch);
              }

              break;

            case 'n':
              str += '\n';
              break;

            case 'r':
              str += '\r';
              break;

            case 't':
              str += '\t';
              break;

            case 'b':
              str += '\b';
              break;

            case 'f':
              str += '\f';
              break;

            case 'v':
              str += '\x0B';
              break;

            default:
              if (isOctalDigit$1(ch)) {
                code = '01234567'.indexOf(ch); // \0 is not octal escape sequence

                if (code !== 0) {
                  octal = true;
                }

                if (index$1 < length$1 && isOctalDigit$1(source$1[index$1])) {
                  octal = true;
                  code = code * 8 + '01234567'.indexOf(source$1[index$1++]); // 3 digits are only allowed when string starts
                  // with 0, 1, 2, 3

                  if ('0123'.indexOf(ch) >= 0 && index$1 < length$1 && isOctalDigit$1(source$1[index$1])) {
                    code = code * 8 + '01234567'.indexOf(source$1[index$1++]);
                  }
                }

                str += String.fromCharCode(code);
              } else {
                str += ch;
              }

              break;
          }
        } else {
          if (ch === '\r' && source$1[index$1] === '\n') {
            ++index$1;
          }
        }
      } else if (isLineTerminator$1(ch.charCodeAt(0))) {
        break;
      } else {
        str += ch;
      }
    }

    if (quote !== '') {
      throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
    }

    return {
      type: TokenStringLiteral$1,
      value: str,
      octal: octal,
      start: start,
      end: index$1
    };
  }

  function testRegExp$1(pattern, flags) {
    let tmp = pattern;

    if (flags.indexOf('u') >= 0) {
      // Replace each astral symbol and every Unicode code point
      // escape sequence with a single ASCII symbol to avoid throwing on
      // regular expressions that are only valid in combination with the
      // `/u` flag.
      // Note: replacing with the ASCII symbol `x` might cause false
      // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
      // perfectly valid pattern that is equivalent to `[a-b]`, but it
      // would be replaced by `[x-b]` which throws an error.
      tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1) => {
        if (parseInt($1, 16) <= 0x10FFFF) {
          return 'x';
        }

        throwError$1({}, MessageInvalidRegExp$1);
      }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
    } // First, detect invalid regular expressions.


    try {
      new RegExp(tmp);
    } catch (e) {
      throwError$1({}, MessageInvalidRegExp$1);
    } // Return a regular expression object for this pattern-flag pair, or
    // `null` in case the current environment doesn't support the flags it
    // uses.


    try {
      return new RegExp(pattern, flags);
    } catch (exception) {
      return null;
    }
  }

  function scanRegExpBody$1() {
    var ch, str, classMarker, terminated, body;
    ch = source$1[index$1];
    assert$1(ch === '/', 'Regular expression literal must start with a slash');
    str = source$1[index$1++];
    classMarker = false;
    terminated = false;

    while (index$1 < length$1) {
      ch = source$1[index$1++];
      str += ch;

      if (ch === '\\') {
        ch = source$1[index$1++]; // ECMA-262 7.8.5

        if (isLineTerminator$1(ch.charCodeAt(0))) {
          throwError$1({}, MessageUnterminatedRegExp$1);
        }

        str += ch;
      } else if (isLineTerminator$1(ch.charCodeAt(0))) {
        throwError$1({}, MessageUnterminatedRegExp$1);
      } else if (classMarker) {
        if (ch === ']') {
          classMarker = false;
        }
      } else {
        if (ch === '/') {
          terminated = true;
          break;
        } else if (ch === '[') {
          classMarker = true;
        }
      }
    }

    if (!terminated) {
      throwError$1({}, MessageUnterminatedRegExp$1);
    } // Exclude leading and trailing slash.


    body = str.substr(1, str.length - 2);
    return {
      value: body,
      literal: str
    };
  }

  function scanRegExpFlags$1() {
    var ch, str, flags;
    str = '';
    flags = '';

    while (index$1 < length$1) {
      ch = source$1[index$1];

      if (!isIdentifierPart$1(ch.charCodeAt(0))) {
        break;
      }

      ++index$1;

      if (ch === '\\' && index$1 < length$1) {
        throwError$1({}, MessageUnexpectedToken$1, ILLEGAL$2);
      } else {
        flags += ch;
        str += ch;
      }
    }

    if (flags.search(/[^gimuy]/g) >= 0) {
      throwError$1({}, MessageInvalidRegExp$1, flags);
    }

    return {
      value: flags,
      literal: str
    };
  }

  function scanRegExp$1() {
    var start, body, flags, value;
    lookahead$1 = null;
    skipComment$1();
    start = index$1;
    body = scanRegExpBody$1();
    flags = scanRegExpFlags$1();
    value = testRegExp$1(body.value, flags.value);
    return {
      literal: body.literal + flags.literal,
      value: value,
      regex: {
        pattern: body.value,
        flags: flags.value
      },
      start: start,
      end: index$1
    };
  }

  function isIdentifierName$1(token) {
    return token.type === TokenIdentifier$1 || token.type === TokenKeyword$1 || token.type === TokenBooleanLiteral$1 || token.type === TokenNullLiteral$1;
  }

  function advance$1() {
    skipComment$1();

    if (index$1 >= length$1) {
      return {
        type: TokenEOF$1,
        start: index$1,
        end: index$1
      };
    }

    const ch = source$1.charCodeAt(index$1);

    if (isIdentifierStart$1(ch)) {
      return scanIdentifier$1();
    } // Very common: ( and ) and ;


    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
      return scanPunctuator$1();
    } // String literal starts with single quote (U+0027) or double quote (U+0022).


    if (ch === 0x27 || ch === 0x22) {
      return scanStringLiteral$1();
    } // Dot (.) U+002E can also start a floating-point number, hence the need
    // to check the next character.


    if (ch === 0x2E) {
      if (isDecimalDigit$1(source$1.charCodeAt(index$1 + 1))) {
        return scanNumericLiteral$1();
      }

      return scanPunctuator$1();
    }

    if (isDecimalDigit$1(ch)) {
      return scanNumericLiteral$1();
    }

    return scanPunctuator$1();
  }

  function lex$1() {
    const token = lookahead$1;
    index$1 = token.end;
    lookahead$1 = advance$1();
    index$1 = token.end;
    return token;
  }

  function peek$1() {
    const pos = index$1;
    lookahead$1 = advance$1();
    index$1 = pos;
  }

  function finishArrayExpression$1(elements) {
    const node = new ASTNode$1(SyntaxArrayExpression$1);
    node.elements = elements;
    return node;
  }

  function finishBinaryExpression$1(operator, left, right) {
    const node = new ASTNode$1(operator === '||' || operator === '&&' ? SyntaxLogicalExpression$1 : SyntaxBinaryExpression$1);
    node.operator = operator;
    node.left = left;
    node.right = right;
    return node;
  }

  function finishCallExpression$1(callee, args) {
    const node = new ASTNode$1(SyntaxCallExpression$1);
    node.callee = callee;
    node.arguments = args;
    return node;
  }

  function finishConditionalExpression$1(test, consequent, alternate) {
    const node = new ASTNode$1(SyntaxConditionalExpression$1);
    node.test = test;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
  }

  function finishIdentifier$1(name) {
    const node = new ASTNode$1(SyntaxIdentifier$1);
    node.name = name;
    return node;
  }

  function finishLiteral$1(token) {
    const node = new ASTNode$1(SyntaxLiteral$1);
    node.value = token.value;
    node.raw = source$1.slice(token.start, token.end);

    if (token.regex) {
      if (node.raw === '//') {
        node.raw = '/(?:)/';
      }

      node.regex = token.regex;
    }

    return node;
  }

  function finishMemberExpression$1(accessor, object, property) {
    const node = new ASTNode$1(SyntaxMemberExpression$1);
    node.computed = accessor === '[';
    node.object = object;
    node.property = property;
    if (!node.computed) property.member = true;
    return node;
  }

  function finishObjectExpression$1(properties) {
    const node = new ASTNode$1(SyntaxObjectExpression$1);
    node.properties = properties;
    return node;
  }

  function finishProperty$1(kind, key, value) {
    const node = new ASTNode$1(SyntaxProperty$1);
    node.key = key;
    node.value = value;
    node.kind = kind;
    return node;
  }

  function finishUnaryExpression$1(operator, argument) {
    const node = new ASTNode$1(SyntaxUnaryExpression$1);
    node.operator = operator;
    node.argument = argument;
    node.prefix = true;
    return node;
  } // Throw an exception


  function throwError$1(token, messageFormat) {
    var error,
        args = Array.prototype.slice.call(arguments, 2),
        msg = messageFormat.replace(/%(\d)/g, (whole, index) => {
      assert$1(index < args.length, 'Message reference must be in range');
      return args[index];
    });
    error = new Error(msg);
    error.index = index$1;
    error.description = msg;
    throw error;
  } // Throw an exception because of the token.


  function throwUnexpected$1(token) {
    if (token.type === TokenEOF$1) {
      throwError$1(token, MessageUnexpectedEOS$1);
    }

    if (token.type === TokenNumericLiteral$1) {
      throwError$1(token, MessageUnexpectedNumber$1);
    }

    if (token.type === TokenStringLiteral$1) {
      throwError$1(token, MessageUnexpectedString$1);
    }

    if (token.type === TokenIdentifier$1) {
      throwError$1(token, MessageUnexpectedIdentifier$1);
    }

    if (token.type === TokenKeyword$1) {
      throwError$1(token, MessageUnexpectedReserved$1);
    } // BooleanLiteral, NullLiteral, or Punctuator.


    throwError$1(token, MessageUnexpectedToken$1, token.value);
  } // Expect the next token to match the specified punctuator.
  // If not, an exception will be thrown.


  function expect$1(value) {
    const token = lex$1();

    if (token.type !== TokenPunctuator$1 || token.value !== value) {
      throwUnexpected$1(token);
    }
  } // Return true if the next token matches the specified punctuator.


  function match$1(value) {
    return lookahead$1.type === TokenPunctuator$1 && lookahead$1.value === value;
  } // Return true if the next token matches the specified keyword


  function matchKeyword$1(keyword) {
    return lookahead$1.type === TokenKeyword$1 && lookahead$1.value === keyword;
  } // 11.1.4 Array Initialiser


  function parseArrayInitialiser$1() {
    const elements = [];
    index$1 = lookahead$1.start;
    expect$1('[');

    while (!match$1(']')) {
      if (match$1(',')) {
        lex$1();
        elements.push(null);
      } else {
        elements.push(parseConditionalExpression$1());

        if (!match$1(']')) {
          expect$1(',');
        }
      }
    }

    lex$1();
    return finishArrayExpression$1(elements);
  } // 11.1.5 Object Initialiser


  function parseObjectPropertyKey$1() {
    index$1 = lookahead$1.start;
    const token = lex$1(); // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.

    if (token.type === TokenStringLiteral$1 || token.type === TokenNumericLiteral$1) {
      if (token.octal) {
        throwError$1(token, MessageStrictOctalLiteral$1);
      }

      return finishLiteral$1(token);
    }

    return finishIdentifier$1(token.value);
  }

  function parseObjectProperty$1() {
    var token, key, id, value;
    index$1 = lookahead$1.start;
    token = lookahead$1;

    if (token.type === TokenIdentifier$1) {
      id = parseObjectPropertyKey$1();
      expect$1(':');
      value = parseConditionalExpression$1();
      return finishProperty$1('init', id, value);
    }

    if (token.type === TokenEOF$1 || token.type === TokenPunctuator$1) {
      throwUnexpected$1(token);
    } else {
      key = parseObjectPropertyKey$1();
      expect$1(':');
      value = parseConditionalExpression$1();
      return finishProperty$1('init', key, value);
    }
  }

  function parseObjectInitialiser$1() {
    var properties = [],
        property,
        name,
        key,
        map = {},
        toString = String;
    index$1 = lookahead$1.start;
    expect$1('{');

    while (!match$1('}')) {
      property = parseObjectProperty$1();

      if (property.key.type === SyntaxIdentifier$1) {
        name = property.key.name;
      } else {
        name = toString(property.key.value);
      }

      key = '$' + name;

      if (Object.prototype.hasOwnProperty.call(map, key)) {
        throwError$1({}, MessageStrictDuplicateProperty$1);
      } else {
        map[key] = true;
      }

      properties.push(property);

      if (!match$1('}')) {
        expect$1(',');
      }
    }

    expect$1('}');
    return finishObjectExpression$1(properties);
  } // 11.1.6 The Grouping Operator


  function parseGroupExpression$1() {
    expect$1('(');
    const expr = parseExpression$1();
    expect$1(')');
    return expr;
  } // 11.1 Primary Expressions


  const legalKeywords$1 = {
    'if': 1
  };

  function parsePrimaryExpression$1() {
    var type, token, expr;

    if (match$1('(')) {
      return parseGroupExpression$1();
    }

    if (match$1('[')) {
      return parseArrayInitialiser$1();
    }

    if (match$1('{')) {
      return parseObjectInitialiser$1();
    }

    type = lookahead$1.type;
    index$1 = lookahead$1.start;

    if (type === TokenIdentifier$1 || legalKeywords$1[lookahead$1.value]) {
      expr = finishIdentifier$1(lex$1().value);
    } else if (type === TokenStringLiteral$1 || type === TokenNumericLiteral$1) {
      if (lookahead$1.octal) {
        throwError$1(lookahead$1, MessageStrictOctalLiteral$1);
      }

      expr = finishLiteral$1(lex$1());
    } else if (type === TokenKeyword$1) {
      throw new Error(DISABLED$1);
    } else if (type === TokenBooleanLiteral$1) {
      token = lex$1();
      token.value = token.value === 'true';
      expr = finishLiteral$1(token);
    } else if (type === TokenNullLiteral$1) {
      token = lex$1();
      token.value = null;
      expr = finishLiteral$1(token);
    } else if (match$1('/') || match$1('/=')) {
      expr = finishLiteral$1(scanRegExp$1());
      peek$1();
    } else {
      throwUnexpected$1(lex$1());
    }

    return expr;
  } // 11.2 Left-Hand-Side Expressions


  function parseArguments$1() {
    const args = [];
    expect$1('(');

    if (!match$1(')')) {
      while (index$1 < length$1) {
        args.push(parseConditionalExpression$1());

        if (match$1(')')) {
          break;
        }

        expect$1(',');
      }
    }

    expect$1(')');
    return args;
  }

  function parseNonComputedProperty$1() {
    index$1 = lookahead$1.start;
    const token = lex$1();

    if (!isIdentifierName$1(token)) {
      throwUnexpected$1(token);
    }

    return finishIdentifier$1(token.value);
  }

  function parseNonComputedMember$1() {
    expect$1('.');
    return parseNonComputedProperty$1();
  }

  function parseComputedMember$1() {
    expect$1('[');
    const expr = parseExpression$1();
    expect$1(']');
    return expr;
  }

  function parseLeftHandSideExpressionAllowCall$1() {
    var expr, args, property;
    expr = parsePrimaryExpression$1();

    for (;;) {
      if (match$1('.')) {
        property = parseNonComputedMember$1();
        expr = finishMemberExpression$1('.', expr, property);
      } else if (match$1('(')) {
        args = parseArguments$1();
        expr = finishCallExpression$1(expr, args);
      } else if (match$1('[')) {
        property = parseComputedMember$1();
        expr = finishMemberExpression$1('[', expr, property);
      } else {
        break;
      }
    }

    return expr;
  } // 11.3 Postfix Expressions


  function parsePostfixExpression$1() {
    const expr = parseLeftHandSideExpressionAllowCall$1();

    if (lookahead$1.type === TokenPunctuator$1) {
      if (match$1('++') || match$1('--')) {
        throw new Error(DISABLED$1);
      }
    }

    return expr;
  } // 11.4 Unary Operators


  function parseUnaryExpression$1() {
    var token, expr;

    if (lookahead$1.type !== TokenPunctuator$1 && lookahead$1.type !== TokenKeyword$1) {
      expr = parsePostfixExpression$1();
    } else if (match$1('++') || match$1('--')) {
      throw new Error(DISABLED$1);
    } else if (match$1('+') || match$1('-') || match$1('~') || match$1('!')) {
      token = lex$1();
      expr = parseUnaryExpression$1();
      expr = finishUnaryExpression$1(token.value, expr);
    } else if (matchKeyword$1('delete') || matchKeyword$1('void') || matchKeyword$1('typeof')) {
      throw new Error(DISABLED$1);
    } else {
      expr = parsePostfixExpression$1();
    }

    return expr;
  }

  function binaryPrecedence$1(token) {
    let prec = 0;

    if (token.type !== TokenPunctuator$1 && token.type !== TokenKeyword$1) {
      return 0;
    }

    switch (token.value) {
      case '||':
        prec = 1;
        break;

      case '&&':
        prec = 2;
        break;

      case '|':
        prec = 3;
        break;

      case '^':
        prec = 4;
        break;

      case '&':
        prec = 5;
        break;

      case '==':
      case '!=':
      case '===':
      case '!==':
        prec = 6;
        break;

      case '<':
      case '>':
      case '<=':
      case '>=':
      case 'instanceof':
      case 'in':
        prec = 7;
        break;

      case '<<':
      case '>>':
      case '>>>':
        prec = 8;
        break;

      case '+':
      case '-':
        prec = 9;
        break;

      case '*':
      case '/':
      case '%':
        prec = 11;
        break;
    }

    return prec;
  } // 11.5 Multiplicative Operators
  // 11.6 Additive Operators
  // 11.7 Bitwise Shift Operators
  // 11.8 Relational Operators
  // 11.9 Equality Operators
  // 11.10 Binary Bitwise Operators
  // 11.11 Binary Logical Operators


  function parseBinaryExpression$1() {
    var marker, markers, expr, token, prec, stack, right, operator, left, i;
    marker = lookahead$1;
    left = parseUnaryExpression$1();
    token = lookahead$1;
    prec = binaryPrecedence$1(token);

    if (prec === 0) {
      return left;
    }

    token.prec = prec;
    lex$1();
    markers = [marker, lookahead$1];
    right = parseUnaryExpression$1();
    stack = [left, token, right];

    while ((prec = binaryPrecedence$1(lookahead$1)) > 0) {
      // Reduce: make a binary expression from the three topmost entries.
      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
        right = stack.pop();
        operator = stack.pop().value;
        left = stack.pop();
        markers.pop();
        expr = finishBinaryExpression$1(operator, left, right);
        stack.push(expr);
      } // Shift.


      token = lex$1();
      token.prec = prec;
      stack.push(token);
      markers.push(lookahead$1);
      expr = parseUnaryExpression$1();
      stack.push(expr);
    } // Final reduce to clean-up the stack.


    i = stack.length - 1;
    expr = stack[i];
    markers.pop();

    while (i > 1) {
      markers.pop();
      expr = finishBinaryExpression$1(stack[i - 1].value, stack[i - 2], expr);
      i -= 2;
    }

    return expr;
  } // 11.12 Conditional Operator


  function parseConditionalExpression$1() {
    var expr, consequent, alternate;
    expr = parseBinaryExpression$1();

    if (match$1('?')) {
      lex$1();
      consequent = parseConditionalExpression$1();
      expect$1(':');
      alternate = parseConditionalExpression$1();
      expr = finishConditionalExpression$1(expr, consequent, alternate);
    }

    return expr;
  } // 11.14 Comma Operator


  function parseExpression$1() {
    const expr = parseConditionalExpression$1();

    if (match$1(',')) {
      throw new Error(DISABLED$1); // no sequence expressions
    }

    return expr;
  }

  function parser (code) {
    source$1 = code;
    index$1 = 0;
    length$1 = source$1.length;
    lookahead$1 = null;
    peek$1();
    const expr = parseExpression$1();

    if (lookahead$1.type !== TokenEOF$1) {
      throw new Error('Unexpect token after expression.');
    }

    return expr;
  }

  function getName(node) {
      const name = [];
      if (node.type === 'Identifier') {
          return [node.name];
      }
      if (node.type === 'Literal') {
          return [node.value];
      }
      if (node.type === 'MemberExpression') {
          name.push(...getName(node.object));
          name.push(...getName(node.property));
      }
      return name;
  }
  function startsWithDatum(node) {
      if (node.object.type === 'MemberExpression') {
          return startsWithDatum(node.object);
      }
      return node.object.name === 'datum';
  }
  function getDependentFields(expression) {
      const ast = parser(expression);
      const dependents = new Set();
      ast.visit((node) => {
          if (node.type === 'MemberExpression' && startsWithDatum(node)) {
              dependents.add(getName(node).slice(1).join('.'));
          }
      });
      return dependents;
  }

  class FilterNode extends DataFlowNode {
      constructor(parent, model, filter) {
          super(parent);
          this.model = model;
          this.filter = filter;
          // TODO: refactor this to not take a node and
          // then add a static function makeFromOperand and make the constructor take only an expression
          this.expr = expression(this.model, this.filter, this);
          this._dependentFields = getDependentFields(this.expr);
      }
      clone() {
          return new FilterNode(null, this.model, duplicate(this.filter));
      }
      dependentFields() {
          return this._dependentFields;
      }
      producedFields() {
          return new Set(); // filter does not produce any new fields
      }
      assemble() {
          return {
              type: 'filter',
              expr: this.expr
          };
      }
      hash() {
          return `Filter ${this.expr}`;
      }
  }

  var __rest$l = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function parseUnitSelection(model, selDefs) {
      var _a;
      const selCmpts = {};
      const selectionConfig = model.config.selection;
      for (const name of keys(selDefs !== null && selDefs !== void 0 ? selDefs : {})) {
          const selDef = duplicate(selDefs[name]);
          const _b = selectionConfig[selDef.type], cfg = __rest$l(_b, ["fields", "encodings"]); // Project transform applies its defaults.
          // Set default values from config if a property hasn't been specified,
          // or if it is true. E.g., "translate": true should use the default
          // event handlers for translate. However, true may be a valid value for
          // a property (e.g., "nearest": true).
          for (const key in cfg) {
              // A selection should contain either `encodings` or `fields`, only use
              // default values for these two values if neither of them is specified.
              if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {
                  continue;
              }
              if (key === 'mark') {
                  selDef[key] = Object.assign(Object.assign({}, cfg[key]), selDef[key]);
              }
              if (selDef[key] === undefined || selDef[key] === true) {
                  selDef[key] = (_a = cfg[key]) !== null && _a !== void 0 ? _a : selDef[key];
              }
          }
          const safeName = varName(name);
          const selCmpt = (selCmpts[safeName] = Object.assign(Object.assign({}, selDef), { name: safeName, events: isString$1(selDef.on) ? eventSelector(selDef.on, 'scope') : duplicate(selDef.on) }));
          forEachTransform(selCmpt, txCompiler => {
              if (txCompiler.has(selCmpt) && txCompiler.parse) {
                  txCompiler.parse(model, selCmpt, selDef, selDefs[name]);
              }
          });
      }
      return selCmpts;
  }
  function parseSelectionPredicate(model, selections, dfnode, datum = 'datum') {
      const stores = [];
      function expr(name) {
          const vname = varName(name);
          const selCmpt = model.getSelectionComponent(vname, name);
          const store = $(vname + STORE);
          if (selCmpt.project.timeUnit) {
              const child = dfnode !== null && dfnode !== void 0 ? dfnode : model.component.data.raw;
              const tunode = selCmpt.project.timeUnit.clone();
              if (child.parent) {
                  tunode.insertAsParentOf(child);
              }
              else {
                  child.parent = tunode;
              }
          }
          if (selCmpt.empty !== 'none') {
              stores.push(store);
          }
          return (`vlSelectionTest(${store}, ${datum}` + (selCmpt.resolve === 'global' ? ')' : `, ${$(selCmpt.resolve)})`));
      }
      const predicateStr = logicalExpr(selections, expr);
      return ((stores.length ? '!(' + stores.map(s => `length(data(${s}))`).join(' || ') + ') || ' : '') + `(${predicateStr})`);
  }
  function parseSelectionBinExtent(selCmpt, extent) {
      const encoding = extent['encoding'];
      let field = extent['field'];
      if (!encoding && !field) {
          field = selCmpt.project.items[0].field;
          if (selCmpt.project.items.length > 1) {
              warn('A "field" or "encoding" must be specified when using a selection as a scale domain. ' +
                  `Using "field": ${$(field)}.`);
          }
      }
      else if (encoding && !field) {
          const encodings = selCmpt.project.items.filter(p => p.channel === encoding);
          if (!encodings.length || encodings.length > 1) {
              field = selCmpt.project.items[0].field;
              warn((!encodings.length ? 'No ' : 'Multiple ') +
                  `matching ${$(encoding)} encoding found for selection ${$(extent.selection)}. ` +
                  `Using "field": ${$(field)}.`);
          }
          else {
              field = encodings[0].field;
          }
      }
      return `${selCmpt.name}[${$(field)}]`;
  }
  function materializeSelections(model, main) {
      forEachSelection(model, selCmpt => {
          const selection = selCmpt.name;
          const lookupName = model.getName(`lookup_${selection}`);
          model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main, model, { selection }), lookupName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);
      });
  }

  /**
   * Converts a predicate into an expression.
   */
  // model is only used for selection filters.
  function expression(model, filterOp, node) {
      return logicalExpr(filterOp, (predicate) => {
          if (isString$1(predicate)) {
              return predicate;
          }
          else if (isSelectionPredicate(predicate)) {
              return parseSelectionPredicate(model, predicate.selection, node);
          }
          else {
              // Filter Object
              return fieldFilterExpression(predicate);
          }
      });
  }

  var __rest$m = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function assembleTitle(title, config) {
      if (!title) {
          return undefined;
      }
      if (isArray(title) && !isText(title)) {
          return title.map(fieldDef => defaultTitle(fieldDef, config)).join(', ');
      }
      return title;
  }
  function setAxisEncode(axis, part, vgProp, vgRef) {
      var _a, _b, _c;
      axis.encode = (_a = axis.encode) !== null && _a !== void 0 ? _a : {};
      axis.encode[part] = (_b = axis.encode[part]) !== null && _b !== void 0 ? _b : {};
      axis.encode[part].update = (_c = axis.encode[part].update) !== null && _c !== void 0 ? _c : {};
      // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291
      axis.encode[part].update[vgProp] = vgRef;
  }
  function assembleAxis(axisCmpt, kind, config, opt = { header: false }) {
      var _a, _b;
      const _c = axisCmpt.combine(), { disable, orient, scale, labelExpr, title, zindex } = _c, axis = __rest$m(_c, ["disable", "orient", "scale", "labelExpr", "title", "zindex"]);
      if (disable) {
          return undefined;
      }
      for (const prop in axis) {
          const propType = AXIS_PROPERTY_TYPE[prop];
          const propValue = axis[prop];
          if (propType && propType !== kind && propType !== 'both') {
              // Remove properties that are not valid for this kind of axis
              delete axis[prop];
          }
          else if (isConditionalAxisValue(propValue)) {
              // deal with conditional axis value
              const { condition } = propValue, valueOrSignalRef = __rest$m(propValue, ["condition"]);
              const conditions = array(condition);
              const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];
              if (propIndex) {
                  const { vgProp, part } = propIndex;
                  // If there is a corresponding Vega property for the channel,
                  // use Vega's custom axis encoding and delete the original axis property to avoid conflicts
                  const vgRef = [
                      ...conditions.map(c => {
                          const { test } = c, valueOrSignalCRef = __rest$m(c, ["test"]);
                          return Object.assign({ test: expression(null, test) }, valueOrSignalCRef);
                      }),
                      valueOrSignalRef
                  ];
                  setAxisEncode(axis, part, vgProp, vgRef);
                  delete axis[prop];
              }
              else if (propIndex === null) {
                  // If propIndex is null, this means we support conditional axis property by converting the condition to signal instead.
                  const signalRef = {
                      signal: conditions
                          .map(c => {
                          const { test } = c, valueOrSignalCRef = __rest$m(c, ["test"]);
                          return `${expression(null, test)} ? ${exprFromValueOrSignalRef(valueOrSignalCRef)} : `;
                      })
                          .join('') + exprFromValueOrSignalRef(valueOrSignalRef)
                  };
                  axis[prop] = signalRef;
              }
          }
          else if (isSignalRef(propValue)) {
              const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];
              if (propIndex) {
                  const { vgProp, part } = propIndex;
                  setAxisEncode(axis, part, vgProp, propValue);
                  delete axis[prop];
              } // else do nothing since the property already supports signal
          }
      }
      if (kind === 'grid') {
          if (!axis.grid) {
              return undefined;
          }
          // Remove unnecessary encode block
          if (axis.encode) {
              // Only need to keep encode block for grid
              const { grid } = axis.encode;
              axis.encode = Object.assign({}, (grid ? { grid } : {}));
              if (isEmpty$1(axis.encode)) {
                  delete axis.encode;
              }
          }
          return Object.assign(Object.assign({ scale,
              orient }, axis), { domain: false, labels: false, aria: false, 
              // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`
              // would not affect gridAxis
              maxExtent: 0, minExtent: 0, ticks: false, zindex: getFirstDefined(zindex, 0) // put grid behind marks by default
           });
      }
      else {
          // kind === 'main'
          if (!opt.header && axisCmpt.mainExtracted) {
              // if mainExtracted has been extracted to a separate facet
              return undefined;
          }
          if (labelExpr !== undefined) {
              let expr = labelExpr;
              if (((_b = (_a = axis.encode) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b.update) && isSignalRef(axis.encode.labels.update.text)) {
                  expr = replaceAll(labelExpr, 'datum.label', axis.encode.labels.update.text.signal);
              }
              setAxisEncode(axis, 'labels', 'text', { signal: expr });
          }
          if (axis.labelAlign === null) {
              delete axis.labelAlign;
          }
          // Remove unnecessary encode block
          if (axis.encode) {
              for (const part of AXIS_PARTS) {
                  if (!axisCmpt.hasAxisPart(part)) {
                      delete axis.encode[part];
                  }
              }
              if (isEmpty$1(axis.encode)) {
                  delete axis.encode;
              }
          }
          const titleString = assembleTitle(title, config);
          return Object.assign(Object.assign(Object.assign(Object.assign({ scale,
              orient, grid: false }, (titleString ? { title: titleString } : {})), axis), (config.aria === false ? { aria: false } : {})), { zindex: getFirstDefined(zindex, 0) // put axis line above marks by default
           });
      }
  }
  /**
   * Add axis signals so grid line works correctly
   * (Fix https://github.com/vega/vega-lite/issues/4226)
   */
  function assembleAxisSignals(model) {
      const { axes } = model.component;
      const signals = [];
      for (const channel of POSITION_SCALE_CHANNELS) {
          if (axes[channel]) {
              for (const axis of axes[channel]) {
                  if (!axis.get('disable') && !axis.get('gridScale')) {
                      // If there is x-axis but no y-scale for gridScale, need to set height/width so x-axis can draw the grid with the right height. Same for y-axis and width.
                      const sizeType = channel === 'x' ? 'height' : 'width';
                      const update = model.getSizeSignalRef(sizeType).signal;
                      if (sizeType !== update) {
                          signals.push({
                              name: sizeType,
                              update: update
                          });
                      }
                  }
              }
          }
      }
      return signals;
  }
  function assembleAxes(axisComponents, config) {
      const { x = [], y = [] } = axisComponents;
      return [
          ...x.map(a => assembleAxis(a, 'grid', config)),
          ...y.map(a => assembleAxis(a, 'grid', config)),
          ...x.map(a => assembleAxis(a, 'main', config)),
          ...y.map(a => assembleAxis(a, 'main', config))
      ].filter(a => a); // filter undefined
  }

  function getAxisConfigFromConfigTypes(configTypes, config, channel, orient) {
      // TODO: add special casing to add conditional value based on orient signal
      return Object.assign.apply(null, [
          {},
          ...configTypes.map(configType => {
              if (configType === 'axisOrient') {
                  const orient1 = channel === 'x' ? 'bottom' : 'left';
                  const orientConfig1 = config[channel === 'x' ? 'axisBottom' : 'axisLeft'] || {};
                  const orientConfig2 = config[channel === 'x' ? 'axisTop' : 'axisRight'] || {};
                  const props = new Set([...keys(orientConfig1), ...keys(orientConfig2)]);
                  const conditionalOrientAxisConfig = {};
                  for (const prop of props.values()) {
                      conditionalOrientAxisConfig[prop] = {
                          // orient is surely signal in this case
                          signal: `${orient['signal']} === "${orient1}" ? ${signalOrStringValue(orientConfig1[prop])} : ${signalOrStringValue(orientConfig2[prop])}`
                      };
                  }
                  return conditionalOrientAxisConfig;
              }
              return config[configType];
          })
      ]);
  }
  function getAxisConfigs(channel, scaleType, orient, config) {
      const typeBasedConfigTypes = scaleType === 'band'
          ? ['axisDiscrete', 'axisBand']
          : scaleType === 'point'
              ? ['axisDiscrete', 'axisPoint']
              : isQuantitative(scaleType)
                  ? ['axisQuantitative']
                  : scaleType === 'time' || scaleType === 'utc'
                      ? ['axisTemporal']
                      : [];
      const axisChannel = channel === 'x' ? 'axisX' : 'axisY';
      const axisOrient = isSignalRef(orient) ? 'axisOrient' : 'axis' + titleCase(orient); // axisTop, axisBottom, ...
      const vlOnlyConfigTypes = [
          // technically Vega does have axisBand, but if we make another separation here,
          // it will further introduce complexity in the code
          ...typeBasedConfigTypes,
          ...typeBasedConfigTypes.map(c => axisChannel + c.substr(4))
      ];
      const vgConfigTypes = ['axis', axisOrient, axisChannel];
      return {
          vlOnlyAxisConfig: getAxisConfigFromConfigTypes(vlOnlyConfigTypes, config, channel, orient),
          vgAxisConfig: getAxisConfigFromConfigTypes(vgConfigTypes, config, channel, orient),
          axisConfigStyle: getAxisConfigStyle([...vgConfigTypes, ...vlOnlyConfigTypes], config)
      };
  }
  function getAxisConfigStyle(axisConfigTypes, config) {
      var _a;
      const toMerge = [{}];
      for (const configType of axisConfigTypes) {
          // TODO: add special casing to add conditional value based on orient signal
          let style = (_a = config[configType]) === null || _a === void 0 ? void 0 : _a.style;
          if (style) {
              style = array(style);
              for (const s of style) {
                  toMerge.push(config.style[s]);
              }
          }
      }
      return Object.assign.apply(null, toMerge);
  }
  function getAxisConfig(property, styleConfigIndex, style, axisConfigs = {}) {
      var _a;
      const styleConfig = getStyleConfig(property, style, styleConfigIndex);
      if (styleConfig !== undefined) {
          return {
              configFrom: 'style',
              configValue: styleConfig
          };
      }
      for (const configFrom of ['vlOnlyAxisConfig', 'vgAxisConfig', 'axisConfigStyle']) {
          if (((_a = axisConfigs[configFrom]) === null || _a === void 0 ? void 0 : _a[property]) !== undefined) {
              return { configFrom, configValue: axisConfigs[configFrom][property] };
          }
      }
      return {};
  }

  const axisRules = {
      scale: ({ model, channel }) => model.scaleName(channel),
      format: ({ fieldOrDatumDef, config, axis }) => {
          const { format, formatType } = axis;
          return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, true);
      },
      formatType: ({ axis, fieldOrDatumDef, scaleType }) => {
          const { formatType } = axis;
          return guideFormatType(formatType, fieldOrDatumDef, scaleType);
      },
      grid: ({ fieldOrDatumDef, axis, scaleType }) => {
          var _a;
          if (isFieldDef(fieldOrDatumDef) && isBinned(fieldOrDatumDef.bin)) {
              return false;
          }
          else {
              return (_a = axis.grid) !== null && _a !== void 0 ? _a : defaultGrid(scaleType, fieldOrDatumDef);
          }
      },
      gridScale: ({ model, channel }) => gridScale(model, channel),
      labelAlign: ({ axis, labelAngle, orient, channel }) => axis.labelAlign || defaultLabelAlign(labelAngle, orient, channel),
      labelAngle: ({ labelAngle }) => labelAngle,
      labelBaseline: ({ axis, labelAngle, orient, channel }) => axis.labelBaseline || defaultLabelBaseline(labelAngle, orient, channel),
      labelFlush: ({ axis, fieldOrDatumDef, channel }) => { var _a; return (_a = axis.labelFlush) !== null && _a !== void 0 ? _a : defaultLabelFlush(fieldOrDatumDef.type, channel); },
      labelOverlap: ({ axis, fieldOrDatumDef, scaleType }) => { var _a; return (_a = axis.labelOverlap) !== null && _a !== void 0 ? _a : defaultLabelOverlap(fieldOrDatumDef.type, scaleType, isFieldDef(fieldOrDatumDef) && !!fieldOrDatumDef.timeUnit, isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined); },
      // we already calculate orient in parse
      orient: ({ orient }) => orient,
      tickCount: ({ channel, model, axis, fieldOrDatumDef, scaleType }) => {
          var _a;
          const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
          const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;
          return (_a = axis.tickCount) !== null && _a !== void 0 ? _a : defaultTickCount({ fieldOrDatumDef, scaleType, size, values: axis.values });
      },
      title: ({ axis, model, channel }) => {
          if (axis.title !== undefined) {
              return axis.title;
          }
          const fieldDefTitle = getFieldDefTitle(model, channel);
          if (fieldDefTitle !== undefined) {
              return fieldDefTitle;
          }
          const fieldDef = model.typedFieldDef(channel);
          const channel2 = channel === 'x' ? 'x2' : 'y2';
          const fieldDef2 = model.fieldDef(channel2);
          // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)
          return mergeTitleFieldDefs(fieldDef ? [toFieldDefBase(fieldDef)] : [], isFieldDef(fieldDef2) ? [toFieldDefBase(fieldDef2)] : []);
      },
      values: ({ axis, fieldOrDatumDef }) => values(axis, fieldOrDatumDef),
      zindex: ({ axis, fieldOrDatumDef, mark }) => { var _a; return (_a = axis.zindex) !== null && _a !== void 0 ? _a : defaultZindex(mark, fieldOrDatumDef); }
  };
  // TODO: we need to refactor this method after we take care of config refactoring
  /**
   * Default rules for whether to show a grid should be shown for a channel.
   * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned
   */
  function defaultGrid(scaleType, fieldDef) {
      return !hasDiscreteDomain(scaleType) && isFieldDef(fieldDef) && !isBinning(fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin);
  }
  function gridScale(model, channel) {
      const gridChannel = channel === 'x' ? 'y' : 'x';
      if (model.getScaleComponent(gridChannel)) {
          return model.scaleName(gridChannel);
      }
      return undefined;
  }
  function getLabelAngle(fieldOrDatumDef, axis, channel, styleConfig, axisConfigs) {
      const labelAngle = axis === null || axis === void 0 ? void 0 : axis.labelAngle;
      // try axis value
      if (labelAngle !== undefined) {
          return isSignalRef(labelAngle) ? labelAngle : normalizeAngle(labelAngle);
      }
      else {
          // try axis config value
          const { configValue: angle } = getAxisConfig('labelAngle', styleConfig, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs);
          if (angle !== undefined) {
              return normalizeAngle(angle);
          }
          else {
              // get default value
              if (channel === X &&
                  contains$1([NOMINAL, ORDINAL], fieldOrDatumDef.type) &&
                  !(isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit)) {
                  return 270;
              }
              // no default
              return undefined;
          }
      }
  }
  function normalizeAngleExpr(angle) {
      return `(((${angle.signal} % 360) + 360) % 360)`;
  }
  function defaultLabelBaseline(angle, orient, channel, alwaysIncludeMiddle) {
      if (angle !== undefined) {
          if (channel === 'x') {
              if (isSignalRef(angle)) {
                  const a = normalizeAngleExpr(angle);
                  const orientIsTop = isSignalRef(orient) ? `(${orient.signal} === "top")` : orient === 'top';
                  return {
                      signal: `(45 < ${a} && ${a} < 135) || (225 < ${a} && ${a} < 315) ? "middle" :` +
                          `(${a} <= 45 || 315 <= ${a}) === ${orientIsTop} ? "bottom" : "top"`
                  };
              }
              if ((45 < angle && angle < 135) || (225 < angle && angle < 315)) {
                  return 'middle';
              }
              if (isSignalRef(orient)) {
                  const op = angle <= 45 || 315 <= angle ? '===' : '!==';
                  return { signal: `${orient.signal} ${op} "top" ? "bottom" : "top"` };
              }
              return (angle <= 45 || 315 <= angle) === (orient === 'top') ? 'bottom' : 'top';
          }
          else {
              if (isSignalRef(angle)) {
                  const a = normalizeAngleExpr(angle);
                  const orientIsLeft = isSignalRef(orient) ? `(${orient.signal} === "left")` : orient === 'left';
                  const middle = alwaysIncludeMiddle ? '"middle"' : 'null';
                  return {
                      signal: `${a} <= 45 || 315 <= ${a} || (135 <= ${a} && ${a} <= 225) ? ${middle} : (45 <= ${a} && ${a} <= 135) === ${orientIsLeft} ? "top" : "bottom"`
                  };
              }
              if (angle <= 45 || 315 <= angle || (135 <= angle && angle <= 225)) {
                  return alwaysIncludeMiddle ? 'middle' : null;
              }
              if (isSignalRef(orient)) {
                  const op = 45 <= angle && angle <= 135 ? '===' : '!==';
                  return { signal: `${orient.signal} ${op} "left" ? "top" : "bottom"` };
              }
              return (45 <= angle && angle <= 135) === (orient === 'left') ? 'top' : 'bottom';
          }
      }
      return undefined;
  }
  function defaultLabelAlign(angle, orient, channel) {
      if (angle === undefined) {
          return undefined;
      }
      const isX = channel === 'x';
      const startAngle = isX ? 0 : 90;
      const mainOrient = isX ? 'bottom' : 'left';
      if (isSignalRef(angle)) {
          const a = normalizeAngleExpr(angle);
          const orientIsMain = isSignalRef(orient) ? `(${orient.signal} === "${mainOrient}")` : orient === mainOrient;
          return {
              signal: `(${startAngle ? '(' + a + ' + 90)' : a} % 180 === 0) ? ${isX ? null : '"center"'} :` +
                  `(${startAngle} < ${a} && ${a} < ${180 + startAngle}) === ${orientIsMain} ? "left" : "right"`
          };
      }
      if ((angle + startAngle) % 180 === 0) {
          // For bottom, use default label align so label flush still works
          return isX ? null : 'center';
      }
      if (isSignalRef(orient)) {
          const op = startAngle < angle && angle < 180 + startAngle ? '===' : '!==';
          const orientIsMain = `${orient.signal} ${op} "${mainOrient}"`;
          return {
              signal: `${orientIsMain} ? "left" : "right"`
          };
      }
      if ((startAngle < angle && angle < 180 + startAngle) === (orient === mainOrient)) {
          return 'left';
      }
      return 'right';
  }
  function defaultLabelFlush(type, channel) {
      if (channel === 'x' && contains$1(['quantitative', 'temporal'], type)) {
          return true;
      }
      return undefined;
  }
  function defaultLabelOverlap(type, scaleType, hasTimeUnit, sort) {
      // do not prevent overlap for nominal data because there is no way to infer what the missing labels are
      if ((hasTimeUnit && !isObject(sort)) || (type !== 'nominal' && type !== 'ordinal')) {
          if (scaleType === 'log' || scaleType === 'symlog') {
              return 'greedy';
          }
          return true;
      }
      return undefined;
  }
  function defaultOrient(channel) {
      return channel === 'x' ? 'bottom' : 'left';
  }
  function defaultTickCount({ fieldOrDatumDef, scaleType, size, values: vals }) {
      var _a;
      if (!vals && !hasDiscreteDomain(scaleType) && scaleType !== 'log') {
          if (isFieldDef(fieldOrDatumDef)) {
              if (isBinning(fieldOrDatumDef.bin)) {
                  // for binned data, we don't want more ticks than maxbins
                  return { signal: `ceil(${size.signal}/10)` };
              }
              if (fieldOrDatumDef.timeUnit &&
                  contains$1(['month', 'hours', 'day', 'quarter'], (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit)) {
                  return undefined;
              }
          }
          return { signal: `ceil(${size.signal}/40)` };
      }
      return undefined;
  }
  function getFieldDefTitle(model, channel) {
      const channel2 = channel === 'x' ? 'x2' : 'y2';
      const fieldDef = model.fieldDef(channel);
      const fieldDef2 = model.fieldDef(channel2);
      const title1 = fieldDef ? fieldDef.title : undefined;
      const title2 = fieldDef2 ? fieldDef2.title : undefined;
      if (title1 && title2) {
          return mergeTitle(title1, title2);
      }
      else if (title1) {
          return title1;
      }
      else if (title2) {
          return title2;
      }
      else if (title1 !== undefined) {
          // falsy value to disable config
          return title1;
      }
      else if (title2 !== undefined) {
          // falsy value to disable config
          return title2;
      }
      return undefined;
  }
  function values(axis, fieldOrDatumDef) {
      const vals = axis.values;
      if (isArray(vals)) {
          return valueArray(fieldOrDatumDef, vals);
      }
      else if (isSignalRef(vals)) {
          return vals;
      }
      return undefined;
  }
  function defaultZindex(mark, fieldDef) {
      if (mark === 'rect' && isDiscrete(fieldDef)) {
          return 1;
      }
      return 0;
  }

  class CalculateNode extends DataFlowNode {
      constructor(parent, transform) {
          super(parent);
          this.transform = transform;
          this._dependentFields = getDependentFields(this.transform.calculate);
      }
      clone() {
          return new CalculateNode(null, duplicate(this.transform));
      }
      static parseAllForSortIndex(parent, model) {
          // get all the encoding with sort fields from model
          model.forEachFieldDef((fieldDef, channel) => {
              if (!isScaleFieldDef(fieldDef)) {
                  return;
              }
              if (isSortArray(fieldDef.sort)) {
                  const { field, timeUnit } = fieldDef;
                  const sort = fieldDef.sort;
                  // generate `datum["a"] === val0 ? 0 : datum["a"] === val1 ? 1 : ... : n` via FieldEqualPredicate
                  const calculate = sort
                      .map((sortValue, i) => {
                      return `${fieldFilterExpression({ field, timeUnit, equal: sortValue })} ? ${i} : `;
                  })
                      .join('') + sort.length;
                  parent = new CalculateNode(parent, {
                      calculate,
                      as: sortArrayIndexField(fieldDef, channel, { forAs: true })
                  });
              }
          });
          return parent;
      }
      producedFields() {
          return new Set([this.transform.as]);
      }
      dependentFields() {
          return this._dependentFields;
      }
      assemble() {
          return {
              type: 'formula',
              expr: this.transform.calculate,
              as: this.transform.as
          };
      }
      hash() {
          return `Calculate ${hash(this.transform)}`;
      }
  }
  function sortArrayIndexField(fieldDef, channel, opt) {
      return vgField(fieldDef, Object.assign({ prefix: channel, suffix: 'sort_index' }, (opt !== null && opt !== void 0 ? opt : {})));
  }

  /**
   * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.
   */
  function getHeaderChannel(channel, orient) {
      if (contains$1(['top', 'bottom'], orient)) {
          return 'column';
      }
      else if (contains$1(['left', 'right'], orient)) {
          return 'row';
      }
      return channel === 'row' ? 'row' : 'column';
  }
  function getHeaderProperty(prop, header, config, channel) {
      const headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;
      return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);
  }
  function getHeaderProperties(properties, header, config, channel) {
      const props = {};
      for (const prop of properties) {
          const value = getHeaderProperty(prop, header || {}, config, channel);
          if (value !== undefined) {
              props[prop] = value;
          }
      }
      return props;
  }

  const HEADER_CHANNELS = ['row', 'column'];
  const HEADER_TYPES = ['header', 'footer'];

  /**
   * Utility for generating row / column headers
   */
  // TODO: rename to assembleHeaderTitleGroup
  function assembleTitleGroup(model, channel) {
      const title = model.component.layoutHeaders[channel].title;
      const config = model.config ? model.config : undefined;
      const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef
          ? model.component.layoutHeaders[channel].facetFieldDef
          : undefined;
      const { titleAnchor, titleAngle: ta, titleOrient } = getHeaderProperties(['titleAnchor', 'titleAngle', 'titleOrient'], facetFieldDef.header, config, channel);
      const headerChannel = getHeaderChannel(channel, titleOrient);
      const titleAngle = normalizeAngle(ta);
      return {
          name: `${channel}-title`,
          type: 'group',
          role: `${headerChannel}-title`,
          title: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ text: title }, (channel === 'row' ? { orient: 'left' } : {})), { style: 'guide-title' }), defaultHeaderGuideBaseline(titleAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP))
      };
  }
  function defaultHeaderGuideAlign(headerChannel, angle, anchor = 'middle') {
      switch (anchor) {
          case 'start':
              return { align: 'left' };
          case 'end':
              return { align: 'right' };
      }
      const align = defaultLabelAlign(angle, headerChannel === 'row' ? 'left' : 'top', headerChannel === 'row' ? 'y' : 'x');
      return align ? { align } : {};
  }
  function defaultHeaderGuideBaseline(angle, channel) {
      const baseline = defaultLabelBaseline(angle, channel === 'row' ? 'left' : 'top', channel === 'row' ? 'y' : 'x', true);
      return baseline ? { baseline } : {};
  }
  function assembleHeaderGroups(model, channel) {
      const layoutHeader = model.component.layoutHeaders[channel];
      const groups = [];
      for (const headerType of HEADER_TYPES) {
          if (layoutHeader[headerType]) {
              for (const headerComponent of layoutHeader[headerType]) {
                  const group = assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent);
                  if (group != null) {
                      groups.push(group);
                  }
              }
          }
      }
      return groups;
  }
  function getSort(facetFieldDef, channel) {
      var _a;
      const { sort } = facetFieldDef;
      if (isSortField(sort)) {
          return {
              field: vgField(sort, { expr: 'datum' }),
              order: (_a = sort.order) !== null && _a !== void 0 ? _a : 'ascending'
          };
      }
      else if (isArray(sort)) {
          return {
              field: sortArrayIndexField(facetFieldDef, channel, { expr: 'datum' }),
              order: 'ascending'
          };
      }
      else {
          return {
              field: vgField(facetFieldDef, { expr: 'datum' }),
              order: sort !== null && sort !== void 0 ? sort : 'ascending'
          };
      }
  }
  function assembleLabelTitle(facetFieldDef, channel, config) {
      const { format, formatType, labelAngle, labelAnchor, labelOrient, labelExpr } = getHeaderProperties(['format', 'formatType', 'labelAngle', 'labelAnchor', 'labelOrient', 'labelExpr'], facetFieldDef.header, config, channel);
      const titleTextExpr = formatSignalRef({ fieldOrDatumDef: facetFieldDef, format, formatType, expr: 'parent', config })
          .signal;
      const headerChannel = getHeaderChannel(channel, labelOrient);
      return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ text: {
              signal: labelExpr
                  ? replaceAll(replaceAll(labelExpr, 'datum.label', titleTextExpr), 'datum.value', vgField(facetFieldDef, { expr: 'parent' }))
                  : titleTextExpr
          } }, (channel === 'row' ? { orient: 'left' } : {})), { style: 'guide-label', frame: 'group' }), defaultHeaderGuideBaseline(labelAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP));
  }
  function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent) {
      if (headerComponent) {
          let title = null;
          const { facetFieldDef } = layoutHeader;
          const config = model.config ? model.config : undefined;
          if (facetFieldDef && headerComponent.labels) {
              const { labelOrient } = getHeaderProperties(['labelOrient'], facetFieldDef.header, config, channel);
              // Include label title in the header if orient aligns with the channel
              if ((channel === 'row' && !contains$1(['top', 'bottom'], labelOrient)) ||
                  (channel === 'column' && !contains$1(['left', 'right'], labelOrient))) {
                  title = assembleLabelTitle(facetFieldDef, channel, config);
              }
          }
          const isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);
          const axes = headerComponent.axes;
          const hasAxes = (axes === null || axes === void 0 ? void 0 : axes.length) > 0;
          if (title || hasAxes) {
              const sizeChannel = channel === 'row' ? 'height' : 'width';
              return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: model.getName(`${channel}_${headerType}`), type: 'group', role: `${channel}-${headerType}` }, (layoutHeader.facetFieldDef
                  ? {
                      from: { data: model.getName(channel + '_domain') },
                      sort: getSort(facetFieldDef, channel)
                  }
                  : {})), (hasAxes && isFacetWithoutRowCol
                  ? {
                      from: { data: model.getName(`facet_domain_${channel}`) }
                  }
                  : {})), (title ? { title } : {})), (headerComponent.sizeSignal
                  ? {
                      encode: {
                          update: {
                              [sizeChannel]: headerComponent.sizeSignal
                          }
                      }
                  }
                  : {})), (hasAxes ? { axes } : {}));
          }
      }
      return null;
  }
  const LAYOUT_TITLE_BAND = {
      column: {
          start: 0,
          end: 1
      },
      row: {
          start: 1,
          end: 0
      }
  };
  function getLayoutTitleBand(titleAnchor, headerChannel) {
      return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];
  }
  function assembleLayoutTitleBand(headerComponentIndex, config) {
      const titleBand = {};
      for (const channel of FACET_CHANNELS) {
          const headerComponent = headerComponentIndex[channel];
          if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent.facetFieldDef) {
              const { titleAnchor, titleOrient } = getHeaderProperties(['titleAnchor', 'titleOrient'], headerComponent.facetFieldDef.header, config, channel);
              const headerChannel = getHeaderChannel(channel, titleOrient);
              const band = getLayoutTitleBand(titleAnchor, headerChannel);
              if (band !== undefined) {
                  titleBand[headerChannel] = band;
              }
          }
      }
      return isEmpty$1(titleBand) ? undefined : titleBand;
  }
  function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {
      const props = {};
      for (const prop of properties) {
          if (!propertiesMap[prop]) {
              continue;
          }
          const value = getHeaderProperty(prop, facetFieldDef === null || facetFieldDef === void 0 ? void 0 : facetFieldDef.header, config, channel);
          if (value !== undefined) {
              props[propertiesMap[prop]] = value;
          }
      }
      return props;
  }

  function assembleLayoutSignals(model) {
      return [
          ...sizeSignals(model, 'width'),
          ...sizeSignals(model, 'height'),
          ...sizeSignals(model, 'childWidth'),
          ...sizeSignals(model, 'childHeight')
      ];
  }
  function sizeSignals(model, sizeType) {
      const channel = sizeType === 'width' ? 'x' : 'y';
      const size = model.component.layoutSize.get(sizeType);
      if (!size || size === 'merged') {
          return [];
      }
      // Read size signal name from name map, just in case it is the top-level size signal that got renamed.
      const name = model.getSizeSignalRef(sizeType).signal;
      if (size === 'step') {
          const scaleComponent = model.getScaleComponent(channel);
          if (scaleComponent) {
              const type = scaleComponent.get('type');
              const range = scaleComponent.get('range');
              if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                  const scaleName = model.scaleName(channel);
                  if (isFacetModel(model.parent)) {
                      // If parent is facet and this is an independent scale, return only signal signal
                      // as the width/height will be calculated using the cardinality from
                      // facet's aggregate rather than reading from scale domain
                      const parentResolve = model.parent.component.resolve;
                      if (parentResolve.scale[channel] === 'independent') {
                          return [stepSignal(scaleName, range)];
                      }
                  }
                  return [
                      stepSignal(scaleName, range),
                      {
                          name,
                          update: sizeExpr(scaleName, scaleComponent, `domain('${scaleName}').length`)
                      }
                  ];
              }
          }
          /* istanbul ignore next: Condition should not happen -- only for warning in development. */
          throw new Error('layout size is step although width/height is not step.');
      }
      else if (size == 'container') {
          const isWidth = name.endsWith('width');
          const expr = isWidth ? 'containerSize()[0]' : 'containerSize()[1]';
          const defaultValue = getViewConfigContinuousSize(model.config.view, isWidth ? 'width' : 'height');
          const safeExpr = `isFinite(${expr}) ? ${expr} : ${defaultValue}`;
          return [{ name, init: safeExpr, on: [{ update: safeExpr, events: 'window:resize' }] }];
      }
      else {
          return [
              {
                  name,
                  value: size
              }
          ];
      }
  }
  function stepSignal(scaleName, range) {
      return {
          name: scaleName + '_step',
          value: range.step
      };
  }
  function sizeExpr(scaleName, scaleComponent, cardinality) {
      const type = scaleComponent.get('type');
      const padding = scaleComponent.get('padding');
      const paddingOuter = getFirstDefined(scaleComponent.get('paddingOuter'), padding);
      let paddingInner = scaleComponent.get('paddingInner');
      paddingInner =
          type === 'band'
              ? // only band has real paddingInner
                  paddingInner !== undefined
                      ? paddingInner
                      : padding
              : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,
                  // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.
                  1;
      return `bandspace(${cardinality}, ${signalOrStringValue(paddingInner)}, ${signalOrStringValue(paddingOuter)}) * ${scaleName}_step`;
  }

  function getSizeTypeFromLayoutSizeType(layoutSizeType) {
      return layoutSizeType === 'childWidth' ? 'width' : layoutSizeType === 'childHeight' ? 'height' : layoutSizeType;
  }

  function guideEncodeEntry(encoding, model) {
      return keys(encoding).reduce((encode, channel) => {
          const valueDef = encoding[channel];
          return Object.assign(Object.assign({}, encode), wrapCondition(model, valueDef, channel, def => signalOrValueRef(def.value)));
      }, {});
  }

  function defaultScaleResolve(channel, model) {
      if (isLayerModel(model) || isFacetModel(model)) {
          return 'shared';
      }
      else if (isConcatModel(model)) {
          return isXorY(channel) ? 'independent' : 'shared';
      }
      /* istanbul ignore next: should never reach here. */
      throw new Error('invalid model type for resolve');
  }
  function parseGuideResolve(resolve, channel) {
      const channelScaleResolve = resolve.scale[channel];
      const guide = isXorY(channel) ? 'axis' : 'legend';
      if (channelScaleResolve === 'independent') {
          if (resolve[guide][channel] === 'shared') {
              warn(independentScaleMeansIndependentGuide(channel));
          }
          return 'independent';
      }
      return resolve[guide][channel] || 'shared';
  }

  const LEGEND_COMPONENT_PROPERTY_INDEX = Object.assign(Object.assign({}, COMMON_LEGEND_PROPERTY_INDEX), { disable: 1, labelExpr: 1, selections: 1, 
      // channel scales
      opacity: 1, shape: 1, stroke: 1, fill: 1, size: 1, strokeWidth: 1, strokeDash: 1, 
      // encode
      encode: 1 });
  const LEGEND_COMPONENT_PROPERTIES = keys(LEGEND_COMPONENT_PROPERTY_INDEX);
  class LegendComponent extends Split {
  }

  const legendEncodeRules = {
      symbols,
      gradient,
      labels,
      entries: entries$1
  };
  function symbols(symbolsSpec, { fieldOrDatumDef, model, channel, legendCmpt, legendType }) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      if (legendType !== 'symbol') {
          return undefined;
      }
      const { markDef, encoding, config, mark } = model;
      const filled = markDef.filled && mark !== 'trail';
      let out = Object.assign(Object.assign({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG)), color(model, { filled })); // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry
      const symbolOpacity = (_a = legendCmpt.get('symbolOpacity')) !== null && _a !== void 0 ? _a : config.legend.symbolOpacity;
      const symbolFillColor = (_b = legendCmpt.get('symbolFillColor')) !== null && _b !== void 0 ? _b : config.legend.symbolFillColor;
      const symbolStrokeColor = (_c = legendCmpt.get('symbolStrokeColor')) !== null && _c !== void 0 ? _c : config.legend.symbolStrokeColor;
      const opacity = symbolOpacity === undefined ? (_d = getMaxValue(encoding.opacity)) !== null && _d !== void 0 ? _d : markDef.opacity : undefined;
      if (out.fill) {
          // for fill legend, we don't want any fill in symbol
          if (channel === 'fill' || (filled && channel === COLOR)) {
              delete out.fill;
          }
          else {
              if (out.fill['field']) {
                  // For others, set fill to some opaque value (or nothing if a color is already set)
                  if (symbolFillColor) {
                      delete out.fill;
                  }
                  else {
                      out.fill = signalOrValueRef((_e = config.legend.symbolBaseFillColor) !== null && _e !== void 0 ? _e : 'black');
                      out.fillOpacity = signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1);
                  }
              }
              else if (isArray(out.fill)) {
                  const fill = (_h = (_g = getFirstConditionValue((_f = encoding.fill) !== null && _f !== void 0 ? _f : encoding.color)) !== null && _g !== void 0 ? _g : markDef.fill) !== null && _h !== void 0 ? _h : (filled && markDef.color);
                  if (fill) {
                      out.fill = signalOrValueRef(fill);
                  }
              }
          }
      }
      if (out.stroke) {
          if (channel === 'stroke' || (!filled && channel === COLOR)) {
              delete out.stroke;
          }
          else {
              if (out.stroke['field'] || symbolStrokeColor) {
                  // For others, remove stroke field
                  delete out.stroke;
              }
              else if (isArray(out.stroke)) {
                  const stroke = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);
                  if (stroke) {
                      out.stroke = { value: stroke };
                  }
              }
          }
      }
      if (channel !== OPACITY) {
          const condition = isFieldDef(fieldOrDatumDef) && selectedCondition(model, legendCmpt, fieldOrDatumDef);
          if (condition) {
              out.opacity = [
                  Object.assign({ test: condition }, signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1)),
                  signalOrValueRef(config.legend.unselectedOpacity)
              ];
          }
          else if (opacity) {
              out.opacity = signalOrValueRef(opacity);
          }
      }
      out = Object.assign(Object.assign({}, out), symbolsSpec);
      return isEmpty$1(out) ? undefined : out;
  }
  function gradient(gradientSpec, { model, legendType, legendCmpt }) {
      var _a;
      if (legendType !== 'gradient') {
          return undefined;
      }
      const { config, markDef, encoding } = model;
      let out = {};
      const gradientOpacity = (_a = legendCmpt.get('gradientOpacity')) !== null && _a !== void 0 ? _a : config.legend.gradientOpacity;
      const opacity = gradientOpacity === undefined ? getMaxValue(encoding.opacity) || markDef.opacity : undefined;
      if (opacity) {
          // only apply opacity if it is neither zero or undefined
          out.opacity = signalOrValueRef(opacity);
      }
      out = Object.assign(Object.assign({}, out), gradientSpec);
      return isEmpty$1(out) ? undefined : out;
  }
  function labels(specifiedlabelsSpec, { fieldOrDatumDef, model, channel, legendCmpt }) {
      const legend = model.legend(channel) || {};
      const config = model.config;
      const condition = isFieldDef(fieldOrDatumDef) ? selectedCondition(model, legendCmpt, fieldOrDatumDef) : undefined;
      const opacity = condition ? [{ test: condition, value: 1 }, { value: config.legend.unselectedOpacity }] : undefined;
      const { format, formatType } = legend;
      const text = isCustomFormatType(formatType)
          ? formatCustomType({
              fieldOrDatumDef,
              field: 'datum.value',
              format,
              formatType,
              config
          })
          : undefined;
      const labelsSpec = Object.assign(Object.assign(Object.assign({}, (opacity ? { opacity } : {})), (text ? { text } : {})), specifiedlabelsSpec);
      return isEmpty$1(labelsSpec) ? undefined : labelsSpec;
  }
  function entries$1(entriesSpec, { legendCmpt }) {
      const selections = legendCmpt.get('selections');
      return (selections === null || selections === void 0 ? void 0 : selections.length) ? Object.assign(Object.assign({}, entriesSpec), { fill: { value: 'transparent' } }) : entriesSpec;
  }
  function getMaxValue(channelDef) {
      return getConditionValue(channelDef, (v, conditionalDef) => Math.max(v, conditionalDef.value));
  }
  function getFirstConditionValue(channelDef) {
      return getConditionValue(channelDef, (v, conditionalDef) => {
          return getFirstDefined(v, conditionalDef.value);
      });
  }
  function getConditionValue(channelDef, reducer) {
      if (hasConditionalValueDef(channelDef)) {
          return array(channelDef.condition).reduce(reducer, channelDef.value);
      }
      else if (isValueDef(channelDef)) {
          return channelDef.value;
      }
      return undefined;
  }
  function selectedCondition(model, legendCmpt, fieldDef) {
      const selections = legendCmpt.get('selections');
      if (!(selections === null || selections === void 0 ? void 0 : selections.length))
          return undefined;
      const field = $(fieldDef.field);
      return selections
          .map(name => {
          const store = $(varName(name) + STORE);
          return `(!length(data(${store})) || (${name}[${field}] && indexof(${name}[${field}], datum.value) >= 0))`;
      })
          .join(' || ');
  }

  const legendRules = {
      direction: ({ direction }) => direction,
      format: ({ fieldOrDatumDef, legend, config }) => {
          const { format, formatType } = legend;
          return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, false);
      },
      formatType: ({ legend, fieldOrDatumDef, scaleType }) => {
          const { formatType } = legend;
          return guideFormatType(formatType, fieldOrDatumDef, scaleType);
      },
      gradientLength: params => {
          var _a, _b;
          const { legend, legendConfig } = params;
          return (_b = (_a = legend.gradientLength) !== null && _a !== void 0 ? _a : legendConfig.gradientLength) !== null && _b !== void 0 ? _b : defaultGradientLength(params);
      },
      labelOverlap: ({ legend, legendConfig, scaleType }) => { var _a, _b; return (_b = (_a = legend.labelOverlap) !== null && _a !== void 0 ? _a : legendConfig.labelOverlap) !== null && _b !== void 0 ? _b : defaultLabelOverlap$1(scaleType); },
      symbolType: ({ legend, markDef, channel, encoding }) => { var _a; return (_a = legend.symbolType) !== null && _a !== void 0 ? _a : defaultSymbolType(markDef.type, channel, encoding.shape, markDef.shape); },
      title: ({ fieldOrDatumDef, config }) => title$1(fieldOrDatumDef, config, { allowDisabling: true }),
      type: ({ legendType, scaleType, channel }) => {
          if (isColorChannel(channel) && isContinuousToContinuous(scaleType)) {
              if (legendType === 'gradient') {
                  return undefined;
              }
          }
          else if (legendType === 'symbol') {
              return undefined;
          }
          return legendType;
      },
      values: ({ fieldOrDatumDef, legend }) => values$1(legend, fieldOrDatumDef)
  };
  function values$1(legend, fieldOrDatumDef) {
      const vals = legend.values;
      if (isArray(vals)) {
          return valueArray(fieldOrDatumDef, vals);
      }
      else if (isSignalRef(vals)) {
          return vals;
      }
      return undefined;
  }
  function defaultSymbolType(mark, channel, shapeChannelDef, markShape) {
      var _a;
      if (channel !== 'shape') {
          // use the value from the shape encoding or the mark config if they exist
          const shape = (_a = getFirstConditionValue(shapeChannelDef)) !== null && _a !== void 0 ? _a : markShape;
          if (shape) {
              return shape;
          }
      }
      switch (mark) {
          case 'bar':
          case 'rect':
          case 'image':
          case 'square':
              return 'square';
          case 'line':
          case 'trail':
          case 'rule':
              return 'stroke';
          case 'arc':
          case 'point':
          case 'circle':
          case 'tick':
          case 'geoshape':
          case 'area':
          case 'text':
              return 'circle';
      }
  }
  function getLegendType(params) {
      const { legend } = params;
      return getFirstDefined(legend.type, defaultType$1(params));
  }
  function defaultType$1({ channel, timeUnit, scaleType }) {
      // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js
      if (isColorChannel(channel)) {
          if (contains$1(['quarter', 'month', 'day'], timeUnit)) {
              return 'symbol';
          }
          if (isContinuousToContinuous(scaleType)) {
              return 'gradient';
          }
      }
      return 'symbol';
  }
  function getDirection({ legendConfig, legendType, orient, legend }) {
      var _a, _b;
      return ((_b = (_a = legend.direction) !== null && _a !== void 0 ? _a : legendConfig[legendType ? 'gradientDirection' : 'symbolDirection']) !== null && _b !== void 0 ? _b : defaultDirection(orient, legendType));
  }
  function defaultDirection(orient, legendType) {
      switch (orient) {
          case 'top':
          case 'bottom':
              return 'horizontal';
          case 'left':
          case 'right':
          case 'none':
          case undefined: // undefined = "right" in Vega
              return undefined; // vertical is Vega's default
          default:
              // top-left / ...
              // For inner legend, uses compact layout like Tableau
              return legendType === 'gradient' ? 'horizontal' : undefined;
      }
  }
  function defaultGradientLength({ legendConfig, model, direction, orient, scaleType }) {
      const { gradientHorizontalMaxLength, gradientHorizontalMinLength, gradientVerticalMaxLength, gradientVerticalMinLength } = legendConfig;
      if (isContinuousToContinuous(scaleType)) {
          if (direction === 'horizontal') {
              if (orient === 'top' || orient === 'bottom') {
                  return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);
              }
              else {
                  return gradientHorizontalMinLength;
              }
          }
          else {
              // vertical / undefined (Vega uses vertical by default)
              return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);
          }
      }
      return undefined;
  }
  function gradientLengthSignal(model, sizeType, min, max) {
      const sizeSignal = model.getSizeSignalRef(sizeType).signal;
      return { signal: `clamp(${sizeSignal}, ${min}, ${max})` };
  }
  function defaultLabelOverlap$1(scaleType) {
      if (contains$1(['quantile', 'threshold', 'log', 'symlog'], scaleType)) {
          return 'greedy';
      }
      return undefined;
  }

  function parseLegend(model) {
      const legendComponent = isUnitModel(model) ? parseUnitLegend(model) : parseNonUnitLegend(model);
      model.component.legends = legendComponent;
      return legendComponent;
  }
  function parseUnitLegend(model) {
      const { encoding } = model;
      const legendComponent = {};
      for (const channel of [COLOR, ...LEGEND_SCALE_CHANNELS]) {
          const def = getFieldOrDatumDef(encoding[channel]);
          if (!def || !model.getScaleComponent(channel)) {
              continue;
          }
          if (channel === SHAPE && isFieldDef(def) && def.type === GEOJSON) {
              continue;
          }
          legendComponent[channel] = parseLegendForChannel(model, channel);
      }
      return legendComponent;
  }
  function getLegendDefWithScale(model, channel) {
      const scale = model.scaleName(channel);
      if (model.mark === 'trail') {
          if (channel === 'color') {
              // trail is a filled mark, but its default symbolType ("stroke") should use "stroke"
              return { stroke: scale };
          }
          else if (channel === 'size') {
              return { strokeWidth: scale };
          }
      }
      if (channel === 'color') {
          return model.markDef.filled ? { fill: scale } : { stroke: scale };
      }
      return { [channel]: scale };
  }
  // eslint-disable-next-line @typescript-eslint/ban-types
  function isExplicit(value, property, legend, fieldDef) {
      switch (property) {
          case 'disable':
              return legend !== undefined; // if axis is specified or null/false, then it's enable/disable state is explicit
          case 'values':
              // specified legend.values is already respected, but may get transformed.
              return !!(legend === null || legend === void 0 ? void 0 : legend.values);
          case 'title':
              // title can be explicit if fieldDef.title is set
              if (property === 'title' && value === (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.title)) {
                  return true;
              }
      }
      // Otherwise, things are explicit if the returned value matches the specified property
      return value === (legend || {})[property];
  }
  function parseLegendForChannel(model, channel) {
      var _a, _b, _c;
      let legend = model.legend(channel);
      const { markDef, encoding, config } = model;
      const legendConfig = config.legend;
      const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));
      parseInteractiveLegend(model, channel, legendCmpt);
      const disable = legend !== undefined ? !legend : legendConfig.disable;
      legendCmpt.set('disable', disable, legend !== undefined);
      if (disable) {
          return legendCmpt;
      }
      legend = legend || {};
      const scaleType = model.getScaleComponent(channel).get('type');
      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
      const timeUnit = isFieldDef(fieldOrDatumDef) ? (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : undefined;
      const orient = legend.orient || config.legend.orient || 'right';
      const legendType = getLegendType({ legend, channel, timeUnit, scaleType });
      const direction = getDirection({ legend, legendType, orient, legendConfig });
      const ruleParams = {
          legend,
          channel,
          model,
          markDef,
          encoding,
          fieldOrDatumDef,
          legendConfig,
          config,
          scaleType,
          orient,
          legendType,
          direction
      };
      for (const property of LEGEND_COMPONENT_PROPERTIES) {
          if ((legendType === 'gradient' && property.startsWith('symbol')) ||
              (legendType === 'symbol' && property.startsWith('gradient'))) {
              continue;
          }
          const value = property in legendRules ? legendRules[property](ruleParams) : legend[property];
          if (value !== undefined) {
              const explicit = isExplicit(value, property, legend, model.fieldDef(channel));
              if (explicit || config.legend[property] === undefined) {
                  legendCmpt.set(property, value, explicit);
              }
          }
      }
      const legendEncoding = (_b = legend === null || legend === void 0 ? void 0 : legend.encoding) !== null && _b !== void 0 ? _b : {};
      const selections = legendCmpt.get('selections');
      const legendEncode = {};
      const legendEncodeParams = { fieldOrDatumDef, model, channel, legendCmpt, legendType };
      for (const part of ['labels', 'legend', 'title', 'symbols', 'gradient', 'entries']) {
          const legendEncodingPart = guideEncodeEntry((_c = legendEncoding[part]) !== null && _c !== void 0 ? _c : {}, model);
          const value = part in legendEncodeRules
              ? legendEncodeRules[part](legendEncodingPart, legendEncodeParams) // apply rule
              : legendEncodingPart; // no rule -- just default values
          if (value !== undefined && !isEmpty$1(value)) {
              legendEncode[part] = Object.assign(Object.assign(Object.assign({}, ((selections === null || selections === void 0 ? void 0 : selections.length) && isFieldDef(fieldOrDatumDef)
                  ? { name: `${varName(fieldOrDatumDef.field)}_legend_${part}` }
                  : {})), ((selections === null || selections === void 0 ? void 0 : selections.length) ? { interactive: !!selections } : {})), { update: value });
          }
      }
      if (!isEmpty$1(legendEncode)) {
          legendCmpt.set('encode', legendEncode, !!(legend === null || legend === void 0 ? void 0 : legend.encoding));
      }
      return legendCmpt;
  }
  function parseNonUnitLegend(model) {
      const { legends, resolve } = model.component;
      for (const child of model.children) {
          parseLegend(child);
          for (const channel of keys(child.component.legends)) {
              resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);
              if (resolve.legend[channel] === 'shared') {
                  // If the resolve says shared (and has not been overridden)
                  // We will try to merge and see if there is a conflict
                  legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);
                  if (!legends[channel]) {
                      // If merge returns nothing, there is a conflict so we cannot make the legend shared.
                      // Thus, mark legend as independent and remove the legend component.
                      resolve.legend[channel] = 'independent';
                      delete legends[channel];
                  }
              }
          }
      }
      for (const channel of keys(legends)) {
          for (const child of model.children) {
              if (!child.component.legends[channel]) {
                  // skip if the child does not have a particular legend
                  continue;
              }
              if (resolve.legend[channel] === 'shared') {
                  // After merging shared legend, make sure to remove legend from child
                  delete child.component.legends[channel];
              }
          }
      }
      return legends;
  }
  function mergeLegendComponent(mergedLegend, childLegend) {
      var _a, _b, _c, _d;
      if (!mergedLegend) {
          return childLegend.clone();
      }
      const mergedOrient = mergedLegend.getWithExplicit('orient');
      const childOrient = childLegend.getWithExplicit('orient');
      if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
          // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
          // Cannot merge due to inconsistent orient
          return undefined;
      }
      let typeMerged = false;
      // Otherwise, let's merge
      for (const prop of LEGEND_COMPONENT_PROPERTIES) {
          const mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', 
          // Tie breaker function
          (v1, v2) => {
              switch (prop) {
                  case 'symbolType':
                      return mergeSymbolType(v1, v2);
                  case 'title':
                      return mergeTitleComponent(v1, v2);
                  case 'type':
                      // There are only two types. If we have different types, then prefer symbol over gradient.
                      typeMerged = true;
                      return makeImplicit('symbol');
              }
              return defaultTieBreaker(v1, v2, prop, 'legend');
          });
          mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
      }
      if (typeMerged) {
          if ((_b = (_a = mergedLegend.implicit) === null || _a === void 0 ? void 0 : _a.encode) === null || _b === void 0 ? void 0 : _b.gradient) {
              deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);
          }
          if ((_d = (_c = mergedLegend.explicit) === null || _c === void 0 ? void 0 : _c.encode) === null || _d === void 0 ? void 0 : _d.gradient) {
              deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);
          }
      }
      return mergedLegend;
  }
  function mergeSymbolType(st1, st2) {
      if (st2.value === 'circle') {
          // prefer "circle" over "stroke"
          return st2;
      }
      return st1;
  }

  var __rest$n = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function setLegendEncode(legend, part, vgProp, vgRef) {
      var _a, _b, _c;
      legend.encode = (_a = legend.encode) !== null && _a !== void 0 ? _a : {};
      legend.encode[part] = (_b = legend.encode[part]) !== null && _b !== void 0 ? _b : {};
      legend.encode[part].update = (_c = legend.encode[part].update) !== null && _c !== void 0 ? _c : {};
      // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291
      legend.encode[part].update[vgProp] = vgRef;
  }
  function assembleLegends(model) {
      const legendComponentIndex = model.component.legends;
      const legendByDomain = {};
      for (const channel of keys(legendComponentIndex)) {
          const scaleComponent = model.getScaleComponent(channel);
          const domainHash = stringify(scaleComponent.get('domains'));
          if (legendByDomain[domainHash]) {
              for (const mergedLegendComponent of legendByDomain[domainHash]) {
                  const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);
                  if (!merged) {
                      // If cannot merge, need to add this legend separately
                      legendByDomain[domainHash].push(legendComponentIndex[channel]);
                  }
              }
          }
          else {
              legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];
          }
      }
      const legends = vals(legendByDomain)
          .flat()
          .map(l => assembleLegend(l, model.config))
          .filter(l => l !== undefined);
      return legends;
  }
  function assembleLegend(legendCmpt, config) {
      var _a, _b, _c;
      const _d = legendCmpt.combine(), { disable, labelExpr, selections } = _d, legend = __rest$n(_d, ["disable", "labelExpr", "selections"]);
      if (disable) {
          return undefined;
      }
      if (config.aria === false && legend.aria == undefined) {
          legend.aria = false;
      }
      if ((_a = legend.encode) === null || _a === void 0 ? void 0 : _a.symbols) {
          const out = legend.encode.symbols.update;
          if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {
              // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.
              out.stroke = { value: 'transparent' };
          }
          // Remove properties that the legend is encoding.
          for (const property of LEGEND_SCALE_CHANNELS) {
              if (legend[property]) {
                  delete out[property];
              }
          }
      }
      if (!legend.title) {
          // title schema doesn't include null, ''
          delete legend.title;
      }
      if (labelExpr !== undefined) {
          let expr = labelExpr;
          if (((_c = (_b = legend.encode) === null || _b === void 0 ? void 0 : _b.labels) === null || _c === void 0 ? void 0 : _c.update) && isSignalRef(legend.encode.labels.update.text)) {
              expr = replaceAll(labelExpr, 'datum.label', legend.encode.labels.update.text.signal);
          }
          setLegendEncode(legend, 'labels', 'text', { signal: expr });
      }
      return legend;
  }

  function assembleProjections(model) {
      if (isLayerModel(model) || isConcatModel(model)) {
          return assembleProjectionsForModelAndChildren(model);
      }
      else {
          return assembleProjectionForModel(model);
      }
  }
  function assembleProjectionsForModelAndChildren(model) {
      return model.children.reduce((projections, child) => {
          return projections.concat(child.assembleProjections());
      }, assembleProjectionForModel(model));
  }
  function assembleProjectionForModel(model) {
      const component = model.component.projection;
      if (!component || component.merged) {
          return [];
      }
      const projection = component.combine();
      const { name } = projection; // we need to extract name so that it is always present in the output and pass TS type validation
      if (!component.data) {
          // generate custom projection, no automatic fitting
          return [
              Object.assign(Object.assign({ name }, { translate: { signal: '[width / 2, height / 2]' } }), projection)
          ];
      }
      else {
          // generate projection that uses extent fitting
          const size = {
              signal: `[${component.size.map(ref => ref.signal).join(', ')}]`
          };
          const fits = component.data.reduce((sources, data) => {
              const source = isSignalRef(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;
              if (!contains$1(sources, source)) {
                  // build a unique list of sources
                  sources.push(source);
              }
              return sources;
          }, []);
          if (fits.length <= 0) {
              throw new Error("Projection's fit didn't find any data sources");
          }
          return [
              Object.assign({ name,
                  size, fit: {
                      signal: fits.length > 1 ? `[${fits.join(', ')}]` : fits[0]
                  } }, projection)
          ];
      }
  }

  const PROJECTION_PROPERTIES = [
      'type',
      'clipAngle',
      'clipExtent',
      'center',
      'rotate',
      'precision',
      'reflectX',
      'reflectY',
      'coefficient',
      'distance',
      'fraction',
      'lobes',
      'parallel',
      'radius',
      'ratio',
      'spacing',
      'tilt'
  ];

  class ProjectionComponent extends Split {
      constructor(name, specifiedProjection, size, data) {
          super(Object.assign({}, specifiedProjection), // all explicit properties of projection
          { name } // name as initial implicit property
          );
          this.specifiedProjection = specifiedProjection;
          this.size = size;
          this.data = data;
          this.merged = false;
      }
      /**
       * Whether the projection parameters should fit provided data.
       */
      get isFit() {
          return !!this.data;
      }
  }

  function parseProjection(model) {
      model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);
  }
  function parseUnitProjection(model) {
      var _a;
      if (model.hasProjection) {
          const proj = model.specifiedProjection;
          const fit = !(proj && (proj.scale != null || proj.translate != null));
          const size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;
          const data = fit ? gatherFitData(model) : undefined;
          return new ProjectionComponent(model.projectionName(true), Object.assign(Object.assign({}, ((_a = model.config.projection) !== null && _a !== void 0 ? _a : {})), (proj !== null && proj !== void 0 ? proj : {})), size, data);
      }
      return undefined;
  }
  function gatherFitData(model) {
      const data = [];
      const { encoding } = model;
      for (const posssiblePair of [
          [LONGITUDE, LATITUDE],
          [LONGITUDE2, LATITUDE2]
      ]) {
          if (getFieldOrDatumDef(encoding[posssiblePair[0]]) || getFieldOrDatumDef(encoding[posssiblePair[1]])) {
              data.push({
                  signal: model.getName(`geojson_${data.length}`)
              });
          }
      }
      if (model.channelHasField(SHAPE) && model.typedFieldDef(SHAPE).type === GEOJSON) {
          data.push({
              signal: model.getName(`geojson_${data.length}`)
          });
      }
      if (data.length === 0) {
          // main source is geojson, so we can just use that
          data.push(model.requestDataName(DataSourceType.Main));
      }
      return data;
  }
  function mergeIfNoConflict(first, second) {
      const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {
          // neither has the property
          if (!has$1(first.explicit, prop) && !has$1(second.explicit, prop)) {
              return true;
          }
          // both have property and an equal value for property
          if (has$1(first.explicit, prop) &&
              has$1(second.explicit, prop) &&
              // some properties might be signals or objects and require hashing for comparison
              stringify(first.get(prop)) === stringify(second.get(prop))) {
              return true;
          }
          return false;
      });
      const size = stringify(first.size) === stringify(second.size);
      if (size) {
          if (allPropertiesShared) {
              return first;
          }
          else if (stringify(first.explicit) === stringify({})) {
              return second;
          }
          else if (stringify(second.explicit) === stringify({})) {
              return first;
          }
      }
      // if all properties don't match, let each unit spec have its own projection
      return null;
  }
  function parseNonUnitProjections(model) {
      if (model.children.length === 0) {
          return undefined;
      }
      let nonUnitProjection;
      // parse all children first
      for (const child of model.children) {
          parseProjection(child);
      }
      // analyze parsed projections, attempt to merge
      const mergable = every(model.children, child => {
          const projection = child.component.projection;
          if (!projection) {
              // child layer does not use a projection
              return true;
          }
          else if (!nonUnitProjection) {
              // cached 'projection' is null, cache this one
              nonUnitProjection = projection;
              return true;
          }
          else {
              const merge = mergeIfNoConflict(nonUnitProjection, projection);
              if (merge) {
                  nonUnitProjection = merge;
              }
              return !!merge;
          }
      });
      // if cached one and all other children share the same projection,
      if (nonUnitProjection && mergable) {
          // so we can elevate it to the layer level
          const name = model.projectionName(true);
          const modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data));
          // rename and assign all others as merged
          for (const child of model.children) {
              const projection = child.component.projection;
              if (projection) {
                  if (projection.isFit) {
                      modelProjection.data.push(...child.component.projection.data);
                  }
                  child.renameProjection(projection.get('name'), name);
                  projection.merged = true;
              }
          }
          return modelProjection;
      }
      return undefined;
  }

  var __rest$o = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function rangeFormula(model, fieldDef, channel, config) {
      var _a, _b;
      if (binRequiresRange(fieldDef, channel)) {
          // read format from axis or legend, if there is no format then use config.numberFormat
          const guide = isUnitModel(model)
              ? (_b = (_a = model.axis(channel)) !== null && _a !== void 0 ? _a : model.legend(channel)) !== null && _b !== void 0 ? _b : {} : {};
          const startField = vgField(fieldDef, { expr: 'datum' });
          const endField = vgField(fieldDef, { expr: 'datum', binSuffix: 'end' });
          return {
              formulaAs: vgField(fieldDef, { binSuffix: 'range', forAs: true }),
              formula: binFormatExpression(startField, endField, guide.format, guide.formatType, config)
          };
      }
      return {};
  }
  function binKey(bin, field) {
      return `${binToString(bin)}_${field}`;
  }
  function getSignalsFromModel(model, key) {
      return {
          signal: model.getName(`${key}_bins`),
          extentSignal: model.getName(`${key}_extent`)
      };
  }
  function getBinSignalName(model, field, bin) {
      var _a;
      const normalizedBin = (_a = normalizeBin(bin, undefined)) !== null && _a !== void 0 ? _a : {};
      const key = binKey(normalizedBin, field);
      return model.getName(`${key}_bins`);
  }
  function isBinTransform(t) {
      return 'as' in t;
  }
  function createBinComponent(t, bin, model) {
      let as;
      let span;
      if (isBinTransform(t)) {
          as = isString$1(t.as) ? [t.as, `${t.as}_end`] : [t.as[0], t.as[1]];
      }
      else {
          as = [vgField(t, { forAs: true }), vgField(t, { binSuffix: 'end', forAs: true })];
      }
      const normalizedBin = Object.assign({}, normalizeBin(bin, undefined));
      const key = binKey(normalizedBin, t.field);
      const { signal, extentSignal } = getSignalsFromModel(model, key);
      if (isSelectionExtent(normalizedBin.extent)) {
          const ext = normalizedBin.extent;
          const selName = ext.selection;
          span = parseSelectionBinExtent(model.getSelectionComponent(varName(selName), selName), ext);
          delete normalizedBin.extent; // Vega-Lite selection extent map to Vega's span property.
      }
      const binComponent = Object.assign(Object.assign(Object.assign({ bin: normalizedBin, field: t.field, as: [as] }, (signal ? { signal } : {})), (extentSignal ? { extentSignal } : {})), (span ? { span } : {}));
      return { key, binComponent };
  }
  class BinNode extends DataFlowNode {
      constructor(parent, bins) {
          super(parent);
          this.bins = bins;
      }
      clone() {
          return new BinNode(null, duplicate(this.bins));
      }
      static makeFromEncoding(parent, model) {
          const bins = model.reduceFieldDef((binComponentIndex, fieldDef, channel) => {
              if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
                  const { key, binComponent } = createBinComponent(fieldDef, fieldDef.bin, model);
                  binComponentIndex[key] = Object.assign(Object.assign(Object.assign({}, binComponent), binComponentIndex[key]), rangeFormula(model, fieldDef, channel, model.config));
              }
              return binComponentIndex;
          }, {});
          if (isEmpty$1(bins)) {
              return null;
          }
          return new BinNode(parent, bins);
      }
      /**
       * Creates a bin node from BinTransform.
       * The optional parameter should provide
       */
      static makeFromTransform(parent, t, model) {
          const { key, binComponent } = createBinComponent(t, t.bin, model);
          return new BinNode(parent, {
              [key]: binComponent
          });
      }
      /**
       * Merge bin nodes. This method either integrates the bin config from the other node
       * or if this node already has a bin config, renames the corresponding signal in the model.
       */
      merge(other, renameSignal) {
          for (const key of keys(other.bins)) {
              if (key in this.bins) {
                  renameSignal(other.bins[key].signal, this.bins[key].signal);
                  // Ensure that we don't have duplicate names for signal pairs
                  this.bins[key].as = unique([...this.bins[key].as, ...other.bins[key].as], hash);
              }
              else {
                  this.bins[key] = other.bins[key];
              }
          }
          for (const child of other.children) {
              other.removeChild(child);
              child.parent = this;
          }
          other.remove();
      }
      producedFields() {
          return new Set(vals(this.bins)
              .map(c => c.as)
              .flat(2));
      }
      dependentFields() {
          return new Set(vals(this.bins).map(c => c.field));
      }
      hash() {
          return `Bin ${hash(this.bins)}`;
      }
      assemble() {
          return vals(this.bins).flatMap(bin => {
              const transform = [];
              const [binAs, ...remainingAs] = bin.as;
              const _a = bin.bin, { extent } = _a, params = __rest$o(_a, ["extent"]);
              const binTrans = Object.assign(Object.assign(Object.assign({ type: 'bin', field: replacePathInField(bin.field), as: binAs, signal: bin.signal }, (!isSelectionExtent(extent) ? { extent } : { extent: null })), (bin.span ? { span: { signal: `span(${bin.span})` } } : {})), params);
              if (!extent && bin.extentSignal) {
                  transform.push({
                      type: 'extent',
                      field: replacePathInField(bin.field),
                      signal: bin.extentSignal
                  });
                  binTrans.extent = { signal: bin.extentSignal };
              }
              transform.push(binTrans);
              for (const as of remainingAs) {
                  for (let i = 0; i < 2; i++) {
                      transform.push({
                          type: 'formula',
                          expr: vgField({ field: binAs[i] }, { expr: 'datum' }),
                          as: as[i]
                      });
                  }
              }
              if (bin.formula) {
                  transform.push({
                      type: 'formula',
                      expr: bin.formula,
                      as: bin.formulaAs
                  });
              }
              return transform;
          });
      }
  }

  function addDimension(dims, channel, fieldDef, model) {
      const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;
      if (isTypedFieldDef(fieldDef) &&
          isUnitModel(model) &&
          hasBand(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config)) {
          dims.add(vgField(fieldDef, {}));
          dims.add(vgField(fieldDef, { suffix: 'end' }));
          if (fieldDef.bin && binRequiresRange(fieldDef, channel)) {
              dims.add(vgField(fieldDef, { binSuffix: 'range' }));
          }
      }
      else if (isGeoPositionChannel(channel)) {
          const posChannel = getPositionChannelFromLatLong(channel);
          dims.add(model.getName(posChannel));
      }
      else {
          dims.add(vgField(fieldDef));
      }
      return dims;
  }
  function mergeMeasures(parentMeasures, childMeasures) {
      var _a;
      for (const field of keys(childMeasures)) {
          // when we merge a measure, we either have to add an aggregation operator or even a new field
          const ops = childMeasures[field];
          for (const op of keys(ops)) {
              if (field in parentMeasures) {
                  // add operator to existing measure field
                  parentMeasures[field][op] = new Set([...((_a = parentMeasures[field][op]) !== null && _a !== void 0 ? _a : []), ...ops[op]]);
              }
              else {
                  parentMeasures[field] = { [op]: ops[op] };
              }
          }
      }
  }
  class AggregateNode extends DataFlowNode {
      /**
       * @param dimensions string set for dimensions
       * @param measures dictionary mapping field name => dict of aggregation functions and names to use
       */
      constructor(parent, dimensions, measures) {
          super(parent);
          this.dimensions = dimensions;
          this.measures = measures;
      }
      clone() {
          return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));
      }
      get groupBy() {
          return this.dimensions;
      }
      static makeFromEncoding(parent, model) {
          let isAggregate = false;
          model.forEachFieldDef(fd => {
              if (fd.aggregate) {
                  isAggregate = true;
              }
          });
          const meas = {};
          const dims = new Set();
          if (!isAggregate) {
              // no need to create this node if the model has no aggregation
              return null;
          }
          model.forEachFieldDef((fieldDef, channel) => {
              var _a, _b, _c, _d;
              const { aggregate, field } = fieldDef;
              if (aggregate) {
                  if (aggregate === 'count') {
                      meas['*'] = (_a = meas['*']) !== null && _a !== void 0 ? _a : {};
                      meas['*']['count'] = new Set([vgField(fieldDef, { forAs: true })]);
                  }
                  else {
                      if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
                          const op = isArgminDef(aggregate) ? 'argmin' : 'argmax';
                          const argField = aggregate[op];
                          meas[argField] = (_b = meas[argField]) !== null && _b !== void 0 ? _b : {};
                          meas[argField][op] = new Set([vgField({ op, field: argField }, { forAs: true })]);
                      }
                      else {
                          meas[field] = (_c = meas[field]) !== null && _c !== void 0 ? _c : {};
                          meas[field][aggregate] = new Set([vgField(fieldDef, { forAs: true })]);
                      }
                      // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain
                      if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {
                          meas[field] = (_d = meas[field]) !== null && _d !== void 0 ? _d : {};
                          meas[field]['min'] = new Set([vgField({ field, aggregate: 'min' }, { forAs: true })]);
                          meas[field]['max'] = new Set([vgField({ field, aggregate: 'max' }, { forAs: true })]);
                      }
                  }
              }
              else {
                  addDimension(dims, channel, fieldDef, model);
              }
          });
          if (dims.size + keys(meas).length === 0) {
              return null;
          }
          return new AggregateNode(parent, dims, meas);
      }
      static makeFromTransform(parent, t) {
          var _a, _b, _c;
          const dims = new Set();
          const meas = {};
          for (const s of t.aggregate) {
              const { op, field, as } = s;
              if (op) {
                  if (op === 'count') {
                      meas['*'] = (_a = meas['*']) !== null && _a !== void 0 ? _a : {};
                      meas['*']['count'] = new Set([as ? as : vgField(s, { forAs: true })]);
                  }
                  else {
                      meas[field] = (_b = meas[field]) !== null && _b !== void 0 ? _b : {};
                      meas[field][op] = new Set([as ? as : vgField(s, { forAs: true })]);
                  }
              }
          }
          for (const s of (_c = t.groupby) !== null && _c !== void 0 ? _c : []) {
              dims.add(s);
          }
          if (dims.size + keys(meas).length === 0) {
              return null;
          }
          return new AggregateNode(parent, dims, meas);
      }
      merge(other) {
          if (setEqual(this.dimensions, other.dimensions)) {
              mergeMeasures(this.measures, other.measures);
              return true;
          }
          else {
              debug('different dimensions, cannot merge');
              return false;
          }
      }
      addDimensions(fields) {
          fields.forEach(this.dimensions.add, this.dimensions);
      }
      dependentFields() {
          return new Set([...this.dimensions, ...keys(this.measures)]);
      }
      producedFields() {
          const out = new Set();
          for (const field of keys(this.measures)) {
              for (const op of keys(this.measures[field])) {
                  const m = this.measures[field][op];
                  if (m.size === 0) {
                      out.add(`${op}_${field}`);
                  }
                  else {
                      m.forEach(out.add, out);
                  }
              }
          }
          return out;
      }
      hash() {
          return `Aggregate ${hash({ dimensions: this.dimensions, measures: this.measures })}`;
      }
      assemble() {
          const ops = [];
          const fields = [];
          const as = [];
          for (const field of keys(this.measures)) {
              for (const op of keys(this.measures[field])) {
                  for (const alias of this.measures[field][op]) {
                      as.push(alias);
                      ops.push(op);
                      fields.push(field === '*' ? null : replacePathInField(field));
                  }
              }
          }
          const result = {
              type: 'aggregate',
              groupby: [...this.dimensions].map(replacePathInField),
              ops,
              fields,
              as
          };
          return result;
      }
  }

  /**
   * A node that helps us track what fields we are faceting by.
   */
  class FacetNode extends DataFlowNode {
      /**
       * @param model The facet model.
       * @param name The name that this facet source will have.
       * @param data The source data for this facet data.
       */
      constructor(parent, model, name, data) {
          super(parent);
          this.model = model;
          this.name = name;
          this.data = data;
          for (const channel of FACET_CHANNELS) {
              const fieldDef = model.facet[channel];
              if (fieldDef) {
                  const { bin, sort } = fieldDef;
                  this[channel] = Object.assign({ name: model.getName(`${channel}_domain`), fields: [vgField(fieldDef), ...(isBinning(bin) ? [vgField(fieldDef, { binSuffix: 'end' })] : [])] }, (isSortField(sort)
                      ? { sortField: sort }
                      : isArray(sort)
                          ? { sortIndexField: sortArrayIndexField(fieldDef, channel) }
                          : {}));
              }
          }
          this.childModel = model.child;
      }
      hash() {
          let out = `Facet`;
          for (const channel of FACET_CHANNELS) {
              if (this[channel]) {
                  out += ` ${channel.charAt(0)}:${hash(this[channel])}`;
              }
          }
          return out;
      }
      get fields() {
          var _a;
          const f = [];
          for (const channel of FACET_CHANNELS) {
              if ((_a = this[channel]) === null || _a === void 0 ? void 0 : _a.fields) {
                  f.push(...this[channel].fields);
              }
          }
          return f;
      }
      dependentFields() {
          const depFields = new Set(this.fields);
          for (const channel of FACET_CHANNELS) {
              if (this[channel]) {
                  if (this[channel].sortField) {
                      depFields.add(this[channel].sortField.field);
                  }
                  if (this[channel].sortIndexField) {
                      depFields.add(this[channel].sortIndexField);
                  }
              }
          }
          return depFields;
      }
      producedFields() {
          return new Set(); // facet does not produce any new fields
      }
      /**
       * The name to reference this source is its name.
       */
      getSource() {
          return this.name;
      }
      getChildIndependentFieldsWithStep() {
          const childIndependentFieldsWithStep = {};
          for (const channel of POSITION_SCALE_CHANNELS) {
              const childScaleComponent = this.childModel.component.scales[channel];
              if (childScaleComponent && !childScaleComponent.merged) {
                  // independent scale
                  const type = childScaleComponent.get('type');
                  const range = childScaleComponent.get('range');
                  if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                      const domain = assembleDomain(this.childModel, channel);
                      const field = getFieldFromDomain(domain);
                      if (field) {
                          childIndependentFieldsWithStep[channel] = field;
                      }
                      else {
                          warn(unknownField(channel));
                      }
                  }
              }
          }
          return childIndependentFieldsWithStep;
      }
      assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {
          const childChannel = { row: 'y', column: 'x' }[channel];
          const fields = [];
          const ops = [];
          const as = [];
          if (childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {
              if (crossedDataName) {
                  // If there is a crossed data, calculate max
                  fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
                  ops.push('max');
              }
              else {
                  // If there is no crossed data, just calculate distinct
                  fields.push(childIndependentFieldsWithStep[childChannel]);
                  ops.push('distinct');
              }
              // Although it is technically a max, just name it distinct so it's easier to refer to it
              as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
          }
          const { sortField, sortIndexField } = this[channel];
          if (sortField) {
              const { op = DEFAULT_SORT_OP, field } = sortField;
              fields.push(field);
              ops.push(op);
              as.push(vgField(sortField, { forAs: true }));
          }
          else if (sortIndexField) {
              fields.push(sortIndexField);
              ops.push('max');
              as.push(sortIndexField);
          }
          return {
              name: this[channel].name,
              // Use data from the crossed one if it exist
              source: crossedDataName !== null && crossedDataName !== void 0 ? crossedDataName : this.data,
              transform: [
                  Object.assign({ type: 'aggregate', groupby: this[channel].fields }, (fields.length
                      ? {
                          fields,
                          ops,
                          as
                      }
                      : {}))
              ]
          };
      }
      assembleFacetHeaderData(childIndependentFieldsWithStep) {
          var _a, _b;
          const { columns } = this.model.layout;
          const { layoutHeaders } = this.model.component;
          const data = [];
          const hasSharedAxis = {};
          for (const headerChannel of HEADER_CHANNELS) {
              for (const headerType of HEADER_TYPES) {
                  const headers = (_a = (layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType])) !== null && _a !== void 0 ? _a : [];
                  for (const header of headers) {
                      if (((_b = header.axes) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                          hasSharedAxis[headerChannel] = true;
                          break;
                      }
                  }
              }
              if (hasSharedAxis[headerChannel]) {
                  const cardinality = `length(data("${this.facet.name}"))`;
                  const stop = headerChannel === 'row'
                      ? columns
                          ? { signal: `ceil(${cardinality} / ${columns})` }
                          : 1
                      : columns
                          ? { signal: `min(${cardinality}, ${columns})` }
                          : { signal: cardinality };
                  data.push({
                      name: `${this.facet.name}_${headerChannel}`,
                      transform: [
                          {
                              type: 'sequence',
                              start: 0,
                              stop
                          }
                      ]
                  });
              }
          }
          const { row, column } = hasSharedAxis;
          if (row || column) {
              data.unshift(this.assembleRowColumnHeaderData('facet', null, childIndependentFieldsWithStep));
          }
          return data;
      }
      assemble() {
          var _a, _b;
          const data = [];
          let crossedDataName = null;
          const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();
          const { column, row, facet } = this;
          if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {
              // Need to create a cross dataset to correctly calculate cardinality
              crossedDataName = `cross_${this.column.name}_${this.row.name}`;
              const fields = [].concat((_a = childIndependentFieldsWithStep.x) !== null && _a !== void 0 ? _a : [], (_b = childIndependentFieldsWithStep.y) !== null && _b !== void 0 ? _b : []);
              const ops = fields.map(() => 'distinct');
              data.push({
                  name: crossedDataName,
                  source: this.data,
                  transform: [
                      {
                          type: 'aggregate',
                          groupby: this.fields,
                          fields,
                          ops
                      }
                  ]
              });
          }
          for (const channel of [COLUMN, ROW]) {
              if (this[channel]) {
                  data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));
              }
          }
          if (facet) {
              const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);
              if (facetData) {
                  data.push(...facetData);
              }
          }
          return data;
      }
  }

  /**
   * Remove quotes from a string.
   */
  function unquote(pattern) {
      if ((pattern[0] === "'" && pattern[pattern.length - 1] === "'") ||
          (pattern[0] === '"' && pattern[pattern.length - 1] === '"')) {
          return pattern.slice(1, -1);
      }
      return pattern;
  }
  /**
   * @param field The field.
   * @param parse What to parse the field as.
   */
  function parseExpression$2(field, parse) {
      const f = accessPathWithDatum(field);
      if (parse === 'number') {
          return `toNumber(${f})`;
      }
      else if (parse === 'boolean') {
          return `toBoolean(${f})`;
      }
      else if (parse === 'string') {
          return `toString(${f})`;
      }
      else if (parse === 'date') {
          return `toDate(${f})`;
      }
      else if (parse === 'flatten') {
          return f;
      }
      else if (parse.indexOf('date:') === 0) {
          const specifier = unquote(parse.slice(5, parse.length));
          return `timeParse(${f},'${specifier}')`;
      }
      else if (parse.indexOf('utc:') === 0) {
          const specifier = unquote(parse.slice(4, parse.length));
          return `utcParse(${f},'${specifier}')`;
      }
      else {
          warn(unrecognizedParse(parse));
          return null;
      }
  }
  function getImplicitFromFilterTransform(transform) {
      const implicit = {};
      forEachLeaf(transform.filter, filter => {
          var _a;
          if (isFieldPredicate(filter)) {
              // Automatically add a parse node for filters with filter objects
              let val = null;
              // For EqualFilter, just use the equal property.
              // For RangeFilter and OneOfFilter, all array members should have
              // the same type, so we only use the first one.
              if (isFieldEqualPredicate(filter)) {
                  val = signalRefOrValue(filter.equal);
              }
              else if (isFieldLTEPredicate(filter)) {
                  val = signalRefOrValue(filter.lte);
              }
              else if (isFieldLTPredicate(filter)) {
                  val = signalRefOrValue(filter.lt);
              }
              else if (isFieldGTPredicate(filter)) {
                  val = signalRefOrValue(filter.gt);
              }
              else if (isFieldGTEPredicate(filter)) {
                  val = signalRefOrValue(filter.gte);
              }
              else if (isFieldRangePredicate(filter)) {
                  val = filter.range[0];
              }
              else if (isFieldOneOfPredicate(filter)) {
                  val = ((_a = filter.oneOf) !== null && _a !== void 0 ? _a : filter['in'])[0];
              } // else -- for filter expression, we can't infer anything
              if (val) {
                  if (isDateTime(val)) {
                      implicit[filter.field] = 'date';
                  }
                  else if (isNumber$1(val)) {
                      implicit[filter.field] = 'number';
                  }
                  else if (isString$1(val)) {
                      implicit[filter.field] = 'string';
                  }
              }
              if (filter.timeUnit) {
                  implicit[filter.field] = 'date';
              }
          }
      });
      return implicit;
  }
  /**
   * Creates a parse node for implicit parsing from a model and updates ancestorParse.
   */
  function getImplicitFromEncoding(model) {
      const implicit = {};
      function add(fieldDef) {
          if (isFieldOrDatumDefForTimeFormat(fieldDef)) {
              implicit[fieldDef.field] = 'date';
          }
          else if (fieldDef.type === 'quantitative' &&
              isMinMaxOp(fieldDef.aggregate) // we need to parse numbers to support correct min and max
          ) {
              implicit[fieldDef.field] = 'number';
          }
          else if (accessPathDepth(fieldDef.field) > 1) {
              // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.
              // (Parsing numbers / dates already flattens numeric and temporal fields.)
              if (!(fieldDef.field in implicit)) {
                  implicit[fieldDef.field] = 'flatten';
              }
          }
          else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {
              // Flatten fields that we sort by but that are not otherwise flattened.
              if (!(fieldDef.sort.field in implicit)) {
                  implicit[fieldDef.sort.field] = 'flatten';
              }
          }
      }
      if (isUnitModel(model) || isFacetModel(model)) {
          // Parse encoded fields
          model.forEachFieldDef((fieldDef, channel) => {
              if (isTypedFieldDef(fieldDef)) {
                  add(fieldDef);
              }
              else {
                  const mainChannel = getMainRangeChannel(channel);
                  const mainFieldDef = model.fieldDef(mainChannel);
                  add(Object.assign(Object.assign({}, fieldDef), { type: mainFieldDef.type }));
              }
          });
      }
      // Parse quantitative dimension fields of path marks as numbers so that we sort them correctly.
      if (isUnitModel(model)) {
          const { mark, markDef, encoding } = model;
          if (isPathMark(mark) &&
              // No need to sort by dimension if we have a connected scatterplot (order channel is present)
              !model.encoding.order) {
              const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';
              const dimensionChannelDef = encoding[dimensionChannel];
              if (isFieldDef(dimensionChannelDef) &&
                  dimensionChannelDef.type === 'quantitative' &&
                  !(dimensionChannelDef.field in implicit)) {
                  implicit[dimensionChannelDef.field] = 'number';
              }
          }
      }
      return implicit;
  }
  /**
   * Creates a parse node for implicit parsing from a model and updates ancestorParse.
   */
  function getImplicitFromSelection(model) {
      const implicit = {};
      if (isUnitModel(model) && model.component.selection) {
          for (const name of keys(model.component.selection)) {
              const selCmpt = model.component.selection[name];
              for (const proj of selCmpt.project.items) {
                  if (!proj.channel && accessPathDepth(proj.field) > 1) {
                      implicit[proj.field] = 'flatten';
                  }
              }
          }
      }
      return implicit;
  }
  class ParseNode extends DataFlowNode {
      constructor(parent, parse) {
          super(parent);
          this._parse = parse;
      }
      clone() {
          return new ParseNode(null, duplicate(this._parse));
      }
      hash() {
          return `Parse ${hash(this._parse)}`;
      }
      /**
       * Creates a parse node from a data.format.parse and updates ancestorParse.
       */
      static makeExplicit(parent, model, ancestorParse) {
          // Custom parse
          let explicit = {};
          const data = model.data;
          if (!isGenerator(data) && data && data.format && data.format.parse) {
              explicit = data.format.parse;
          }
          return this.makeWithAncestors(parent, explicit, {}, ancestorParse);
      }
      /**
       * Creates a parse node from "explicit" parse and "implicit" parse and updates ancestorParse.
       */
      static makeWithAncestors(parent, explicit, implicit, ancestorParse) {
          // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as "derived"). We also don't need to flatten a field that has already been parsed.
          for (const field of keys(implicit)) {
              const parsedAs = ancestorParse.getWithExplicit(field);
              if (parsedAs.value !== undefined) {
                  // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.
                  if (parsedAs.explicit ||
                      parsedAs.value === implicit[field] ||
                      parsedAs.value === 'derived' ||
                      implicit[field] === 'flatten') {
                      delete implicit[field];
                  }
                  else {
                      warn(differentParse(field, implicit[field], parsedAs.value));
                  }
              }
          }
          for (const field of keys(explicit)) {
              const parsedAs = ancestorParse.get(field);
              if (parsedAs !== undefined) {
                  // Don't parse a field again if it has been parsed with the same type already.
                  if (parsedAs === explicit[field]) {
                      delete explicit[field];
                  }
                  else {
                      warn(differentParse(field, explicit[field], parsedAs));
                  }
              }
          }
          const parse = new Split(explicit, implicit);
          // add the format parse from this model so that children don't parse the same field again
          ancestorParse.copyAll(parse);
          // copy only non-null parses
          const p = {};
          for (const key of keys(parse.combine())) {
              const val = parse.get(key);
              if (val !== null) {
                  p[key] = val;
              }
          }
          if (keys(p).length === 0 || ancestorParse.parseNothing) {
              return null;
          }
          return new ParseNode(parent, p);
      }
      get parse() {
          return this._parse;
      }
      merge(other) {
          this._parse = Object.assign(Object.assign({}, this._parse), other.parse);
          other.remove();
      }
      /**
       * Assemble an object for Vega's format.parse property.
       */
      assembleFormatParse() {
          const formatParse = {};
          for (const field of keys(this._parse)) {
              const p = this._parse[field];
              if (accessPathDepth(field) === 1) {
                  formatParse[field] = p;
              }
          }
          return formatParse;
      }
      // format parse depends and produces all fields in its parse
      producedFields() {
          return new Set(keys(this._parse));
      }
      dependentFields() {
          return new Set(keys(this._parse));
      }
      assembleTransforms(onlyNested = false) {
          return keys(this._parse)
              .filter(field => (onlyNested ? accessPathDepth(field) > 1 : true))
              .map(field => {
              const expr = parseExpression$2(field, this._parse[field]);
              if (!expr) {
                  return null;
              }
              const formula = {
                  type: 'formula',
                  expr,
                  as: removePathFromField(field) // Vega output is always flattened
              };
              return formula;
          })
              .filter(t => t !== null);
      }
  }

  class IdentifierNode extends DataFlowNode {
      clone() {
          return new IdentifierNode(null);
      }
      constructor(parent) {
          super(parent);
      }
      dependentFields() {
          return new Set();
      }
      producedFields() {
          return new Set([SELECTION_ID]);
      }
      hash() {
          return 'Identifier';
      }
      assemble() {
          return { type: 'identifier', as: SELECTION_ID };
      }
  }

  class GraticuleNode extends DataFlowNode {
      constructor(parent, params) {
          super(parent);
          this.params = params;
      }
      clone() {
          return new GraticuleNode(null, this.params);
      }
      dependentFields() {
          return new Set();
      }
      producedFields() {
          return undefined; // there should never be a node before graticule
      }
      hash() {
          return `Graticule ${hash(this.params)}`;
      }
      assemble() {
          return Object.assign({ type: 'graticule' }, (this.params === true ? {} : this.params));
      }
  }

  class SequenceNode extends DataFlowNode {
      constructor(parent, params) {
          super(parent);
          this.params = params;
      }
      clone() {
          return new SequenceNode(null, this.params);
      }
      dependentFields() {
          return new Set();
      }
      producedFields() {
          var _a;
          return new Set([(_a = this.params.as) !== null && _a !== void 0 ? _a : 'data']);
      }
      hash() {
          return `Hash ${hash(this.params)}`;
      }
      assemble() {
          return Object.assign({ type: 'sequence' }, this.params);
      }
  }

  class SourceNode extends DataFlowNode {
      constructor(data) {
          super(null); // source cannot have parent
          data = data !== null && data !== void 0 ? data : { name: 'source' };
          let format;
          if (!isGenerator(data)) {
              format = data.format ? Object.assign({}, omit(data.format, ['parse'])) : {};
          }
          if (isInlineData(data)) {
              this._data = { values: data.values };
          }
          else if (isUrlData(data)) {
              this._data = { url: data.url };
              if (!format.type) {
                  // Extract extension from URL using snippet from
                  // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript
                  let defaultExtension = /(?:\.([^.]+))?$/.exec(data.url)[1];
                  if (!contains$1(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {
                      defaultExtension = 'json';
                  }
                  // defaultExtension has type string but we ensure that it is DataFormatType above
                  format.type = defaultExtension;
              }
          }
          else if (isSphereGenerator(data)) {
              // hardwire GeoJSON sphere data into output specification
              this._data = { values: [{ type: 'Sphere' }] };
          }
          else if (isNamedData(data) || isGenerator(data)) {
              this._data = {};
          }
          // set flag to check if generator
          this._generator = isGenerator(data);
          // any dataset can be named
          if (data.name) {
              this._name = data.name;
          }
          if (format && !isEmpty$1(format)) {
              this._data.format = format;
          }
      }
      dependentFields() {
          return new Set();
      }
      producedFields() {
          return undefined; // we don't know what this source produces
      }
      get data() {
          return this._data;
      }
      hasName() {
          return !!this._name;
      }
      get isGenerator() {
          return this._generator;
      }
      get dataName() {
          return this._name;
      }
      set dataName(name) {
          this._name = name;
      }
      set parent(parent) {
          throw new Error('Source nodes have to be roots.');
      }
      remove() {
          throw new Error('Source nodes are roots and cannot be removed.');
      }
      hash() {
          throw new Error('Cannot hash sources');
      }
      assemble() {
          return Object.assign(Object.assign({ name: this._name }, this._data), { transform: [] });
      }
  }

  var __classPrivateFieldSet$1 = (undefined && undefined.__classPrivateFieldSet) || function (receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
  };
  var __classPrivateFieldGet$1 = (undefined && undefined.__classPrivateFieldGet) || function (receiver, privateMap) {
      if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
  };
  var _modified;
  /**
   * Whether this dataflow node is the source of the dataflow that produces data i.e. a source or a generator.
   */
  function isDataSourceNode(node) {
      return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;
  }
  /**
   * Abstract base class for Dataflow optimizers.
   * Contains only mutation handling logic. Subclasses need to implement iteration logic.
   */
  class Optimizer {
      constructor() {
          _modified.set(this, void 0);
          __classPrivateFieldSet$1(this, _modified, false);
      }
      // Once true, #modified is never set to false
      setModified() {
          __classPrivateFieldSet$1(this, _modified, true);
      }
      get modifiedFlag() {
          return __classPrivateFieldGet$1(this, _modified);
      }
  }
  _modified = new WeakMap();
  /**
   * Starts from a node and runs the optimization function (the "run" method) upwards to the root,
   * depending on the continue and modified flag values returned by the optimization function.
   */
  class BottomUpOptimizer extends Optimizer {
      /**
       * Compute a map of node depths that we can use to determine a topological sort order.
       */
      getNodeDepths(node, depth, depths) {
          depths.set(node, depth);
          for (const child of node.children) {
              this.getNodeDepths(child, depth + 1, depths);
          }
          return depths;
      }
      /**
       * Run the optimizer on all nodes starting from the leaves.
       */
      optimize(node) {
          const depths = this.getNodeDepths(node, 0, new Map());
          const topologicalSort = [...depths.entries()].sort((a, b) => b[1] - a[1]);
          for (const tuple of topologicalSort) {
              this.run(tuple[0]);
          }
          return this.modifiedFlag;
      }
  }
  /**
   * The optimizer function (the "run" method), is invoked on the given node and then continues recursively.
   */
  class TopDownOptimizer extends Optimizer {
      /**
       * Run the optimizer depth first on all nodes starting from the roots.
       */
      optimize(node) {
          this.run(node);
          for (const child of node.children) {
              this.optimize(child);
          }
          return this.modifiedFlag;
      }
  }

  /**
   * Merge identical nodes at forks by comparing hashes.
   *
   * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.
   */
  class MergeIdenticalNodes extends TopDownOptimizer {
      mergeNodes(parent, nodes) {
          const mergedNode = nodes.shift();
          for (const node of nodes) {
              parent.removeChild(node);
              node.parent = mergedNode;
              node.remove();
          }
      }
      run(node) {
          const hashes = node.children.map(x => x.hash());
          const buckets = {};
          for (let i = 0; i < hashes.length; i++) {
              if (buckets[hashes[i]] === undefined) {
                  buckets[hashes[i]] = [node.children[i]];
              }
              else {
                  buckets[hashes[i]].push(node.children[i]);
              }
          }
          for (const k of keys(buckets)) {
              if (buckets[k].length > 1) {
                  this.setModified();
                  this.mergeNodes(node, buckets[k]);
              }
          }
      }
  }
  /**
   * Optimizer that removes identifier nodes that are not needed for selections.
   */
  class RemoveUnnecessaryIdentifierNodes extends TopDownOptimizer {
      constructor(model) {
          super();
          this.requiresSelectionId = model && requiresSelectionId(model);
      }
      run(node) {
          if (node instanceof IdentifierNode) {
              // Only preserve IdentifierNodes if we have default discrete selections
              // in our model tree, and if the nodes come after tuple producing nodes.
              if (!(this.requiresSelectionId &&
                  (isDataSourceNode(node.parent) || node.parent instanceof AggregateNode || node.parent instanceof ParseNode))) {
                  this.setModified();
                  node.remove();
              }
          }
      }
  }
  /**
   * Removes duplicate time unit nodes (as determined by the name of the output field) that may be generated due to
   * selections projected over time units. Only keeps the first time unit in any branch.
   *
   * This optimizer is a custom top down optimizer that keep track of produced fields in a branch.
   */
  class RemoveDuplicateTimeUnits extends Optimizer {
      optimize(node) {
          this.run(node, new Set());
          return this.modifiedFlag;
      }
      run(node, timeUnitFields) {
          let producedFields = new Set();
          if (node instanceof TimeUnitNode) {
              producedFields = node.producedFields();
              if (hasIntersection(producedFields, timeUnitFields)) {
                  this.setModified();
                  node.removeFormulas(timeUnitFields);
                  if (node.producedFields.length === 0) {
                      node.remove();
                  }
              }
          }
          for (const child of node.children) {
              this.run(child, new Set([...timeUnitFields, ...producedFields]));
          }
      }
  }
  /**
   * Remove output nodes that are not required.
   */
  class RemoveUnnecessaryOutputNodes extends TopDownOptimizer {
      constructor() {
          super();
      }
      run(node) {
          if (node instanceof OutputNode && !node.isRequired()) {
              this.setModified();
              node.remove();
          }
      }
  }
  /**
   * Move parse nodes up to forks and merges them if possible.
   */
  class MoveParseUp extends BottomUpOptimizer {
      run(node) {
          if (isDataSourceNode(node)) {
              return;
          }
          if (node.numChildren() > 1) {
              // Don't move parse further up but continue with parent.
              return;
          }
          for (const child of node.children) {
              if (child instanceof ParseNode) {
                  if (node instanceof ParseNode) {
                      this.setModified();
                      node.merge(child);
                  }
                  else {
                      // Don't swap with nodes that produce something that the parse node depends on (e.g. lookup).
                      if (fieldIntersection(node.producedFields(), child.dependentFields())) {
                          continue;
                      }
                      this.setModified();
                      child.swapWithParent();
                  }
              }
          }
          return;
      }
  }
  /**
   * Inserts an intermediate ParseNode containing all non-conflicting parse fields and removes the empty ParseNodes.
   *
   * We assume that dependent paths that do not have a parse node can be just merged.
   */
  class MergeParse extends BottomUpOptimizer {
      run(node) {
          const originalChildren = [...node.children];
          const parseChildren = node.children.filter((child) => child instanceof ParseNode);
          if (node.numChildren() > 1 && parseChildren.length >= 1) {
              const commonParse = {};
              const conflictingParse = new Set();
              for (const parseNode of parseChildren) {
                  const parse = parseNode.parse;
                  for (const k of keys(parse)) {
                      if (!(k in commonParse)) {
                          commonParse[k] = parse[k];
                      }
                      else if (commonParse[k] !== parse[k]) {
                          conflictingParse.add(k);
                      }
                  }
              }
              for (const field of conflictingParse) {
                  delete commonParse[field];
              }
              if (!isEmpty$1(commonParse)) {
                  this.setModified();
                  const mergedParseNode = new ParseNode(node, commonParse);
                  for (const childNode of originalChildren) {
                      if (childNode instanceof ParseNode) {
                          for (const key of keys(commonParse)) {
                              delete childNode.parse[key];
                          }
                      }
                      node.removeChild(childNode);
                      childNode.parent = mergedParseNode;
                      // remove empty parse nodes
                      if (childNode instanceof ParseNode && keys(childNode.parse).length === 0) {
                          childNode.remove();
                      }
                  }
              }
          }
      }
  }
  /**
   * Repeatedly remove leaf nodes that are not output or facet nodes.
   * The reason is that we don't need subtrees that don't have any output nodes.
   * Facet nodes are needed for the row or column domains.
   */
  class RemoveUnusedSubtrees extends BottomUpOptimizer {
      run(node) {
          if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) ;
          else if (node instanceof SourceNode) ;
          else {
              this.setModified();
              node.remove();
          }
      }
  }
  /**
   * Merge adjacent time unit nodes.
   */
  class MergeTimeUnits extends BottomUpOptimizer {
      run(node) {
          const timeUnitChildren = node.children.filter((x) => x instanceof TimeUnitNode);
          const combination = timeUnitChildren.pop();
          for (const timeUnit of timeUnitChildren) {
              this.setModified();
              combination.merge(timeUnit);
          }
      }
  }
  class MergeAggregates extends BottomUpOptimizer {
      run(node) {
          const aggChildren = node.children.filter((child) => child instanceof AggregateNode);
          // Object which we'll use to map the fields which an aggregate is grouped by to
          // the set of aggregates with that grouping. This is useful as only aggregates
          // with the same group by can be merged
          const groupedAggregates = {};
          // Build groupedAggregates
          for (const agg of aggChildren) {
              const groupBys = hash(agg.groupBy);
              if (!(groupBys in groupedAggregates)) {
                  groupedAggregates[groupBys] = [];
              }
              groupedAggregates[groupBys].push(agg);
          }
          // Merge aggregateNodes with same key in groupedAggregates
          for (const group of keys(groupedAggregates)) {
              const mergeableAggs = groupedAggregates[group];
              if (mergeableAggs.length > 1) {
                  const mergedAggs = mergeableAggs.pop();
                  for (const agg of mergeableAggs) {
                      if (mergedAggs.merge(agg)) {
                          node.removeChild(agg);
                          agg.parent = mergedAggs;
                          agg.remove();
                          this.setModified();
                      }
                  }
              }
          }
      }
  }
  /**
   * Merge bin nodes and move them up through forks. Stop at filters, parse, identifier as we want them to stay before the bin node.
   */
  class MergeBins extends BottomUpOptimizer {
      constructor(model) {
          super();
          this.model = model;
      }
      run(node) {
          const moveBinsUp = !(isDataSourceNode(node) ||
              node instanceof FilterNode ||
              node instanceof ParseNode ||
              node instanceof IdentifierNode);
          const promotableBins = [];
          const remainingBins = [];
          for (const child of node.children) {
              if (child instanceof BinNode) {
                  if (moveBinsUp && !fieldIntersection(node.producedFields(), child.dependentFields())) {
                      promotableBins.push(child);
                  }
                  else {
                      remainingBins.push(child);
                  }
              }
          }
          if (promotableBins.length > 0) {
              const promotedBin = promotableBins.pop();
              for (const bin of promotableBins) {
                  promotedBin.merge(bin, this.model.renameSignal.bind(this.model));
              }
              this.setModified();
              if (node instanceof BinNode) {
                  node.merge(promotedBin, this.model.renameSignal.bind(this.model));
              }
              else {
                  promotedBin.swapWithParent();
              }
          }
          if (remainingBins.length > 1) {
              const remainingBin = remainingBins.pop();
              for (const bin of remainingBins) {
                  remainingBin.merge(bin, this.model.renameSignal.bind(this.model));
              }
              this.setModified();
          }
      }
  }
  /**
   * This optimizer takes output nodes that are at a fork and moves them before the fork.
   *
   * The algorithm iterates over the children and tries to find the last output node in a chain of output nodes.
   * It then moves all output nodes before that main output node. All other children (and the children of the output nodes)
   * are inserted after the main output node.
   */
  class MergeOutputs extends BottomUpOptimizer {
      run(node) {
          const children = [...node.children];
          const hasOutputChild = some(children, child => child instanceof OutputNode);
          if (!hasOutputChild || node.numChildren() <= 1) {
              return;
          }
          const otherChildren = [];
          // The output node we will connect all other nodes to.
          // Output nodes will be added before the new node, other nodes after.
          let mainOutput;
          for (const child of children) {
              if (child instanceof OutputNode) {
                  let lastOutput = child;
                  while (lastOutput.numChildren() === 1) {
                      const [theChild] = lastOutput.children;
                      if (theChild instanceof OutputNode) {
                          lastOutput = theChild;
                      }
                      else {
                          break;
                      }
                  }
                  otherChildren.push(...lastOutput.children);
                  if (mainOutput) {
                      // Move the output nodes before the mainOutput. We do this by setting
                      // the parent of the first not to the parent of the main output and
                      // the main output's parent to the last output.
                      // note: the child is the first output
                      node.removeChild(child);
                      child.parent = mainOutput.parent;
                      mainOutput.parent.removeChild(mainOutput);
                      mainOutput.parent = lastOutput;
                      this.setModified();
                  }
                  else {
                      mainOutput = lastOutput;
                  }
              }
              else {
                  otherChildren.push(child);
              }
          }
          if (otherChildren.length) {
              this.setModified();
              for (const child of otherChildren) {
                  child.parent.removeChild(child);
                  child.parent = mainOutput;
              }
          }
      }
  }

  /**
   * A class for the join aggregate transform nodes.
   */
  class JoinAggregateTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          super(parent);
          this.transform = transform;
      }
      clone() {
          return new JoinAggregateTransformNode(null, duplicate(this.transform));
      }
      addDimensions(fields) {
          this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);
      }
      dependentFields() {
          const out = new Set();
          if (this.transform.groupby) {
              this.transform.groupby.forEach(out.add, out);
          }
          this.transform.joinaggregate
              .map(w => w.field)
              .filter(f => f !== undefined)
              .forEach(out.add, out);
          return out;
      }
      producedFields() {
          return new Set(this.transform.joinaggregate.map(this.getDefaultName));
      }
      getDefaultName(joinAggregateFieldDef) {
          var _a;
          return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);
      }
      hash() {
          return `JoinAggregateTransform ${hash(this.transform)}`;
      }
      assemble() {
          const fields = [];
          const ops = [];
          const as = [];
          for (const joinaggregate of this.transform.joinaggregate) {
              ops.push(joinaggregate.op);
              as.push(this.getDefaultName(joinaggregate));
              fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);
          }
          const groupby = this.transform.groupby;
          return Object.assign({ type: 'joinaggregate', as,
              ops,
              fields }, (groupby !== undefined ? { groupby } : {}));
      }
  }

  function getStackByFields(model) {
      return model.stack.stackBy.reduce((fields, by) => {
          const fieldDef = by.fieldDef;
          const _field = vgField(fieldDef);
          if (_field) {
              fields.push(_field);
          }
          return fields;
      }, []);
  }
  function isValidAsArray(as) {
      return isArray(as) && as.every(s => isString$1(s)) && as.length > 1;
  }
  class StackNode extends DataFlowNode {
      constructor(parent, stack) {
          super(parent);
          this._stack = stack;
      }
      clone() {
          return new StackNode(null, duplicate(this._stack));
      }
      static makeFromTransform(parent, stackTransform) {
          const { stack, groupby, as, offset = 'zero' } = stackTransform;
          const sortFields = [];
          const sortOrder = [];
          if (stackTransform.sort !== undefined) {
              for (const sortField of stackTransform.sort) {
                  sortFields.push(sortField.field);
                  sortOrder.push(getFirstDefined(sortField.order, 'ascending'));
              }
          }
          const sort = {
              field: sortFields,
              order: sortOrder
          };
          let normalizedAs;
          if (isValidAsArray(as)) {
              normalizedAs = as;
          }
          else if (isString$1(as)) {
              normalizedAs = [as, as + '_end'];
          }
          else {
              normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];
          }
          return new StackNode(parent, {
              stackField: stack,
              groupby,
              offset,
              sort,
              facetby: [],
              as: normalizedAs
          });
      }
      static makeFromEncoding(parent, model) {
          const stackProperties = model.stack;
          const { encoding } = model;
          if (!stackProperties) {
              return null;
          }
          const { groupbyChannel, fieldChannel, offset, impute } = stackProperties;
          let dimensionFieldDef;
          if (groupbyChannel) {
              const cDef = encoding[groupbyChannel];
              dimensionFieldDef = getFieldDef(cDef); // Fair to cast as groupByChannel is always either x or y
          }
          const stackby = getStackByFields(model);
          const orderDef = model.encoding.order;
          let sort;
          if (isArray(orderDef) || isFieldDef(orderDef)) {
              sort = sortParams(orderDef);
          }
          else {
              // default = descending by stackFields
              // FIXME is the default here correct for binned fields?
              sort = stackby.reduce((s, field) => {
                  s.field.push(field);
                  s.order.push(fieldChannel === 'y' ? 'descending' : 'ascending');
                  return s;
              }, { field: [], order: [] });
          }
          return new StackNode(parent, {
              dimensionFieldDef,
              stackField: model.vgField(fieldChannel),
              facetby: [],
              stackby,
              sort,
              offset,
              impute,
              as: [
                  model.vgField(fieldChannel, { suffix: 'start', forAs: true }),
                  model.vgField(fieldChannel, { suffix: 'end', forAs: true })
              ]
          });
      }
      get stack() {
          return this._stack;
      }
      addDimensions(fields) {
          this._stack.facetby.push(...fields);
      }
      dependentFields() {
          const out = new Set();
          out.add(this._stack.stackField);
          this.getGroupbyFields().forEach(out.add, out);
          this._stack.facetby.forEach(out.add, out);
          this._stack.sort.field.forEach(out.add, out);
          return out;
      }
      producedFields() {
          return new Set(this._stack.as);
      }
      hash() {
          return `Stack ${hash(this._stack)}`;
      }
      getGroupbyFields() {
          const { dimensionFieldDef, impute, groupby } = this._stack;
          if (dimensionFieldDef) {
              if (dimensionFieldDef.bin) {
                  if (impute) {
                      // For binned group by field with impute, we calculate bin_mid
                      // as we cannot impute two fields simultaneously
                      return [vgField(dimensionFieldDef, { binSuffix: 'mid' })];
                  }
                  return [
                      // For binned group by field without impute, we need both bin (start) and bin_end
                      vgField(dimensionFieldDef, {}),
                      vgField(dimensionFieldDef, { binSuffix: 'end' })
                  ];
              }
              return [vgField(dimensionFieldDef)];
          }
          return groupby !== null && groupby !== void 0 ? groupby : [];
      }
      assemble() {
          const transform = [];
          const { facetby, dimensionFieldDef, stackField: field, stackby, sort, offset, impute, as } = this._stack;
          // Impute
          if (impute && dimensionFieldDef) {
              const { band = 0.5, bin } = dimensionFieldDef;
              if (bin) {
                  // As we can only impute one field at a time, we need to calculate
                  // mid point for a binned field
                  transform.push({
                      type: 'formula',
                      expr: `${band}*` +
                          vgField(dimensionFieldDef, { expr: 'datum' }) +
                          `+${1 - band}*` +
                          vgField(dimensionFieldDef, { expr: 'datum', binSuffix: 'end' }),
                      as: vgField(dimensionFieldDef, { binSuffix: 'mid', forAs: true })
                  });
              }
              transform.push({
                  type: 'impute',
                  field,
                  groupby: [...stackby, ...facetby],
                  key: vgField(dimensionFieldDef, { binSuffix: 'mid' }),
                  method: 'value',
                  value: 0
              });
          }
          // Stack
          transform.push({
              type: 'stack',
              groupby: [...this.getGroupbyFields(), ...facetby],
              field,
              sort,
              as,
              offset
          });
          return transform;
      }
  }

  /**
   * A class for the window transform nodes
   */
  class WindowTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          super(parent);
          this.transform = transform;
      }
      clone() {
          return new WindowTransformNode(null, duplicate(this.transform));
      }
      addDimensions(fields) {
          this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);
      }
      dependentFields() {
          var _a, _b;
          const out = new Set();
          ((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).forEach(out.add, out);
          ((_b = this.transform.sort) !== null && _b !== void 0 ? _b : []).forEach(m => out.add(m.field));
          this.transform.window
              .map(w => w.field)
              .filter(f => f !== undefined)
              .forEach(out.add, out);
          return out;
      }
      producedFields() {
          return new Set(this.transform.window.map(this.getDefaultName));
      }
      getDefaultName(windowFieldDef) {
          var _a;
          return (_a = windowFieldDef.as) !== null && _a !== void 0 ? _a : vgField(windowFieldDef);
      }
      hash() {
          return `WindowTransform ${hash(this.transform)}`;
      }
      assemble() {
          var _a;
          const fields = [];
          const ops = [];
          const as = [];
          const params = [];
          for (const window of this.transform.window) {
              ops.push(window.op);
              as.push(this.getDefaultName(window));
              params.push(window.param === undefined ? null : window.param);
              fields.push(window.field === undefined ? null : window.field);
          }
          const frame = this.transform.frame;
          const groupby = this.transform.groupby;
          if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {
              // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate
              return Object.assign({ type: 'joinaggregate', as, ops: ops, fields }, (groupby !== undefined ? { groupby } : {}));
          }
          const sortFields = [];
          const sortOrder = [];
          if (this.transform.sort !== undefined) {
              for (const sortField of this.transform.sort) {
                  sortFields.push(sortField.field);
                  sortOrder.push((_a = sortField.order) !== null && _a !== void 0 ? _a : 'ascending');
              }
          }
          const sort = {
              field: sortFields,
              order: sortOrder
          };
          const ignorePeers = this.transform.ignorePeers;
          return Object.assign(Object.assign(Object.assign({ type: 'window', params,
              as,
              ops,
              fields,
              sort }, (ignorePeers !== undefined ? { ignorePeers } : {})), (groupby !== undefined ? { groupby } : {})), (frame !== undefined ? { frame } : {}));
      }
  }

  /**
   * Clones the subtree and ignores output nodes except for the leaves, which are renamed.
   */
  function cloneSubtree(facet) {
      function clone(node) {
          if (!(node instanceof FacetNode)) {
              const copy = node.clone();
              if (copy instanceof OutputNode) {
                  const newName = FACET_SCALE_PREFIX + copy.getSource();
                  copy.setSource(newName);
                  facet.model.component.data.outputNodes[newName] = copy;
              }
              else if (copy instanceof AggregateNode ||
                  copy instanceof StackNode ||
                  copy instanceof WindowTransformNode ||
                  copy instanceof JoinAggregateTransformNode) {
                  copy.addDimensions(facet.fields);
              }
              for (const n of node.children.flatMap(clone)) {
                  n.parent = copy;
              }
              return [copy];
          }
          return node.children.flatMap(clone);
      }
      return clone;
  }
  /**
   * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.
   * After moving down the facet node, make a copy of the subtree and make it a child of the main output.
   */
  function moveFacetDown(node) {
      if (node instanceof FacetNode) {
          if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {
              // move down until we hit a fork or output node
              const child = node.children[0];
              if (child instanceof AggregateNode ||
                  child instanceof StackNode ||
                  child instanceof WindowTransformNode ||
                  child instanceof JoinAggregateTransformNode) {
                  child.addDimensions(node.fields);
              }
              child.swapWithParent();
              moveFacetDown(node);
          }
          else {
              // move main to facet
              const facetMain = node.model.component.data.main;
              moveMainDownToFacet(facetMain);
              // replicate the subtree and place it before the facet's main node
              const cloner = cloneSubtree(node);
              const copy = node.children.map(cloner).flat();
              for (const c of copy) {
                  c.parent = facetMain;
              }
          }
      }
      else {
          node.children.map(moveFacetDown);
      }
  }
  function moveMainDownToFacet(node) {
      if (node instanceof OutputNode && node.type === DataSourceType.Main) {
          if (node.numChildren() === 1) {
              const child = node.children[0];
              if (!(child instanceof FacetNode)) {
                  child.swapWithParent();
                  moveMainDownToFacet(node);
              }
          }
      }
  }

  const FACET_SCALE_PREFIX = 'scale_';
  const MAX_OPTIMIZATION_RUNS = 5;
  /**
   * Iterates over a dataflow graph and checks whether all links are consistent.
   */
  function checkLinks(nodes) {
      for (const node of nodes) {
          for (const child of node.children) {
              if (child.parent !== node) {
                  // log.error('Dataflow graph is inconsistent.', node, child);
                  return false;
              }
          }
          if (!checkLinks(node.children)) {
              return false;
          }
      }
      return true;
  }
  /**
   * Run the specified optimizer on the provided nodes.
   *
   * @param optimizer The optimizer instance to run.
   * @param nodes A set of nodes to optimize.
   */
  function runOptimizer(optimizer, nodes) {
      let modified = false;
      for (const node of nodes) {
          modified = optimizer.optimize(node) || modified;
      }
      return modified;
  }
  function optimizationDataflowHelper(dataComponent, model, firstPass) {
      let roots = dataComponent.sources;
      let modified = false;
      modified = runOptimizer(new RemoveUnnecessaryOutputNodes(), roots) || modified;
      modified = runOptimizer(new RemoveUnnecessaryIdentifierNodes(model), roots) || modified;
      // remove source nodes that don't have any children because they also don't have output nodes
      roots = roots.filter(r => r.numChildren() > 0);
      modified = runOptimizer(new RemoveUnusedSubtrees(), roots) || modified;
      roots = roots.filter(r => r.numChildren() > 0);
      if (!firstPass) {
          // Only run these optimizations after the optimizer has moved down the facet node.
          // With this change, we can be more aggressive in the optimizations.
          modified = runOptimizer(new MoveParseUp(), roots) || modified;
          modified = runOptimizer(new MergeBins(model), roots) || modified;
          modified = runOptimizer(new RemoveDuplicateTimeUnits(), roots) || modified;
          modified = runOptimizer(new MergeParse(), roots) || modified;
          modified = runOptimizer(new MergeAggregates(), roots) || modified;
          modified = runOptimizer(new MergeTimeUnits(), roots) || modified;
          modified = runOptimizer(new MergeIdenticalNodes(), roots) || modified;
          modified = runOptimizer(new MergeOutputs(), roots) || modified;
      }
      dataComponent.sources = roots;
      return modified;
  }
  /**
   * Optimizes the dataflow of the passed in data component.
   */
  function optimizeDataflow(data, model) {
      // check before optimizations
      checkLinks(data.sources);
      let firstPassCounter = 0;
      let secondPassCounter = 0;
      for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
          if (!optimizationDataflowHelper(data, model, true)) {
              break;
          }
          firstPassCounter++;
      }
      // move facets down and make a copy of the subtree so that we can have scales at the top level
      data.sources.map(moveFacetDown);
      for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
          if (!optimizationDataflowHelper(data, model, false)) {
              break;
          }
          secondPassCounter++;
      }
      // check after optimizations
      checkLinks(data.sources);
      if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {
          warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);
      }
  }

  /**
   * A class that behaves like a SignalRef but lazily generates the signal.
   * The provided generator function should use `Model.getSignalName` to use the correct signal name.
   */
  class SignalRefWrapper {
      constructor(exprGenerator) {
          Object.defineProperty(this, 'signal', {
              enumerable: true,
              get: exprGenerator
          });
      }
      static fromName(rename, signalName) {
          return new SignalRefWrapper(() => rename(signalName));
      }
  }

  var __rest$p = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function parseScaleDomain(model) {
      if (isUnitModel(model)) {
          parseUnitScaleDomain(model);
      }
      else {
          parseNonUnitScaleDomain(model);
      }
  }
  function parseUnitScaleDomain(model) {
      const localScaleComponents = model.component.scales;
      for (const channel of keys(localScaleComponents)) {
          const domains = parseDomainForChannel(model, channel);
          const localScaleCmpt = localScaleComponents[channel];
          localScaleCmpt.setWithExplicit('domains', domains);
          parseSelectionDomain(model, channel);
          if (model.component.data.isFaceted) {
              // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not
              let facetParent = model;
              while (!isFacetModel(facetParent) && facetParent.parent) {
                  facetParent = facetParent.parent;
              }
              const resolve = facetParent.component.resolve.scale[channel];
              if (resolve === 'shared') {
                  for (const domain of domains.value) {
                      // Replace the scale domain with data output from a cloned subtree after the facet.
                      if (isDataRefDomain(domain)) {
                          // use data from cloned subtree (which is the same as data but with a prefix added once)
                          domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');
                      }
                  }
              }
          }
      }
  }
  function parseNonUnitScaleDomain(model) {
      for (const child of model.children) {
          parseScaleDomain(child);
      }
      const localScaleComponents = model.component.scales;
      for (const channel of keys(localScaleComponents)) {
          let domains;
          let selectionExtent = null;
          for (const child of model.children) {
              const childComponent = child.component.scales[channel];
              if (childComponent) {
                  if (domains === undefined) {
                      domains = childComponent.getWithExplicit('domains');
                  }
                  else {
                      domains = mergeValuesWithExplicit(domains, childComponent.getWithExplicit('domains'), 'domains', 'scale', domainsTieBreaker);
                  }
                  const se = childComponent.get('selectionExtent');
                  if (selectionExtent && se && selectionExtent.selection !== se.selection) {
                      warn(NEEDS_SAME_SELECTION);
                  }
                  selectionExtent = se;
              }
          }
          localScaleComponents[channel].setWithExplicit('domains', domains);
          if (selectionExtent) {
              localScaleComponents[channel].set('selectionExtent', selectionExtent, true);
          }
      }
  }
  /**
   * Remove unaggregated domain if it is not applicable
   * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.
   */
  function normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {
      if (domain === 'unaggregated') {
          const { valid, reason } = canUseUnaggregatedDomain(fieldDef, scaleType);
          if (!valid) {
              warn(reason);
              return undefined;
          }
      }
      else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {
          // Apply config if domain is not specified.
          const { valid } = canUseUnaggregatedDomain(fieldDef, scaleType);
          if (valid) {
              return 'unaggregated';
          }
      }
      return domain;
  }
  function parseDomainForChannel(model, channel) {
      const scaleType = model.getScaleComponent(channel).get('type');
      const { encoding } = model;
      const domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.typedFieldDef(channel), scaleType, model.config.scale);
      if (domain !== model.scaleDomain(channel)) {
          model.specifiedScales[channel] = Object.assign(Object.assign({}, model.specifiedScales[channel]), { domain });
      }
      // If channel is either X or Y then union them with X2 & Y2 if they exist
      if (channel === 'x' && getFieldOrDatumDef(encoding.x2)) {
          if (getFieldOrDatumDef(encoding.x)) {
              return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'x'), parseSingleChannelDomain(scaleType, domain, model, 'x2'), 'domain', 'scale', domainsTieBreaker);
          }
          else {
              return parseSingleChannelDomain(scaleType, domain, model, 'x2');
          }
      }
      else if (channel === 'y' && getFieldOrDatumDef(encoding.y2)) {
          if (getFieldOrDatumDef(encoding.y)) {
              return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'y'), parseSingleChannelDomain(scaleType, domain, model, 'y2'), 'domain', 'scale', domainsTieBreaker);
          }
          else {
              return parseSingleChannelDomain(scaleType, domain, model, 'y2');
          }
      }
      return parseSingleChannelDomain(scaleType, domain, model, channel);
  }
  function mapDomainToDataSignal(domain, type, timeUnit) {
      return domain.map(v => {
          const data = valueExpr(v, { timeUnit, type });
          return { signal: `{data: ${data}}` };
      });
  }
  function convertDomainIfItIsDateTime(domain, type, timeUnit) {
      var _a;
      // explicit value
      const normalizedTimeUnit = (_a = normalizeTimeUnit(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
      if (type === 'temporal' || normalizedTimeUnit) {
          return mapDomainToDataSignal(domain, type, normalizedTimeUnit);
      }
      return [domain]; // Date time won't make sense
  }
  function parseSingleChannelDomain(scaleType, domain, model, channel) {
      const { encoding } = model;
      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
      const { type } = fieldOrDatumDef;
      const timeUnit = fieldOrDatumDef['timeUnit'];
      if (isDomainUnionWith(domain)) {
          const defaultDomain = parseSingleChannelDomain(scaleType, undefined, model, channel);
          const unionWith = convertDomainIfItIsDateTime(domain.unionWith, type, timeUnit);
          return makeExplicit([...defaultDomain.value, ...unionWith]);
      }
      else if (isSignalRef(domain)) {
          return makeExplicit([domain]);
      }
      else if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) {
          return makeExplicit(convertDomainIfItIsDateTime(domain, type, timeUnit));
      }
      const stack = model.stack;
      if (stack && channel === stack.fieldChannel) {
          if (stack.offset === 'normalize') {
              return makeImplicit([[0, 1]]);
          }
          const data = model.requestDataName(DataSourceType.Main);
          return makeImplicit([
              {
                  data,
                  field: model.vgField(channel, { suffix: 'start' })
              },
              {
                  data,
                  field: model.vgField(channel, { suffix: 'end' })
              }
          ]);
      }
      const sort = isScaleChannel(channel) && isFieldDef(fieldOrDatumDef) ? domainSort(model, channel, scaleType) : undefined;
      if (isDatumDef(fieldOrDatumDef)) {
          const d = convertDomainIfItIsDateTime([fieldOrDatumDef.datum], type, timeUnit);
          return makeImplicit(d);
      }
      const fieldDef = fieldOrDatumDef; // now we can be sure it's a fieldDef
      if (domain === 'unaggregated') {
          const data = model.requestDataName(DataSourceType.Main);
          const { field } = fieldOrDatumDef;
          return makeImplicit([
              {
                  data,
                  field: vgField({ field, aggregate: 'min' })
              },
              {
                  data,
                  field: vgField({ field, aggregate: 'max' })
              }
          ]);
      }
      else if (isBinning(fieldDef.bin)) {
          if (hasDiscreteDomain(scaleType)) {
              if (scaleType === 'bin-ordinal') {
                  // we can omit the domain as it is inferred from the `bins` property
                  return makeImplicit([]);
              }
              // ordinal bin scale takes domain from bin_range, ordered by bin start
              // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).
              return makeImplicit([
                  {
                      // If sort by aggregation of a specified sort field, we need to use RAW table,
                      // so we can aggregate values for the scale independently from the main aggregation.
                      data: isBoolean$1(sort)
                          ? model.requestDataName(DataSourceType.Main)
                          : model.requestDataName(DataSourceType.Raw),
                      // Use range if we added it and the scale does not support computing a range as a signal.
                      field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? { binSuffix: 'range' } : {}),
                      // we have to use a sort object if sort = true to make the sort correct by bin start
                      sort: sort === true || !isObject(sort)
                          ? {
                              field: model.vgField(channel, {}),
                              op: 'min' // min or max doesn't matter since we sort by the start of the bin range
                          }
                          : sort
                  }
              ]);
          }
          else {
              // continuous scales
              const { bin } = fieldDef;
              if (isBinning(bin)) {
                  const binSignal = getBinSignalName(model, fieldDef.field, bin);
                  return makeImplicit([
                      new SignalRefWrapper(() => {
                          const signal = model.getSignalName(binSignal);
                          return `[${signal}.start, ${signal}.stop]`;
                      })
                  ]);
              }
              else {
                  return makeImplicit([
                      {
                          data: model.requestDataName(DataSourceType.Main),
                          field: model.vgField(channel, {})
                      }
                  ]);
              }
          }
      }
      else if (fieldDef.timeUnit &&
          contains$1(['time', 'utc'], scaleType) &&
          hasBand(channel, fieldDef, isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined, model.stack, model.markDef, model.config)) {
          const data = model.requestDataName(DataSourceType.Main);
          return makeImplicit([
              {
                  data,
                  field: model.vgField(channel)
              },
              {
                  data,
                  field: model.vgField(channel, { suffix: 'end' })
              }
          ]);
      }
      else if (sort) {
          return makeImplicit([
              {
                  // If sort by aggregation of a specified sort field, we need to use RAW table,
                  // so we can aggregate values for the scale independently from the main aggregation.
                  data: isBoolean$1(sort)
                      ? model.requestDataName(DataSourceType.Main)
                      : model.requestDataName(DataSourceType.Raw),
                  field: model.vgField(channel),
                  sort: sort
              }
          ]);
      }
      else {
          return makeImplicit([
              {
                  data: model.requestDataName(DataSourceType.Main),
                  field: model.vgField(channel)
              }
          ]);
      }
  }
  function normalizeSortField(sort, isStackedMeasure) {
      const { op, field, order } = sort;
      return Object.assign(Object.assign({ 
          // Apply default op
          op: op !== null && op !== void 0 ? op : (isStackedMeasure ? 'sum' : DEFAULT_SORT_OP) }, (field ? { field: replacePathInField(field) } : {})), (order ? { order } : {}));
  }
  function parseSelectionDomain(model, channel) {
      var _a;
      const scale = model.component.scales[channel];
      const spec = model.specifiedScales[channel].domain;
      const bin = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.bin;
      const domain = isSelectionDomain(spec) && spec;
      const extent = isBinParams(bin) && isSelectionExtent(bin.extent) && bin.extent;
      if (domain || extent) {
          // As scale parsing occurs before selection parsing, we cannot set
          // domainRaw directly. So instead, we store the selectionExtent on
          // the scale component, and then add domainRaw during scale assembly.
          scale.set('selectionExtent', domain !== null && domain !== void 0 ? domain : extent, true);
      }
  }
  function domainSort(model, channel, scaleType) {
      if (!hasDiscreteDomain(scaleType)) {
          return undefined;
      }
      // save to cast as the only exception is the geojson type for shape, which would not generate a scale
      const fieldDef = model.fieldDef(channel);
      const sort = fieldDef.sort;
      // if the sort is specified with array, use the derived sort index field
      if (isSortArray(sort)) {
          return {
              op: 'min',
              field: sortArrayIndexField(fieldDef, channel),
              order: 'ascending'
          };
      }
      const { stack } = model;
      const stackDimensions = stack
          ? [...(stack.groupbyField ? [stack.groupbyField] : []), ...stack.stackBy.map(s => s.fieldDef.field)]
          : undefined;
      // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)
      if (isSortField(sort)) {
          const isStackedMeasure = stack && !contains$1(stackDimensions, sort.field);
          return normalizeSortField(sort, isStackedMeasure);
      }
      else if (isSortByEncoding(sort)) {
          const { encoding, order } = sort;
          const fieldDefToSortBy = model.fieldDef(encoding);
          const { aggregate, field } = fieldDefToSortBy;
          const isStackedMeasure = stack && !contains$1(stackDimensions, field);
          if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
              return normalizeSortField({
                  field: vgField(fieldDefToSortBy),
                  order
              }, isStackedMeasure);
          }
          else if (isAggregateOp(aggregate) || !aggregate) {
              return normalizeSortField({
                  op: aggregate,
                  field,
                  order
              }, isStackedMeasure);
          }
      }
      else if (sort === 'descending') {
          return {
              op: 'min',
              field: model.vgField(channel),
              order: 'descending'
          };
      }
      else if (contains$1(['ascending', undefined /* default =ascending*/], sort)) {
          return true;
      }
      // sort == null
      return undefined;
  }
  /**
   * Determine if a scale can use unaggregated domain.
   * @return {Boolean} Returns true if all of the following conditions apply:
   * 1. `scale.domain` is `unaggregated`
   * 2. Aggregation function is not `count` or `sum`
   * 3. The scale is quantitative or time scale.
   */
  function canUseUnaggregatedDomain(fieldDef, scaleType) {
      const { aggregate, type } = fieldDef;
      if (!aggregate) {
          return {
              valid: false,
              reason: unaggregateDomainHasNoEffectForRawField(fieldDef)
          };
      }
      if (isString$1(aggregate) && !SHARED_DOMAIN_OP_INDEX[aggregate]) {
          return {
              valid: false,
              reason: unaggregateDomainWithNonSharedDomainOp(aggregate)
          };
      }
      if (type === 'quantitative') {
          if (scaleType === 'log') {
              return {
                  valid: false,
                  reason: unaggregatedDomainWithLogScale(fieldDef)
              };
          }
      }
      return { valid: true };
  }
  /**
   * Tie breaker for mergeValuesWithExplicit for domains. We concat the specified values.
   */
  function domainsTieBreaker(v1, v2, property, propertyOf) {
      if (v1.explicit && v2.explicit) {
          warn(mergeConflictingDomainProperty(property, propertyOf, v1.value, v2.value));
      }
      // If equal score, concat the domains so that we union them later.
      return { explicit: v1.explicit, value: [...v1.value, ...v2.value] };
  }
  /**
   * Converts an array of domains to a single Vega scale domain.
   */
  function mergeDomains(domains) {
      const uniqueDomains = unique(domains.map(domain => {
          // ignore sort property when computing the unique domains
          if (isDataRefDomain(domain)) {
              const domainWithoutSort = __rest$p(domain, ["sort"]);
              return domainWithoutSort;
          }
          return domain;
      }), hash);
      const sorts = unique(domains
          .map(d => {
          if (isDataRefDomain(d)) {
              const s = d.sort;
              if (s !== undefined && !isBoolean$1(s)) {
                  if ('op' in s && s.op === 'count') {
                      // let's make sure that if op is count, we don't use a field
                      delete s.field;
                  }
                  if (s.order === 'ascending') {
                      // drop order: ascending as it is the default
                      delete s.order;
                  }
              }
              return s;
          }
          return undefined;
      })
          .filter(s => s !== undefined), hash);
      if (uniqueDomains.length === 0) {
          return undefined;
      }
      else if (uniqueDomains.length === 1) {
          const domain = domains[0];
          if (isDataRefDomain(domain) && sorts.length > 0) {
              let sort = sorts[0];
              if (sorts.length > 1) {
                  warn(MORE_THAN_ONE_SORT);
                  sort = true;
              }
              else {
                  // Simplify domain sort by removing field and op when the field is the same as the domain field.
                  if (isObject(sort) && 'field' in sort) {
                      const sortField = sort.field;
                      if (domain.field === sortField) {
                          sort = sort.order ? { order: sort.order } : true;
                      }
                  }
              }
              return Object.assign(Object.assign({}, domain), { sort });
          }
          return domain;
      }
      // only keep sort properties that work with unioned domains
      const unionDomainSorts = unique(sorts.map(s => {
          if (isBoolean$1(s) || !('op' in s) || (isString$1(s.op) && s.op in MULTIDOMAIN_SORT_OP_INDEX)) {
              return s;
          }
          warn(domainSortDropped(s));
          return true;
      }), hash);
      let sort;
      if (unionDomainSorts.length === 1) {
          sort = unionDomainSorts[0];
      }
      else if (unionDomainSorts.length > 1) {
          warn(MORE_THAN_ONE_SORT);
          sort = true;
      }
      const allData = unique(domains.map(d => {
          if (isDataRefDomain(d)) {
              return d.data;
          }
          return null;
      }), x => x);
      if (allData.length === 1 && allData[0] !== null) {
          // create a union domain of different fields with a single data source
          const domain = Object.assign({ data: allData[0], fields: uniqueDomains.map(d => d.field) }, (sort ? { sort } : {}));
          return domain;
      }
      return Object.assign({ fields: uniqueDomains }, (sort ? { sort } : {}));
  }
  /**
   * Return a field if a scale uses a single field.
   * Return `undefined` otherwise.
   */
  function getFieldFromDomain(domain) {
      if (isDataRefDomain(domain) && isString$1(domain.field)) {
          return domain.field;
      }
      else if (isDataRefUnionedDomain(domain)) {
          let field;
          for (const nonUnionDomain of domain.fields) {
              if (isDataRefDomain(nonUnionDomain) && isString$1(nonUnionDomain.field)) {
                  if (!field) {
                      field = nonUnionDomain.field;
                  }
                  else if (field !== nonUnionDomain.field) {
                      warn(FACETED_INDEPENDENT_DIFFERENT_SOURCES);
                      return field;
                  }
              }
          }
          warn(FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES);
          return field;
      }
      else if (isFieldRefUnionDomain(domain)) {
          warn(FACETED_INDEPENDENT_SAME_SOURCE);
          const field = domain.fields[0];
          return isString$1(field) ? field : undefined;
      }
      return undefined;
  }
  function assembleDomain(model, channel) {
      const scaleComponent = model.component.scales[channel];
      const domains = scaleComponent.get('domains').map((domain) => {
          // Correct references to data as the original domain's data was determined
          // in parseScale, which happens before parseData. Thus the original data
          // reference can be incorrect.
          if (isDataRefDomain(domain)) {
              domain.data = model.lookupDataSource(domain.data);
          }
          return domain;
      });
      // domains is an array that has to be merged into a single vega domain
      return mergeDomains(domains);
  }

  var __rest$q = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function assembleScales(model) {
      if (isLayerModel(model) || isConcatModel(model)) {
          // For concat and layer, include scales of children too
          return model.children.reduce((scales, child) => {
              return scales.concat(assembleScales(child));
          }, assembleScalesForModel(model));
      }
      else {
          // For facet, child scales would not be included in the parent's scope.
          // For unit, there is no child.
          return assembleScalesForModel(model);
      }
  }
  function assembleScalesForModel(model) {
      return keys(model.component.scales).reduce((scales, channel) => {
          const scaleComponent = model.component.scales[channel];
          if (scaleComponent.merged) {
              // Skipped merged scales
              return scales;
          }
          const scale = scaleComponent.combine();
          const { name, type, selectionExtent, domains: _d, range: _r, reverse } = scale, otherScaleProps = __rest$q(scale, ["name", "type", "selectionExtent", "domains", "range", "reverse"]);
          const range = assembleScaleRange(scale.range, name, channel, model);
          let domainRaw;
          if (selectionExtent) {
              domainRaw = assembleSelectionScaleDomain(model, selectionExtent);
          }
          const domain = assembleDomain(model, channel);
          scales.push(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name,
              type }, (domain ? { domain } : {})), (domainRaw ? { domainRaw } : {})), { range }), (reverse !== undefined ? { reverse: reverse } : {})), otherScaleProps));
          return scales;
      }, []);
  }
  function assembleScaleRange(scaleRange, scaleName, channel, model) {
      // add signals to x/y range
      if (isXorY(channel)) {
          if (isVgRangeStep(scaleRange)) {
              // For width/height step, use a signal created in layout assemble instead of a constant step.
              return {
                  step: { signal: scaleName + '_step' }
              };
          }
      }
      else if (isObject(scaleRange) && isDataRefDomain(scaleRange)) {
          return Object.assign(Object.assign({}, scaleRange), { data: model.lookupDataSource(scaleRange.data) });
      }
      return scaleRange;
  }

  class ScaleComponent extends Split {
      constructor(name, typeWithExplicit) {
          super({}, // no initial explicit property
          { name } // name as initial implicit property
          );
          this.merged = false;
          this.setWithExplicit('type', typeWithExplicit);
      }
      /**
       * Whether the scale definitely includes zero in the domain
       */
      domainDefinitelyIncludesZero() {
          if (this.get('zero') !== false) {
              return true;
          }
          return some(this.get('domains'), d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);
      }
  }

  const RANGE_PROPERTIES = ['range', 'scheme'];
  function getSizeChannel$1(channel) {
      return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
  }
  function parseUnitScaleRange(model) {
      const localScaleComponents = model.component.scales;
      // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!
      for (const channel of SCALE_CHANNELS) {
          const localScaleCmpt = localScaleComponents[channel];
          if (!localScaleCmpt) {
              continue;
          }
          const rangeWithExplicit = parseRangeForChannel(channel, model);
          localScaleCmpt.setWithExplicit('range', rangeWithExplicit);
      }
  }
  function getBinStepSignal(model, channel) {
      const fieldDef = model.fieldDef(channel);
      if (fieldDef && fieldDef.bin && isBinning(fieldDef.bin)) {
          const binSignal = getBinSignalName(model, fieldDef.field, fieldDef.bin);
          // TODO: extract this to be range step signal
          const sizeType = getSizeChannel$1(channel);
          const sizeSignal = model.getName(sizeType);
          return new SignalRefWrapper(() => {
              const updatedName = model.getSignalName(binSignal);
              const binCount = `(${updatedName}.stop - ${updatedName}.start) / ${updatedName}.step`;
              return `${model.getSignalName(sizeSignal)} / (${binCount})`;
          });
      }
      return undefined;
  }
  /**
   * Return mixins that includes one of the Vega range types (explicit range, range.step, range.scheme).
   */
  function parseRangeForChannel(channel, model) {
      const specifiedScale = model.specifiedScales[channel];
      const { size } = model;
      const mergedScaleCmpt = model.getScaleComponent(channel);
      const scaleType = mergedScaleCmpt.get('type');
      // Check if any of the range properties is specified.
      // If so, check if it is compatible and make sure that we only output one of the properties
      for (const property of RANGE_PROPERTIES) {
          if (specifiedScale[property] !== undefined) {
              const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);
              const channelIncompatability = channelScalePropertyIncompatability(channel, property);
              if (!supportedByScaleType) {
                  warn(scalePropertyNotWorkWithScaleType(scaleType, property, channel));
              }
              else if (channelIncompatability) {
                  // channel
                  warn(channelIncompatability);
              }
              else {
                  switch (property) {
                      case 'range': {
                          const range = specifiedScale.range;
                          if (isArray(range)) {
                              if (isXorY(channel)) {
                                  return makeExplicit(range.map(v => {
                                      if (v === 'width' || v === 'height') {
                                          // get signal for width/height
                                          // Just like default range logic below, we use SignalRefWrapper to account for potential merges and renames.
                                          const sizeSignal = model.getName(v);
                                          const getSignalName = model.getSignalName.bind(model);
                                          return SignalRefWrapper.fromName(getSignalName, sizeSignal);
                                      }
                                      return v;
                                  }));
                              }
                          }
                          else if (isObject(range)) {
                              return makeExplicit({
                                  data: model.requestDataName(DataSourceType.Main),
                                  field: range.field,
                                  sort: { op: 'min', field: model.vgField(channel) }
                              });
                          }
                          return makeExplicit(range);
                      }
                      case 'scheme':
                          return makeExplicit(parseScheme(specifiedScale[property]));
                  }
              }
          }
      }
      if (channel === X || channel === Y) {
          const sizeChannel = channel === X ? 'width' : 'height';
          const sizeValue = size[sizeChannel];
          if (isStep(sizeValue)) {
              if (hasDiscreteDomain(scaleType)) {
                  return makeExplicit({ step: sizeValue.step });
              }
              else {
                  warn(stepDropped(sizeChannel));
              }
          }
      }
      const { rangeMin, rangeMax } = specifiedScale;
      const d = defaultRange(channel, model);
      if ((rangeMin !== undefined || rangeMax !== undefined) &&
          // it's ok to check just rangeMin's compatibility since rangeMin/rangeMax are the same
          scaleTypeSupportProperty(scaleType, 'rangeMin') &&
          isArray(d) &&
          d.length === 2) {
          return makeExplicit([rangeMin !== null && rangeMin !== void 0 ? rangeMin : d[0], rangeMax !== null && rangeMax !== void 0 ? rangeMax : d[1]]);
      }
      return makeImplicit(d);
  }
  function parseScheme(scheme) {
      if (isExtendedScheme(scheme)) {
          return Object.assign({ scheme: scheme.name }, omit(scheme, ['name']));
      }
      return { scheme: scheme };
  }
  function defaultRange(channel, model) {
      const { size, config, mark, encoding } = model;
      const getSignalName = model.getSignalName.bind(model);
      const { type } = getFieldOrDatumDef(encoding[channel]);
      const mergedScaleCmpt = model.getScaleComponent(channel);
      const scaleType = mergedScaleCmpt.get('type');
      const { domain, domainMid } = model.specifiedScales[channel];
      switch (channel) {
          case X:
          case Y: {
              // If there is no explicit width/height for discrete x/y scales
              if (contains$1(['point', 'band'], scaleType)) {
                  if (channel === X && !size.width) {
                      const w = getViewConfigDiscreteSize(config.view, 'width');
                      if (isStep(w)) {
                          return w;
                      }
                  }
                  else if (channel === Y && !size.height) {
                      const h = getViewConfigDiscreteSize(config.view, 'height');
                      if (isStep(h)) {
                          return h;
                      }
                  }
              }
              // If step is null, use zero to width or height.
              // Note that we use SignalRefWrapper to account for potential merges and renames.
              const sizeType = getSizeChannel$1(channel);
              const sizeSignal = model.getName(sizeType);
              if (channel === Y && hasContinuousDomain(scaleType)) {
                  // For y continuous scale, we have to start from the height as the bottom part has the max value.
                  return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];
              }
              else {
                  return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];
              }
          }
          case SIZE: {
              // TODO: support custom rangeMin, rangeMax
              const zero = model.component.scales[channel].get('zero');
              const rangeMin = sizeRangeMin(mark, zero, config);
              const rangeMax = sizeRangeMax(mark, size, model, config);
              if (isContinuousToDiscrete(scaleType)) {
                  return interpolateRange(rangeMin, rangeMax, defaultContinuousToDiscreteCount(scaleType, config, domain, channel));
              }
              else {
                  return [rangeMin, rangeMax];
              }
          }
          case THETA:
              return [0, Math.PI * 2];
          case ANGLE:
              // TODO: add config.scale.min/maxAngleDegree (for point and text) and config.scale.min/maxAngleRadian (for arc) once we add arc marks.
              // (It's weird to add just config.scale.min/maxAngleDegree for now)
              return [0, 360];
          case RADIUS: {
              // max radius = half od min(width,height)
              return [
                  0,
                  new SignalRefWrapper(() => {
                      const w = model.getSignalName('width');
                      const h = model.getSignalName('height');
                      return `min(${w},${h})/2`;
                  })
              ];
          }
          case STROKEWIDTH:
              // TODO: support custom rangeMin, rangeMax
              return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];
          case STROKEDASH:
              return [
                  // TODO: add this to Vega's config.range?
                  [1, 0],
                  [4, 2],
                  [2, 1],
                  [1, 1],
                  [1, 2, 4, 2]
              ];
          case SHAPE:
              return 'symbol';
          case COLOR:
          case FILL:
          case STROKE:
              if (scaleType === 'ordinal') {
                  // Only nominal data uses ordinal scale by default
                  return type === 'nominal' ? 'category' : 'ordinal';
              }
              else {
                  if (domainMid !== undefined) {
                      return 'diverging';
                  }
                  else {
                      return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';
                  }
              }
          case OPACITY:
          case FILLOPACITY:
          case STROKEOPACITY:
              // TODO: support custom rangeMin, rangeMax
              return [config.scale.minOpacity, config.scale.maxOpacity];
      }
      /* istanbul ignore next: should never reach here */
      throw new Error(`Scale range undefined for channel ${channel}`);
  }
  function defaultContinuousToDiscreteCount(scaleType, config, domain, channel) {
      switch (scaleType) {
          case 'quantile':
              return config.scale.quantileCount;
          case 'quantize':
              return config.scale.quantizeCount;
          case 'threshold':
              if (domain !== undefined && isArray(domain)) {
                  return domain.length + 1;
              }
              else {
                  warn(domainRequiredForThresholdScale(channel));
                  // default threshold boundaries for threshold scale since domain has cardinality of 2
                  return 3;
              }
      }
  }
  /**
   * Returns the linear interpolation of the range according to the cardinality
   *
   * @param rangeMin start of the range
   * @param rangeMax end of the range
   * @param cardinality number of values in the output range
   */
  function interpolateRange(rangeMin, rangeMax, cardinality) {
      // always return a signal since it's better to compute the sequence in Vega later
      const f = () => {
          const rMax = signalOrStringValue(rangeMax);
          const rMin = signalOrStringValue(rangeMin);
          const step = `(${rMax} - ${rMin}) / (${cardinality} - 1)`;
          return `sequence(${rMin}, ${rMax} + ${step}, ${step})`;
      };
      if (isSignalRef(rangeMax)) {
          return new SignalRefWrapper(f);
      }
      else {
          return { signal: f() };
      }
  }
  function sizeRangeMin(mark, zero, config) {
      if (zero) {
          if (isSignalRef(zero)) {
              return { signal: `${zero.signal} ? 0 : ${sizeRangeMin(mark, false, config)}` };
          }
          else {
              return 0;
          }
      }
      switch (mark) {
          case 'bar':
          case 'tick':
              return config.scale.minBandSize;
          case 'line':
          case 'trail':
          case 'rule':
              return config.scale.minStrokeWidth;
          case 'text':
              return config.scale.minFontSize;
          case 'point':
          case 'square':
          case 'circle':
              return config.scale.minSize;
      }
      /* istanbul ignore next: should never reach here */
      // sizeRangeMin not implemented for the mark
      throw new Error(incompatibleChannel('size', mark));
  }
  const MAX_SIZE_RANGE_STEP_RATIO = 0.95;
  function sizeRangeMax(mark, size, model, config) {
      const xyStepSignals = {
          x: getBinStepSignal(model, 'x'),
          y: getBinStepSignal(model, 'y')
      };
      switch (mark) {
          case 'bar':
          case 'tick': {
              if (config.scale.maxBandSize !== undefined) {
                  return config.scale.maxBandSize;
              }
              const min = minXYStep(size, xyStepSignals, config.view);
              if (isNumber$1(min)) {
                  return min - 1;
              }
              else {
                  return new SignalRefWrapper(() => `${min.signal} - 1`);
              }
          }
          case 'line':
          case 'trail':
          case 'rule':
              return config.scale.maxStrokeWidth;
          case 'text':
              return config.scale.maxFontSize;
          case 'point':
          case 'square':
          case 'circle': {
              if (config.scale.maxSize) {
                  return config.scale.maxSize;
              }
              const pointStep = minXYStep(size, xyStepSignals, config.view);
              if (isNumber$1(pointStep)) {
                  return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);
              }
              else {
                  return new SignalRefWrapper(() => `pow(${MAX_SIZE_RANGE_STEP_RATIO} * ${pointStep.signal}, 2)`);
              }
          }
      }
      /* istanbul ignore next: should never reach here */
      // sizeRangeMax not implemented for the mark
      throw new Error(incompatibleChannel('size', mark));
  }
  /**
   * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.
   */
  function minXYStep(size, xyStepSignals, viewConfig) {
      const widthStep = isStep(size.width) ? size.width.step : getViewConfigDiscreteStep(viewConfig, 'width');
      const heightStep = isStep(size.height) ? size.height.step : getViewConfigDiscreteStep(viewConfig, 'height');
      if (xyStepSignals.x || xyStepSignals.y) {
          return new SignalRefWrapper(() => {
              const exprs = [
                  xyStepSignals.x ? xyStepSignals.x.signal : widthStep,
                  xyStepSignals.y ? xyStepSignals.y.signal : heightStep
              ];
              return `min(${exprs.join(', ')})`;
          });
      }
      return Math.min(widthStep, heightStep);
  }

  function parseScaleProperty(model, property) {
      if (isUnitModel(model)) {
          parseUnitScaleProperty(model, property);
      }
      else {
          parseNonUnitScaleProperty(model, property);
      }
  }
  function parseUnitScaleProperty(model, property) {
      const localScaleComponents = model.component.scales;
      const { config, encoding, markDef, specifiedScales } = model;
      for (const channel of keys(localScaleComponents)) {
          const specifiedScale = specifiedScales[channel];
          const localScaleCmpt = localScaleComponents[channel];
          const mergedScaleCmpt = model.getScaleComponent(channel);
          const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
          const specifiedValue = specifiedScale[property];
          const scaleType = mergedScaleCmpt.get('type');
          const scalePadding = mergedScaleCmpt.get('padding');
          const scalePaddingInner = mergedScaleCmpt.get('paddingInner');
          const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);
          const channelIncompatability = channelScalePropertyIncompatability(channel, property);
          if (specifiedValue !== undefined) {
              // If there is a specified value, check if it is compatible with scale type and channel
              if (!supportedByScaleType) {
                  warn(scalePropertyNotWorkWithScaleType(scaleType, property, channel));
              }
              else if (channelIncompatability) {
                  // channel
                  warn(channelIncompatability);
              }
          }
          if (supportedByScaleType && channelIncompatability === undefined) {
              if (specifiedValue !== undefined) {
                  const timeUnit = fieldOrDatumDef['timeUnit'];
                  const type = fieldOrDatumDef.type;
                  switch (property) {
                      // domainMax/Min to signal if the value is a datetime object
                      case 'domainMax':
                      case 'domainMin':
                          if (isDateTime(specifiedScale[property]) || type === 'temporal' || timeUnit) {
                              localScaleCmpt.set(property, { signal: valueExpr(specifiedScale[property], { type, timeUnit }) }, true);
                          }
                          else {
                              localScaleCmpt.set(property, specifiedScale[property], true);
                          }
                          break;
                      default:
                          localScaleCmpt.copyKeyFromObject(property, specifiedScale);
                  }
              }
              else {
                  const value = property in scaleRules
                      ? scaleRules[property]({
                          model,
                          channel,
                          fieldOrDatumDef,
                          scaleType,
                          scalePadding,
                          scalePaddingInner,
                          domain: specifiedScale.domain,
                          markDef,
                          config
                      })
                      : config.scale[property];
                  if (value !== undefined) {
                      localScaleCmpt.set(property, value, false);
                  }
              }
          }
      }
  }
  const scaleRules = {
      bins: ({ model, fieldOrDatumDef }) => (isFieldDef(fieldOrDatumDef) ? bins(model, fieldOrDatumDef) : undefined),
      interpolate: ({ channel, fieldOrDatumDef }) => interpolate(channel, fieldOrDatumDef.type),
      nice: ({ scaleType, channel, fieldOrDatumDef }) => nice(scaleType, channel, fieldOrDatumDef),
      padding: ({ channel, scaleType, fieldOrDatumDef, markDef, config }) => padding(channel, scaleType, config.scale, fieldOrDatumDef, markDef, config.bar),
      paddingInner: ({ scalePadding, channel, markDef, config }) => paddingInner(scalePadding, channel, markDef.type, config.scale),
      paddingOuter: ({ scalePadding, channel, scaleType, markDef, scalePaddingInner, config }) => paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, config.scale),
      reverse: ({ fieldOrDatumDef, scaleType, channel, config }) => {
          const sort = isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined;
          return reverse(scaleType, sort, channel, config.scale);
      },
      zero: ({ channel, fieldOrDatumDef, domain, markDef, scaleType }) => zero$3(channel, fieldOrDatumDef, domain, markDef, scaleType)
  };
  // This method is here rather than in range.ts to avoid circular dependency.
  function parseScaleRange(model) {
      if (isUnitModel(model)) {
          parseUnitScaleRange(model);
      }
      else {
          parseNonUnitScaleProperty(model, 'range');
      }
  }
  function parseNonUnitScaleProperty(model, property) {
      const localScaleComponents = model.component.scales;
      for (const child of model.children) {
          if (property === 'range') {
              parseScaleRange(child);
          }
          else {
              parseScaleProperty(child, property);
          }
      }
      for (const channel of keys(localScaleComponents)) {
          let valueWithExplicit;
          for (const child of model.children) {
              const childComponent = child.component.scales[channel];
              if (childComponent) {
                  const childValueWithExplicit = childComponent.getWithExplicit(property);
                  valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing((v1, v2) => {
                      switch (property) {
                          case 'range':
                              // For step, prefer larger step
                              if (v1.step && v2.step) {
                                  return v1.step - v2.step;
                              }
                              return 0;
                          // TODO: precedence rule for other properties
                      }
                      return 0;
                  }));
              }
          }
          localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);
      }
  }
  function bins(model, fieldDef) {
      const bin = fieldDef.bin;
      if (isBinning(bin)) {
          const binSignal = getBinSignalName(model, fieldDef.field, bin);
          return new SignalRefWrapper(() => {
              return model.getSignalName(binSignal);
          });
      }
      else if (isBinned(bin) && isBinParams(bin) && bin.step !== undefined) {
          // start and stop will be determined from the scale domain
          return {
              step: bin.step
          };
      }
      return undefined;
  }
  function interpolate(channel, type) {
      if (contains$1([COLOR, FILL, STROKE], channel) && type !== 'nominal') {
          return 'hcl';
      }
      return undefined;
  }
  function nice(scaleType, channel, fieldOrDatumDef) {
      var _a;
      if (((_a = getFieldDef(fieldOrDatumDef)) === null || _a === void 0 ? void 0 : _a.bin) || contains$1([ScaleType.TIME, ScaleType.UTC], scaleType)) {
          return undefined;
      }
      return channel in POSITION_SCALE_CHANNEL_INDEX ? true : undefined;
  }
  function padding(channel, scaleType, scaleConfig, fieldOrDatumDef, markDef, barConfig) {
      if (channel in POSITION_SCALE_CHANNEL_INDEX) {
          if (isContinuousToContinuous(scaleType)) {
              if (scaleConfig.continuousPadding !== undefined) {
                  return scaleConfig.continuousPadding;
              }
              const { type, orient } = markDef;
              if (type === 'bar' && !(isFieldDef(fieldOrDatumDef) && (fieldOrDatumDef.bin || fieldOrDatumDef.timeUnit))) {
                  if ((orient === 'vertical' && channel === 'x') || (orient === 'horizontal' && channel === 'y')) {
                      return barConfig.continuousBandSize;
                  }
              }
          }
          if (scaleType === ScaleType.POINT) {
              return scaleConfig.pointPadding;
          }
      }
      return undefined;
  }
  function paddingInner(paddingValue, channel, mark, scaleConfig) {
      if (paddingValue !== undefined) {
          // If user has already manually specified "padding", no need to add default paddingInner.
          return undefined;
      }
      if (channel in POSITION_SCALE_CHANNEL_INDEX) {
          // Padding is only set for X and Y by default.
          // Basically it doesn't make sense to add padding for color and size.
          // paddingOuter would only be called if it's a band scale, just return the default for bandScale.
          const { bandPaddingInner, barBandPaddingInner, rectBandPaddingInner } = scaleConfig;
          return getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);
      }
      return undefined;
  }
  function paddingOuter(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {
      if (paddingValue !== undefined) {
          // If user has already manually specified "padding", no need to add default paddingOuter.
          return undefined;
      }
      if (channel in POSITION_SCALE_CHANNEL_INDEX) {
          // Padding is only set for X and Y by default.
          // Basically it doesn't make sense to add padding for color and size.
          if (scaleType === ScaleType.BAND) {
              const { bandPaddingOuter } = scaleConfig;
              return getFirstDefined(bandPaddingOuter, 
              /* By default, paddingOuter is paddingInner / 2. The reason is that
                size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).
                and we want the width/height to be integer by default.
                Note that step (by default) and cardinality are integers.) */
              isSignalRef(paddingInnerValue) ? { signal: `${paddingInnerValue.signal}/2` } : paddingInnerValue / 2);
          }
      }
      return undefined;
  }
  function reverse(scaleType, sort, channel, scaleConfig) {
      if (channel === 'x' && scaleConfig.xReverse !== undefined) {
          if (hasContinuousDomain(scaleType) && sort === 'descending') {
              if (isSignalRef(scaleConfig.xReverse)) {
                  return { signal: `!${scaleConfig.xReverse.signal}` };
              }
              else {
                  return !scaleConfig.xReverse;
              }
          }
          return scaleConfig.xReverse;
      }
      if (hasContinuousDomain(scaleType) && sort === 'descending') {
          // For continuous domain scales, Vega does not support domain sort.
          // Thus, we reverse range instead if sort is descending
          return true;
      }
      return undefined;
  }
  function zero$3(channel, fieldDef, specifiedDomain, markDef, scaleType) {
      // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.
      const hasCustomDomain = !!specifiedDomain && specifiedDomain !== 'unaggregated';
      if (hasCustomDomain) {
          if (hasContinuousDomain(scaleType)) {
              if (isArray(specifiedDomain)) {
                  const first = specifiedDomain[0];
                  const last = specifiedDomain[specifiedDomain.length - 1];
                  if (first <= 0 && last >= 0) {
                      // if the domain includes zero, make zero remains true
                      return true;
                  }
              }
              return false;
          }
      }
      // If there is no custom domain, return true only for the following cases:
      // 1) using quantitative field with size
      // While this can be either ratio or interval fields, our assumption is that
      // ratio are more common. However, if the scaleType is discretizing scale, we want to return
      // false so that range doesn't start at zero
      if (channel === 'size' && fieldDef.type === 'quantitative' && !isContinuousToDiscrete(scaleType)) {
          return true;
      }
      // 2) non-binned, quantitative x-scale or y-scale
      // (For binning, we should not include zero by default because binning are calculated without zero.)
      if (!(isFieldDef(fieldDef) && fieldDef.bin) &&
          contains$1([...POSITION_SCALE_CHANNELS, ...POLAR_POSITION_SCALE_CHANNELS], channel)) {
          const { orient, type } = markDef;
          if (contains$1(['bar', 'area', 'line', 'trail'], type)) {
              if ((orient === 'horizontal' && channel === 'y') || (orient === 'vertical' && channel === 'x')) {
                  return false;
              }
          }
          return true;
      }
      return false;
  }

  /**
   * Determine if there is a specified scale type and if it is appropriate,
   * or determine default type if type is unspecified or inappropriate.
   */
  // NOTE: CompassQL uses this method.
  function scaleType(specifiedScale, channel, fieldDef, mark) {
      const defaultScaleType = defaultType$2(channel, fieldDef, mark);
      const { type } = specifiedScale;
      if (!isScaleChannel(channel)) {
          // There is no scale for these channels
          return null;
      }
      if (type !== undefined) {
          // Check if explicitly specified scale type is supported by the channel
          if (!channelSupportScaleType(channel, type)) {
              warn(scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));
              return defaultScaleType;
          }
          // Check if explicitly specified scale type is supported by the data type
          if (isFieldDef(fieldDef) && !scaleTypeSupportDataType(type, fieldDef.type)) {
              warn(scaleTypeNotWorkWithFieldDef(type, defaultScaleType));
              return defaultScaleType;
          }
          return type;
      }
      return defaultScaleType;
  }
  /**
   * Determine appropriate default scale type.
   */
  // NOTE: Voyager uses this method.
  function defaultType$2(channel, fieldDef, mark) {
      var _a;
      switch (fieldDef.type) {
          case 'nominal':
          case 'ordinal':
              if (isColorChannel(channel) || rangeType(channel) === 'discrete') {
                  if (channel === 'shape' && fieldDef.type === 'ordinal') {
                      warn(discreteChannelCannotEncode(channel, 'ordinal'));
                  }
                  return 'ordinal';
              }
              if (channel in POSITION_SCALE_CHANNEL_INDEX) {
                  if (contains$1(['rect', 'bar', 'image', 'rule'], mark)) {
                      // The rect/bar mark should fit into a band.
                      // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429
                      return 'band';
                  }
              }
              else if (mark === 'arc' && channel in POLAR_POSITION_SCALE_CHANNEL_INDEX) {
                  return 'band';
              }
              if (fieldDef.band !== undefined || (isPositionFieldOrDatumDef(fieldDef) && ((_a = fieldDef.axis) === null || _a === void 0 ? void 0 : _a.tickBand))) {
                  return 'band';
              }
              // Otherwise, use ordinal point scale so we can easily get center positions of the marks.
              return 'point';
          case 'temporal':
              if (isColorChannel(channel)) {
                  return 'time';
              }
              else if (rangeType(channel) === 'discrete') {
                  warn(discreteChannelCannotEncode(channel, 'temporal'));
                  // TODO: consider using quantize (equivalent to binning) once we have it
                  return 'ordinal';
              }
              else if (isFieldDef(fieldDef) && fieldDef.timeUnit && normalizeTimeUnit(fieldDef.timeUnit).utc) {
                  return 'utc';
              }
              return 'time';
          case 'quantitative':
              if (isColorChannel(channel)) {
                  if (isFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
                      return 'bin-ordinal';
                  }
                  return 'linear';
              }
              else if (rangeType(channel) === 'discrete') {
                  warn(discreteChannelCannotEncode(channel, 'quantitative'));
                  // TODO: consider using quantize (equivalent to binning) once we have it
                  return 'ordinal';
              }
              return 'linear';
          case 'geojson':
              return undefined;
      }
      /* istanbul ignore next: should never reach this */
      throw new Error(invalidFieldType(fieldDef.type));
  }

  function parseScales(model, { ignoreRange } = {}) {
      parseScaleCore(model);
      parseScaleDomain(model);
      for (const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {
          parseScaleProperty(model, prop);
      }
      if (!ignoreRange) {
          // range depends on zero
          parseScaleRange(model);
      }
  }
  function parseScaleCore(model) {
      if (isUnitModel(model)) {
          model.component.scales = parseUnitScaleCore(model);
      }
      else {
          model.component.scales = parseNonUnitScaleCore(model);
      }
  }
  /**
   * Parse scales for all channels of a model.
   */
  function parseUnitScaleCore(model) {
      const { encoding, mark } = model;
      return SCALE_CHANNELS.reduce((scaleComponents, channel) => {
          const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]); // must be typed def to have scale
          // Don't generate scale for shape of geoshape
          if (fieldOrDatumDef && mark === GEOSHAPE && channel === SHAPE && fieldOrDatumDef.type === GEOJSON) {
              return scaleComponents;
          }
          let specifiedScale = fieldOrDatumDef && fieldOrDatumDef['scale'];
          if (fieldOrDatumDef && specifiedScale !== null && specifiedScale !== false) {
              specifiedScale = specifiedScale !== null && specifiedScale !== void 0 ? specifiedScale : {};
              const sType = scaleType(specifiedScale, channel, fieldOrDatumDef, mark);
              scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), {
                  value: sType,
                  explicit: specifiedScale.type === sType
              });
          }
          return scaleComponents;
      }, {});
  }
  const scaleTypeTieBreaker = tieBreakByComparing((st1, st2) => scaleTypePrecedence(st1) - scaleTypePrecedence(st2));
  function parseNonUnitScaleCore(model) {
      var _a;
      const scaleComponents = (model.component.scales = {});
      const scaleTypeWithExplicitIndex = {};
      const resolve = model.component.resolve;
      // Parse each child scale and determine if a particular channel can be merged.
      for (const child of model.children) {
          parseScaleCore(child);
          // Instead of always merging right away -- check if it is compatible to merge first!
          for (const channel of keys(child.component.scales)) {
              // if resolve is undefined, set default first
              resolve.scale[channel] = (_a = resolve.scale[channel]) !== null && _a !== void 0 ? _a : defaultScaleResolve(channel, model);
              if (resolve.scale[channel] === 'shared') {
                  const explicitScaleType = scaleTypeWithExplicitIndex[channel];
                  const childScaleType = child.component.scales[channel].getWithExplicit('type');
                  if (explicitScaleType) {
                      if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {
                          // merge scale component if type are compatible
                          scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);
                      }
                      else {
                          // Otherwise, update conflicting channel to be independent
                          resolve.scale[channel] = 'independent';
                          // Remove from the index so they don't get merged
                          delete scaleTypeWithExplicitIndex[channel];
                      }
                  }
                  else {
                      scaleTypeWithExplicitIndex[channel] = childScaleType;
                  }
              }
          }
      }
      // Merge each channel listed in the index
      for (const channel of keys(scaleTypeWithExplicitIndex)) {
          // Create new merged scale component
          const name = model.scaleName(channel, true);
          const typeWithExplicit = scaleTypeWithExplicitIndex[channel];
          scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit);
          // rename each child and mark them as merged
          for (const child of model.children) {
              const childScale = child.component.scales[channel];
              if (childScale) {
                  child.renameScale(childScale.get('name'), name);
                  childScale.merged = true;
              }
          }
      }
      return scaleComponents;
  }

  var __rest$r = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  class NameMap {
      constructor() {
          this.nameMap = {};
      }
      rename(oldName, newName) {
          this.nameMap[oldName] = newName;
      }
      has(name) {
          return this.nameMap[name] !== undefined;
      }
      get(name) {
          // If the name appears in the _nameMap, we need to read its new name.
          // We have to loop over the dict just in case the new name also gets renamed.
          while (this.nameMap[name] && name !== this.nameMap[name]) {
              name = this.nameMap[name];
          }
          return name;
      }
  }
  /*
    We use type guards instead of `instanceof` as `instanceof` makes
    different parts of the compiler depend on the actual implementation of
    the model classes, which in turn depend on different parts of the compiler.
    Thus, `instanceof` leads to circular dependency problems.

    On the other hand, type guards only make different parts of the compiler
    depend on the type of the model classes, but not the actual implementation.
  */
  function isUnitModel(model) {
      return (model === null || model === void 0 ? void 0 : model.type) === 'unit';
  }
  function isFacetModel(model) {
      return (model === null || model === void 0 ? void 0 : model.type) === 'facet';
  }
  function isConcatModel(model) {
      return (model === null || model === void 0 ? void 0 : model.type) === 'concat';
  }
  function isLayerModel(model) {
      return (model === null || model === void 0 ? void 0 : model.type) === 'layer';
  }
  class Model {
      constructor(spec, type, parent, parentGivenName, config, resolve, view) {
          var _a, _b;
          this.type = type;
          this.parent = parent;
          this.config = config;
          this.children = [];
          /**
           * Corrects the data references in marks after assemble.
           */
          this.correctDataNames = (mark) => {
              // TODO: make this correct
              // for normal data references
              if (mark.from && mark.from.data) {
                  mark.from.data = this.lookupDataSource(mark.from.data);
              }
              // for access to facet data
              if (mark.from && mark.from.facet && mark.from.facet.data) {
                  mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);
              }
              return mark;
          };
          this.parent = parent;
          this.config = config;
          this.view = replaceExprRefInIndex(view);
          // If name is not provided, always use parent's givenName to avoid name conflicts.
          this.name = (_a = spec.name) !== null && _a !== void 0 ? _a : parentGivenName;
          this.title = isText(spec.title) ? { text: spec.title } : spec.title ? this.initTitle(spec.title) : undefined;
          // Shared name maps
          this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();
          this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();
          this.signalNameMap = parent ? parent.signalNameMap : new NameMap();
          this.data = spec.data;
          this.description = spec.description;
          this.transforms = normalizeTransform((_b = spec.transform) !== null && _b !== void 0 ? _b : []);
          this.layout = type === 'layer' || type === 'unit' ? {} : extractCompositionLayout(spec, type, config);
          this.component = {
              data: {
                  sources: parent ? parent.component.data.sources : [],
                  outputNodes: parent ? parent.component.data.outputNodes : {},
                  outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},
                  // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined
                  isFaceted: isFacetSpec(spec) || (parent && parent.component.data.isFaceted && spec.data === undefined)
              },
              layoutSize: new Split(),
              layoutHeaders: { row: {}, column: {}, facet: {} },
              mark: null,
              resolve: Object.assign({ scale: {}, axis: {}, legend: {} }, (resolve ? duplicate(resolve) : {})),
              selection: null,
              scales: null,
              projection: null,
              axes: {},
              legends: {}
          };
      }
      initTitle(title) {
          const props = keys(title);
          const titleInternal = {
              text: signalRefOrValue(title.text)
          };
          for (const prop of props) {
              titleInternal[prop] = signalRefOrValue(title[prop]);
          }
          return titleInternal;
      }
      get width() {
          return this.getSizeSignalRef('width');
      }
      get height() {
          return this.getSizeSignalRef('height');
      }
      parse() {
          this.parseScale();
          this.parseLayoutSize(); // depends on scale
          this.renameTopLevelLayoutSizeSignal();
          this.parseSelections();
          this.parseProjection();
          this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.
          this.parseAxesAndHeaders(); // depends on scale and layout size
          this.parseLegends(); // depends on scale, markDef
          this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.
      }
      parseScale() {
          parseScales(this);
      }
      parseProjection() {
          parseProjection(this);
      }
      /**
       * Rename top-level spec's size to be just width / height, ignoring model name.
       * This essentially merges the top-level spec's width/height signals with the width/height signals
       * to help us reduce redundant signals declaration.
       */
      renameTopLevelLayoutSizeSignal() {
          if (this.getName('width') !== 'width') {
              this.renameSignal(this.getName('width'), 'width');
          }
          if (this.getName('height') !== 'height') {
              this.renameSignal(this.getName('height'), 'height');
          }
      }
      parseLegends() {
          parseLegend(this);
      }
      assembleGroupStyle() {
          var _a, _b;
          if (this.type === 'unit' || this.type === 'layer') {
              return (_b = (_a = this.view) === null || _a === void 0 ? void 0 : _a.style) !== null && _b !== void 0 ? _b : 'cell';
          }
          return undefined;
      }
      assembleEncodeFromView(view) {
          // Exclude "style"
          const baseView = __rest$r(view, ["style"]);
          const e = {};
          for (const property of keys(baseView)) {
              const value = baseView[property];
              if (value !== undefined) {
                  e[property] = signalOrValueRef(value);
              }
          }
          return e;
      }
      assembleGroupEncodeEntry(isTopLevel) {
          let encodeEntry = {};
          if (this.view) {
              encodeEntry = this.assembleEncodeFromView(this.view);
          }
          if (!isTopLevel) {
              // Descriptions are already added to the top-level description so we only need to add them to the inner views.
              if (this.description) {
                  encodeEntry['description'] = signalOrValueRef(this.description);
              }
              // For top-level spec, we can set the global width and height signal to adjust the group size.
              // For other child specs, we have to manually set width and height in the encode entry.
              if (this.type === 'unit' || this.type === 'layer') {
                  return Object.assign({ width: this.getSizeSignalRef('width'), height: this.getSizeSignalRef('height') }, (encodeEntry !== null && encodeEntry !== void 0 ? encodeEntry : {}));
              }
          }
          return isEmpty$1(encodeEntry) ? undefined : encodeEntry;
      }
      assembleLayout() {
          if (!this.layout) {
              return undefined;
          }
          const _a = this.layout, { spacing } = _a, layout = __rest$r(_a, ["spacing"]);
          const { component, config } = this;
          const titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);
          return Object.assign(Object.assign(Object.assign({ padding: spacing }, this.assembleDefaultLayout()), layout), (titleBand ? { titleBand } : {}));
      }
      assembleDefaultLayout() {
          return {};
      }
      assembleHeaderMarks() {
          const { layoutHeaders } = this.component;
          let headerMarks = [];
          for (const channel of FACET_CHANNELS) {
              if (layoutHeaders[channel].title) {
                  headerMarks.push(assembleTitleGroup(this, channel));
              }
          }
          for (const channel of HEADER_CHANNELS) {
              headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));
          }
          return headerMarks;
      }
      assembleAxes() {
          return assembleAxes(this.component.axes, this.config);
      }
      assembleLegends() {
          return assembleLegends(this);
      }
      assembleProjections() {
          return assembleProjections(this);
      }
      assembleTitle() {
          var _a, _b, _c;
          const _d = (_a = this.title) !== null && _a !== void 0 ? _a : {}, { encoding } = _d, titleNoEncoding = __rest$r(_d, ["encoding"]);
          const title = Object.assign(Object.assign(Object.assign({}, extractTitleConfig(this.config.title).nonMark), titleNoEncoding), (encoding ? { encode: { update: encoding } } : {}));
          if (title.text) {
              if (contains$1(['unit', 'layer'], this.type)) {
                  // Unit/Layer
                  if (contains$1(['middle', undefined], title.anchor)) {
                      title.frame = (_b = title.frame) !== null && _b !== void 0 ? _b : 'group';
                  }
              }
              else {
                  // composition with Vega layout
                  // Set title = "start" by default for composition as "middle" does not look nice
                  // https://github.com/vega/vega/issues/960#issuecomment-471360328
                  title.anchor = (_c = title.anchor) !== null && _c !== void 0 ? _c : 'start';
              }
              return isEmpty$1(title) ? undefined : title;
          }
          return undefined;
      }
      /**
       * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.
       */
      assembleGroup(signals = []) {
          const group = {};
          signals = signals.concat(this.assembleSignals());
          if (signals.length > 0) {
              group.signals = signals;
          }
          const layout = this.assembleLayout();
          if (layout) {
              group.layout = layout;
          }
          group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());
          // Only include scales if this spec is top-level or if parent is facet.
          // (Otherwise, it will be merged with upper-level's scope.)
          const scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];
          if (scales.length > 0) {
              group.scales = scales;
          }
          const axes = this.assembleAxes();
          if (axes.length > 0) {
              group.axes = axes;
          }
          const legends = this.assembleLegends();
          if (legends.length > 0) {
              group.legends = legends;
          }
          return group;
      }
      getName(text) {
          return varName((this.name ? this.name + '_' : '') + text);
      }
      getDataName(type) {
          return this.getName(DataSourceType[type].toLowerCase());
      }
      /**
       * Request a data source name for the given data source type and mark that data source as required.
       * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().
       * You can lookup the correct dataset name in assemble with `lookupDataSource`.
       */
      requestDataName(name) {
          const fullName = this.getDataName(name);
          // Increase ref count. This is critical because otherwise we won't create a data source.
          // We also increase the ref counts on OutputNode.getSource() calls.
          const refCounts = this.component.data.outputNodeRefCounts;
          refCounts[fullName] = (refCounts[fullName] || 0) + 1;
          return fullName;
      }
      getSizeSignalRef(layoutSizeType) {
          if (isFacetModel(this.parent)) {
              const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
              const channel = getPositionScaleChannel(sizeType);
              const scaleComponent = this.component.scales[channel];
              if (scaleComponent && !scaleComponent.merged) {
                  // independent scale
                  const type = scaleComponent.get('type');
                  const range = scaleComponent.get('range');
                  if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                      const scaleName = scaleComponent.get('name');
                      const domain = assembleDomain(this, channel);
                      const field = getFieldFromDomain(domain);
                      if (field) {
                          const fieldRef = vgField({ aggregate: 'distinct', field }, { expr: 'datum' });
                          return {
                              signal: sizeExpr(scaleName, scaleComponent, fieldRef)
                          };
                      }
                      else {
                          warn(unknownField(channel));
                          return null;
                      }
                  }
              }
          }
          return {
              signal: this.signalNameMap.get(this.getName(layoutSizeType))
          };
      }
      /**
       * Lookup the name of the datasource for an output node. You probably want to call this in assemble.
       */
      lookupDataSource(name) {
          const node = this.component.data.outputNodes[name];
          if (!node) {
              // Name not found in map so let's just return what we got.
              // This can happen if we already have the correct name.
              return name;
          }
          return node.getSource();
      }
      getSignalName(oldSignalName) {
          return this.signalNameMap.get(oldSignalName);
      }
      renameSignal(oldName, newName) {
          this.signalNameMap.rename(oldName, newName);
      }
      renameScale(oldName, newName) {
          this.scaleNameMap.rename(oldName, newName);
      }
      renameProjection(oldName, newName) {
          this.projectionNameMap.rename(oldName, newName);
      }
      /**
       * @return scale name for a given channel after the scale has been parsed and named.
       */
      scaleName(originalScaleName, parse) {
          if (parse) {
              // During the parse phase always return a value
              // No need to refer to rename map because a scale can't be renamed
              // before it has the original name.
              return this.getName(originalScaleName);
          }
          // If there is a scale for the channel, it should either
          // be in the scale component or exist in the name map
          if (
          // If there is a scale for the channel, there should be a local scale component for it
          (isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName]) ||
              // in the scale name map (the scale get merged by its parent)
              this.scaleNameMap.has(this.getName(originalScaleName))) {
              return this.scaleNameMap.get(this.getName(originalScaleName));
          }
          return undefined;
      }
      /**
       * @return projection name after the projection has been parsed and named.
       */
      projectionName(parse) {
          if (parse) {
              // During the parse phase always return a value
              // No need to refer to rename map because a projection can't be renamed
              // before it has the original name.
              return this.getName('projection');
          }
          if ((this.component.projection && !this.component.projection.merged) ||
              this.projectionNameMap.has(this.getName('projection'))) {
              return this.projectionNameMap.get(this.getName('projection'));
          }
          return undefined;
      }
      /**
       * Traverse a model's hierarchy to get the scale component for a particular channel.
       */
      getScaleComponent(channel) {
          /* istanbul ignore next: This is warning for debugging test */
          if (!this.component.scales) {
              throw new Error('getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().');
          }
          const localScaleComponent = this.component.scales[channel];
          if (localScaleComponent && !localScaleComponent.merged) {
              return localScaleComponent;
          }
          return this.parent ? this.parent.getScaleComponent(channel) : undefined;
      }
      /**
       * Traverse a model's hierarchy to get a particular selection component.
       */
      getSelectionComponent(variableName, origName) {
          let sel = this.component.selection[variableName];
          if (!sel && this.parent) {
              sel = this.parent.getSelectionComponent(variableName, origName);
          }
          if (!sel) {
              throw new Error(selectionNotFound(origName));
          }
          return sel;
      }
      /**
       * Returns true if the model has a signalRef for an axis orient.
       */
      hasAxisOrientSignalRef() {
          var _a, _b;
          return (((_a = this.component.axes.x) === null || _a === void 0 ? void 0 : _a.some(a => a.hasOrientSignalRef())) || ((_b = this.component.axes.y) === null || _b === void 0 ? void 0 : _b.some(a => a.hasOrientSignalRef())));
      }
  }
  /** Abstract class for UnitModel and FacetModel. Both of which can contain fieldDefs as a part of its own specification. */
  class ModelWithField extends Model {
      /** Get "field" reference for Vega */
      vgField(channel, opt = {}) {
          const fieldDef = this.fieldDef(channel);
          if (!fieldDef) {
              return undefined;
          }
          return vgField(fieldDef, opt);
      }
      reduceFieldDef(f, init) {
          return reduce(this.getMapping(), (acc, cd, c) => {
              const fieldDef = getFieldDef(cd);
              if (fieldDef) {
                  return f(acc, fieldDef, c);
              }
              return acc;
          }, init);
      }
      forEachFieldDef(f, t) {
          forEach(this.getMapping(), (cd, c) => {
              const fieldDef = getFieldDef(cd);
              if (fieldDef) {
                  f(fieldDef, c);
              }
          }, t);
      }
  }

  var __rest$s = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  /**
   * A class for density transform nodes
   */
  class DensityTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          var _a, _b, _c;
          super(parent);
          this.transform = transform;
          this.transform = duplicate(transform); // duplicate to prevent side effects
          const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
          this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'value', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'density'];
      }
      clone() {
          return new DensityTransformNode(null, duplicate(this.transform));
      }
      dependentFields() {
          var _a;
          return new Set([this.transform.density, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);
      }
      producedFields() {
          return new Set(this.transform.as);
      }
      hash() {
          return `DensityTransform ${hash(this.transform)}`;
      }
      assemble() {
          const _a = this.transform, { density } = _a, rest = __rest$s(_a, ["density"]);
          const result = Object.assign({ type: 'kde', field: density }, rest);
          return result;
      }
  }

  class FilterInvalidNode extends DataFlowNode {
      constructor(parent, filter) {
          super(parent);
          this.filter = filter;
      }
      clone() {
          return new FilterInvalidNode(null, Object.assign({}, this.filter));
      }
      static make(parent, model) {
          const { config, mark, markDef } = model;
          const invalid = getMarkPropOrConfig('invalid', markDef, config);
          if (invalid !== 'filter') {
              return null;
          }
          const filter = model.reduceFieldDef((aggregator, fieldDef, channel) => {
              const scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);
              if (scaleComponent) {
                  const scaleType = scaleComponent.get('type');
                  // While discrete domain scales can handle invalid values, continuous scales can't.
                  // Thus, for non-path marks, we have to filter null for scales with continuous domains.
                  // (For path marks, we will use "defined" property and skip these values instead.)
                  if (hasContinuousDomain(scaleType) && fieldDef.aggregate !== 'count' && !isPathMark(mark)) {
                      aggregator[fieldDef.field] = fieldDef; // we know that the fieldDef is a typed field def
                  }
              }
              return aggregator;
          }, {});
          if (!keys(filter).length) {
              return null;
          }
          return new FilterInvalidNode(parent, filter);
      }
      dependentFields() {
          return new Set(keys(this.filter));
      }
      producedFields() {
          return new Set(); // filter does not produce any new fields
      }
      hash() {
          return `FilterInvalid ${hash(this.filter)}`;
      }
      /**
       * Create the VgTransforms for each of the filtered fields.
       */
      assemble() {
          const filters = keys(this.filter).reduce((vegaFilters, field) => {
              const fieldDef = this.filter[field];
              const ref = vgField(fieldDef, { expr: 'datum' });
              if (fieldDef !== null) {
                  if (fieldDef.type === 'temporal') {
                      vegaFilters.push(`(isDate(${ref}) || (isValid(${ref}) && isFinite(+${ref})))`);
                  }
                  else if (fieldDef.type === 'quantitative') {
                      vegaFilters.push(`isValid(${ref})`);
                      vegaFilters.push(`isFinite(+${ref})`);
                  }
              }
              return vegaFilters;
          }, []);
          return filters.length > 0
              ? {
                  type: 'filter',
                  expr: filters.join(' && ')
              }
              : null;
      }
  }

  /**
   * A class for flatten transform nodes
   */
  class FlattenTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          super(parent);
          this.transform = transform;
          this.transform = duplicate(transform); // duplicate to prevent side effects
          const { flatten, as = [] } = this.transform;
          this.transform.as = flatten.map((f, i) => { var _a; return (_a = as[i]) !== null && _a !== void 0 ? _a : f; });
      }
      clone() {
          return new FlattenTransformNode(this.parent, duplicate(this.transform));
      }
      dependentFields() {
          return new Set(this.transform.flatten);
      }
      producedFields() {
          return new Set(this.transform.as);
      }
      hash() {
          return `FlattenTransform ${hash(this.transform)}`;
      }
      assemble() {
          const { flatten: fields, as } = this.transform;
          const result = {
              type: 'flatten',
              fields,
              as
          };
          return result;
      }
  }

  /**
   * A class for flatten transform nodes
   */
  class FoldTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          var _a, _b, _c;
          super(parent);
          this.transform = transform;
          this.transform = duplicate(transform); // duplicate to prevent side effects
          const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
          this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'key', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];
      }
      clone() {
          return new FoldTransformNode(null, duplicate(this.transform));
      }
      dependentFields() {
          return new Set(this.transform.fold);
      }
      producedFields() {
          return new Set(this.transform.as);
      }
      hash() {
          return `FoldTransform ${hash(this.transform)}`;
      }
      assemble() {
          const { fold, as } = this.transform;
          const result = {
              type: 'fold',
              fields: fold,
              as
          };
          return result;
      }
  }

  class GeoJSONNode extends DataFlowNode {
      constructor(parent, fields, geojson, signal) {
          super(parent);
          this.fields = fields;
          this.geojson = geojson;
          this.signal = signal;
      }
      clone() {
          return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);
      }
      static parseAll(parent, model) {
          if (model.component.projection && !model.component.projection.isFit) {
              return parent;
          }
          let geoJsonCounter = 0;
          for (const coordinates of [
              [LONGITUDE, LATITUDE],
              [LONGITUDE2, LATITUDE2]
          ]) {
              const pair = coordinates.map(channel => {
                  const def = getFieldOrDatumDef(model.encoding[channel]);
                  return isFieldDef(def)
                      ? def.field
                      : isDatumDef(def)
                          ? { expr: `${def.datum}` }
                          : isValueDef(def)
                              ? { expr: `${def['value']}` }
                              : undefined;
              });
              if (pair[0] || pair[1]) {
                  parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));
              }
          }
          if (model.channelHasField(SHAPE)) {
              const fieldDef = model.typedFieldDef(SHAPE);
              if (fieldDef.type === GEOJSON) {
                  parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));
              }
          }
          return parent;
      }
      dependentFields() {
          var _a;
          const fields = ((_a = this.fields) !== null && _a !== void 0 ? _a : []).filter(isString$1);
          return new Set([...(this.geojson ? [this.geojson] : []), ...fields]);
      }
      producedFields() {
          return new Set();
      }
      hash() {
          return `GeoJSON ${this.geojson} ${this.signal} ${hash(this.fields)}`;
      }
      assemble() {
          return Object.assign(Object.assign(Object.assign({ type: 'geojson' }, (this.fields ? { fields: this.fields } : {})), (this.geojson ? { geojson: this.geojson } : {})), { signal: this.signal });
      }
  }

  class GeoPointNode extends DataFlowNode {
      constructor(parent, projection, fields, as) {
          super(parent);
          this.projection = projection;
          this.fields = fields;
          this.as = as;
      }
      clone() {
          return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));
      }
      static parseAll(parent, model) {
          if (!model.projectionName()) {
              return parent;
          }
          for (const coordinates of [
              [LONGITUDE, LATITUDE],
              [LONGITUDE2, LATITUDE2]
          ]) {
              const pair = coordinates.map(channel => {
                  const def = getFieldOrDatumDef(model.encoding[channel]);
                  return isFieldDef(def)
                      ? def.field
                      : isDatumDef(def)
                          ? { expr: `${def.datum}` }
                          : isValueDef(def)
                              ? { expr: `${def['value']}` }
                              : undefined;
              });
              const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';
              if (pair[0] || pair[1]) {
                  parent = new GeoPointNode(parent, model.projectionName(), pair, [
                      model.getName('x' + suffix),
                      model.getName('y' + suffix)
                  ]);
              }
          }
          return parent;
      }
      dependentFields() {
          return new Set(this.fields.filter(isString$1));
      }
      producedFields() {
          return new Set(this.as);
      }
      hash() {
          return `Geopoint ${this.projection} ${hash(this.fields)} ${hash(this.as)}`;
      }
      assemble() {
          return {
              type: 'geopoint',
              projection: this.projection,
              fields: this.fields,
              as: this.as
          };
      }
  }

  class ImputeNode extends DataFlowNode {
      constructor(parent, transform) {
          super(parent);
          this.transform = transform;
      }
      clone() {
          return new ImputeNode(null, duplicate(this.transform));
      }
      dependentFields() {
          var _a;
          return new Set([this.transform.impute, this.transform.key, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);
      }
      producedFields() {
          return new Set([this.transform.impute]);
      }
      processSequence(keyvals) {
          const { start = 0, stop, step } = keyvals;
          const result = [start, stop, ...(step ? [step] : [])].join(',');
          return { signal: `sequence(${result})` };
      }
      static makeFromTransform(parent, imputeTransform) {
          return new ImputeNode(parent, imputeTransform);
      }
      static makeFromEncoding(parent, model) {
          const encoding = model.encoding;
          const xDef = encoding.x;
          const yDef = encoding.y;
          if (isFieldDef(xDef) && isFieldDef(yDef)) {
              const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;
              if (imputedChannel === undefined) {
                  return undefined;
              }
              const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;
              const { method, value, frame, keyvals } = imputedChannel.impute;
              const groupbyFields = pathGroupingFields(model.mark, encoding);
              return new ImputeNode(parent, Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ impute: imputedChannel.field, key: keyChannel.field }, (method ? { method } : {})), (value !== undefined ? { value } : {})), (frame ? { frame } : {})), (keyvals !== undefined ? { keyvals } : {})), (groupbyFields.length ? { groupby: groupbyFields } : {})));
          }
          return null;
      }
      hash() {
          return `Impute ${hash(this.transform)}`;
      }
      assemble() {
          const { impute, key, keyvals, method, groupby, value, frame = [null, null] } = this.transform;
          const imputeTransform = Object.assign(Object.assign(Object.assign(Object.assign({ type: 'impute', field: impute, key }, (keyvals ? { keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals } : {})), { method: 'value' }), (groupby ? { groupby } : {})), { value: !method || method === 'value' ? value : null });
          if (method && method !== 'value') {
              const deriveNewField = Object.assign({ type: 'window', as: [`imputed_${impute}_value`], ops: [method], fields: [impute], frame, ignorePeers: false }, (groupby ? { groupby } : {}));
              const replaceOriginal = {
                  type: 'formula',
                  expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,
                  as: impute
              };
              return [imputeTransform, deriveNewField, replaceOriginal];
          }
          else {
              return [imputeTransform];
          }
      }
  }

  var __rest$t = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  /**
   * A class for loess transform nodes
   */
  class LoessTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          var _a, _b, _c;
          super(parent);
          this.transform = transform;
          this.transform = duplicate(transform); // duplicate to prevent side effects
          const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
          this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : transform.on, (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : transform.loess];
      }
      clone() {
          return new LoessTransformNode(null, duplicate(this.transform));
      }
      dependentFields() {
          var _a;
          return new Set([this.transform.loess, this.transform.on, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);
      }
      producedFields() {
          return new Set(this.transform.as);
      }
      hash() {
          return `LoessTransform ${hash(this.transform)}`;
      }
      assemble() {
          const _a = this.transform, { loess, on } = _a, rest = __rest$t(_a, ["loess", "on"]);
          const result = Object.assign({ type: 'loess', x: on, y: loess }, rest);
          return result;
      }
  }

  class LookupNode extends DataFlowNode {
      constructor(parent, transform, secondary) {
          super(parent);
          this.transform = transform;
          this.secondary = secondary;
      }
      clone() {
          return new LookupNode(null, duplicate(this.transform), this.secondary);
      }
      static make(parent, model, transform, counter) {
          const sources = model.component.data.sources;
          const { from } = transform;
          let fromOutputNode = null;
          if (isLookupData(from)) {
              let fromSource = findSource(from.data, sources);
              if (!fromSource) {
                  fromSource = new SourceNode(from.data);
                  sources.push(fromSource);
              }
              const fromOutputName = model.getName(`lookup_${counter}`);
              fromOutputNode = new OutputNode(fromSource, fromOutputName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);
              model.component.data.outputNodes[fromOutputName] = fromOutputNode;
          }
          else if (isLookupSelection(from)) {
              const selName = from.selection;
              transform = Object.assign({ as: selName }, transform);
              fromOutputNode = model.getSelectionComponent(varName(selName), selName).materialized;
              if (!fromOutputNode) {
                  throw new Error(noSameUnitLookup(selName));
              }
          }
          return new LookupNode(parent, transform, fromOutputNode.getSource());
      }
      dependentFields() {
          return new Set([this.transform.lookup]);
      }
      producedFields() {
          return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);
      }
      hash() {
          return `Lookup ${hash({ transform: this.transform, secondary: this.secondary })}`;
      }
      assemble() {
          let foreign;
          if (this.transform.from.fields) {
              // lookup a few fields and add create a flat output
              foreign = Object.assign({ values: this.transform.from.fields }, (this.transform.as ? { as: array(this.transform.as) } : {}));
          }
          else {
              // lookup full record and nest it
              let asName = this.transform.as;
              if (!isString$1(asName)) {
                  warn(NO_FIELDS_NEEDS_AS);
                  asName = '_lookup';
              }
              foreign = {
                  as: [asName]
              };
          }
          return Object.assign(Object.assign({ type: 'lookup', from: this.secondary, key: this.transform.from.key, fields: [this.transform.lookup] }, foreign), (this.transform.default ? { default: this.transform.default } : {}));
      }
  }

  var __rest$u = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  /**
   * A class for quantile transform nodes
   */
  class QuantileTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          var _a, _b, _c;
          super(parent);
          this.transform = transform;
          this.transform = duplicate(transform); // duplicate to prevent side effects
          const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
          this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'prob', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];
      }
      clone() {
          return new QuantileTransformNode(null, duplicate(this.transform));
      }
      dependentFields() {
          var _a;
          return new Set([this.transform.quantile, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);
      }
      producedFields() {
          return new Set(this.transform.as);
      }
      hash() {
          return `QuantileTransform ${hash(this.transform)}`;
      }
      assemble() {
          const _a = this.transform, { quantile } = _a, rest = __rest$u(_a, ["quantile"]);
          const result = Object.assign({ type: 'quantile', field: quantile }, rest);
          return result;
      }
  }

  var __rest$v = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  /**
   * A class for regression transform nodes
   */
  class RegressionTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          var _a, _b, _c;
          super(parent);
          this.transform = transform;
          this.transform = duplicate(transform); // duplicate to prevent side effects
          const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
          this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : transform.on, (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : transform.regression];
      }
      clone() {
          return new RegressionTransformNode(null, duplicate(this.transform));
      }
      dependentFields() {
          var _a;
          return new Set([this.transform.regression, this.transform.on, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);
      }
      producedFields() {
          return new Set(this.transform.as);
      }
      hash() {
          return `RegressionTransform ${hash(this.transform)}`;
      }
      assemble() {
          const _a = this.transform, { regression, on } = _a, rest = __rest$v(_a, ["regression", "on"]);
          const result = Object.assign({ type: 'regression', x: on, y: regression }, rest);
          return result;
      }
  }

  /**
   * A class for pivot transform nodes.
   */
  class PivotTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          super(parent);
          this.transform = transform;
      }
      clone() {
          return new PivotTransformNode(null, duplicate(this.transform));
      }
      addDimensions(fields) {
          var _a;
          this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), d => d);
      }
      producedFields() {
          return undefined; // return undefined so that potentially everything can depend on the pivot
      }
      dependentFields() {
          var _a;
          return new Set([this.transform.pivot, this.transform.value, ...((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])]);
      }
      hash() {
          return `PivotTransform ${hash(this.transform)}`;
      }
      assemble() {
          const { pivot, value, groupby, limit, op } = this.transform;
          return Object.assign(Object.assign(Object.assign({ type: 'pivot', field: pivot, value }, (limit !== undefined ? { limit } : {})), (op !== undefined ? { op } : {})), (groupby !== undefined ? { groupby } : {}));
      }
  }

  /**
   * A class for the sample transform nodes
   */
  class SampleTransformNode extends DataFlowNode {
      constructor(parent, transform) {
          super(parent);
          this.transform = transform;
      }
      clone() {
          return new SampleTransformNode(null, duplicate(this.transform));
      }
      dependentFields() {
          return new Set();
      }
      producedFields() {
          return new Set();
      }
      hash() {
          return `SampleTransform ${hash(this.transform)}`;
      }
      assemble() {
          return {
              type: 'sample',
              size: this.transform.sample
          };
      }
  }

  function makeWalkTree(data) {
      // to name datasources
      let datasetIndex = 0;
      /**
       * Recursively walk down the tree.
       */
      function walkTree(node, dataSource) {
          var _a;
          if (node instanceof SourceNode) {
              // If the source is a named data source or a data source with values, we need
              // to put it in a different data source. Otherwise, Vega may override the data.
              if (!node.isGenerator && !isUrlData(node.data)) {
                  data.push(dataSource);
                  const newData = {
                      name: null,
                      source: dataSource.name,
                      transform: []
                  };
                  dataSource = newData;
              }
          }
          if (node instanceof ParseNode) {
              if (node.parent instanceof SourceNode && !dataSource.source) {
                  // If node's parent is a root source and the data source does not refer to another data source, use normal format parse
                  dataSource.format = Object.assign(Object.assign({}, ((_a = dataSource.format) !== null && _a !== void 0 ? _a : {})), { parse: node.assembleFormatParse() });
                  // add calculates for all nested fields
                  dataSource.transform.push(...node.assembleTransforms(true));
              }
              else {
                  // Otherwise use Vega expression to parse
                  dataSource.transform.push(...node.assembleTransforms());
              }
          }
          if (node instanceof FacetNode) {
              if (!dataSource.name) {
                  dataSource.name = `data_${datasetIndex++}`;
              }
              if (!dataSource.source || dataSource.transform.length > 0) {
                  data.push(dataSource);
                  node.data = dataSource.name;
              }
              else {
                  node.data = dataSource.source;
              }
              for (const d of node.assemble()) {
                  data.push(d);
              }
              // break here because the rest of the tree has to be taken care of by the facet.
              return;
          }
          if (node instanceof GraticuleNode ||
              node instanceof SequenceNode ||
              node instanceof FilterInvalidNode ||
              node instanceof FilterNode ||
              node instanceof CalculateNode ||
              node instanceof GeoPointNode ||
              node instanceof GeoJSONNode ||
              node instanceof AggregateNode ||
              node instanceof LookupNode ||
              node instanceof WindowTransformNode ||
              node instanceof JoinAggregateTransformNode ||
              node instanceof FoldTransformNode ||
              node instanceof FlattenTransformNode ||
              node instanceof DensityTransformNode ||
              node instanceof LoessTransformNode ||
              node instanceof QuantileTransformNode ||
              node instanceof RegressionTransformNode ||
              node instanceof IdentifierNode ||
              node instanceof SampleTransformNode ||
              node instanceof PivotTransformNode) {
              dataSource.transform.push(node.assemble());
          }
          if (node instanceof BinNode ||
              node instanceof TimeUnitNode ||
              node instanceof ImputeNode ||
              node instanceof StackNode) {
              dataSource.transform.push(...node.assemble());
          }
          if (node instanceof OutputNode) {
              if (dataSource.source && dataSource.transform.length === 0) {
                  node.setSource(dataSource.source);
              }
              else if (node.parent instanceof OutputNode) {
                  // Note that an output node may be required but we still do not assemble a
                  // separate data source for it.
                  node.setSource(dataSource.name);
              }
              else {
                  if (!dataSource.name) {
                      dataSource.name = `data_${datasetIndex++}`;
                  }
                  // Here we set the name of the datasource we generated. From now on
                  // other assemblers can use it.
                  node.setSource(dataSource.name);
                  // if this node has more than one child, we will add a datasource automatically
                  if (node.numChildren() === 1) {
                      data.push(dataSource);
                      const newData = {
                          name: null,
                          source: dataSource.name,
                          transform: []
                      };
                      dataSource = newData;
                  }
              }
          }
          switch (node.numChildren()) {
              case 0:
                  // done
                  if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {
                      // do not push empty datasources that are simply references
                      data.push(dataSource);
                  }
                  break;
              case 1:
                  walkTree(node.children[0], dataSource);
                  break;
              default: {
                  if (!dataSource.name) {
                      dataSource.name = `data_${datasetIndex++}`;
                  }
                  let source = dataSource.name;
                  if (!dataSource.source || dataSource.transform.length > 0) {
                      data.push(dataSource);
                  }
                  else {
                      source = dataSource.source;
                  }
                  for (const child of node.children) {
                      const newData = {
                          name: null,
                          source: source,
                          transform: []
                      };
                      walkTree(child, newData);
                  }
                  break;
              }
          }
      }
      return walkTree;
  }
  /**
   * Assemble data sources that are derived from faceted data.
   */
  function assembleFacetData(root) {
      const data = [];
      const walkTree = makeWalkTree(data);
      for (const child of root.children) {
          walkTree(child, {
              source: root.name,
              name: null,
              transform: []
          });
      }
      return data;
  }
  /**
   * Create Vega data array from a given compiled model and append all of them to the given array
   *
   * @param  model
   * @param  data array
   * @return modified data array
   */
  function assembleRootData(dataComponent, datasets) {
      var _a, _b;
      const data = [];
      // dataComponent.sources.forEach(debug);
      // draw(dataComponent.sources);
      const walkTree = makeWalkTree(data);
      let sourceIndex = 0;
      for (const root of dataComponent.sources) {
          // assign a name if the source does not have a name yet
          if (!root.hasName()) {
              root.dataName = `source_${sourceIndex++}`;
          }
          const newData = root.assemble();
          walkTree(root, newData);
      }
      // remove empty transform arrays for cleaner output
      for (const d of data) {
          if (d.transform.length === 0) {
              delete d.transform;
          }
      }
      // move sources without transforms (the ones that are potentially used in lookups) to the beginning
      let whereTo = 0;
      for (const [i, d] of data.entries()) {
          if (((_a = d.transform) !== null && _a !== void 0 ? _a : []).length === 0 && !d.source) {
              data.splice(whereTo++, 0, data.splice(i, 1)[0]);
          }
      }
      // now fix the from references in lookup transforms
      for (const d of data) {
          for (const t of (_b = d.transform) !== null && _b !== void 0 ? _b : []) {
              if (t.type === 'lookup') {
                  t.from = dataComponent.outputNodes[t.from].getSource();
              }
          }
      }
      // inline values for datasets that are in the datastore
      for (const d of data) {
          if (d.name in datasets) {
              d.values = datasets[d.name];
          }
      }
      return data;
  }

  function getHeaderType(orient) {
      if (orient === 'top' || orient === 'left' || isSignalRef(orient)) {
          // we always use header for orient signal since we can't dynamically make header becomes footer
          return 'header';
      }
      return 'footer';
  }
  function parseFacetHeaders(model) {
      for (const channel of FACET_CHANNELS) {
          parseFacetHeader(model, channel);
      }
      mergeChildAxis(model, 'x');
      mergeChildAxis(model, 'y');
  }
  function parseFacetHeader(model, channel) {
      var _a;
      const { facet, config, child, component } = model;
      if (model.channelHasField(channel)) {
          const fieldDef = facet[channel];
          const titleConfig = getHeaderProperty('title', null, config, channel);
          let title = title$1(fieldDef, config, {
              allowDisabling: true,
              includeDefault: titleConfig === undefined || !!titleConfig
          });
          if (child.component.layoutHeaders[channel].title) {
              // TODO: better handle multiline titles
              title = isArray(title) ? title.join(', ') : title;
              // merge title with child to produce "Title / Subtitle / Sub-subtitle"
              title += ' / ' + child.component.layoutHeaders[channel].title;
              child.component.layoutHeaders[channel].title = null;
          }
          const labelOrient = getHeaderProperty('labelOrient', fieldDef, config, channel);
          const header = (_a = fieldDef.header) !== null && _a !== void 0 ? _a : {};
          const labels = getFirstDefined(header.labels, config.header.labels, true);
          const headerType = contains$1(['bottom', 'right'], labelOrient) ? 'footer' : 'header';
          component.layoutHeaders[channel] = {
              title,
              facetFieldDef: fieldDef,
              [headerType]: channel === 'facet' ? [] : [makeHeaderComponent(model, channel, labels)]
          };
      }
  }
  function makeHeaderComponent(model, channel, labels) {
      const sizeType = channel === 'row' ? 'height' : 'width';
      return {
          labels,
          sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : undefined,
          axes: []
      };
  }
  function mergeChildAxis(model, channel) {
      var _a;
      const { child } = model;
      if (child.component.axes[channel]) {
          const { layoutHeaders, resolve } = model.component;
          resolve.axis[channel] = parseGuideResolve(resolve, channel);
          if (resolve.axis[channel] === 'shared') {
              // For shared axis, move the axes to facet's header or footer
              const headerChannel = channel === 'x' ? 'column' : 'row';
              const layoutHeader = layoutHeaders[headerChannel];
              for (const axisComponent of child.component.axes[channel]) {
                  const headerType = getHeaderType(axisComponent.get('orient'));
                  layoutHeader[headerType] = (_a = layoutHeader[headerType]) !== null && _a !== void 0 ? _a : [makeHeaderComponent(model, headerChannel, false)];
                  // FIXME: assemble shouldn't be called here, but we do it this way so we only extract the main part of the axes
                  const mainAxis = assembleAxis(axisComponent, 'main', model.config, { header: true });
                  if (mainAxis) {
                      // LayoutHeader no longer keep track of property precedence, thus let's combine.
                      layoutHeader[headerType][0].axes.push(mainAxis);
                  }
                  axisComponent.mainExtracted = true;
              }
          }
      }
  }

  function parseLayerLayoutSize(model) {
      parseChildrenLayoutSize(model);
      parseNonUnitLayoutSizeForChannel(model, 'width');
      parseNonUnitLayoutSizeForChannel(model, 'height');
  }
  function parseConcatLayoutSize(model) {
      parseChildrenLayoutSize(model);
      // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.
      const widthType = model.layout.columns === 1 ? 'width' : 'childWidth';
      // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.
      const heightType = model.layout.columns === undefined ? 'height' : 'childHeight';
      parseNonUnitLayoutSizeForChannel(model, widthType);
      parseNonUnitLayoutSizeForChannel(model, heightType);
  }
  function parseChildrenLayoutSize(model) {
      for (const child of model.children) {
          child.parseLayoutSize();
      }
  }
  /**
   * Merge child layout size (width or height).
   */
  function parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {
      /*
       * For concat, the parent width or height might not be the same as the children's shared height.
       * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.
       *
       * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)
       * while the sizeType represents the properties of the child.
       */
      const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
      const channel = getPositionScaleChannel(sizeType);
      const resolve = model.component.resolve;
      const layoutSizeCmpt = model.component.layoutSize;
      let mergedSize;
      // Try to merge layout size
      for (const child of model.children) {
          const childSize = child.component.layoutSize.getWithExplicit(sizeType);
          const scaleResolve = resolve.scale[channel];
          if (scaleResolve === 'independent' && childSize.value === 'step') {
              // Do not merge independent scales with range-step as their size depends
              // on the scale domains, which can be different between scales.
              mergedSize = undefined;
              break;
          }
          if (mergedSize) {
              if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {
                  // For independent scale, only merge if all the sizes are the same.
                  // If the values are different, abandon the merge!
                  mergedSize = undefined;
                  break;
              }
              mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');
          }
          else {
              mergedSize = childSize;
          }
      }
      if (mergedSize) {
          // If merged, rename size and set size of all children.
          for (const child of model.children) {
              model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));
              child.component.layoutSize.set(sizeType, 'merged', false);
          }
          layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);
      }
      else {
          layoutSizeCmpt.setWithExplicit(layoutSizeType, {
              explicit: false,
              value: undefined
          });
      }
  }
  function parseUnitLayoutSize(model) {
      const { size, component } = model;
      for (const channel of POSITION_SCALE_CHANNELS) {
          const sizeType = getSizeChannel(channel);
          if (size[sizeType]) {
              const specifiedSize = size[sizeType];
              component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);
          }
          else {
              const defaultSize = defaultUnitSize(model, sizeType);
              component.layoutSize.set(sizeType, defaultSize, false);
          }
      }
  }
  function defaultUnitSize(model, sizeType) {
      const channel = sizeType === 'width' ? 'x' : 'y';
      const config = model.config;
      const scaleComponent = model.getScaleComponent(channel);
      if (scaleComponent) {
          const scaleType = scaleComponent.get('type');
          const range = scaleComponent.get('range');
          if (hasDiscreteDomain(scaleType)) {
              const size = getViewConfigDiscreteSize(config.view, sizeType);
              if (isVgRangeStep(range) || isStep(size)) {
                  // For discrete domain with range.step, use dynamic width/height
                  return 'step';
              }
              else {
                  return size;
              }
          }
          else {
              return getViewConfigContinuousSize(config.view, sizeType);
          }
      }
      else if (model.hasProjection || model.mark === 'arc') {
          // arc should use continuous size by default otherwise the pie is extremely small
          return getViewConfigContinuousSize(config.view, sizeType);
      }
      else {
          const size = getViewConfigDiscreteSize(config.view, sizeType);
          return isStep(size) ? size.step : size;
      }
  }

  var __rest$w = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  function facetSortFieldName(fieldDef, sort, opt) {
      return vgField(sort, Object.assign({ suffix: `by_${vgField(fieldDef)}` }, (opt !== null && opt !== void 0 ? opt : {})));
  }
  class FacetModel extends ModelWithField {
      constructor(spec, parent, parentGivenName, config) {
          super(spec, 'facet', parent, parentGivenName, config, spec.resolve);
          this.child = buildModel(spec.spec, this, this.getName('child'), undefined, config);
          this.children = [this.child];
          this.facet = this.initFacet(spec.facet);
      }
      initFacet(facet) {
          // clone to prevent side effect to the original spec
          if (!isFacetMapping(facet)) {
              return { facet: this.initFacetFieldDef(facet, 'facet') };
          }
          const channels = keys(facet);
          const normalizedFacet = {};
          for (const channel of channels) {
              if (!contains$1([ROW, COLUMN], channel)) {
                  // Drop unsupported channel
                  warn(incompatibleChannel(channel, 'facet'));
                  break;
              }
              const fieldDef = facet[channel];
              if (fieldDef.field === undefined) {
                  warn(emptyFieldDef(fieldDef, channel));
                  break;
              }
              normalizedFacet[channel] = this.initFacetFieldDef(fieldDef, channel);
          }
          return normalizedFacet;
      }
      initFacetFieldDef(fieldDef, channel) {
          const { header } = fieldDef, rest = __rest$w(fieldDef, ["header"]);
          // Cast because we call initFieldDef, which assumes general FieldDef.
          // However, FacetFieldDef is a bit more constrained than the general FieldDef
          const facetFieldDef = initFieldDef(rest, channel);
          if (header) {
              facetFieldDef.header = replaceExprRefInIndex(header);
          }
          return facetFieldDef;
      }
      channelHasField(channel) {
          return !!this.facet[channel];
      }
      fieldDef(channel) {
          return this.facet[channel];
      }
      parseData() {
          this.component.data = parseData(this);
          this.child.parseData();
      }
      parseLayoutSize() {
          parseChildrenLayoutSize(this);
      }
      parseSelections() {
          // As a facet has a single child, the selection components are the same.
          // The child maintains its selections to assemble signals, which remain
          // within its unit.
          this.child.parseSelections();
          this.component.selection = this.child.component.selection;
      }
      parseMarkGroup() {
          this.child.parseMarkGroup();
      }
      parseAxesAndHeaders() {
          this.child.parseAxesAndHeaders();
          parseFacetHeaders(this);
      }
      assembleSelectionTopLevelSignals(signals) {
          return this.child.assembleSelectionTopLevelSignals(signals);
      }
      assembleSignals() {
          this.child.assembleSignals();
          return [];
      }
      assembleSelectionData(data) {
          return this.child.assembleSelectionData(data);
      }
      getHeaderLayoutMixins() {
          var _a, _b, _c;
          const layoutMixins = {};
          for (const channel of FACET_CHANNELS) {
              for (const headerType of HEADER_TYPES) {
                  const layoutHeaderComponent = this.component.layoutHeaders[channel];
                  const headerComponent = layoutHeaderComponent[headerType];
                  const { facetFieldDef } = layoutHeaderComponent;
                  if (facetFieldDef) {
                      const titleOrient = getHeaderProperty('titleOrient', facetFieldDef.header, this.config, channel);
                      if (contains$1(['right', 'bottom'], titleOrient)) {
                          const headerChannel = getHeaderChannel(channel, titleOrient);
                          layoutMixins.titleAnchor = (_a = layoutMixins.titleAnchor) !== null && _a !== void 0 ? _a : {};
                          layoutMixins.titleAnchor[headerChannel] = 'end';
                      }
                  }
                  if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent[0]) {
                      // set header/footerBand
                      const sizeType = channel === 'row' ? 'height' : 'width';
                      const bandType = headerType === 'header' ? 'headerBand' : 'footerBand';
                      if (channel !== 'facet' && !this.child.component.layoutSize.get(sizeType)) {
                          // If facet child does not have size signal, then apply headerBand
                          layoutMixins[bandType] = (_b = layoutMixins[bandType]) !== null && _b !== void 0 ? _b : {};
                          layoutMixins[bandType][channel] = 0.5;
                      }
                      if (layoutHeaderComponent.title) {
                          layoutMixins.offset = (_c = layoutMixins.offset) !== null && _c !== void 0 ? _c : {};
                          layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;
                      }
                  }
              }
          }
          return layoutMixins;
      }
      assembleDefaultLayout() {
          const { column, row } = this.facet;
          const columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;
          let align = 'all';
          // Do not align the cells if the scale corresponding to the direction is indepent.
          // We always align when we facet into both row and column.
          if (!row && this.component.resolve.scale.x === 'independent') {
              align = 'none';
          }
          else if (!column && this.component.resolve.scale.y === 'independent') {
              align = 'none';
          }
          return Object.assign(Object.assign(Object.assign({}, this.getHeaderLayoutMixins()), (columns ? { columns } : {})), { bounds: 'full', align });
      }
      assembleLayoutSignals() {
          // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.
          return this.child.assembleLayoutSignals();
      }
      columnDistinctSignal() {
          if (this.parent && this.parent instanceof FacetModel) {
              // For nested facet, we will add columns to group mark instead
              // See discussion in https://github.com/vega/vega/issues/952
              // and https://github.com/vega/vega-view/releases/tag/v1.2.6
              return undefined;
          }
          else {
              // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.
              const facetLayoutDataName = this.getName('column_domain');
              return { signal: `length(data('${facetLayoutDataName}'))` };
          }
      }
      assembleGroup(signals) {
          if (this.parent && this.parent instanceof FacetModel) {
              // Provide number of columns for layout.
              // See discussion in https://github.com/vega/vega/issues/952
              // and https://github.com/vega/vega-view/releases/tag/v1.2.6
              return Object.assign(Object.assign({}, (this.channelHasField('column')
                  ? {
                      encode: {
                          update: {
                              // TODO(https://github.com/vega/vega-lite/issues/2759):
                              // Correct the signal for facet of concat of facet_column
                              columns: { field: vgField(this.facet.column, { prefix: 'distinct' }) }
                          }
                      }
                  }
                  : {})), super.assembleGroup(signals));
          }
          return super.assembleGroup(signals);
      }
      /**
       * Aggregate cardinality for calculating size
       */
      getCardinalityAggregateForChild() {
          const fields = [];
          const ops = [];
          const as = [];
          if (this.child instanceof FacetModel) {
              if (this.child.channelHasField('column')) {
                  const field = vgField(this.child.facet.column);
                  fields.push(field);
                  ops.push('distinct');
                  as.push(`distinct_${field}`);
              }
          }
          else {
              for (const channel of POSITION_SCALE_CHANNELS) {
                  const childScaleComponent = this.child.component.scales[channel];
                  if (childScaleComponent && !childScaleComponent.merged) {
                      const type = childScaleComponent.get('type');
                      const range = childScaleComponent.get('range');
                      if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                          const domain = assembleDomain(this.child, channel);
                          const field = getFieldFromDomain(domain);
                          if (field) {
                              fields.push(field);
                              ops.push('distinct');
                              as.push(`distinct_${field}`);
                          }
                          else {
                              warn(unknownField(channel));
                          }
                      }
                  }
              }
          }
          return { fields, ops, as };
      }
      assembleFacet() {
          const { name, data } = this.component.data.facetRoot;
          const { row, column } = this.facet;
          const { fields, ops, as } = this.getCardinalityAggregateForChild();
          const groupby = [];
          for (const channel of FACET_CHANNELS) {
              const fieldDef = this.facet[channel];
              if (fieldDef) {
                  groupby.push(vgField(fieldDef));
                  const { bin, sort } = fieldDef;
                  if (isBinning(bin)) {
                      groupby.push(vgField(fieldDef, { binSuffix: 'end' }));
                  }
                  if (isSortField(sort)) {
                      const { field, op = DEFAULT_SORT_OP } = sort;
                      const outputName = facetSortFieldName(fieldDef, sort);
                      if (row && column) {
                          // For crossed facet, use pre-calculate field as it requires a different groupby
                          // For each calculated field, apply max and assign them to the same name as
                          // all values of the same group should be the same anyway.
                          fields.push(outputName);
                          ops.push('max');
                          as.push(outputName);
                      }
                      else {
                          fields.push(field);
                          ops.push(op);
                          as.push(outputName);
                      }
                  }
                  else if (isArray(sort)) {
                      const outputName = sortArrayIndexField(fieldDef, channel);
                      fields.push(outputName);
                      ops.push('max');
                      as.push(outputName);
                  }
              }
          }
          const cross = !!row && !!column;
          return Object.assign({ name,
              data,
              groupby }, (cross || fields.length > 0
              ? {
                  aggregate: Object.assign(Object.assign({}, (cross ? { cross } : {})), (fields.length ? { fields, ops, as } : {}))
              }
              : {}));
      }
      facetSortFields(channel) {
          const { facet } = this;
          const fieldDef = facet[channel];
          if (fieldDef) {
              if (isSortField(fieldDef.sort)) {
                  return [facetSortFieldName(fieldDef, fieldDef.sort, { expr: 'datum' })];
              }
              else if (isArray(fieldDef.sort)) {
                  return [sortArrayIndexField(fieldDef, channel, { expr: 'datum' })];
              }
              return [vgField(fieldDef, { expr: 'datum' })];
          }
          return [];
      }
      facetSortOrder(channel) {
          const { facet } = this;
          const fieldDef = facet[channel];
          if (fieldDef) {
              const { sort } = fieldDef;
              const order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';
              return [order];
          }
          return [];
      }
      assembleLabelTitle() {
          var _a;
          const { facet, config } = this;
          if (facet.facet) {
              // Facet always uses title to display labels
              return assembleLabelTitle(facet.facet, 'facet', config);
          }
          const ORTHOGONAL_ORIENT = {
              row: ['top', 'bottom'],
              column: ['left', 'right']
          };
          for (const channel of HEADER_CHANNELS) {
              if (facet[channel]) {
                  const labelOrient = getHeaderProperty('labelOrient', (_a = facet[channel]) === null || _a === void 0 ? void 0 : _a.header, config, channel);
                  if (contains$1(ORTHOGONAL_ORIENT[channel], labelOrient)) {
                      // Row/Column with orthogonal labelOrient must use title to display labels
                      return assembleLabelTitle(facet[channel], channel, config);
                  }
              }
          }
          return undefined;
      }
      assembleMarks() {
          const { child } = this;
          // If we facet by two dimensions, we need to add a cross operator to the aggregation
          // so that we create all groups
          const facetRoot = this.component.data.facetRoot;
          const data = assembleFacetData(facetRoot);
          const encodeEntry = child.assembleGroupEncodeEntry(false);
          const title = this.assembleLabelTitle() || child.assembleTitle();
          const style = child.assembleGroupStyle();
          const markGroup = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: this.getName('cell'), type: 'group' }, (title ? { title } : {})), (style ? { style } : {})), { from: {
                  facet: this.assembleFacet()
              }, 
              // TODO: move this to after data
              sort: {
                  field: FACET_CHANNELS.map(c => this.facetSortFields(c)).flat(),
                  order: FACET_CHANNELS.map(c => this.facetSortOrder(c)).flat()
              } }), (data.length > 0 ? { data: data } : {})), (encodeEntry ? { encode: { update: encodeEntry } } : {})), child.assembleGroup(assembleFacetSignals(this, [])));
          return [markGroup];
      }
      getMapping() {
          return this.facet;
      }
  }

  function makeJoinAggregateFromFacet(parent, facet) {
      const { row, column } = facet;
      if (row && column) {
          let newParent = null;
          // only need to make one for crossed facet
          for (const fieldDef of [row, column]) {
              if (isSortField(fieldDef.sort)) {
                  const { field, op = DEFAULT_SORT_OP } = fieldDef.sort;
                  parent = newParent = new JoinAggregateTransformNode(parent, {
                      joinaggregate: [
                          {
                              op,
                              field,
                              as: facetSortFieldName(fieldDef, fieldDef.sort, { forAs: true })
                          }
                      ],
                      groupby: [vgField(fieldDef)]
                  });
              }
          }
          return newParent;
      }
      return null;
  }

  function findSource(data, sources) {
      var _a, _b, _c, _d;
      for (const other of sources) {
          const otherData = other.data;
          // if both datasets have a name defined, we cannot merge
          if (data.name && other.hasName() && data.name !== other.dataName) {
              continue;
          }
          const formatMesh = (_a = data['format']) === null || _a === void 0 ? void 0 : _a.mesh;
          const otherFeature = (_b = otherData.format) === null || _b === void 0 ? void 0 : _b.feature;
          // feature and mesh are mutually exclusive
          if (formatMesh && otherFeature) {
              continue;
          }
          // we have to extract the same feature or mesh
          const formatFeature = (_c = data['format']) === null || _c === void 0 ? void 0 : _c.feature;
          if ((formatFeature || otherFeature) && formatFeature !== otherFeature) {
              continue;
          }
          const otherMesh = (_d = otherData.format) === null || _d === void 0 ? void 0 : _d.mesh;
          if ((formatMesh || otherMesh) && formatMesh !== otherMesh) {
              continue;
          }
          if (isInlineData(data) && isInlineData(otherData)) {
              if (deepEqual$1(data.values, otherData.values)) {
                  return other;
              }
          }
          else if (isUrlData(data) && isUrlData(otherData)) {
              if (data.url === otherData.url) {
                  return other;
              }
          }
          else if (isNamedData(data)) {
              if (data.name === other.dataName) {
                  return other;
              }
          }
      }
      return null;
  }
  function parseRoot(model, sources) {
      if (model.data || !model.parent) {
          // if the model defines a data source or is the root, create a source node
          if (model.data === null) {
              // data: null means we should ignore the parent's data so we just create a new data source
              const source = new SourceNode({ values: [] });
              sources.push(source);
              return source;
          }
          const existingSource = findSource(model.data, sources);
          if (existingSource) {
              if (!isGenerator(model.data)) {
                  existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);
              }
              // if the new source has a name but the existing one does not, we can set it
              if (!existingSource.hasName() && model.data.name) {
                  existingSource.dataName = model.data.name;
              }
              return existingSource;
          }
          else {
              const source = new SourceNode(model.data);
              sources.push(source);
              return source;
          }
      }
      else {
          // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.
          return model.parent.component.data.facetRoot
              ? model.parent.component.data.facetRoot
              : model.parent.component.data.main;
      }
  }
  /**
   * Parses a transform array into a chain of connected dataflow nodes.
   */
  function parseTransformArray(head, model, ancestorParse) {
      var _a, _b;
      let lookupCounter = 0;
      for (const t of model.transforms) {
          let derivedType = undefined;
          let transformNode;
          if (isCalculate(t)) {
              transformNode = head = new CalculateNode(head, t);
              derivedType = 'derived';
          }
          else if (isFilter(t)) {
              const implicit = getImplicitFromFilterTransform(t);
              transformNode = head = (_a = ParseNode.makeWithAncestors(head, {}, implicit, ancestorParse)) !== null && _a !== void 0 ? _a : head;
              head = new FilterNode(head, model, t.filter);
          }
          else if (isBin(t)) {
              transformNode = head = BinNode.makeFromTransform(head, t, model);
              derivedType = 'number';
          }
          else if (isTimeUnit(t)) {
              derivedType = 'date';
              const parsedAs = ancestorParse.getWithExplicit(t.field);
              // Create parse node because the input to time unit is always date.
              if (parsedAs.value === undefined) {
                  head = new ParseNode(head, { [t.field]: derivedType });
                  ancestorParse.set(t.field, derivedType, false);
              }
              transformNode = head = TimeUnitNode.makeFromTransform(head, t);
          }
          else if (isAggregate$1(t)) {
              transformNode = head = AggregateNode.makeFromTransform(head, t);
              derivedType = 'number';
              if (requiresSelectionId(model)) {
                  head = new IdentifierNode(head);
              }
          }
          else if (isLookup(t)) {
              transformNode = head = LookupNode.make(head, model, t, lookupCounter++);
              derivedType = 'derived';
          }
          else if (isWindow(t)) {
              transformNode = head = new WindowTransformNode(head, t);
              derivedType = 'number';
          }
          else if (isJoinAggregate(t)) {
              transformNode = head = new JoinAggregateTransformNode(head, t);
              derivedType = 'number';
          }
          else if (isStack(t)) {
              transformNode = head = StackNode.makeFromTransform(head, t);
              derivedType = 'derived';
          }
          else if (isFold(t)) {
              transformNode = head = new FoldTransformNode(head, t);
              derivedType = 'derived';
          }
          else if (isFlatten(t)) {
              transformNode = head = new FlattenTransformNode(head, t);
              derivedType = 'derived';
          }
          else if (isPivot(t)) {
              transformNode = head = new PivotTransformNode(head, t);
              derivedType = 'derived';
          }
          else if (isSample(t)) {
              head = new SampleTransformNode(head, t);
          }
          else if (isImpute(t)) {
              transformNode = head = ImputeNode.makeFromTransform(head, t);
              derivedType = 'derived';
          }
          else if (isDensity(t)) {
              transformNode = head = new DensityTransformNode(head, t);
              derivedType = 'derived';
          }
          else if (isQuantile(t)) {
              transformNode = head = new QuantileTransformNode(head, t);
              derivedType = 'derived';
          }
          else if (isRegression(t)) {
              transformNode = head = new RegressionTransformNode(head, t);
              derivedType = 'derived';
          }
          else if (isLoess(t)) {
              transformNode = head = new LoessTransformNode(head, t);
              derivedType = 'derived';
          }
          else {
              warn(invalidTransformIgnored(t));
              continue;
          }
          if (transformNode && derivedType !== undefined) {
              for (const field of (_b = transformNode.producedFields()) !== null && _b !== void 0 ? _b : []) {
                  ancestorParse.set(field, derivedType, false);
              }
          }
      }
      return head;
  }
  /*
  Description of the dataflow (http://asciiflow.com/):
       +--------+
       | Source |
       +---+----+
           |
           v
       FormatParse
       (explicit)
           |
           v
       Transforms
  (Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)
           |
           v
       FormatParse
       (implicit)
           |
           v
   Binning (in `encoding`)
           |
           v
   Timeunit (in `encoding`)
           |
           v
  Formula From Sort Array
           |
           v
        +--+--+
        | Raw |
        +-----+
           |
           v
    Aggregate (in `encoding`)
           |
           v
    Stack (in `encoding`)
           |
           v
    Invalid Filter
           |
           v
     +----------+
     |   Main   |
     +----------+
           |
           v
       +-------+
       | Facet |----> "column", "column-layout", and "row"
       +-------+
           |
           v
    ...Child data...
  */
  function parseData(model) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      let head = parseRoot(model, model.component.data.sources);
      const { outputNodes, outputNodeRefCounts } = model.component.data;
      const ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();
      const data = model.data;
      if (isGenerator(data)) {
          // insert generator transform
          if (isSequenceGenerator(data)) {
              head = new SequenceNode(head, data.sequence);
          }
          else if (isGraticuleGenerator(data)) {
              head = new GraticuleNode(head, data.graticule);
          }
          // no parsing necessary for generator
          ancestorParse.parseNothing = true;
      }
      else if (((_a = data === null || data === void 0 ? void 0 : data.format) === null || _a === void 0 ? void 0 : _a.parse) === null) {
          // format.parse: null means disable parsing
          ancestorParse.parseNothing = true;
      }
      head = (_b = ParseNode.makeExplicit(head, model, ancestorParse)) !== null && _b !== void 0 ? _b : head;
      // Default discrete selections require an identifer transform to
      // uniquely identify data points. Add this transform at the head of
      // the pipeline such that the identifier field is available for all
      // subsequent datasets. During optimization, we will remove this
      // transform if it proves to be unnecessary. Additional identifier
      // transforms will be necessary when new tuples are constructed
      // (e.g., post-aggregation).
      head = new IdentifierNode(head);
      // HACK: This is equivalent for merging bin extent for union scale.
      // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale
      const parentIsLayer = model.parent && isLayerModel(model.parent);
      if (isUnitModel(model) || isFacetModel(model)) {
          if (parentIsLayer) {
              head = (_c = BinNode.makeFromEncoding(head, model)) !== null && _c !== void 0 ? _c : head;
          }
      }
      if (model.transforms.length > 0) {
          head = parseTransformArray(head, model, ancestorParse);
      }
      // create parse nodes for fields that need to be parsed (or flattened) implicitly
      const implicitSelection = getImplicitFromSelection(model);
      const implicitEncoding = getImplicitFromEncoding(model);
      head = (_d = ParseNode.makeWithAncestors(head, {}, Object.assign(Object.assign({}, implicitSelection), implicitEncoding), ancestorParse)) !== null && _d !== void 0 ? _d : head;
      if (isUnitModel(model)) {
          head = GeoJSONNode.parseAll(head, model);
          head = GeoPointNode.parseAll(head, model);
      }
      if (isUnitModel(model) || isFacetModel(model)) {
          if (!parentIsLayer) {
              head = (_e = BinNode.makeFromEncoding(head, model)) !== null && _e !== void 0 ? _e : head;
          }
          head = (_f = TimeUnitNode.makeFromEncoding(head, model)) !== null && _f !== void 0 ? _f : head;
          head = CalculateNode.parseAllForSortIndex(head, model);
      }
      // add an output node pre aggregation
      const rawName = model.getDataName(DataSourceType.Raw);
      const raw = new OutputNode(head, rawName, DataSourceType.Raw, outputNodeRefCounts);
      outputNodes[rawName] = raw;
      head = raw;
      if (isUnitModel(model)) {
          const agg = AggregateNode.makeFromEncoding(head, model);
          if (agg) {
              head = agg;
              if (requiresSelectionId(model)) {
                  head = new IdentifierNode(head);
              }
          }
          head = (_g = ImputeNode.makeFromEncoding(head, model)) !== null && _g !== void 0 ? _g : head;
          head = (_h = StackNode.makeFromEncoding(head, model)) !== null && _h !== void 0 ? _h : head;
      }
      if (isUnitModel(model)) {
          head = (_j = FilterInvalidNode.make(head, model)) !== null && _j !== void 0 ? _j : head;
      }
      // output node for marks
      const mainName = model.getDataName(DataSourceType.Main);
      const main = new OutputNode(head, mainName, DataSourceType.Main, outputNodeRefCounts);
      outputNodes[mainName] = main;
      head = main;
      if (isUnitModel(model)) {
          materializeSelections(model, main);
      }
      // add facet marker
      let facetRoot = null;
      if (isFacetModel(model)) {
          const facetName = model.getName('facet');
          // Derive new aggregate for facet's sort field
          // augment data source with new fields for crossed facet
          head = (_k = makeJoinAggregateFromFacet(head, model.facet)) !== null && _k !== void 0 ? _k : head;
          facetRoot = new FacetNode(head, model, facetName, main.getSource());
          outputNodes[facetName] = facetRoot;
      }
      return Object.assign(Object.assign({}, model.component.data), { outputNodes,
          outputNodeRefCounts,
          raw,
          main,
          facetRoot,
          ancestorParse });
  }

  class ConcatModel extends Model {
      constructor(spec, parent, parentGivenName, config) {
          var _a, _b, _c, _d;
          super(spec, 'concat', parent, parentGivenName, config, spec.resolve);
          if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === 'shared' || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === 'shared') {
              warn(CONCAT_CANNOT_SHARE_AXIS);
          }
          this.children = this.getChildren(spec).map((child, i) => {
              return buildModel(child, this, this.getName('concat_' + i), undefined, config);
          });
      }
      parseData() {
          this.component.data = parseData(this);
          for (const child of this.children) {
              child.parseData();
          }
      }
      parseSelections() {
          // Merge selections up the hierarchy so that they may be referenced
          // across unit specs. Persist their definitions within each child
          // to assemble signals which remain within output Vega unit groups.
          this.component.selection = {};
          for (const child of this.children) {
              child.parseSelections();
              for (const key of keys(child.component.selection)) {
                  this.component.selection[key] = child.component.selection[key];
              }
          }
      }
      parseMarkGroup() {
          for (const child of this.children) {
              child.parseMarkGroup();
          }
      }
      parseAxesAndHeaders() {
          for (const child of this.children) {
              child.parseAxesAndHeaders();
          }
          // TODO(#2415): support shared axes
      }
      getChildren(spec) {
          if (isVConcatSpec(spec)) {
              return spec.vconcat;
          }
          else if (isHConcatSpec(spec)) {
              return spec.hconcat;
          }
          return spec.concat;
      }
      parseLayoutSize() {
          parseConcatLayoutSize(this);
      }
      parseAxisGroup() {
          return null;
      }
      assembleSelectionTopLevelSignals(signals) {
          return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
      }
      assembleSignals() {
          this.children.forEach(child => child.assembleSignals());
          return [];
      }
      assembleLayoutSignals() {
          const layoutSignals = assembleLayoutSignals(this);
          for (const child of this.children) {
              layoutSignals.push(...child.assembleLayoutSignals());
          }
          return layoutSignals;
      }
      assembleSelectionData(data) {
          return this.children.reduce((db, child) => child.assembleSelectionData(db), data);
      }
      assembleMarks() {
          // only children have marks
          return this.children.map(child => {
              const title = child.assembleTitle();
              const style = child.assembleGroupStyle();
              const encodeEntry = child.assembleGroupEncodeEntry(false);
              return Object.assign(Object.assign(Object.assign(Object.assign({ type: 'group', name: child.getName('group') }, (title ? { title } : {})), (style ? { style } : {})), (encodeEntry ? { encode: { update: encodeEntry } } : {})), child.assembleGroup());
          });
      }
      assembleDefaultLayout() {
          const columns = this.layout.columns;
          return Object.assign(Object.assign({}, (columns != null ? { columns: columns } : {})), { bounds: 'full', 
              // Use align each so it can work with multiple plots with different size
              align: 'each' });
      }
  }

  function isFalseOrNull(v) {
      return v === false || v === null;
  }
  const AXIS_COMPONENT_PROPERTIES_INDEX = Object.assign(Object.assign({ disable: 1, gridScale: 1, scale: 1 }, COMMON_AXIS_PROPERTIES_INDEX), { labelExpr: 1, encode: 1 });
  const AXIS_COMPONENT_PROPERTIES = keys(AXIS_COMPONENT_PROPERTIES_INDEX);
  class AxisComponent extends Split {
      constructor(explicit = {}, implicit = {}, mainExtracted = false) {
          super();
          this.explicit = explicit;
          this.implicit = implicit;
          this.mainExtracted = mainExtracted;
      }
      clone() {
          return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);
      }
      hasAxisPart(part) {
          // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.
          if (part === 'axis') {
              // always has the axis container part
              return true;
          }
          if (part === 'grid' || part === 'title') {
              return !!this.get(part);
          }
          // Other parts are enabled by default, so they should not be false or null.
          return !isFalseOrNull(this.get(part));
      }
      hasOrientSignalRef() {
          return isSignalRef(this.explicit.orient);
      }
  }

  function labels$1(model, channel, specifiedLabelsSpec) {
      var _a;
      const { encoding, config } = model;
      const fieldOrDatumDef = (_a = getFieldOrDatumDef(encoding[channel])) !== null && _a !== void 0 ? _a : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);
      const axis = model.axis(channel) || {};
      const { format, formatType } = axis;
      if (isCustomFormatType(formatType)) {
          return Object.assign({ text: formatCustomType({
                  fieldOrDatumDef,
                  field: 'datum.value',
                  format,
                  formatType,
                  config
              }) }, specifiedLabelsSpec);
      }
      return specifiedLabelsSpec;
  }

  function parseUnitAxes(model) {
      return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {
          if (model.component.scales[channel]) {
              axis[channel] = [parseAxis(channel, model)];
          }
          return axis;
      }, {});
  }
  const OPPOSITE_ORIENT = {
      bottom: 'top',
      top: 'bottom',
      left: 'right',
      right: 'left'
  };
  function parseLayerAxes(model) {
      var _a;
      const { axes, resolve } = model.component;
      const axisCount = { top: 0, bottom: 0, right: 0, left: 0 };
      for (const child of model.children) {
          child.parseAxesAndHeaders();
          for (const channel of keys(child.component.axes)) {
              resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);
              if (resolve.axis[channel] === 'shared') {
                  // If the resolve says shared (and has not been overridden)
                  // We will try to merge and see if there is a conflict
                  axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);
                  if (!axes[channel]) {
                      // If merge returns nothing, there is a conflict so we cannot make the axis shared.
                      // Thus, mark axis as independent and remove the axis component.
                      resolve.axis[channel] = 'independent';
                      delete axes[channel];
                  }
              }
          }
      }
      // Move axes to layer's axis component and merge shared axes
      for (const channel of POSITION_SCALE_CHANNELS) {
          for (const child of model.children) {
              if (!child.component.axes[channel]) {
                  // skip if the child does not have a particular axis
                  continue;
              }
              if (resolve.axis[channel] === 'independent') {
                  // If axes are independent, concat the axisComponent array.
                  axes[channel] = ((_a = axes[channel]) !== null && _a !== void 0 ? _a : []).concat(child.component.axes[channel]);
                  // Automatically adjust orient
                  for (const axisComponent of child.component.axes[channel]) {
                      const { value: orient, explicit } = axisComponent.getWithExplicit('orient');
                      if (isSignalRef(orient)) {
                          continue;
                      }
                      if (axisCount[orient] > 0 && !explicit) {
                          // Change axis orient if the number do not match
                          const oppositeOrient = OPPOSITE_ORIENT[orient];
                          if (axisCount[orient] > axisCount[oppositeOrient]) {
                              axisComponent.set('orient', oppositeOrient, false);
                          }
                      }
                      axisCount[orient]++;
                      // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?
                  }
              }
              // After merging, make sure to remove axes from child
              delete child.component.axes[channel];
          }
          // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)
          if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {
              for (const axisCmpt of axes[channel]) {
                  if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {
                      axisCmpt.implicit.grid = false;
                  }
              }
          }
      }
  }
  function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {
      if (mergedAxisCmpts) {
          // FIXME: this is a bit wrong once we support multiple axes
          if (mergedAxisCmpts.length !== childAxisCmpts.length) {
              return undefined; // Cannot merge axis component with different number of axes.
          }
          const length = mergedAxisCmpts.length;
          for (let i = 0; i < length; i++) {
              const merged = mergedAxisCmpts[i];
              const child = childAxisCmpts[i];
              if (!!merged !== !!child) {
                  return undefined;
              }
              else if (merged && child) {
                  const mergedOrient = merged.getWithExplicit('orient');
                  const childOrient = child.getWithExplicit('orient');
                  if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
                      // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
                      // Cannot merge due to inconsistent orient
                      return undefined;
                  }
                  else {
                      mergedAxisCmpts[i] = mergeAxisComponent(merged, child);
                  }
              }
          }
      }
      else {
          // For first one, return a copy of the child
          return childAxisCmpts.map(axisComponent => axisComponent.clone());
      }
      return mergedAxisCmpts;
  }
  function mergeAxisComponent(merged, child) {
      for (const prop of AXIS_COMPONENT_PROPERTIES) {
          const mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', 
          // Tie breaker function
          (v1, v2) => {
              switch (prop) {
                  case 'title':
                      return mergeTitleComponent(v1, v2);
                  case 'gridScale':
                      return {
                          explicit: v1.explicit,
                          value: getFirstDefined(v1.value, v2.value)
                      };
              }
              return defaultTieBreaker(v1, v2, prop, 'axis');
          });
          merged.setWithExplicit(prop, mergedValueWithExplicit);
      }
      return merged;
  }
  // eslint-disable-next-line @typescript-eslint/ban-types
  function isExplicit$1(value, property, axis, model, channel) {
      if (property === 'disable') {
          return axis !== undefined; // if axis is specified or null/false, then it's enable/disable state is explicit
      }
      axis = axis || {};
      switch (property) {
          case 'titleAngle':
          case 'labelAngle':
              return value === (isSignalRef(axis.labelAngle) ? axis.labelAngle : normalizeAngle(axis.labelAngle));
          case 'values':
              return !!axis.values;
          // specified axis.values is already respected, but may get transformed.
          case 'encode':
              // both VL axis.encoding and axis.labelAngle affect VG axis.encode
              return !!axis.encoding || !!axis.labelAngle;
          case 'title':
              // title can be explicit if fieldDef.title is set
              if (value === getFieldDefTitle(model, channel)) {
                  return true;
              }
      }
      // Otherwise, things are explicit if the returned value matches the specified property
      return value === axis[property];
  }
  /**
   * Properties to always include values from config
   */
  const propsToAlwaysIncludeConfig = new Set([
      'grid',
      'translate',
      // the rest are not axis configs in Vega, but are in VL, so we need to set too.
      'format',
      'formatType',
      'orient',
      'labelExpr',
      'tickCount',
      'position',
      'tickMinStep'
  ]);
  function parseAxis(channel, model) {
      var _a, _b, _c;
      let axis = model.axis(channel);
      const axisComponent = new AxisComponent();
      const fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]);
      const { mark, config } = model;
      const orient = (axis === null || axis === void 0 ? void 0 : axis.orient) || ((_a = config[channel === 'x' ? 'axisX' : 'axisY']) === null || _a === void 0 ? void 0 : _a.orient) || ((_b = config.axis) === null || _b === void 0 ? void 0 : _b.orient) ||
          defaultOrient(channel);
      const scaleType = model.getScaleComponent(channel).get('type');
      const axisConfigs = getAxisConfigs(channel, scaleType, orient, model.config);
      const disable = axis !== undefined ? !axis : getAxisConfig('disable', config.style, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs).configValue;
      axisComponent.set('disable', disable, axis !== undefined);
      if (disable) {
          return axisComponent;
      }
      axis = axis || {};
      const labelAngle = getLabelAngle(fieldOrDatumDef, axis, channel, config.style, axisConfigs);
      const ruleParams = {
          fieldOrDatumDef,
          axis,
          channel,
          model,
          scaleType,
          orient,
          labelAngle,
          mark,
          config
      };
      // 1.2. Add properties
      for (const property of AXIS_COMPONENT_PROPERTIES) {
          const value = property in axisRules ? axisRules[property](ruleParams) : isAxisProperty(property) ? axis[property] : undefined;
          const hasValue = value !== undefined;
          const explicit = isExplicit$1(value, property, axis, model, channel);
          if (hasValue && explicit) {
              axisComponent.set(property, value, explicit);
          }
          else {
              const { configValue = undefined, configFrom = undefined } = isAxisProperty(property) && property !== 'values'
                  ? getAxisConfig(property, config.style, axis.style, axisConfigs)
                  : {};
              const hasConfigValue = configValue !== undefined;
              if (hasValue && !hasConfigValue) {
                  // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)
                  axisComponent.set(property, value, explicit);
              }
              else if (
              // Cases need implicit values
              // 1. Axis config that aren't available in Vega
              !(configFrom === 'vgAxisConfig') ||
                  // 2. Certain properties are always included (see `propsToAlwaysIncludeConfig`'s declaration for more details)
                  (propsToAlwaysIncludeConfig.has(property) && hasConfigValue) ||
                  // 3. Conditional axis values and signals
                  isConditionalAxisValue(configValue) ||
                  isSignalRef(configValue)) {
                  // If a config is specified and is conditional, copy conditional value from axis config
                  axisComponent.set(property, configValue, false);
              }
          }
      }
      // 2) Add guide encode definition groups
      const axisEncoding = (_c = axis.encoding) !== null && _c !== void 0 ? _c : {};
      const axisEncode = AXIS_PARTS.reduce((e, part) => {
          var _a;
          if (!axisComponent.hasAxisPart(part)) {
              // No need to create encode for a disabled part.
              return e;
          }
          const axisEncodingPart = guideEncodeEntry((_a = axisEncoding[part]) !== null && _a !== void 0 ? _a : {}, model);
          const value = part === 'labels' ? labels$1(model, channel, axisEncodingPart) : axisEncodingPart;
          if (value !== undefined && !isEmpty$1(value)) {
              e[part] = { update: value };
          }
          return e;
      }, {});
      // FIXME: By having encode as one property, we won't have fine grained encode merging.
      if (!isEmpty$1(axisEncode)) {
          axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);
      }
      return axisComponent;
  }

  function initLayoutSize({ encoding, size }) {
      for (const channel of POSITION_SCALE_CHANNELS) {
          const sizeType = getSizeChannel(channel);
          if (isStep(size[sizeType])) {
              if (isContinuousFieldOrDatumDef(encoding[channel])) {
                  delete size[sizeType];
                  warn(stepDropped(sizeType));
              }
          }
      }
      return size;
  }

  function initMarkdef(originalMarkDef, encoding, config) {
      const markDef = replaceExprRefInIndex(originalMarkDef);
      // set orient, which can be overridden by rules as sometimes the specified orient is invalid.
      const specifiedOrient = getMarkPropOrConfig('orient', markDef, config);
      markDef.orient = orient(markDef.type, encoding, specifiedOrient);
      if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {
          warn(orientOverridden(markDef.orient, specifiedOrient));
      }
      if (markDef.type === 'bar' && markDef.orient) {
          const cornerRadiusEnd = getMarkPropOrConfig('cornerRadiusEnd', markDef, config);
          if (cornerRadiusEnd !== undefined) {
              const newProps = (markDef.orient === 'horizontal' && encoding.x2) || (markDef.orient === 'vertical' && encoding.y2)
                  ? ['cornerRadius']
                  : BAR_CORNER_RADIUS_INDEX[markDef.orient];
              for (const newProp of newProps) {
                  markDef[newProp] = cornerRadiusEnd;
              }
              if (markDef.cornerRadiusEnd !== undefined) {
                  delete markDef.cornerRadiusEnd; // no need to keep the original cap cornerRadius
              }
          }
      }
      // set opacity and filled if not specified in mark config
      const specifiedOpacity = getMarkPropOrConfig('opacity', markDef, config);
      if (specifiedOpacity === undefined) {
          markDef.opacity = opacity(markDef.type, encoding);
      }
      // set cursor, which should be pointer if href channel is present unless otherwise specified
      const specifiedCursor = getMarkPropOrConfig('cursor', markDef, config);
      if (specifiedCursor === undefined) {
          markDef.cursor = cursor(markDef, encoding, config);
      }
      return markDef;
  }
  function cursor(markDef, encoding, config) {
      if (encoding.href || markDef.href || getMarkPropOrConfig('href', markDef, config)) {
          return 'pointer';
      }
      return markDef.cursor;
  }
  function opacity(mark, encoding) {
      if (contains$1([POINT, TICK, CIRCLE, SQUARE], mark)) {
          // point-based marks
          if (!isAggregate(encoding)) {
              return 0.7;
          }
      }
      return undefined;
  }
  function defaultFilled(markDef, config, { graticule }) {
      if (graticule) {
          return false;
      }
      const filledConfig = getMarkConfig('filled', markDef, config);
      const mark = markDef.type;
      return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);
  }
  function orient(mark, encoding, specifiedOrient) {
      switch (mark) {
          case POINT:
          case CIRCLE:
          case SQUARE:
          case TEXT$1:
          case RECT:
          case IMAGE:
              // orient is meaningless for these marks.
              return undefined;
      }
      const { x, y, x2, y2 } = encoding;
      switch (mark) {
          case BAR:
              if (isFieldDef(x) && (isBinned(x.bin) || (isFieldDef(y) && y.aggregate && !x.aggregate))) {
                  return 'vertical';
              }
              if (isFieldDef(y) && (isBinned(y.bin) || (isFieldDef(x) && x.aggregate && !y.aggregate))) {
                  return 'horizontal';
              }
              if (y2 || x2) {
                  // Ranged bar does not always have clear orientation, so we allow overriding
                  if (specifiedOrient) {
                      return specifiedOrient;
                  }
                  // If y is range and x is non-range, non-bin Q, y is likely a prebinned field
                  if (!x2) {
                      if ((isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin)) || isNumericDataDef(x)) {
                          return 'horizontal';
                      }
                  }
                  // If x is range and y is non-range, non-bin Q, x is likely a prebinned field
                  if (!y2) {
                      if ((isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin)) || isNumericDataDef(y)) {
                          return 'vertical';
                      }
                  }
              }
          // falls through
          case RULE:
              // return undefined for line segment rule and bar with both axis ranged
              // we have to ignore the case that the data are already binned
              if (x2 && !(isFieldDef(x) && isBinned(x.bin)) && y2 && !(isFieldDef(y) && isBinned(y.bin))) {
                  return undefined;
              }
          // falls through
          case AREA:
              // If there are range for both x and y, y (vertical) has higher precedence.
              if (y2) {
                  if (isFieldDef(y) && isBinned(y.bin)) {
                      return 'horizontal';
                  }
                  else {
                      return 'vertical';
                  }
              }
              else if (x2) {
                  if (isFieldDef(x) && isBinned(x.bin)) {
                      return 'vertical';
                  }
                  else {
                      return 'horizontal';
                  }
              }
              else if (mark === RULE) {
                  if (x && !y) {
                      return 'vertical';
                  }
                  else if (y && !x) {
                      return 'horizontal';
                  }
              }
          // falls through
          case LINE:
          case TICK: {
              // Tick is opposite to bar, line, area and never have ranged mark.
              const xIsContinuous = isContinuousFieldOrDatumDef(x);
              const yIsContinuous = isContinuousFieldOrDatumDef(y);
              if (xIsContinuous && !yIsContinuous) {
                  return mark !== 'tick' ? 'horizontal' : 'vertical';
              }
              else if (!xIsContinuous && yIsContinuous) {
                  return mark !== 'tick' ? 'vertical' : 'horizontal';
              }
              else if (xIsContinuous && yIsContinuous) {
                  const xDef = x; // we can cast here since they are surely fieldDef
                  const yDef = y;
                  const xIsTemporal = xDef.type === TEMPORAL;
                  const yIsTemporal = yDef.type === TEMPORAL;
                  // temporal without timeUnit is considered continuous, but better serves as dimension
                  if (xIsTemporal && !yIsTemporal) {
                      return mark !== 'tick' ? 'vertical' : 'horizontal';
                  }
                  else if (!xIsTemporal && yIsTemporal) {
                      return mark !== 'tick' ? 'horizontal' : 'vertical';
                  }
                  if (!xDef.aggregate && yDef.aggregate) {
                      return mark !== 'tick' ? 'vertical' : 'horizontal';
                  }
                  else if (xDef.aggregate && !yDef.aggregate) {
                      return mark !== 'tick' ? 'horizontal' : 'vertical';
                  }
                  if (specifiedOrient) {
                      // When ambiguous, use user specified one.
                      return specifiedOrient;
                  }
                  return 'vertical';
              }
              else {
                  // Discrete x Discrete case
                  if (specifiedOrient) {
                      // When ambiguous, use user specified one.
                      return specifiedOrient;
                  }
                  return undefined;
              }
          }
      }
      return 'vertical';
  }

  const arc = {
      vgMark: 'arc',
      encodeEntry: (model) => {
          return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'include',
              size: 'ignore',
              orient: 'ignore',
              theta: 'ignore'
          })), pointPosition('x', model, { defaultPos: 'mid' })), pointPosition('y', model, { defaultPos: 'mid' })), rectPosition(model, 'radius', 'arc')), rectPosition(model, 'theta', 'arc'));
      }
  };

  const area = {
      vgMark: 'area',
      encodeEntry: (model) => {
          return Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'include',
              orient: 'include',
              size: 'ignore',
              theta: 'ignore'
          })), pointOrRangePosition('x', model, {
              defaultPos: 'zeroOrMin',
              defaultPos2: 'zeroOrMin',
              range: model.markDef.orient === 'horizontal'
          })), pointOrRangePosition('y', model, {
              defaultPos: 'zeroOrMin',
              defaultPos2: 'zeroOrMin',
              range: model.markDef.orient === 'vertical'
          })), defined(model));
      }
  };

  const bar = {
      vgMark: 'rect',
      encodeEntry: (model) => {
          return Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'include',
              orient: 'ignore',
              size: 'ignore',
              theta: 'ignore'
          })), rectPosition(model, 'x', 'bar')), rectPosition(model, 'y', 'bar'));
      }
  };

  const geoshape = {
      vgMark: 'shape',
      encodeEntry: (model) => {
          return Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'include',
              size: 'ignore',
              orient: 'ignore',
              theta: 'ignore'
          }));
      },
      postEncodingTransform: (model) => {
          const { encoding } = model;
          const shapeDef = encoding.shape;
          const transform = Object.assign({ type: 'geoshape', projection: model.projectionName() }, (shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON
              ? { field: vgField(shapeDef, { expr: 'datum' }) }
              : {}));
          return [transform];
      }
  };

  const image = {
      vgMark: 'image',
      encodeEntry: (model) => {
          return Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'ignore',
              orient: 'ignore',
              size: 'ignore',
              theta: 'ignore'
          })), rectPosition(model, 'x', 'image')), rectPosition(model, 'y', 'image')), text(model, 'url'));
      }
  };

  const line = {
      vgMark: 'line',
      encodeEntry: (model) => {
          return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'include',
              size: 'ignore',
              orient: 'ignore',
              theta: 'ignore'
          })), pointPosition('x', model, { defaultPos: 'mid' })), pointPosition('y', model, { defaultPos: 'mid' })), nonPosition('size', model, {
              vgChannel: 'strokeWidth' // VL's line size is strokeWidth
          })), defined(model));
      }
  };
  const trail = {
      vgMark: 'trail',
      encodeEntry: (model) => {
          return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'include',
              size: 'include',
              orient: 'ignore',
              theta: 'ignore'
          })), pointPosition('x', model, { defaultPos: 'mid' })), pointPosition('y', model, { defaultPos: 'mid' })), nonPosition('size', model)), defined(model));
      }
  };

  function encodeEntry(model, fixedShape) {
      const { config } = model;
      return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
          align: 'ignore',
          baseline: 'ignore',
          color: 'include',
          size: 'include',
          orient: 'ignore',
          theta: 'ignore'
      })), pointPosition('x', model, { defaultPos: 'mid' })), pointPosition('y', model, { defaultPos: 'mid' })), nonPosition('size', model)), nonPosition('angle', model)), shapeMixins(model, config, fixedShape));
  }
  function shapeMixins(model, config, fixedShape) {
      if (fixedShape) {
          return { shape: { value: fixedShape } };
      }
      return nonPosition('shape', model);
  }
  const point = {
      vgMark: 'symbol',
      encodeEntry: (model) => {
          return encodeEntry(model);
      }
  };
  const circle = {
      vgMark: 'symbol',
      encodeEntry: (model) => {
          return encodeEntry(model, 'circle');
      }
  };
  const square = {
      vgMark: 'symbol',
      encodeEntry: (model) => {
          return encodeEntry(model, 'square');
      }
  };

  const rect = {
      vgMark: 'rect',
      encodeEntry: (model) => {
          return Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'include',
              orient: 'ignore',
              size: 'ignore',
              theta: 'ignore'
          })), rectPosition(model, 'x', 'rect')), rectPosition(model, 'y', 'rect'));
      }
  };

  const rule = {
      vgMark: 'rule',
      encodeEntry: (model) => {
          const { markDef } = model;
          const orient = markDef.orient;
          if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {
              // Show nothing if we have none of x, y, lat, and long.
              return {};
          }
          return Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'include',
              orient: 'ignore',
              size: 'ignore',
              theta: 'ignore'
          })), pointOrRangePosition('x', model, {
              defaultPos: orient === 'horizontal' ? 'zeroOrMax' : 'mid',
              defaultPos2: 'zeroOrMin',
              range: orient !== 'vertical' // include x2 for horizontal or line segment rule
          })), pointOrRangePosition('y', model, {
              defaultPos: orient === 'vertical' ? 'zeroOrMax' : 'mid',
              defaultPos2: 'zeroOrMin',
              range: orient !== 'horizontal' // include y2 for vertical or line segment rule
          })), nonPosition('size', model, {
              vgChannel: 'strokeWidth' // VL's rule size is strokeWidth
          }));
      }
  };

  const text$1 = {
      vgMark: 'text',
      encodeEntry: (model) => {
          const { config, encoding } = model;
          return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'include',
              baseline: 'include',
              color: 'include',
              size: 'ignore',
              orient: 'ignore',
              theta: 'include'
          })), pointPosition('x', model, { defaultPos: 'mid' })), pointPosition('y', model, { defaultPos: 'mid' })), text(model)), nonPosition('size', model, {
              vgChannel: 'fontSize' // VL's text size is fontSize
          })), nonPosition('angle', model)), valueIfDefined('align', align(model.markDef, encoding, config))), valueIfDefined('baseline', baseline$1(model.markDef, encoding, config))), pointPosition('radius', model, { defaultPos: null, isMidPoint: true })), pointPosition('theta', model, { defaultPos: null, isMidPoint: true }));
      }
  };
  function align(markDef, encoding, config) {
      const a = getMarkPropOrConfig('align', markDef, config);
      if (a === undefined) {
          return 'center';
      }
      // If there is a config, Vega-parser will process this already.
      return undefined;
  }
  function baseline$1(markDef, encoding, config) {
      const b = getMarkPropOrConfig('baseline', markDef, config);
      if (b === undefined) {
          return 'middle';
      }
      // If there is a config, Vega-parser will process this already.
      return undefined;
  }

  const tick = {
      vgMark: 'rect',
      encodeEntry: (model) => {
          const { config, markDef } = model;
          const orient = markDef.orient;
          const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
          const vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';
          return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
              align: 'ignore',
              baseline: 'ignore',
              color: 'include',
              orient: 'ignore',
              size: 'ignore',
              theta: 'ignore'
          })), pointPosition('x', model, { defaultPos: 'mid', vgChannel: 'xc' })), pointPosition('y', model, { defaultPos: 'mid', vgChannel: 'yc' })), nonPosition('size', model, {
              defaultValue: defaultSize(model),
              vgChannel: vgSizeChannel
          })), { [vgThicknessChannel]: signalOrValueRef(getMarkPropOrConfig('thickness', markDef, config)) });
      }
  };
  function defaultSize(model) {
      var _a;
      const { config, markDef } = model;
      const { orient } = markDef;
      const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
      const scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');
      const markPropOrConfig = (_a = getMarkPropOrConfig('size', markDef, config, { vgChannel: vgSizeChannel })) !== null && _a !== void 0 ? _a : config.tick.bandSize;
      if (markPropOrConfig !== undefined) {
          return markPropOrConfig;
      }
      else {
          const scaleRange = scale ? scale.get('range') : undefined;
          if (scaleRange && isVgRangeStep(scaleRange) && isNumber$1(scaleRange.step)) {
              return (scaleRange.step * 3) / 4;
          }
          const defaultViewStep = getViewConfigDiscreteStep(config.view, vgSizeChannel);
          return (defaultViewStep * 3) / 4;
      }
  }

  const markCompiler = {
      arc,
      area,
      bar,
      circle,
      geoshape,
      image,
      line,
      point,
      rect,
      rule,
      square,
      text: text$1,
      tick,
      trail
  };
  function parseMarkGroups(model) {
      if (contains$1([LINE, AREA, TRAIL], model.mark)) {
          const details = pathGroupingFields(model.mark, model.encoding);
          if (details.length > 0) {
              return getPathGroups(model, details);
          }
          // otherwise use standard mark groups
      }
      else if (contains$1([BAR], model.mark)) {
          const hasCornerRadius = VG_CORNERRADIUS_CHANNELS.some(prop => getMarkPropOrConfig(prop, model.markDef, model.config));
          if (model.stack && !model.fieldDef('size') && hasCornerRadius) {
              return getGroupsForStackedBarWithCornerRadius(model);
          }
      }
      return getMarkGroup(model);
  }
  const FACETED_PATH_PREFIX = 'faceted_path_';
  function getPathGroups(model, details) {
      // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)
      return [
          {
              name: model.getName('pathgroup'),
              type: 'group',
              from: {
                  facet: {
                      name: FACETED_PATH_PREFIX + model.requestDataName(DataSourceType.Main),
                      data: model.requestDataName(DataSourceType.Main),
                      groupby: details
                  }
              },
              encode: {
                  update: {
                      width: { field: { group: 'width' } },
                      height: { field: { group: 'height' } }
                  }
              },
              // With subfacet for line/area group, need to use faceted data from above.
              marks: getMarkGroup(model, { fromPrefix: FACETED_PATH_PREFIX })
          }
      ];
  }
  const STACK_GROUP_PREFIX = 'stack_group_';
  /**
   * We need to put stacked bars into groups in order to enable cornerRadius for stacks.
   * If stack is used and the model doesn't have size encoding, we put the mark into groups,
   * and apply cornerRadius properties at the group.
   */
  function getGroupsForStackedBarWithCornerRadius(model) {
      // Generate the mark
      const [mark] = getMarkGroup(model, { fromPrefix: STACK_GROUP_PREFIX });
      // Get the scale for the stacked field
      const fieldScale = model.scaleName(model.stack.fieldChannel);
      const stackField = (opt = {}) => model.vgField(model.stack.fieldChannel, opt);
      // Find the min/max of the pixel value on the stacked direction
      const stackFieldGroup = (func, expr) => {
          const vgFieldMinMax = [
              stackField({ prefix: 'min', suffix: 'start', expr }),
              stackField({ prefix: 'max', suffix: 'start', expr }),
              stackField({ prefix: 'min', suffix: 'end', expr }),
              stackField({ prefix: 'max', suffix: 'end', expr })
          ];
          return `${func}(${vgFieldMinMax.map(field => `scale('${fieldScale}',${field})`).join(',')})`;
      };
      let groupUpdate;
      let innerGroupUpdate;
      // Build the encoding for group and an inner group
      if (model.stack.fieldChannel === 'x') {
          // Move cornerRadius, y/yc/y2/height properties to group
          // Group x/x2 should be the min/max of the marks within
          groupUpdate = Object.assign(Object.assign({}, pick(mark.encode.update, ['y', 'yc', 'y2', 'height', ...VG_CORNERRADIUS_CHANNELS])), { x: { signal: stackFieldGroup('min', 'datum') }, x2: { signal: stackFieldGroup('max', 'datum') }, clip: { value: true } });
          // Inner group should revert the x translation, and pass height through
          innerGroupUpdate = {
              x: { field: { group: 'x' }, mult: -1 },
              height: { field: { group: 'height' } }
          };
          // The marks should use the same height as group, without y/yc/y2 properties (because it's already done by group)
          // This is why size encoding is not supported yet
          mark.encode.update = Object.assign(Object.assign({}, omit(mark.encode.update, ['y', 'yc', 'y2'])), { height: { field: { group: 'height' } } });
      }
      else {
          groupUpdate = Object.assign(Object.assign({}, pick(mark.encode.update, ['x', 'xc', 'x2', 'width'])), { y: { signal: stackFieldGroup('min', 'datum') }, y2: { signal: stackFieldGroup('max', 'datum') }, clip: { value: true } });
          innerGroupUpdate = {
              y: { field: { group: 'y' }, mult: -1 },
              width: { field: { group: 'width' } }
          };
          mark.encode.update = Object.assign(Object.assign({}, omit(mark.encode.update, ['x', 'xc', 'x2'])), { width: { field: { group: 'width' } } });
      }
      // Deal with cornerRadius properties
      for (const key of VG_CORNERRADIUS_CHANNELS) {
          const configValue = getMarkConfig(key, model.markDef, model.config);
          // Move from mark to group
          if (mark.encode.update[key]) {
              groupUpdate[key] = mark.encode.update[key];
              delete mark.encode.update[key];
          }
          else if (configValue) {
              groupUpdate[key] = signalOrValueRef(configValue);
          }
          // Overwrite any cornerRadius on mark set by config --- they are already moved to the group
          if (configValue) {
              mark.encode.update[key] = { value: 0 };
          }
      }
      // For bin and time unit, we have to add bin/timeunit -end channels.
      const groupByField = model.fieldDef(model.stack.groupbyChannel);
      const groupby = vgField(groupByField) ? [vgField(groupByField)] : [];
      if ((groupByField === null || groupByField === void 0 ? void 0 : groupByField.bin) || (groupByField === null || groupByField === void 0 ? void 0 : groupByField.timeUnit)) {
          groupby.push(vgField(groupByField, { binSuffix: 'end' }));
      }
      const strokeProperties = [
          'stroke',
          'strokeWidth',
          'strokeJoin',
          'strokeCap',
          'strokeDash',
          'strokeDashOffset',
          'strokeMiterLimit',
          'strokeOpacity'
      ];
      // Generate stroke properties for the group
      groupUpdate = strokeProperties.reduce((encode, prop) => {
          if (mark.encode.update[prop]) {
              return Object.assign(Object.assign({}, encode), { [prop]: mark.encode.update[prop] });
          }
          else {
              const configValue = getMarkConfig(prop, model.markDef, model.config);
              if (configValue !== undefined) {
                  return Object.assign(Object.assign({}, encode), { [prop]: signalOrValueRef(configValue) });
              }
              else {
                  return encode;
              }
          }
      }, groupUpdate);
      // Apply strokeForeground and strokeOffset if stroke is used
      if (groupUpdate.stroke) {
          groupUpdate.strokeForeground = { value: true };
          groupUpdate.strokeOffset = { value: 0 };
      }
      return [
          {
              type: 'group',
              from: {
                  facet: {
                      data: model.requestDataName(DataSourceType.Main),
                      name: STACK_GROUP_PREFIX + model.requestDataName(DataSourceType.Main),
                      groupby,
                      aggregate: {
                          fields: [
                              stackField({ suffix: 'start' }),
                              stackField({ suffix: 'start' }),
                              stackField({ suffix: 'end' }),
                              stackField({ suffix: 'end' })
                          ],
                          ops: ['min', 'max', 'min', 'max']
                      }
                  }
              },
              encode: {
                  update: groupUpdate
              },
              marks: [
                  {
                      type: 'group',
                      encode: { update: innerGroupUpdate },
                      marks: [mark]
                  }
              ]
          }
      ];
  }
  function getSort$1(model) {
      const { encoding, stack, mark, markDef, config } = model;
      const order = encoding.order;
      if ((!isArray(order) && isValueDef(order) && isNullOrFalse(order.value)) ||
          (!order && isNullOrFalse(getMarkPropOrConfig('order', markDef, config)))) {
          return undefined;
      }
      else if ((isArray(order) || isFieldDef(order)) && !stack) {
          // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)
          return sortParams(order, { expr: 'datum' });
      }
      else if (isPathMark(mark)) {
          // For both line and area, we sort values based on dimension by default
          const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';
          const dimensionChannelDef = encoding[dimensionChannel];
          if (isFieldDef(dimensionChannelDef)) {
              const s = dimensionChannelDef.sort;
              if (isArray(s)) {
                  return {
                      field: vgField(dimensionChannelDef, { prefix: dimensionChannel, suffix: 'sort_index', expr: 'datum' })
                  };
              }
              else if (isSortField(s)) {
                  return {
                      field: vgField({
                          // FIXME: this op might not already exist?
                          // FIXME: what if dimensionChannel (x or y) contains custom domain?
                          aggregate: isAggregate(model.encoding) ? s.op : undefined,
                          field: s.field
                      }, { expr: 'datum' })
                  };
              }
              else if (isSortByEncoding(s)) {
                  const fieldDefToSort = model.fieldDef(s.encoding);
                  return {
                      field: vgField(fieldDefToSort, { expr: 'datum' }),
                      order: s.order
                  };
              }
              else if (s === null) {
                  return undefined;
              }
              else {
                  return {
                      field: vgField(dimensionChannelDef, {
                          // For stack with imputation, we only have bin_mid
                          binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,
                          expr: 'datum'
                      })
                  };
              }
          }
          return undefined;
      }
      return undefined;
  }
  function getMarkGroup(model, opt = { fromPrefix: '' }) {
      const { mark, markDef, encoding, config } = model;
      const clip = getFirstDefined(markDef.clip, scaleClip(model), projectionClip(model));
      const style = getStyles(markDef);
      const key = encoding.key;
      const sort = getSort$1(model);
      const interactive = interactiveFlag(model);
      const aria = getMarkPropOrConfig('aria', markDef, config);
      const postEncodingTransform = markCompiler[mark].postEncodingTransform
          ? markCompiler[mark].postEncodingTransform(model)
          : null;
      return [
          Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {})), (style ? { style } : {})), (key ? { key: key.field } : {})), (sort ? { sort } : {})), (interactive ? interactive : {})), (aria === false ? { aria } : {})), { from: { data: opt.fromPrefix + model.requestDataName(DataSourceType.Main) }, encode: {
                  update: markCompiler[mark].encodeEntry(model)
              } }), (postEncodingTransform
              ? {
                  transform: postEncodingTransform
              }
              : {}))
      ];
  }
  /**
   * If scales are bound to interval selections, we want to automatically clip
   * marks to account for panning/zooming interactions. We identify bound scales
   * by the selectionExtent property, which gets added during scale parsing.
   */
  function scaleClip(model) {
      const xScale = model.getScaleComponent('x');
      const yScale = model.getScaleComponent('y');
      return (xScale && xScale.get('selectionExtent')) || (yScale && yScale.get('selectionExtent')) ? true : undefined;
  }
  /**
   * If we use a custom projection with auto-fitting to the geodata extent,
   * we need to clip to ensure the chart size doesn't explode.
   */
  function projectionClip(model) {
      const projection = model.component.projection;
      return projection && !projection.isFit ? true : undefined;
  }
  /**
   * Only output interactive flags if we have selections defined somewhere in our model hierarchy.
   */
  function interactiveFlag(model) {
      if (!model.component.selection)
          return null;
      const unitCount = keys(model.component.selection).length;
      let parentCount = unitCount;
      let parent = model.parent;
      while (parent && parentCount === 0) {
          parentCount = keys(parent.component.selection).length;
          parent = parent.parent;
      }
      return parentCount
          ? {
              interactive: unitCount > 0 || !!model.encoding.tooltip
          }
          : null;
  }

  /**
   * Internal model of Vega-Lite specification for the compiler.
   */
  class UnitModel extends ModelWithField {
      constructor(spec, parent, parentGivenName, parentGivenSize = {}, config) {
          super(spec, 'unit', parent, parentGivenName, config, undefined, isFrameMixins(spec) ? spec.view : undefined);
          this.specifiedScales = {};
          this.specifiedAxes = {};
          this.specifiedLegends = {};
          this.specifiedProjection = {};
          this.selection = {};
          this.children = [];
          const markDef = isMarkDef(spec.mark) ? Object.assign({}, spec.mark) : { type: spec.mark };
          const mark = markDef.type;
          // Need to init filled before other mark properties because encoding depends on filled but other mark properties depend on types inside encoding
          if (markDef.filled === undefined) {
              markDef.filled = defaultFilled(markDef, config, {
                  graticule: spec.data && isGraticuleGenerator(spec.data)
              });
          }
          const encoding = (this.encoding = initEncoding(spec.encoding || {}, mark, markDef.filled, config));
          this.markDef = initMarkdef(markDef, encoding, config);
          this.size = initLayoutSize({
              encoding: encoding,
              size: isFrameMixins(spec)
                  ? Object.assign(Object.assign(Object.assign({}, parentGivenSize), (spec.width ? { width: spec.width } : {})), (spec.height ? { height: spec.height } : {})) : parentGivenSize
          });
          // calculate stack properties
          this.stack = stack(mark, encoding);
          this.specifiedScales = this.initScales(mark, encoding);
          this.specifiedAxes = this.initAxes(encoding);
          this.specifiedLegends = this.initLegends(encoding);
          this.specifiedProjection = spec.projection;
          // Selections will be initialized upon parse.
          this.selection = spec.selection;
      }
      get hasProjection() {
          const { encoding } = this;
          const isGeoShapeMark = this.mark === GEOSHAPE;
          const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(channel => isFieldOrDatumDef(encoding[channel]));
          return isGeoShapeMark || hasGeoPosition;
      }
      /**
       * Return specified Vega-Lite scale domain for a particular channel
       * @param channel
       */
      scaleDomain(channel) {
          const scale = this.specifiedScales[channel];
          return scale ? scale.domain : undefined;
      }
      axis(channel) {
          return this.specifiedAxes[channel];
      }
      legend(channel) {
          return this.specifiedLegends[channel];
      }
      initScales(mark, encoding) {
          return SCALE_CHANNELS.reduce((scales, channel) => {
              var _a;
              const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
              if (fieldOrDatumDef) {
                  scales[channel] = this.initScale((_a = fieldOrDatumDef.scale) !== null && _a !== void 0 ? _a : {});
              }
              return scales;
          }, {});
      }
      initScale(scale) {
          const { domain, range } = scale;
          const scaleInternal = replaceExprRefInIndex(scale);
          if (isArray(domain)) {
              scaleInternal.domain = domain.map(signalRefOrValue);
          }
          if (isArray(range)) {
              scaleInternal.range = range.map(signalRefOrValue);
          }
          return scaleInternal;
      }
      initAxes(encoding) {
          return POSITION_SCALE_CHANNELS.reduce((_axis, channel) => {
              // Position Axis
              // TODO: handle ConditionFieldDef
              const channelDef = encoding[channel];
              if (isFieldOrDatumDef(channelDef) ||
                  (channel === X && isFieldOrDatumDef(encoding.x2)) ||
                  (channel === Y && isFieldOrDatumDef(encoding.y2))) {
                  const axisSpec = isFieldOrDatumDef(channelDef) ? channelDef.axis : undefined;
                  _axis[channel] = axisSpec
                      ? this.initAxis(Object.assign({}, axisSpec)) // convert truthy value to object
                      : axisSpec;
              }
              return _axis;
          }, {});
      }
      initAxis(axis) {
          const props = keys(axis);
          const axisInternal = {};
          for (const prop of props) {
              const val = axis[prop];
              axisInternal[prop] = isConditionalAxisValue(val)
                  ? signalOrValueRefWithCondition(val)
                  : signalRefOrValue(val);
          }
          return axisInternal;
      }
      initLegends(encoding) {
          return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {
              const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
              if (fieldOrDatumDef && supportLegend(channel)) {
                  const legend = fieldOrDatumDef.legend;
                  _legend[channel] = legend
                      ? replaceExprRefInIndex(legend) // convert truthy value to object
                      : legend;
              }
              return _legend;
          }, {});
      }
      parseData() {
          this.component.data = parseData(this);
      }
      parseLayoutSize() {
          parseUnitLayoutSize(this);
      }
      parseSelections() {
          this.component.selection = parseUnitSelection(this, this.selection);
      }
      parseMarkGroup() {
          this.component.mark = parseMarkGroups(this);
      }
      parseAxesAndHeaders() {
          this.component.axes = parseUnitAxes(this);
      }
      assembleSelectionTopLevelSignals(signals) {
          return assembleTopLevelSignals(this, signals);
      }
      assembleSignals() {
          return [...assembleAxisSignals(this), ...assembleUnitSelectionSignals(this, [])];
      }
      assembleSelectionData(data) {
          return assembleUnitSelectionData(this, data);
      }
      assembleLayout() {
          return null;
      }
      assembleLayoutSignals() {
          return assembleLayoutSignals(this);
      }
      assembleMarks() {
          var _a;
          let marks = (_a = this.component.mark) !== null && _a !== void 0 ? _a : [];
          // If this unit is part of a layer, selections should augment
          // all in concert rather than each unit individually. This
          // ensures correct interleaving of clipping and brushed marks.
          if (!this.parent || !isLayerModel(this.parent)) {
              marks = assembleUnitSelectionMarks(this, marks);
          }
          return marks.map(this.correctDataNames);
      }
      getMapping() {
          return this.encoding;
      }
      get mark() {
          return this.markDef.type;
      }
      channelHasField(channel) {
          return channelHasField(this.encoding, channel);
      }
      fieldDef(channel) {
          const channelDef = this.encoding[channel];
          return getFieldDef(channelDef);
      }
      typedFieldDef(channel) {
          const fieldDef = this.fieldDef(channel);
          if (isTypedFieldDef(fieldDef)) {
              return fieldDef;
          }
          return null;
      }
  }

  class LayerModel extends Model {
      constructor(spec, parent, parentGivenName, parentGivenSize, config) {
          super(spec, 'layer', parent, parentGivenName, config, spec.resolve, spec.view);
          const layoutSize = Object.assign(Object.assign(Object.assign({}, parentGivenSize), (spec.width ? { width: spec.width } : {})), (spec.height ? { height: spec.height } : {}));
          this.children = spec.layer.map((layer, i) => {
              if (isLayerSpec(layer)) {
                  return new LayerModel(layer, this, this.getName('layer_' + i), layoutSize, config);
              }
              else if (isUnitSpec(layer)) {
                  return new UnitModel(layer, this, this.getName('layer_' + i), layoutSize, config);
              }
              throw new Error(invalidSpec(layer));
          });
      }
      parseData() {
          this.component.data = parseData(this);
          for (const child of this.children) {
              child.parseData();
          }
      }
      parseLayoutSize() {
          parseLayerLayoutSize(this);
      }
      parseSelections() {
          // Merge selections up the hierarchy so that they may be referenced
          // across unit specs. Persist their definitions within each child
          // to assemble signals which remain within output Vega unit groups.
          this.component.selection = {};
          for (const child of this.children) {
              child.parseSelections();
              for (const key of keys(child.component.selection)) {
                  this.component.selection[key] = child.component.selection[key];
              }
          }
      }
      parseMarkGroup() {
          for (const child of this.children) {
              child.parseMarkGroup();
          }
      }
      parseAxesAndHeaders() {
          parseLayerAxes(this);
      }
      assembleSelectionTopLevelSignals(signals) {
          return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
      }
      // TODO: Support same named selections across children.
      assembleSignals() {
          return this.children.reduce((signals, child) => {
              return signals.concat(child.assembleSignals());
          }, assembleAxisSignals(this));
      }
      assembleLayoutSignals() {
          return this.children.reduce((signals, child) => {
              return signals.concat(child.assembleLayoutSignals());
          }, assembleLayoutSignals(this));
      }
      assembleSelectionData(data) {
          return this.children.reduce((db, child) => child.assembleSelectionData(db), data);
      }
      assembleTitle() {
          let title = super.assembleTitle();
          if (title) {
              return title;
          }
          // If title does not provide layer, look into children
          for (const child of this.children) {
              title = child.assembleTitle();
              if (title) {
                  return title;
              }
          }
          return undefined;
      }
      assembleLayout() {
          return null;
      }
      assembleMarks() {
          return assembleLayerSelectionMarks(this, this.children.flatMap(child => {
              return child.assembleMarks();
          }));
      }
      assembleLegends() {
          return this.children.reduce((legends, child) => {
              return legends.concat(child.assembleLegends());
          }, assembleLegends(this));
      }
  }

  function buildModel(spec, parent, parentGivenName, unitSize, config) {
      if (isFacetSpec(spec)) {
          return new FacetModel(spec, parent, parentGivenName, config);
      }
      else if (isLayerSpec(spec)) {
          return new LayerModel(spec, parent, parentGivenName, unitSize, config);
      }
      else if (isUnitSpec(spec)) {
          return new UnitModel(spec, parent, parentGivenName, unitSize, config);
      }
      else if (isAnyConcatSpec(spec)) {
          return new ConcatModel(spec, parent, parentGivenName, config);
      }
      throw new Error(invalidSpec(spec));
  }

  var __rest$x = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  /**
   * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.
   *
   * At a high-level, we make the following transformations in different phases:
   *
   * Input spec
   *     |
   *     |  (Normalization)
   *     v
   * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)
   *     |
   *     |  (Build Model)
   *     v
   * A model tree of the spec
   *     |
   *     |  (Parse)
   *     v
   * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)
   *     |
   *     | (Optimize)
   *     v
   * A model tree with parsed components with the data component optimized
   *     |
   *     | (Assemble)
   *     v
   * Vega spec
   *
   * @param inputSpec The Vega-Lite specification.
   * @param opt       Optional arguments passed to the Vega-Lite compiler.
   * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.
   */
  function compile$2(inputSpec, opt = {}) {
      // 0. Augment opt with default opts
      if (opt.logger) {
          // set the singleton logger to the provided logger
          set(opt.logger);
      }
      if (opt.fieldTitle) {
          // set the singleton field title formatter
          setTitleFormatter(opt.fieldTitle);
      }
      try {
          // 1. Initialize config by deep merging default config with the config provided via option and the input spec.
          const config = initConfig(mergeConfig(opt.config, inputSpec.config));
          // 2. Normalize: Convert input spec -> normalized spec
          // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.
          // - Normalize autosize and width or height spec
          const spec = normalize(inputSpec, config);
          // 3. Build Model: normalized spec -> Model (a tree structure)
          // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.
          // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.
          const model = buildModel(spec, null, '', undefined, config);
          // 4 Parse: Model --> Model with components
          // Note that components = intermediate representations that are equivalent to Vega specs.
          // We need these intermediate representation because we need to merge many visualization "components" like projections, scales, axes, and legends.
          // We will later convert these components into actual Vega specs in the assemble phase.
          // In this phase, we do a bottom-up traversal over the whole tree to
          // parse for each type of components once (e.g., data, layout, mark, scale).
          // By doing bottom-up traversal, we start parsing components of unit specs and
          // then merge child components of parent composite specs.
          //
          // Please see inside model.parse() for order of different components parsed.
          model.parse();
          // drawDataflow(model.component.data.sources);
          // 5. Optimize the dataflow. This will modify the data component of the model.
          optimizeDataflow(model.component.data, model);
          // drawDataflow(model.component.data.sources);
          // 6. Assemble: convert model components --> Vega Spec.
          const vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);
          return {
              spec: vgSpec,
              normalized: spec
          };
      }
      finally {
          // Reset the singleton logger if a logger is provided
          if (opt.logger) {
              reset();
          }
          // Reset the singleton field title formatter if provided
          if (opt.fieldTitle) {
              resetTitleFormatter();
          }
      }
  }
  function getTopLevelProperties(inputSpec, autosize, config, model) {
      const width = model.component.layoutSize.get('width');
      const height = model.component.layoutSize.get('height');
      if (autosize === undefined) {
          autosize = { type: 'pad' };
          if (model.hasAxisOrientSignalRef()) {
              autosize.resize = true;
          }
      }
      else if (isString$1(autosize)) {
          autosize = { type: autosize };
      }
      if (width && height && isFitType(autosize.type)) {
          if (width === 'step' && height === 'step') {
              warn(droppingFit());
              autosize.type = 'pad';
          }
          else if (width === 'step' || height === 'step') {
              // effectively XOR, because else if
              // get step dimension
              const sizeType = width === 'step' ? 'width' : 'height';
              // log that we're dropping fit for respective channel
              warn(droppingFit(getPositionScaleChannel(sizeType)));
              // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)
              const inverseSizeType = sizeType === 'width' ? 'height' : 'width';
              autosize.type = getFitType(inverseSizeType);
          }
      }
      return Object.assign(Object.assign(Object.assign({}, (keys(autosize).length === 1 && autosize.type
          ? autosize.type === 'pad'
              ? {}
              : { autosize: autosize.type }
          : { autosize })), extractTopLevelProperties(config, false)), extractTopLevelProperties(inputSpec, true));
  }
  /*
   * Assemble the top-level model to a Vega spec.
   *
   * Note: this couldn't be `model.assemble()` since the top-level model
   * needs some special treatment to generate top-level properties.
   */
  function assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {
      // Config with Vega-Lite only config removed.
      const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;
      const data = [].concat(model.assembleSelectionData([]), 
      // only assemble data in the root
      assembleRootData(model.component.data, datasets));
      const projections = model.assembleProjections();
      const title = model.assembleTitle();
      const style = model.assembleGroupStyle();
      const encodeEntry = model.assembleGroupEncodeEntry(true);
      let layoutSignals = model.assembleLayoutSignals();
      // move width and height signals with values to top level
      layoutSignals = layoutSignals.filter(signal => {
          if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {
              topLevelProperties[signal.name] = +signal.value;
              return false;
          }
          return true;
      });
      const { params } = topLevelProperties, otherTopLevelProps = __rest$x(topLevelProperties, ["params"]);
      return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ $schema: 'https://vega.github.io/schema/vega/v5.json' }, (model.description ? { description: model.description } : {})), otherTopLevelProps), (title ? { title } : {})), (style ? { style } : {})), (encodeEntry ? { encode: { update: encodeEntry } } : {})), { data }), (projections.length > 0 ? { projections: projections } : {})), model.assembleGroup([
          ...layoutSignals,
          ...model.assembleSelectionTopLevelSignals([]),
          ...assembleParameterSignals(params)
      ])), (vgConfig ? { config: vgConfig } : {})), (usermeta ? { usermeta } : {}));
  }



  var src = /*#__PURE__*/Object.freeze({
    __proto__: null,
    normalize: normalize,
    version: version,
    compile: compile$2,
    deepEqual: deepEqual$1,
    duplicate: duplicate,
    pick: pick,
    omit: omit,
    stringify: stringify,
    hash: hash,
    isNullOrFalse: isNullOrFalse,
    contains: contains$1,
    some: some,
    every: every,
    mergeDeep: mergeDeep,
    unique: unique,
    isEqual: isEqual,
    setEqual: setEqual,
    hasIntersection: hasIntersection,
    prefixGenerator: prefixGenerator,
    fieldIntersection: fieldIntersection,
    isEmpty: isEmpty$1,
    keys: keys,
    vals: vals,
    entries: entries,
    isBoolean: isBoolean$1,
    varName: varName,
    logicalExpr: logicalExpr,
    deleteNestedProperty: deleteNestedProperty,
    titleCase: titleCase,
    accessPathWithDatum: accessPathWithDatum,
    flatAccessWithDatum: flatAccessWithDatum,
    replacePathInField: replacePathInField,
    replaceAll: replaceAll,
    removePathFromField: removePathFromField,
    accessPathDepth: accessPathDepth,
    getFirstDefined: getFirstDefined,
    uniqueId: uniqueId,
    resetIdCounter: resetIdCounter,
    internalField: internalField,
    isInternalField: isInternalField,
    normalizeAngle: normalizeAngle,
    isNumeric: isNumeric
  });

  function computeIdMaker(key) {
    if (Array.isArray(key)) {
      return (d) => {
        return key
          .map(field => {
            return d.datum[field];
          })
          .join("-");
      };
    }
    return (d, i) => stringifyDatumValue(i);
  }

  function initialData(step, rawInfo) {
    const sView = rawInfo.sVis.view;
    const { change } = step;
    const isAdd = !change.initial && !!change.final;
    if (change.compType === "axis") {
      if (isAdd) {
        return getEmptyAxisData();
      }
      return getAxisData(sView, change.compName);
    }
    if (change.compType === "legend") {
      if (isAdd) {
        return getEmptyLegendData(change.final);
      }
      return getLegendData(sView, change.compName, change.initial);
    }
    if (change.compType === "mark") {
      if (isAdd) {
        return [];
      }
      const mtype = step.marktypes ? step.marktypes.initial : change.initial.type;
      return getMarkData(sView, change.initial, change.compName, mtype);
    }
    if (change.compType === "view") {
      return sView._runtime.data.root.values.value[0];
    }
  }

  function joinData(step, rawInfo, initialData) {
    const iData = initialData;
    const eView = rawInfo.eVis.view, sView = rawInfo.sVis.view;
    const {change} = step;
    const isAdd = !change.initial && !!change.final;
    const isRemove = !!change.initial && !change.final;
    const {hasFacet} = step;
    let preFetchCurrData = false;
    let computeId = {};

    if (change.compType === "axis") {
      const result = {
        nextData: {},
        currData: {},
        computeDatumId: {}
      };

      result.nextData.axis = isRemove
        ? iData.axis
        : [eView._runtime.data[change.compName].values.value[0].datum];
      result.currData.axis = iData.axis;
      result.computeDatumId.axis = (d, i) => i;

      if (
        change.scale === false ||
        (change.scale && change.scale.data === false)
      ) {
        const computeId = d => stringifyDatumValue(d.datum.value);
        return ["tick", "label", "grid"].reduce((acc, subComp) => {
          const nextData = iData[subComp].map((d, i) => {
            setJoinInfo(d, step, { animSet: "update", joinKey: computeId(d) });
            return d;
          });
          acc.nextData[subComp] = nextData;
          acc.currData[subComp] = nextData;
          acc.computeDatumId[subComp] = computeId;
          return acc;
        }, result);
      }

      let fData = getEmptyAxisData();
      if (!isRemove) {
        fData = getAxisData(eView, change.compName);
      }

      return ["tick", "label", "grid"].reduce((acc, subComp) => {
        let subCompEncName = subComp === "tick" ? "ticks" : subComp;
        subCompEncName = subCompEncName === "label" ? "labels" : subCompEncName;
        let computeId = d => stringifyDatumValue(d.datum.value);

        if (change.encode && change.encode[subCompEncName] === false) {
          acc.nextData[subComp] = iData[subComp];
          acc.currData[subComp] = iData[subComp];
          acc.computeDatumId[subComp] = computeId;
          return acc;
        }

        const iDataSubComp = iData[subComp] || [];
        let fDataSubComp = fData[subComp] || [];
        if (!step.sameDomainDimension) {
          const ci = appendPostfix(computeId, "_exit");
          let cf = appendPostfix(computeId, "_enter");
          computeId = { initial: ci, final: cf };

          iDataSubComp.forEach((iDatum, i) => {
            setJoinInfo(iDatum, step, {
              animSet: "exit",
              joinKey: computeId.initial(iDatum, i)
            });
          });

          fDataSubComp.forEach((fDatum, i) => {
            setJoinInfo(fDatum, step, {
              animSet: "enter",
              joinKey: computeId.final(fDatum, i)
            });
          });
        } else {
          joinThem(iDataSubComp, fDataSubComp, computeId, step);
        }

        // let isAnimSet = getIsAnimSet(subCompEncName, change.encode);
        // let iDataAnimSets = (isAnimSet.exit ? [] : ["exit"]).concat(isAnimSet.update ? [] : ["update"]),
        //   fDataAnimSets = (isAnimSet.enter ? ["enter"] : []).concat(isAnimSet.update ? ["update"] : [])
        const iDataAnimSets = []; let fDataAnimSets = ["enter", "update"];
        const nextData = iDataSubComp
          .filter(d => iDataAnimSets.indexOf(getJoinInfo$1(d, step, "animSet")) >= 0)
          .concat(fDataSubComp.filter(d => fDataAnimSets.indexOf(getJoinInfo$1(d, step, "animSet")) >= 0));

        // let nextData = [];

        // nextData = nextData.concat(isAnimSet.update ? joinedData.update.final : joinedData.update.initial)
        // nextData = isAnimSet.enter ? nextData.concat(joinedData.enter) : nextData;
        // nextData = !isAnimSet.exit ? nextData.concat(joinedData.exit) : nextData;

        acc.nextData[subComp] = nextData;
        acc.currData[subComp] = iDataSubComp;
        acc.computeDatumId[subComp] = computeId;
        return acc;
      }, result);

    }
    if (change.compType === "legend") {
      const getComputeId = subComp => {
        if (subComp === "pairs") {
          return d => {
            const {datum} = d.items.find(item => item.role === "legend-label").items[0];
            return stringifyDatumValue(datum.value);
          };
        } else if (subComp === "title") {
          return d => d.text;
        } else if (subComp === "gradient") {
          return d => JSON.stringify(d.fill.stops);
        }
        return d => stringifyDatumValue(d.datum.value);
      };

      const result = Object.keys(iData).reduce(
        (acc, subComp) => {
          computeId = getComputeId(subComp);
          const nextData = iData[subComp].map((d, i) => {
            setJoinInfo(d, step, { animSet: "update", joinKey: computeId(d, i) });
            return d;
          });
          acc.nextData[subComp] = nextData;
          acc.currData[subComp] = nextData;
          acc.computeDatumId[subComp] = computeId;
          return acc;
        },
        {
          nextData: {},
          currData: {},
          computeDatumId: {}
        }
      );

      if (
        change.scale === false ||
        (change.scale && change.scale.data === false)
      ) {
        return result;
      }

      if (isRemove) {
        result.nextData = getEmptyLegendData(change.initial);
        return result;
      }
      const fData = getLegendData(eView, change.compName, change.final);
      const keys = Object.keys(fData)
        .concat(Object.keys(iData))
        .unique();
      return keys.reduce((acc, subComp) => {
        const subCompEncName = subComp;
        if (change.encode && change.encode[subCompEncName] === false) {
          return acc;
        }
        computeId = getComputeId(subComp);
        const iDataSubComp = iData[subComp] || [];
        let fDataSubComp = fData[subComp]|| [];
        if (
          (subComp === "labels" &&
            step.legendTypes.initial !== step.legendTypes.final) ||
          !step.sameDomainDimension
        ) {
          const ci = appendPostfix(computeId, "_exit");
          let cf = appendPostfix(computeId, "_enter");
          computeId = { initial: ci, final: cf };

          iDataSubComp.forEach((iDatum, i) => {
            setJoinInfo(iDatum, step, {
              animSet: "exit",
              joinKey: computeId.initial(iDatum, i)
            });
          });

          fDataSubComp.forEach((fDatum, i) => {
            setJoinInfo(fDatum, step, {
              animSet: "enter",
              joinKey: computeId.final(fDatum, i)
            });
          });
        } else {
          joinThem(iDataSubComp, fDataSubComp, computeId, step);
        }

        // let isAnimSet = getIsAnimSet(subCompEncName, change.encode);

        // let iDataAnimSets = (isAnimSet.exit ? [] : ["exit"]).concat(isAnimSet.update ? [] : ["update"]),
        //   fDataAnimSets = (isAnimSet.enter ? ["enter"] : []).concat(isAnimSet.update ? ["update"] : [])
        const iDataAnimSets = []; let fDataAnimSets = ["enter", "update"];
        const nextData = iDataSubComp
          .filter(d => iDataAnimSets.indexOf(getJoinInfo$1(d, step, "animSet")) >= 0)
          .concat(fDataSubComp.filter(d => fDataAnimSets.indexOf(getJoinInfo$1(d, step, "animSet")) >= 0));

        acc.nextData[subComp] = nextData || [];
        acc.currData[subComp] = iDataSubComp;
        acc.computeDatumId[subComp] = computeId;
        return acc;
      }, result);
    }
    if (change.compType === "mark") {
      const {marktypes} = step;

      let doUpdate = !isRemove && !isAdd && change.data !== false,
        doEnter = !isRemove && (isAdd || change.data !== false),
        doExit = !isAdd && (isRemove || change.data !== false);
      let joinFields = null;
      if (change.data) {
        doUpdate = change.data.update === false ? false : doUpdate;
        doEnter = change.data.enter === false ? false : doEnter;
        doExit = change.data.exit === false ? false : doExit;
        joinFields = (Array.isArray(change.data) ? change.data : change.data.keys) || null;
      }


      const aggregate = step.aggregates;
      const bin = step.bins;
      const isGroupingMarktypes = {
        initial: isGroupingMarktype(marktypes.initial || marktypes.final),
        final: isGroupingMarktype(marktypes.final || marktypes.initial)
      };

      const facets = {
        initial: hasFacet.initial
          ? getFacet(change.initial) || getFacet(change.final)
          : undefined,
        final: hasFacet.final
          ? getFacet(change.final) || getFacet(change.initial)
          : undefined
      };
      if (change.marktype === false) {
        isGroupingMarktypes.final = isGroupingMarktypes.initial;
      }

      if (change.data || isAdd || isRemove) {
        step.change.aggregate = aggregate;

        let fData = [];
        if (!isRemove) {
          const mtype = marktypes.final || marktypes.initial;
          const facet =
            change.marktype === false
              ? change.initial.parent.from
                ? change.initial.parent.from.facet
                : undefined
              : change.final.parent.from
                ? change.final.parent.from.facet
                : undefined;

          fData = getMarkData(eView, change.final, change.compName, mtype, facet);
        }
        //   // Data should be from change.final!
        //   let dName = computeHasFacet(change.final) ? change.final.parent.name : dataName;
        //   let _fData = eView._runtime.data[dName] ? (eView._runtime.data[dName].values.value) : [];

        //   // when the final data should be facetted but are not facetted yet:
        //   if (isGroupingMarktypes.final && !computeHasFacet(change.final)){
        //     if (change.marktype === false) {
        //       fData = facetData(_fData, change.initial.parent.from ? change.initial.parent.from.facet : undefined);
        //     } else {
        //       fData = facetData(_fData, change.final.parent.from ? change.final.parent.from.facet : undefined);
        //     }
        //   } else if (!isGroupingMarktypes.final && computeHasFacet(change.final)) {
        //     fData = unpackData(_fData);
        //   } else {
        //     fData = _fData;
        //   }
        // }

        ["initial", "final"].forEach(which => {
          if (change[which] && facets[which]) {
            computeId[which] = computeIdMaker(facets[which].groupby);
          } else if (aggregate[which]) {
            computeId[which] = computeIdMaker(aggregate[which].groupby);
          } else {
            computeId[which] = computeIdMaker(joinFields);
          }
        });


        if (isGroupingMarktypes.initial && isGroupingMarktypes.final) {
          if (
            change.final &&
            change.initial &&
            facets.final &&
            facets.initial &&
            facets.initial.groupby.sort().toString() ===
              facets.final.groupby.sort().toString()
          ) {
            computeId = computeId.initial;
            joinThem(iData, fData, computeId, step);
          } else if (
            change.final &&
            change.initial &&
            !facets.final &&
            !facets.initial
          ) {
            computeId = computeId.initial;
            joinThem(iData, fData, computeId, step);
          } else {
            const ci = appendPostfix(computeId.initial, "_exit");
            let cf = appendPostfix(computeId.final, "_enter");

            computeId = { initial: ci, final: cf };
            iData.forEach((iDatum, i) => {
              setJoinInfo(iDatum, step, {
                animSet: "exit",
                joinKey: computeId.initial(iDatum, i)
              });
            });
            fData.forEach((fDatum, i) => {
              setJoinInfo(fDatum, step, {
                animSet: "enter",
                joinKey: computeId.final(fDatum, i)
              });
            });
          }
        } else if (!isGroupingMarktypes.initial && !isGroupingMarktypes.final) {

          // if iData or fData are binned, attach the representative fields.
          // E.g., bin_A, bin_A_end -> A
          if (bin.initial) {
            extendBinnedData(iData, bin.initial);
          }
          if (bin.final) {
            extendBinnedData(fData, bin.final);
          }

          if (
            aggregate.initial &&
            aggregate.final &&
            aggregate.initial.groupby.sort().toString() ===
              aggregate.final.groupby.sort().toString()
          ) {
            computeId = computeId.initial;
            joinThem(iData, fData, computeId, step);
          } else if (!aggregate.initial && !aggregate.final) {
            computeId = computeId.initial;
            joinThem(iData, fData, computeId, step);
          } else {
            let ci = appendPostfix(computeId.initial, "_exit");
            let cf = appendPostfix(computeId.final, "_enter");
            computeId = { initial: ci, final: cf };

            iData.forEach((iDatum, i) => {
              setJoinInfo(iDatum, step, {
                animSet: "exit",
                joinKey: computeId.initial(iDatum, i)
              });
            });

            fData.forEach((fDatum, i) => {
              setJoinInfo(fDatum, step, {
                animSet: "enter",
                joinKey: computeId.final(fDatum, i)
              });
            });

            if (!aggregate.initial && aggregate.final) {
              attachAggData(fData, iData, computeId.final, aggregate.final, eView, change.final.from.data, computeIdMaker(joinFields));
              extendAggData(fData, aggregate.final);
              preFetchCurrData = true;
            } else if (aggregate.initial && !aggregate.final) {
              attachAggData(iData, fData, computeId.initial, aggregate.initial, sView, change.initial.from.data, computeIdMaker(joinFields));
              extendAggData(iData, aggregate.initial);
              preFetchCurrData = true;
            }
          }
        } else {
          // When the marktype changes between area/line to the others.
          let groupedData; let unpackedData;
          if (isGroupingMarktypes.initial) {
            computeId.initial = computeIdMaker(
              facets.initial ? change.initial.parent.from.facet.groupby : null
            );
            computeId.final = computeIdMaker(joinFields || null);
            unpackedData = unpackData(iData);
            joinThem(unpackedData, fData, computeId.final, step);

            groupedData = facetData(
              fData,
              change.initial.parent.from
                ? change.initial.parent.from.facet
                : undefined
            );
            joinThem(iData, groupedData, computeId.initial, step);
          } else {
            computeId.initial = computeIdMaker(joinFields || null);
            computeId.final = computeIdMaker(
              facets.final ? change.final.parent.from.facet.groupby : null
            );

            unpackedData = unpackData(fData);
            joinThem(iData, unpackedData, computeId.initial, step);

            groupedData = facetData(
              iData,
              change.final.parent.from
                ? change.final.parent.from.facet
                : undefined
            );
            joinThem(groupedData, fData, computeId.final, step);
          }

          return {
            nextData: fData,
            currData: iData,
            computeDatumId: computeId,
            groupedData,
            unpackedData
          };
        }

        const iDataAnimSets = (doExit ? [] : ["exit"]).concat(
          doUpdate ? [] : ["update"]
        );
        let fDataAnimSets = (doEnter ? ["enter"] : []).concat(
          doUpdate ? ["update"] : []
        );
        let nextData = iData.filter(
          d => iDataAnimSets.indexOf(getJoinInfo$1(d, step, "animSet")) >= 0
        );
        if (!doExit) {
          // we included the exit data as we do not make them exit.
          nextData.forEach((datum) => {
            setJoinInfo(datum, step, { animSet: "update" });
          });
        }

        nextData = nextData.concat(
          fData.filter(
            d => fDataAnimSets.indexOf(getJoinInfo$1(d, step, "animSet")) >= 0
          )
        );

        return {
          nextData,
          currData: iData,
          computeDatumId: computeId,
          preFetchCurrData
        };
      }
      // When there is no data change
      computeId = computeIdMaker(null);
      const sameData = iData.map((d, i) => {
        setJoinInfo(d, step, { animSet: "update", joinKey: computeId(d,i) });
        return d;
      });

      if (isGroupingMarktypes.initial !== isGroupingMarktypes.final) {
        // When the marktype changes between area/line to the others.
        let groupedData; let unpackedData;
        if (isGroupingMarktypes.initial) {
          unpackedData = unpackData(iData);
          unpackedData.map((d, i) => {
            setJoinInfo(d, step, { animSet: "update", joinKey: computeId(d,i) });
            return d;
          });
          return {
            nextData: unpackedData, currData: iData,
            computeDatumId: computeId,
            groupedData: iData,
            unpackedData: unpackedData
          };
        }
        groupedData = facetData(iData, change.final.parent.from ? change.final.parent.from.facet : undefined);
        groupedData.map((d, i) => {
          setJoinInfo(d, step, { animSet: "update", joinKey: computeId(d,i) });
          return d;
        });
        return {
          nextData: groupedData, currData: iData,
          computeDatumId: computeId,
          groupedData,
          unpackedData: iData
        };
      }

      return {
        nextData: sameData,
        currData: sameData,
        computeDatumId: computeId
      };
    }
    if (change.compType === "view") {
      return { nextData: eView._runtime.data.root.values.value[0] };
    }
    return iData;
  }
  function joinThem(iData, fData, computeId, step) {
    const updateData = { initial: [], final: [] };
    const enterData = [];
    const exitData = [];

    const takenChecker = new Array(fData.length);
    takenChecker.fill(false);
    iData.forEach((iDatum, i) => {
      const id = computeId(iDatum, i);
      const foundIndex = fData.findIndex(
        (fDatum, j) => computeId(fDatum, j) === id
      );
      const found = foundIndex >= 0 ? fData[foundIndex] : null;

      if (found) {
        const info = { animSet: "update", joinKey: id };
        setJoinInfo(found, step, info);
        setJoinInfo(iDatum, step, info);
        const extendedIDatum = { ...found.datum, ...iDatum.datum };
        const extendedFDatum = { ...iDatum.datum, ...found.datum };
        iDatum.datum = extendedIDatum;
        found.datum = extendedFDatum;
        updateData.final.push(found);
        updateData.initial.push(iDatum);

        takenChecker[foundIndex] = true;
      } else {
        setJoinInfo(iDatum, step, { animSet: "exit", joinKey: id });
        exitData.push(iDatum);
      }
    });
    takenChecker.forEach((taken, i) => {
      if (!taken) {
        setJoinInfo(fData[i], step, {
          animSet: "enter",
          joinKey: computeId(fData[i], i)
        });
        enterData.push(fData[i]);
      }
    });

    return {
      enter: enterData,
      update: updateData,
      exit: exitData
    };
  }

  function extendBinnedData(binData, bin) {
    bin.forEach(b => {
      binData.forEach(d => {
        d.datum[b.field] = d.datum[b.field] === undefined ? (d.datum[b.as[0]] + d.datum[b.as[1]])/2 : d.datum[b.field];
      });
    });
  }
  function extendAggData(aggData, agg) {
    aggData.forEach(aggDatum => {
      agg.as.forEach((aggField, i) => {
        aggDatum.datum[agg.fields[i]] = aggDatum.datum[agg.as[i]];
      });
    });
  }

  function attachAggData(aggData, targetData, aggId, agg, aggView, dataName, computeRawId) {

    let pt = aggView._runtime.data[dataName].values;
    while (!isAggregateSource(pt, agg)) {
      pt = pt.source;
    }
    let rawData = pt.source.pulse.add;


    targetData.forEach((targetDatum, i) => {
      let _i = rawData.findIndex((d, _i)=> computeRawId({datum: d}, _i) === computeRawId(targetDatum, i));
      let rawDatum = rawData[_i];
      if (rawDatum) {
        aggData.forEach((aggDatum, j) => {
          if (aggId({datum: rawDatum}, _i) === aggId(aggDatum, j)) {
            agg.fields.forEach((f, f_i) => {
              targetDatum.datum[agg.as[f_i]] = aggDatum.datum[agg.as[f_i]];
            });
            agg.groupby.forEach((f) => {
              targetDatum.datum[f] = targetDatum.datum[f] || rawDatum[f];
            });
          }
        });
      } else {
        //If targetDatum cannot find the corresponding aggregated datum, just attach its value as aggvalue
        agg.fields.forEach((f, f_i) => {
          targetDatum.datum[agg.as[f_i]] = targetDatum.datum[f];
        });
        agg.groupby.forEach((f) => {
          targetDatum.datum[f] = targetDatum.datum[f] || rawDatum[f];
        });
      }
    });
  }

  function isAggregateSource(pt, agg) {
    let argval = pt._argVal || pt._argval;
    if (argval && argval.as && deepEqual$1(argval.as, agg.as) ) {
      return true
    }
    return false
  }

  function getJoinInfo$1(d, step, prop) {
    return d.__gemini__[step.stepId]
      ? d.__gemini__[step.stepId][prop]
      : undefined;
  }

  function appendPostfix(computeId, postFix) {
    return (d, i) => {
      return computeId(d, i) + postFix;
    };
  }
  function getBin(change, rawInfo) {
    const bin = {};
    if (!change.initial || !change.final) {
      return bin;
    }
    const sSpec = rawInfo.sVis.spec;
    const eSpec = rawInfo.eVis.spec;

    const dataName = compSpec => {
      return computeHasFacet(compSpec)
        ? compSpec.parent.from.facet.data
        : compSpec.from.data;
    };

    const dataSource_f = eSpec.data.find(
      dset => dset.name === dataName(change.final)
    );
    if (dataSource_f.transform) {
      bin.final = dataSource_f.transform.filter(
        trsfm => trsfm.type === "bin"
      );
    }
    const dataSource_i = sSpec.data.find(
      dset => dset.name === dataName(change.initial)
    );
    if (dataSource_i.transform) {
      bin.initial = dataSource_i.transform.filter(
        trsfm => trsfm.type === "bin"
      );
    }
    return bin;
  }
  function getAggregate(change, rawInfo) {
    const aggregate = {};
    if (!change.initial || !change.final) {
      return aggregate;
    }
    const sSpec = rawInfo.sVis.spec;
    const eSpec = rawInfo.eVis.spec;

    const dataName = compSpec => {
      return computeHasFacet(compSpec)
        ? compSpec.parent.from.facet.data
        : compSpec.from.data;
    };

    const dataSource_f = eSpec.data.find(
      dset => dset.name === dataName(change.final)
    );
    if (dataSource_f.transform) {
      aggregate.final = dataSource_f.transform.find(
        trsfm => trsfm.type === "aggregate"
      );
    }
    const dataSource_i = sSpec.data.find(
      dset => dset.name === dataName(change.initial)
    );
    if (dataSource_i.transform) {
      aggregate.initial = dataSource_i.transform.find(
        trsfm => trsfm.type === "aggregate"
      );
    }
    return aggregate;
  }

  function setJoinInfo(datum, step, info) {
    datum.__gemini__ = datum.__gemini__ || {};
    datum.__gemini__[step.stepId] = datum.__gemini__[step.stepId] || {};
    Object.assign(datum.__gemini__[step.stepId], info);
  }

  function dataPreservedScale(sSpec, eSpec, scName) {
    const tempSpec = copy(eSpec);
    const scaleSpec = tempSpec.scales.find(sc => sc.name === scName);
    if (scaleSpec.domain.data) {
      const index = tempSpec.data.findIndex(
        d => d.name === scaleSpec.domain.data
      );
      if (index >= 0) {
        tempSpec.data.splice(
          index,
          1,
          sSpec.data.find(d => d.name === scaleSpec.domain.data)
        );
      }
    }
    const tempView = new vega.View(vega.parse(tempSpec), {
      renderer: "none"
    }).run();
    return tempView._runtime.scales[scName].value;
  }

  function computeKeptEncode(manualEncode, referenceEncode, set = null) {

    let manual = manualEncode;
    if (set !== null) {
      manual = manualEncode && manualEncode[set] ? manualEncode[set] : {};
    }
    const ref = set !== null ? referenceEncode[set] : referenceEncode;


    return Object.keys(manual)
      .filter(attr => manual[attr] === false)
      .reduce((keptEncode, attr) => {
        keptEncode[attr] = ref[attr];
        return keptEncode;
      }, {});
  }


  function replacePositionAttrs(targetMarktype, targetEncode, referenceEncode) {
    const encode = Object.assign({}, targetEncode);
    const POSITION_ATTRS = ["x", "x2", "xc", "width", "y", "y2", "yc", "height"];
    const replaceRules = {
      rect: [
        {replaceBy: ["x", "x2"], },
        {replaceBy: ["x", "width"], },
        {replaceBy: ["xc", "width"], remove: ["x"] },
        {replaceBy: ["y", "y2"], },
        {replaceBy: ["y", "height"], },
        {replaceBy: ["yc", "height"], remove: ["y"] }
      ],
      area: [
        {replaceBy: ["x", "x2", "y"], remove: "*" },
        {replaceBy: ["x", "width", "y"], remove: "*" },
        {replaceBy: ["xc", "width", "y"], remove: "*" },
        {replaceBy: ["y", "y2", "x"], remove: "*" },
        {replaceBy: ["y", "height", "x"], remove: "*" },
        {replaceBy: ["yc", "height", "x"], remove: "*" },
        {replaceBy: ["x", "x2", "yc"], remove: "*" },
        {replaceBy: ["x", "width", "yc"], remove: "*" },
        {replaceBy: ["xc", "width", "yc"], remove: "*" },
        {replaceBy: ["y", "y2", "xc"], remove: "*" },
        {replaceBy: ["y", "height", "xc"], remove: "*" },
        {replaceBy: ["yc", "height", "xc"], remove: "*" }
      ],
      default: [
        {replaceBy: ["x"] },
        {replaceBy: ["xc"], remove: ["x"] },
        {replaceBy: ["y"] },
        {replaceBy: ["yc"], remove: ["y"] }
      ]
    };
    let rules = replaceRules[targetMarktype] || replaceRules.default;

    rules.forEach(rule => {
      const hasAll = rule.replaceBy.reduce((hasAll, attr) => {
        return hasAll && referenceEncode[attr];
      }, true);
      if (hasAll) {
        rule.replaceBy.forEach(attr => {
          encode[attr] = referenceEncode[attr];
        });
        let removedAttrs = rule.remove || [];
        if (rule.remove === "*") {
          removedAttrs = POSITION_ATTRS.filter(attr => rule.replaceBy.indexOf(attr) < 0);
        }
        removedAttrs.forEach(attr => {
          delete encode[attr];
        });
      }
    });


    return encode;
  }

  function compute(rawInfo, step, lastState) {
    const eView = rawInfo.eVis.view;
    const { change } = step;
    const isAdd = !change.initial && !!change.final;
    const isRemove = !!change.initial && !change.final;

    const manualEncode = change.encode;
    let doEnter = !isRemove && (isAdd || change.data !== false);
    let doExit = !isAdd && (isRemove || change.data !== false);

    if (change.data) {
      doEnter = change.data.enter === false ? false : doEnter;
      doExit = change.data.exit === false ? false : doExit;
    }

    if (
      !isAdd &&
      !isRemove &&
      change.initial.from.data !== change.final.from.data
    ) {
      if (!computeHasFacet(change.final) && !computeHasFacet(change.initial)) {
        console.error(
          `Data source of this mark (${change.compName}) has changed unexpectedly!`
        );
      }
    }

    const aggregates = {
      initial: lastState.aggregate,
      final: lastState.aggregate
    };
    const bins = {
      initial: lastState.bin,
      final: lastState.bin
    };

    if (change.data) {
      // aggregates.done = true;
      aggregates.final = getAggregate(change, rawInfo).final;
      bins.final = getBin(change, rawInfo).final;
    }

    const beingAggregated = change.data && !aggregates.initial && aggregates.final;
    const beingDisaggregated = change.data && aggregates.initial && !aggregates.final;
    const beingBinned = change.data && !bins.initial && bins.final;
    const beingDisbinned = change.data && bins.initial && !bins.final;


    const marktypes = {
      initial: lastState.marktype, // change.initial ? change.initial.type : undefined,
      final: change.final ? change.final.type : undefined
    };

    if (
      marktypes.initial &&
      marktypes.final &&
      marktypes.initial !== marktypes.final
    ) {
      console.log("mark transform change!");
      if (change.marktype === false) {
        marktypes.final = marktypes.initial;
      }
    }

    const hasFacet = {
      initial: lastState.hasFacet,
      final: lastState.hasFacet
    };
    if ((change.data || isAdd || isRemove) && change.marktype !== false) {
      hasFacet.final = computeHasFacet(change.final);
    }

    const scales = {
      initial: lastState.scale,
      final: copy2(lastState.scale)
    };
    const encodes = {
      initial: Object.assign({ update: {} }, copy(lastState.encode)),
      final: Object.assign({ update: {} }, copy(lastState.encode))
    };
    const signals = {
      initial: lastState.signal
    };
    const signalsFinal = ["width", "height", "padding"].reduce((acc, sgName) => {
      if (Array.isArray(change.signal)) {
        if (change.signal.indexOf(sgName) >= 0) {
          acc[sgName] = eView.signal(sgName);
        }
        return acc;
      }
      if (change.signal === false) {
        return acc;
      }
      acc[sgName] = eView.signal(sgName);
      return acc;
    }, {});
    signals.final = Object.assign({}, signals.initial, signalsFinal);

    if (change.scale !== false) {
      let finalScaleNames = [];
      if (change.scale === true || isAdd) {
        finalScaleNames = Object.keys(eView._runtime.scales);
      } else if (Array.isArray(change.scale)) {
        finalScaleNames = change.scale;
      } else if (typeof change.scale === "object") {
        finalScaleNames = Object.keys(change.scale);
      }
      finalScaleNames.forEach(scName => {
        if (change.scale[scName] && change.scale[scName].data === false) {
          scales.final[scName] = dataPreservedScale(
            rawInfo.sVis.spec,
            rawInfo.eVis.spec,
            scName
          );
        } else {
          scales.final[scName] = eView._runtime.scales[scName]
            ? eView._runtime.scales[scName].value
            : undefined;
        }

        const channel = Object.keys(encodes.final.update).find(
          key => key.scale === scName
        );
        encodes.final.update[channel] = change.final
          ? copy(change.final.encode.update[channel])
          : undefined;
      });
    }

    if (beingAggregated && aggregates.final.ops.indexOf("count") >= 0) {
      step.specificScaleFor = { ...step.specificScaleFor, enter: {initial: "final"} };
    }
    if (beingDisaggregated && aggregates.initial.ops.indexOf("count") >= 0) {
      step.specificScaleFor = { ...step.specificScaleFor, exit: {final: "initial"} };
    }

    if (manualEncode === false) {
      throw Error("Interpolating data requires to interpolate encode.");
    }

    const styleEncodes = {
      initial: copy(lastState.styleEncode),
      final: copy(lastState.styleEncode)
    };
    if (change.marktype) {
      styleEncodes.final = change.final && change.final.style
        ? DEFAULT_STYLE[change.final.style] || {}
        : {};
    }

    const manualEncodeEnterWithoutInitial = manualEncode
      ? copy(manualEncode.enter || {})
      : {};
    delete manualEncodeEnterWithoutInitial.initial;


    encodes.initial.enter = Object.assign(
      {},
      lastState.encode.update,
      DEFAULT_ENCODE.mark.enter,
      beingAggregated ? computeKeptEncode(
        manualEncode,
        get(change, "final", "encode", "update") || {}
      ) : {},
      manualEncode && manualEncode.enter ? manualEncode.enter.initial : {}
    );



    if (get(change, "encode", "enter") === false) {
      encodes.final.enter = encodes.initial.enter;
    } else {
      encodes.final.enter = Object.assign(
        {},
        DEFAULT_ENCODE.mark[marktypes.final || marktypes.initial].update,
        styleEncodes.final,
        copy(get(change, "final", "encode", "update") || {}),
        manualEncode ? manualEncodeEnterWithoutInitial : {},
        computeKeptEncode(manualEncode, encodes.initial, "enter")
      );
    }

    encodes.initial.exit = Object.assign({}, lastState.encode.update);
    if (change.encode && change.encode.exit === false) {
      encodes.final.exit = encodes.initial.exit;
    } else {
      encodes.final.exit = Object.assign(
        {},
        DEFAULT_ENCODE.mark[marktypes.initial || marktypes.final].update,
        styleEncodes.final,
        doExit
          ? copy(
            get(change, "final", "encode", "update") ||
                get(change, "initial", "encode", "update")
          )
          : copy(
            get(change, "initial", "encode", "update") ||
                get(change, "final", "encode", "update")
          ),
        DEFAULT_ENCODE.mark.exit,
        manualEncode ? manualEncode.exit : {},
        computeKeptEncode(manualEncode, encodes.initial, "exit")
      );
    }

    if (change.encode && change.encode.update === false) {
      encodes.final.update = encodes.initial.update;
    } else {
      encodes.final.update = Object.assign(
        {},
        DEFAULT_ENCODE.mark[marktypes.final || marktypes.initial].update,
        styleEncodes.final,
        copy(get(change, "final", "encode", "update") || {}),
        manualEncode ? manualEncode.update : {},
        computeKeptEncode(manualEncode, encodes.initial, "update")
      );
    }

    // When marktype changes
    // |S_exit  | -> |          | exit!                 (initial.exit  -> final.exit)
    // |S_update| -> |          | update via fading out (initial.update -> initial.intermediate)
    // |        | -> | E_update | & fading in           (final.intermediate -> final.update)
    // |        | -> | E_enter  | enter!                (initial.enter  -> final.enter)
    if (marktypes.final !== marktypes.initial) {
      encodes.initial.intermediate = Object.assign(
        {},
        replacePositionAttrs(marktypes.initial, encodes.initial.update, encodes.final.update),
        { opacity: { value: 0 } }
      );

      encodes.final.intermediate = Object.assign(
        {},
        replacePositionAttrs(marktypes.final, encodes.final.update, encodes.initial.update),
        { opacity: { value: 0 } }
      );

      if (doEnter) {
        encodes.initial.enter = Object.assign(
          {},
          replacePositionAttrs(marktypes.final, encodes.final.enter, encodes.initial.enter),
          { opacity: { value: 0 } },
          manualEncode && manualEncode.enter ? manualEncode.enter.initial : {}
        );
      }
      if (doExit) {
        encodes.final.exit = Object.assign(
          {},
          replacePositionAttrs(marktypes.initial, encodes.initial.exit, encodes.final.exit),
          { opacity: { value: 0 } },
          manualEncode ? manualEncode.exit : {},
          computeKeptEncode(manualEncode, encodes.initial, "exit"),
        );
      }
    }


    if (beingAggregated) {
      // when aggregate
      encodes.final.exit = Object.assign(
        change.marktype && (marktypes.initial !== marktypes.final) ? replacePositionAttrs(marktypes.initial, encodes.final.exit, encodes.final.update) : encodes.final.update,
        { opacity: { value: 0 } },
        manualEncode ? manualEncode.exit : {},
        computeKeptEncode(manualEncode, encodes.initial, "exit"),
      );


      encodes.final.update = copy(encodes.final.enter);
    } else if (beingDisaggregated) {
      // when disaggregate

      encodes.initial.enter = Object.assign(
        {},
        change.marktype && (marktypes.initial !== marktypes.final) ? replacePositionAttrs(marktypes.final, encodes.initial.enter, encodes.initial.update) : encodes.initial.update,
        { opacity: { value: 0 } },
        manualEncode && manualEncode.enter ? manualEncode.enter.initial : {}
      );

      encodes.final.update = copy(encodes.final.enter);
    }

    return {
      encodes,
      scales,
      signals,
      marktypes,
      hasFacet,
      aggregates,
      bins,
      styleEncodes
    };
  }

  function compute$1(rawInfo, step, lastState) {
    const { change } = step;
    const compState = lastState;
    const eView = rawInfo.eVis.view;
    const isRemove = !change.final;
    const isAdd = !change.initial;
    let doTicks;
    let doLabels;
    let doAxisG;
    let doTitle;
    let doDomain;
    let doGrid;
    doTicks = doLabels = doAxisG = doTitle = doDomain = doGrid = true;

    if (change.encode === false) {
      doTicks = doLabels = doAxisG = doTitle = doDomain = doGrid = false;
    } else if (change.encode) {
      doTicks = !(change.encode.ticks === false);
      doLabels = !(change.encode.labels === false);
      doAxisG = !(change.encode.axis === false);
      doTitle = !(change.encode.title === false);
      doGrid = !(change.encode.grid === false);
      doDomain = !(change.encode.domain === false);
    }

    const scNames = {
      initial: change.initial ? change.initial.scale : undefined,
      final: change.final ? change.final.scale : undefined
    };

    // collect the scale objects to scale the initial/final values
    const scales = {
      initial: compState.scale,
      final: copy2(compState.scale)
    };

    if (!(change.scale === false)) {
      if (!scNames.final) {
        scales.final = {};
      } else if (change.scale && change.scale.data === false) {
        scales.final[scNames.final] = dataPreservedScale(
          rawInfo.sVis.spec,
          rawInfo.eVis.spec,
          scNames.final
        );
      } else {
        scales.final[scNames.final] = eView._runtime.scales[scNames.final]
          ? eView._runtime.scales[scNames.final].value
          : undefined;
      }
    }

    let sameDomainDimension = get(change, "scale", "domainDimension");
    if (typeof sameDomainDimension === "string") {
      sameDomainDimension =
        sameDomainDimension === "same"
          ? true
          : sameDomainDimension === "diff"
            ? false
            : undefined;
    }
    if (isRemove || isAdd) {
      sameDomainDimension = false;
    } else if (sameDomainDimension === undefined) {
      if (change.scale === false) {
        sameDomainDimension = true;
      } else {
        const scaleDefs = {
          initial: rawInfo.sVis.spec.scales.find(
            scaleDef => scaleDef.name === scNames.initial
          ),
          final: rawInfo.eVis.spec.scales.find(
            scaleDef => scaleDef.name === scNames.final
          )
        };
        sameDomainDimension = deepEqual(
          scaleDefs.initial.domain,
          scaleDefs.final.domain
        );
      }
    }

    const signals = {
      initial: compState.signal
    };
    const signalsFinal = ["width", "height", "padding"].reduce((acc, sgName) => {
      if (Array.isArray(change.signal)) {
        if (change.signal.indexOf(sgName) >= 0) {
          acc[sgName] = eView.signal(sgName);
        }
        return acc;
      }
      if (change.signal === false) {
        return acc;
      }
      acc[sgName] = eView.signal(sgName);
      return acc;
    }, {});
    signals.final = Object.assign({}, signals.initial, signalsFinal);

    const allEncodes = {};

    const subComps = {
      ticks: doTicks,
      labels: doLabels,
      title: doTitle,
      axis: doAxisG,
      grid: doGrid,
      domain: doDomain
    };
    const axisGDatumFinal = change.final
      ? findComp(eView.scenegraph().root, change.compName, "axis")[0].items[0]
      : undefined;
    const axisGEncodeBaseFinal = axisGDatumFinal
      ? {
        x: { value: axisGDatumFinal.x },
        y: { value: axisGDatumFinal.y }
      }
      : {};

    Object.keys(subComps).forEach(subComp => {
      const manualEncode =
        change.encode && change.encode[subComp] ? change.encode[subComp] : {};
      allEncodes[subComp] = getAxisSubCompEncodes(subComp, manualEncode);
    });

    function getAxisSubCompEncodes(subComponent, manualEncode) {
      const encodes = {
        initial: copy(compState.encode[subComponent] || {}),
        final: copy(compState.encode[subComponent] || {})
      };

      if (subComps[subComponent] !== true) {
        return encodes;
      }

      const subCompEncode = {
        initial:
          change.initial &&
          change.initial.encode &&
          change.initial.encode[subComponent]
            ? change.initial.encode[subComponent].update
            : undefined,
        final:
          change.final && change.final.encode && change.final.encode[subComponent]
            ? change.final.encode[subComponent].update
            : undefined
      };

      encodes.initial.enter = Object.assign(
        {},
        // defaultAxisEncode.initial,
        DEFAULT_ENCODE.axis[subComponent](sameDomainDimension ? change.initial : change.final)
          .update,
        sameDomainDimension ? subCompEncode.initial : subCompEncode.final || {},
        DEFAULT_ENCODE.mark.enter,
        compState.encode.enter,
        manualEncode && manualEncode.enter ? manualEncode.enter.initial : {}
      );
      if (manualEncode && manualEncode.enter === false) {
        encodes.final.enter = encodes.initial.enter;
      } else {
        encodes.final.enter = Object.assign(
          {},
          // defaultAxisEncode.final,
          DEFAULT_ENCODE.axis[subComponent](change.final).update,
          subCompEncode.final ? subCompEncode.final : {},
          manualEncode ? manualEncode.enter : {},
          computeKeptEncode(manualEncode, encodes.initial, "enter")
        );
      }

      encodes.initial.exit = Object.assign(
        {},
        // defaultAxisEncode.initial,
        DEFAULT_ENCODE.axis[subComponent](change.initial).update,
        subCompEncode.initial ? subCompEncode.initial : {},
        compState.encode.exit || compState.encode.update
      );
      if (manualEncode && manualEncode.exit === false) {
        encodes.final.exit = encodes.initial.exit;
      } else {
        encodes.final.exit = Object.assign(
          {},
          // defaultAxisEncode.final,
          DEFAULT_ENCODE.axis[subComponent](
            sameDomainDimension ? change.final : change.initial
          ).update,
          sameDomainDimension ? subCompEncode.final : subCompEncode.initial || {},
          DEFAULT_ENCODE.mark.exit,
          manualEncode ? manualEncode.exit : {},
          computeKeptEncode(manualEncode, encodes.initial, "exit")
        );
      }

      encodes.initial.update = Object.assign(
        {},
        // defaultAxisEncode.initial,
        DEFAULT_ENCODE.axis[subComponent](change.initial).update,
        subCompEncode.initial || {},
        encodes.initial.update
      );

      if (manualEncode && manualEncode.update === false) {
        encodes.final.update = encodes.initial.update;
      } else {
        encodes.final.update = Object.assign(
          {},
          // defaultAxisEncode.final,
          subComponent === "axis" ? axisGEncodeBaseFinal : {},
          DEFAULT_ENCODE.axis[subComponent](change.final).update,
          subCompEncode.final || {},
          manualEncode ? manualEncode.update : {},
          computeKeptEncode(manualEncode, encodes.initial, "update")
        );
      }
      return encodes;
    }

    return {
      encodes: allEncodes,
      scales,
      signals,
      sameDomainDimension
    };
  }

  function compute$2(rawInfo, step, lastState) {
    const LEGEND_CHANNELS = [
      "fill",
      "opacity",
      "shape",
      "size",
      "stroke",
      "strokeDash",
      "strokeWidth"
    ];
    const { change } = step;
    const eView = rawInfo.eVis.view;

    let doTitle;
    let doSymbols;
    let doLabels;
    let doEntries;
    let doGradient;
    let doLegendG;
    doTitle = doSymbols = doLabels = doEntries = doGradient = doLegendG = true;
    const isRemove = !lastState.isRemove && !change.final;
    const isAdd = !lastState.isAdd && !change.initial;
    if (change.encode === false) {
      doTitle = doSymbols = doLabels = doEntries = doGradient = doLegendG = false;
    } else if (change.encode) {
      doTitle = !(change.encode.title === false);
      doSymbols = !(change.encode.symbols === false);
      doLabels = !(change.encode.labels === false);
      doEntries = !(change.encode.entries === false);
      doGradient = !(change.encode.gradient === false);
      doLegendG = !(change.encode.legend === false);
    }

    const legendTypes = {
      initial: lastState.legendType,
      final:
        change.scale === false
          ? lastState.legendType
          : change.final
            ? change.final.type
            : undefined
    };

    const scNames = {
      initial: [],
      final: []
    };
    LEGEND_CHANNELS.forEach(channel => {
      if (change.initial && change.initial[channel]) {
        scNames.initial.push(change.initial[channel]);
      }
      if (change.final && change.final[channel]) {
        scNames.final.push(change.final[channel]);
      }
    });

    // collect the scale objects to scale the initial/final values
    const scales = {
      initial: lastState.scale,
      final: copy2(lastState.scale)
    };

    if (change.scale !== false) {
      let finalScaleNames = [];
      if (Array.isArray(change.scale)) {
        finalScaleNames = change.scale;
      } else if (change.scale === true || isAdd) {
        finalScaleNames = scNames.final;
      } else if (typeof change.scale === "object") {
        finalScaleNames = scNames.final.filter(
          scName => change.scale[scName] !== false
        );
      }
      finalScaleNames.forEach(scName => {
        if (change.scale[scName] && change.scale[scName].data === false) {
          scales.final[scName] = dataPreservedScale(
            rawInfo.sVis.spec,
            rawInfo.eVis.spec,
            scName
          );
        } else {
          scales.final[scName] = eView._runtime.scales[scName]
            ? eView._runtime.scales[scName].value
            : undefined;
        }
      });
    }

    let sameDomainDimension = get(change, "scale", "domainDimension");
    if (typeof sameDomainDimension === "string") {
      sameDomainDimension =
        sameDomainDimension === "same"
          ? true
          : sameDomainDimension === "diff"
            ? false
            : undefined;
    }
    if (sameDomainDimension === undefined) {
      if (change.scale === false) {
        sameDomainDimension = true;
      } else if (isRemove || isAdd) {
        sameDomainDimension = false;
      } else {
        // Fact: Each legend can be associated with multiple scales but their domains are equal.
        const scaleDefs = {
          initial: rawInfo.sVis.spec.scales.find(
            scaleDef => scaleDef.name === scNames.initial[0]
          ),
          final: rawInfo.eVis.spec.scales.find(
            scaleDef => scaleDef.name === scNames.final[0]
          )
        };
        sameDomainDimension = deepEqual(
          scaleDefs.initial.domain,
          scaleDefs.final.domain
        );
      }
    }

    const signals = {
      initial: lastState.signal
    };
    const signalsFinal = ["width", "height", "padding"].reduce((acc, sgName) => {
      if (Array.isArray(change.signal)) {
        if (change.signal.indexOf(sgName) >= 0) {
          acc[sgName] = eView.signal(sgName);
        }
        return acc;
      }
      if (change.signal === false) {
        return acc;
      }
      acc[sgName] = eView.signal(sgName);
      return acc;
    }, {});
    signals.final = Object.assign({}, signals.initial, signalsFinal);

    const allEncodes = {};

    const subComps = {
      gradient: doGradient,
      bands: doGradient,
      pairs: doSymbols || doLabels,
      labels: doLabels,
      title: doTitle,
      legend: doLegendG,
      entries: doEntries,
      symbols: doSymbols
    };
    Object.keys(subComps).forEach(subComp => {
      if (subComps[subComp]) {
        const manualEncode =
          change.encode && change.encode[subComp] ? change.encode[subComp] : {};
        allEncodes[subComp] = getLegendSubCompEncodes(
          subComp,
          manualEncode
        );
      }
    });

    function getLegendSubCompEncodes(subComponent, manualEncode) {
      const defaultSubcompEncode = {
        initial: DEFAULT_ENCODE.legend[subComponent](change.initial).update,
        final: DEFAULT_ENCODE.legend[subComponent](change.final).update
      };
      const comps = change;
      const compEncode = {};
      ["initial", "final"].forEach(which => {
        if (
          comps[which] &&
          comps[which].encode &&
          comps[which].encode[subComponent]
        ) {
          compEncode[which] = comps[which].encode[subComponent].update;
        }
      });

      const encodes = {
        initial: copy2(
          lastState.encode && lastState.encode[subComponent]
            ? lastState.encode[subComponent]
            : { update: defaultSubcompEncode.initial }
        ),
        final: copy2(
          lastState.encode && lastState.encode[subComponent]
            ? lastState.encode[subComponent]
            : { update: defaultSubcompEncode.final }
        )
      };

      encodes.initial.enter = Object.assign(
        {},
        sameDomainDimension
          ? defaultSubcompEncode.initial
          : defaultSubcompEncode.final,
        sameDomainDimension ? compEncode.initial : compEncode.final,
        DEFAULT_ENCODE.mark.enter,
        lastState.encode.enter,
        manualEncode && manualEncode.enter ? manualEncode.enter.initial : {}
      );
      if (manualEncode && manualEncode.enter === false) {
        encodes.final.enter = encodes.initial.enter;
      } else {
        encodes.final.enter = Object.assign(
          {},
          defaultSubcompEncode.final,
          compEncode.final,
          manualEncode ? manualEncode.enter : {},
          computeKeptEncode(manualEncode, encodes.initial, "enter")
        );
      }

      encodes.initial.exit = Object.assign(
        {},
        defaultSubcompEncode.initial,
        compEncode.initial,
        lastState.encode.exit || lastState.encode.update
      );

      if (manualEncode && manualEncode.exit === false) {
        encodes.final.exit = encodes.initial.exit;
      } else {
        encodes.final.exit = Object.assign(
          {},
          sameDomainDimension
            ? defaultSubcompEncode.final
            : defaultSubcompEncode.initial,
          sameDomainDimension ? compEncode.final : compEncode.initial,
          DEFAULT_ENCODE.mark.exit,
          manualEncode ? manualEncode.exit : {},
          computeKeptEncode(manualEncode, encodes.initial, "exit")
        );
      }

      encodes.initial.update = Object.assign(
        {},
        defaultSubcompEncode.initial,
        compEncode.initial,
        encodes.initial.update
      );

      if (manualEncode && manualEncode.update === false) {
        encodes.final.update = encodes.initial.update;
      } else {
        encodes.final.update = Object.assign(
          {},
          defaultSubcompEncode.final,
          compEncode.final,
          manualEncode ? manualEncode.update : {},
          computeKeptEncode(manualEncode, encodes.initial, "update")
        );
      }

      return encodes;
    }

    return {
      encodes: allEncodes,
      scales,
      signals,
      legendTypes,
      sameDomainDimension,
      isAdd,
      isRemove
    };
  }

  function compute$3(rawInfo, step, lastState) {
    const { change } = step;
    const signals = {
      initial: lastState.signal
    };
    const encodes = {
      initial: copy(lastState.encode),
      final: copy(lastState.encode)
    };

    const signalsFinal = {};
    const finalSignalNames = Array.isArray(change.signal)
      ? change.signal
      : ["width", "height", "padding"];

    finalSignalNames.forEach(sgName => {
      signalsFinal[sgName] = rawInfo.eVis.view.signal(sgName);
    });

    signals.final = { ...signals.initial, ...signalsFinal };

    if (step.change.signal !== false) {
      if (finalSignalNames.indexOf("height") >= 0) {
        encodes.final.svg.y = { value: change.final.y + change.final.padding };
        encodes.final.svg.height = {
          value: change.final.viewHeight + change.final.padding * 2
        };
        encodes.final.root.height = { value: signals.final.height };
      }
      if (finalSignalNames.indexOf("width") >= 0) {
        encodes.final.svg.x = { value: change.final.x + change.final.padding };
        encodes.final.svg.width = {
          value: change.final.viewWidth + change.final.padding * 2
        };
        encodes.final.root.width = { value: signals.final.width };
      }
    }

    // Todo Encodes for view comp
    const fRootDatum = rawInfo.eVis.view._runtime.data.root.values.value[0];
    encodes.final.root.fill = { value: fRootDatum.fill };
    encodes.final.root.stroke = { value: fRootDatum.stroke };

    return {
      signals,
      encodes
    };

  }



  var computeStates = /*#__PURE__*/Object.freeze({
    __proto__: null,
    mark: compute,
    axis: compute$1,
    legend: compute$2,
    view: compute$3
  });

  function getLegendType$1(legendCompSpec, view) {
    if (legendCompSpec.fill) {
      const scale = view._runtime.scales[legendCompSpec.fill].value;
      if (
        [
          "sequential-linear",
          "linear",
          "log",
          "pow",
          "sqrt",
          "symlog",
          "bin-ordinal"
        ].indexOf(scale.type) >= 0
      ) {
        if (scale.type === "bin-ordinal") {
          return { type: "gradient", isBand: true };
        }
        return { type: "gradient" };
      }
    }

    if (legendCompSpec.stroke) {
      const scale = view._runtime.scales[legendCompSpec.stroke].value;
      if (
        [
          "sequential-linear",
          "linear",
          "log",
          "pow",
          "sqrt",
          "symlog",
          "bin-ordinal"
        ].indexOf(scale.type) >= 0
      ) {
        if (scale.type === "bin-ordinal") {
          return { type: "gradient", isBand: true };
        }
        return { type: "gradient" };
      }
    }
    return { type: "symbol" };
  }

  function getComponents(vgSpec) {
    // By traveling vgSpec, collect the marks, axes, legends, and scales with their bound data and encoding.
    const components = [];
    function collectComp(mark, currComp, isRoot = false) {
      if (isRoot) {
        mark.name = mark.name || "root";
      }
      let newComp = currComp;
      if (mark.axes) {
        newComp = newComp.concat(
          mark.axes.map(d => {
            return {
              ...copy(d),
              compType: "axis"
            };
          })
        );
      }

      if (mark.legends) {
        newComp = newComp.concat(
          mark.legends.map(d => { return { ...copy(d),  compType: "legend" }; })
        );
      }

      if (mark.scales) {
        newComp = newComp.concat(
          mark.scales.map(d => { return { ...copy(d),  compType: "scale" }; })
        );
      }

      if (!isRoot) {
        const newMark = { ...copy(mark),  compType: "mark" };
        delete newMark.marks;
        newComp.push(newMark);
      }

      if (mark.marks) {
        newComp = mark.marks.reduce((acc, curr) => {
          const subComps = collectComp(
            { ...curr, parent: (mark || "root") },
            []
          );
          return acc.concat(subComps);
        }, newComp);
      }
      return newComp;
    }

    return collectComp(copy(vgSpec), components, true);
  }
  function getChanges(sComponents, eComponents) {
    const IDENTIFIERS = {
      axis: comp =>
        comp.encode && comp.encode.axis ? comp.encode.axis.name : comp.scale,
      legend: comp =>
        comp.encode && comp.encode.legend ? comp.encode.legend.name : comp.scale,
      mark: comp => comp.name,
      scale: comp => comp.name
    };
    const merged = [];
    sComponents.forEach(sComp => {
      const id = IDENTIFIERS[sComp.compType];
      const matchedId = eComponents.findIndex(
        eComp => sComp.compType === eComp.compType && id(sComp) === id(eComp)
      );
      if (matchedId >= 0) {
        merged.push({
          compType: sComp.compType,
          compName: id(sComp),
          parent: sComp.parent,
          initial: sComp,
          final: eComponents.splice(matchedId, 1)[0]
        });
      } else {
        merged.push({
          compType: sComp.compType,
          compName: id(sComp),
          parent: sComp.parent,
          initial: sComp,
          final: null
        });
      }
    });

    return merged.concat(
      eComponents.map(eComp => {
        const id = IDENTIFIERS[eComp.compType];
        return {
          compType: eComp.compType,
          compName: id(eComp),
          parent: eComp.parent,
          initial: null,
          final: eComp
        };
      })
    );
  }

  function getViewChange(rawInfo) {
    return {
      compType: "view",
      compName: "global",

      initial: {
        viewWidth: rawInfo.sVis.view._viewWidth,
        viewHeight: rawInfo.sVis.view._viewHeight,
        width: rawInfo.sVis.view.width(),
        height: rawInfo.sVis.view.height(),
        x: rawInfo.sVis.view._origin[0],
        y: rawInfo.sVis.view._origin[1],
        padding: rawInfo.sVis.spec.padding
      },
      final: {
        viewWidth: rawInfo.eVis.view._viewWidth,
        viewHeight: rawInfo.eVis.view._viewHeight,
        width: rawInfo.eVis.view.width(),
        height: rawInfo.eVis.view.height(),
        x: rawInfo.eVis.view._origin[0],
        y: rawInfo.eVis.view._origin[1],
        padding: rawInfo.eVis.spec.padding
      }
    };
  }


  function getDefaultChange(step, rawInfo) {
    const change = copy(step.change || {});
    if (step.compType === "mark") {
      change.data = change.data === undefined ? true : change.data;
      if (
        change.data.update === false &&
        change.data.enter === false &&
        change.data.exit === false
      ) {
        change.data = false;
      }
      change.marktype = change.marktype === undefined ? true : change.marktype;
      change.scale = change.scale === undefined ? true : change.scale;
      change.signal = change.signal === undefined ? true : change.signal;
      change.encode = change.encode === undefined ? true : change.encode;
    } else if (step.compType === "axis" || step.compType === "legend") {
      change.signal = change.signal === undefined ? true : change.signal;
      change.scale = change.scale === undefined ? {} : change.scale;

      if (step.compType === "legend") {
        change.scale = change.scale === undefined ? true : change.scale;
        change.signal = change.signal === undefined ? true : change.signal;
        // specify the type of the legend
        if (change.initial) {
          change.initial = Object.assign(
            change.initial,
            getLegendType$1(change.initial, rawInfo.sVis.view)
          );

          change.initial.direction = change.initial.direction || "vertical";
          change.initial.orient = change.initial.orient || "right";
        }
        if (change.final) {
          change.final = Object.assign(
            change.final,
            getLegendType$1(change.final, rawInfo.eVis.view)
          );
          change.final.direction = change.final.direction || "vertical";
          change.final.orient = change.final.orient || "right";
        }
      }
    } else if (step.compType === "view") {
      change.signal = change.signal === undefined ? true : change.signal;
    }
    return change;
  }


  function attachChanges(rawInfo, schedule) {
    const changes = getChanges(
      getComponents(rawInfo.sVis.spec),
      getComponents(rawInfo.eVis.spec)
    );

    // attach the view change
    changes.push(getViewChange(rawInfo));

    schedule.forEach(track => {
      track.steps = track.steps.map(step => {
        if (step.compType === "pause") {
          return step;
        }

        const found = changes.find(change => {
          return (
            change.compType === step.compType &&
            (change.compName === step.compName || step.compType === "view")
          );
        });
        if (!found) {
          console.error(`cannot found the changes of ${step.compName}.`);
        }

        step.change = {
          ...step.change,
          ...found
        };
        step.change = {
          ...step.change,
          ...getDefaultChange(step, rawInfo)
        };

        return step;
      });
    });

    return schedule;
  }

  //Todo make schedule class and put this as its method
  function getMoments(schedule) {
    const moments = [];
    schedule.forEach(track => {
      track.steps.forEach(step => {
        let m = moments.find(m => m.time === step.sTime);
        if (!m) {
          moments.push({
            time: step.sTime,
            starting: [step],
            ending: []
          });
        } else {
          m.starting.push(step);
        }
        m = moments.find(m => m.time === step.eTime);
        if (!m) {
          moments.push({
            time: step.eTime,
            starting: [],
            ending: [step]
          });
        } else {
          m.ending.push(step);
        }
      });
    });
    return moments.sort((a, b) => a.time - b.time);
  }


  async function attachStates(schedule, rawInfo) {
    const state = initializeState(schedule, rawInfo);
    const moments = getMoments(schedule);
    schedule.moments = moments;

    for (const moment of moments) {
      for (const step of moment.ending) {
        const lastState = state[step.trackName];
        if (step.compType === "pause") {
          break;
        }

        lastState.data = lastState.data || initialData(step, rawInfo);

        // When the steps are enumerated by "enumerator"
        let eView;
        if (step.enumerated) {
          step.enumerated.forEach(enumed => {
            const filter = findFilter(state.spec, enumed.def.filter);
            state.spec = computeNewSpec(state.spec, filter, enumed.val);
          });
          eView = await new vega.View(vega.parse(state.spec), {
            renderer: "none"
          }).runAsync();
        }
        const newRawInfo = {
          sVis: rawInfo.sVis,
          eVis: Object.assign(
            {},
            rawInfo.eVis,
            eView ? { view: eView } : undefined
          )
        };
        if (step.compType === "view") {
          Object.assign(step.change, getViewChange(newRawInfo));
        }

        Object.assign(
          step,
          computeStates[step.compType](newRawInfo, step, lastState)
        );
        Object.assign(step, joinData(step, newRawInfo, lastState.data));
        lastState.data = step.nextData;

        if (step.encodes) {
          lastState.encode =
            copy(step.encodes.final) ||
            Object.keys(step.encodes).reduce((acc, key) => {
              acc[key] = step.encodes[key].final;
              return acc;
            }, {});
        }
        lastState.styleEncode = step.styleEncodes ? step.styleEncodes.final : undefined;
        lastState.signal = step.signals ? step.signals.final : undefined;
        lastState.scale = step.scales ? step.scales.final : undefined;
        lastState.marktype = step.marktypes ? step.marktypes.final : undefined;
        lastState.hasFacet = step.hasFacet ? step.hasFacet.final : undefined;
        lastState.aggregate = step.aggregates ? step.aggregates.final : undefined;
        lastState.bin = step.bins ? step.bins.final : undefined;
        lastState.isAdd = step.isAdd;
        lastState.isRemove = step.isRemove;
        lastState.sameDomainDimension = step.sameDomainDimension;

        state.spec = updateSpec(state, step, newRawInfo.eVis.spec);

        // Catch if scale < data for encodes using scales

        if (step.compType === "mark") {
          let valid = schedule.find(track => track.name === step.trackName)
            .scaleOrderValid;
          valid = valid === undefined ? true : valid;

          Object.keys(lastState.encode.update).map(prop => {
            const foundScale =
              lastState.scale[lastState.encode.update[prop].scale];

            if (foundScale && lastState.encode.update[prop].field && (lastState.data.length > 0)) {
              const { field } = lastState.encode.update[prop];
              let vals = lastState.data.map(d => d.datum[field]);

              if (lastState.data[0].mark.marktype === "group") {
                vals = lastState.data.reduce((vals, d) => {
                  return vals.concat(d.items[0].items.map(d2 => d2.datum[field]));
                }, []);
              }

              const scaleDomain = foundScale.domain();
              if (foundScale.type === "band" || foundScale.type === "point") {
                valid =
                  valid &&
                  vals.reduce(
                    (acc, v) => (acc = acc && scaleDomain.indexOf(v) >= 0),
                    true
                  );
              } else if (foundScale.type === "linear") {
                const max = Math.max(...vals);
                const min = Math.min(...vals);
                valid = valid && scaleDomain[0] <= min && scaleDomain[1] >= max;
              }
            }
          });
          schedule.find(
            track => track.name === step.trackName
          ).scaleOrderValid = valid;
        }
      }
      for (let step of moment.starting) {
        const lastState = state[step.trackName];
        if (get(step, "enumerator")) {
          if (step.compType === "mark") {
            // fetch enumerator
            step.enumeratorDef = step.enumerator;
            const enumerator = (step.enumerator = new Enumerator(
              step.enumeratorDef,
              state.spec,
              rawInfo
            ));
            await enumerator.init();
            // let dataName = (step.change.final || step.change.final).from.data;
            let dataName = step.compName;

            let key =
              (Array.isArray(step.change.data)
                ? step.change.data
                : step.change.data.keys) || null;
            if (
              computeHasFacet(step.change.initial) &&
              computeHasFacet(step.change.final)
            ) {
              key = (step.change.final || step.change.final).parent.from.facet
                .groupby;
              dataName = (step.change.final || step.change.final).parent.name;
            }
            let extractData = view => view.data(dataName);
            if (
              !computeHasFacet(step.change.initial) &&
              !computeHasFacet(step.change.final) &&
              isGroupingMarktype(step.change.initial) &&
              isGroupingMarktype(step.change.final)
            ) {
              extractData = view => {
                const data = view._runtime.data[dataName].values.value;
                return [
                  {
                    datum: {},
                    mark: { role: "group", marktype: "group" },
                    items: [{ items: data }]
                  }
                ];
              };
            }
            enumerator.joinData(extractData, (d, i) => {
              if (Array.isArray(key)) {
                return key
                  .map(field => {
                    return d.datum[field];
                  })
                  .join("-");
              }
              return i.toString();
            });

            // Check if scale < data
            for (let i = 1; i < enumerator.stopN - 1; i++) {
              let scale = scName => lastState.scale[scName];
              if (step.change.scale) {
                scale = enumerator._getScales(i);
              }
              const data = enumerator.getData(i);
              let valid = schedule.find(track => track.name === step.trackName)
                .scaleOrderValid;
              valid = valid === undefined ? true : valid;
              Object.keys(lastState.encode.update).map(prop => {
                const foundScale = scale(lastState.encode.update[prop].scale);

                if (foundScale && lastState.encode.update[prop].field) {
                  const { field } = lastState.encode.update[prop];
                  const scaleDomain = foundScale.domain();
                  let vals = data.map(d => d[field]);

                  if (data[0].mark.marktype === "group") {
                    vals = data.reduce((vals, d) => {
                      return vals.concat(
                        d.items[0].items.map(d2 => d2.datum[field])
                      );
                    }, []);
                  }

                  if (foundScale.type === "band" || foundScale.type === "point") {
                    valid =
                      valid &&
                      vals.reduce(
                        (acc, v) => (acc = acc && scaleDomain.indexOf(v) >= 0),
                        true
                      );
                  } else if (foundScale.type === "linear") {
                    const max = Math.max(...vals);
                    const min = Math.min(...vals);
                    valid =
                      valid && scaleDomain[0] <= min && scaleDomain[1] >= max;
                  }
                }
              });
              schedule.find(
                track => track.name === step.trackName
              ).scaleOrderValid = valid;
            }
          } else if (step.compType === "axis") {
            step.enumeratorDef = step.enumerator;
            step.enumerator = {};
            for (const subComp of ["tick", "label", "grid"]) {
              const enumerator = new Enumerator(
                step.enumeratorDef,
                state.spec,
                rawInfo
              );
              await enumerator.init();
              const scName = step.compName;
              enumerator.joinData(
                view => {
                  return view
                    .data(scName)[0]
                    .items.filter(item => item.role === `axis-${subComp}`)[0]
                    .items;
                },
                d => d.datum.value.toString()
              );
              step.enumerator[subComp] = enumerator;
            }

          } else if (step.compType === "legend") {
            step.enumeratorDef = step.enumerator;
            let legendEnumDefs = [];
            if (
              step.change.initial.type === "gradient" &&
              step.change.initial.type === "gradient"
            ) {
              const subComps = step.change.initial.isBand
                ? ["bands", "labels"]
                : ["labels"];
              legendEnumDefs = subComps.map(subComp => {
                return {
                  subComp,
                  extractData: view => {
                    const entryG = view._runtime.data[
                      step.compName
                    ].values.value[0].items.find(
                      item => item.role === "legend-entry"
                    ).items[0];
                    return entryG.items.find(
                      item => item.role === `legend-${subComp.replace(/s$/g, "")}`
                    ).items;
                  },
                  identifyDatum: d => d.datum.value.toString()
                };
              });
            } else if (
              step.change.initial.type === "symbol" &&
              step.change.initial.type === "symbol"
            ) {
              legendEnumDefs.push({
                subComp: "pairs",
                extractData: view => {
                  return view._runtime.data[
                    step.compName
                  ].values.value[0].items.find(
                    item => item.role === "legend-entry"
                  ).items[0].items[0].items;
                },
                identifyDatum: d => {
                  const { datum } = d.items.find(
                    item => item.role === "legend-label"
                  ).items[0];
                  return datum.value.toString();
                }
              });

              legendEnumDefs.push({
                subComp: "labels",
                extractData: view => {
                  const pairs = view._runtime.data[
                    step.compName
                  ].values.value[0].items.find(
                    item => item.role === "legend-entry"
                  ).items[0].items[0].items;
                  return pairs.map(pair => {
                    return pair.items.find(item => item.role === "legend-label")
                      .items[0];
                  });
                },
                identifyDatum: d => d.datum.value.toString()
              });

              legendEnumDefs.push({
                subComp: "symbols",
                extractData: view => {
                  const pairs = view._runtime.data[
                    step.compName
                  ].values.value[0].items.find(
                    item => item.role === "legend-entry"
                  ).items[0].items[0].items;
                  return pairs.map(pair => {
                    return pair.items.find(item => item.role === "legend-symbol")
                      .items[0];
                  });
                },
                identifyDatum: d => d.datum.value.toString()
              });
            } else {
              console.error(
                "Cannot enumerate the changes when the legend type changes."
              );
            }
            step.enumerator = {};
            for (const enumDef of legendEnumDefs) {
              const enumerator = new Enumerator(
                step.enumerator,
                state.spec,
                rawInfo
              );
              await enumerator.init();
              enumerator.joinData(enumDef.extractData, enumDef.identifyDatum);
              acc[enumDef.subComp] = enumerator;
              return acc;
            }

          }
        }
      }

    }
    return schedule;
  }

  function initializeState(schedule, rawInfo) {
    const sView = rawInfo.sVis.view;
    const sSpec = rawInfo.sVis.spec;
    const sComps = getComponents(sSpec);
    const initialState = {
      spec: copy(sSpec)
    };
    return schedule.reduce((initialState, track) => {
      // Todo: some scales can be hidden in _runtime._subcontext
      const compState = {
        scale: {},
        signal: {
          width: sView.signal("width"),
          height: sView.signal("height"),
          padding: sView.signal("padding")
        }
      };

      if (track.compType === "mark") {
        const sComp = sComps.find(c => c.name === track.compName);

        if (sComp) {
          compState.marktype = sComp.type;
          compState.hasFacet = computeHasFacet(sComp);
          compState.styleEncode = sComp.style ? DEFAULT_STYLE[sComp.style] : {};

          compState.encode = copy(sComp.encode || {});
          const baseEncode = Object.assign(
            {},
            DEFAULT_ENCODE.mark[compState.marktype].update,
            sComp.style ? DEFAULT_STYLE[sComp.style] : {}
          );
          compState.encode.update = Object.assign(
            baseEncode,
            compState.encode.update
          );
          compState.encode.exit = copy(compState.encode.update);
          compState.encode.enter = Object.assign(
            {},
            compState.encode.update,
            DEFAULT_ENCODE.mark.enter
          );

          sComps
            .filter(comp => comp.compType === "scale")
            .forEach(scale => {
              compState.scale[scale.name] = sView.scale(scale.name);
            });
        } else {
          compState.encode = {};
          compState.styleEncode = {};
        }
        compState.aggregate = getAggregate(
          track.steps[0].change,
          rawInfo
        ).initial;
        compState.bin = getBin(
          track.steps[0].change,
          rawInfo
        ).initial;

        // compState.aggregate.done = false;
      } else if (track.compType === "axis") {
        // for axis comp
        const sComp = sComps.find(
          c => c.compType === "axis" && c.encode.axis.name === track.compName
        );

        if (track.steps[0].change.initial) {
          compState.scale[sComp.scale] = sView.scale(sComp.scale);
        }

        compState.encode = sComp ? copy(sComp.encode || {}) : {};
        const axisGDatumInitial = sComp
          ? findComp(sView.scenegraph().root, track.compName, "axis")[0].items[0]
          : undefined;
        compState.encode.axis = axisGDatumInitial
          ? {
            update: {
              x: { value: axisGDatumInitial.x },
              y: { value: axisGDatumInitial.y }
            }
          }
          : {};
      } else if (track.compType === "legend") {
        // for axis comp

        const sComp = sComps.find(
          c => c.compType === "legend" && c.encode.legend.name === track.compName
        );
        compState.legendType = undefined;
        if (track.steps[0].change.initial) {
          compState.legendType = track.steps[0].change.initial.type;
          [
            "fill",
            "opacity",
            "shape",
            "size",
            "stroke",
            "strokeDash",
            "strokeWidth"
          ].forEach(channel => {
            const scName = track.steps[0].change.initial[channel];
            if (scName) {
              compState.scale[scName] = sView.scale(scName);
            }
          });
        }

        compState.encode = sComp ? copy(sComp.encode || {}) : {};
      } else if (track.compType === "view") {
        const iRootDatum = sView._runtime.data.root.values.value[0];
        const { initial } = track.steps[0].change;
        compState.encode = {
          svg: {
            x: { value: initial.x + initial.padding },
            y: { value: initial.y + initial.padding },
            width: { value: initial.viewWidth + initial.padding * 2 },
            height: { value: initial.viewHeight + initial.padding * 2 }
          },
          root: {
            width: { value: initial.width },
            height: { value: initial.height },
            fill: { value: iRootDatum.fill },
            stroke: { value: iRootDatum.stroke }
          }
        };
      }
      initialState[track.name] = compState;
      return initialState;
    }, initialState);
  }

  function updateSpec(lastState, lastStep, eSpec) {
    const updatedSpec = copy(lastState.spec);
    if (lastStep.compType === "mark") {
      const lastMarkComp = lastStep.change.final;
      // If the markComp is facetted, its parent mark should be updated.
      const compName = computeHasFacet(lastMarkComp)
        ? lastMarkComp.parent.name
        : lastStep.compName;
      if (!lastMarkComp && compName && lastStep.change.data) {
        // Remove the mark
        const old = updatedSpec.marks.findIndex(mark => mark.name === compName);
        updatedSpec.marks.splice(old, 1);
      } else {
        const old = findMark(updatedSpec.marks, compName);
        if (!old) {
          updatedSpec.marks.push(findMark(eSpec.marks, compName));
        } else {
          const dataName = computeHasFacet(lastMarkComp)
            ? lastMarkComp.parent.from.facet.data
            : lastMarkComp.from.data;
          if (lastStep.change.data) {
            // update data source
            const old = updatedSpec.data.findIndex(
              data => data.name === dataName
            );
            if (old >= 0) {
              updatedSpec.data.splice(old, 1, copy(findData(eSpec, dataName)));
            } else {
              const newI = eSpec.data.findIndex(data => data.name === dataName);
              updatedSpec.data.splice(newI, 0, copy(findData(eSpec, dataName)));
            }
          }
          old.encode.update = lastState[lastStep.trackName].encode.update;
        }
      }
    } else if (lastStep.compType === "axis") {
      // console.log(lastStep.compName);
      const old = updatedSpec.axes.findIndex(
        axis =>
          axis.encode &&
          axis.encode.axis &&
          axis.encode.axis.name === lastStep.compName
      );
      if (old >= 0) {
        updatedSpec.axes.splice(old, 1);
      }
      let newAxis;
      if (
        (newAxis = eSpec.axes.find(
          axis =>
            axis.encode &&
            axis.encode.axis &&
            axis.encode.axis.name === lastStep.compName
        ))
      ) {
        updatedSpec.axes.push(newAxis);
      }
    } else if (lastStep.compType === "legend") {
      const old = updatedSpec.legends
        ? updatedSpec.legends.findIndex(
          legend =>
            legend.encode &&
              legend.encode.legend &&
              legend.encode.legend.name === lastStep.compName
        )
        : -1;
      if (old >= 0) {
        updatedSpec.legends.splice(old, 1);
      }

      const newLegend = eSpec.legends
        ? eSpec.legends.find(
          legend =>
            legend.encode &&
              legend.encode.legend &&
              legend.encode.legend.name === lastStep.compName
        )
        : undefined;
      if (newLegend) {
        if (updatedSpec.legends) {
          updatedSpec.legends.push(newLegend);
        } else {
          updatedSpec.legends = [newLegend];
        }
      }
    }
    return updatedSpec;
  }

  // https://github.com/vega/vega/blob/master/packages/vega-scenegraph/src/util/text.js
  function textOffset(item) {
    // perform our own font baseline calculation
    // why? not all browsers support SVG 1.1 'alignment-baseline' :(
    const { baseline } = item;
    const h = fontSize(item);
    switch (baseline) {
    case "top":
      return 0.79 * h;
    case "middle":
      return 0.3 * h;
    case "bottom":
      return -0.21 * h;
    case "line-top":
      return 0.29 * h + 0.5 * lineHeight(item);
    case "line-bottom":
      return 0.29 * h - 0.5 * lineHeight(item);
    default:
      return 0;
    }
  }

  function fontSize(item) {
    return item.fontSize != null ? +item.fontSize || 0 : 11;
  }

  function lineHeight(item) {
    return item.lineHeight != null ? item.lineHeight : fontSize(item) + 2;
  }

  function getStyle(attr) {
    switch (attr) {
    case "font":
      return "font-family";
    case "fontSize":
      return "font-size";
    case "fontStyle":
      return "font-style";
    case "fontVariant":
      return "font-variant";
    case "fontWeight":
      return "font-weight";
    case "strokeWidth":
      return "stroke-width";
    case "strokeDasharray":
      return "stroke-dasharray";
    }
    return attr;
  }

  function transformItem(item) {
    return `translate(${item.x || 0}, ${item.y || 0})${
    item.angle ? ` rotate(${item.angle})` : ""
  }`;
  }

  // Modify d3-interpolate-path (https://github.com/pbeshai/d3-interpolate-path) package by **.

  /**
   * List of params for each command type in a path `d` attribute
   */
  const typeMap = {
    M: ["x", "y"],
    L: ["x", "y"],
    H: ["x"],
    V: ["y"],
    C: ["x1", "y1", "x2", "y2", "x", "y"],
    S: ["x2", "y2", "x", "y"],
    Q: ["x1", "y1", "x", "y"],
    T: ["x", "y"],
    A: ["rx", "ry", "xAxisRotation", "largeArcFlag", "sweepFlag", "x", "y"]
  };

  /**
   * Convert to object representation of the command from a string
   *
   * @param {String} commandString Token string from the `d` attribute (e.g., L0,0)
   * @return {Object} An object representing this command.
   */
  function commandObject(commandString) {
    // convert all spaces to commas
    commandString = commandString.trim().replace(/ /g, ",");

    const type = commandString[0];
    const args = commandString.substring(1).split(",");
    return typeMap[type.toUpperCase()].reduce(
      (obj, param, i) => {
        // parse X as float since we need it to do distance checks for extending points
        obj[param] = ["x", "y"].indexOf(param) >= 0 ? parseFloat(args[i]) : args[i];
        return obj;
      },
      { type }
    );
  }

  /**
   * Converts a command object to a string to be used in a `d` attribute
   * @param {Object} command A command object
   * @return {String} The string for the `d` attribute
   */
  function commandToString(command) {
    const { type } = command;
    const params = typeMap[type.toUpperCase()];
    return `${type}${params.map(p => command[p]).join(",")}`;
  }

  /**
   * Converts command A to have the same type as command B.
   *
   * e.g., L0,5 -> C0,5,0,5,0,5
   *
   * Uses these rules:
   * x1 <- x
   * x2 <- x
   * y1 <- y
   * y2 <- y
   * rx <- 0
   * ry <- 0
   * xAxisRotation <- read from B
   * largeArcFlag <- read from B
   * sweepflag <- read from B
   *
   * @param {Object} aCommand Command object from path `d` attribute
   * @param {Object} bCommand Command object from path `d` attribute to match against
   * @return {Object} aCommand converted to type of bCommand
   */
  function convertToSameType(aCommand, bCommand) {
    const conversionMap = {
      x1: "x",
      y1: "y",
      x2: "x",
      y2: "y"
    };

    const readFromBKeys = ["xAxisRotation", "largeArcFlag", "sweepFlag"];

    // convert (but ignore M types)
    if (aCommand.type !== bCommand.type && bCommand.type.toUpperCase() !== "M") {
      const aConverted = {};
      Object.keys(bCommand).forEach(bKey => {
        const bValue = bCommand[bKey];
        // first read from the A command
        let aValue = aCommand[bKey];

        // if it is one of these values, read from B no matter what
        if (aValue === undefined) {
          if (readFromBKeys.includes(bKey)) {
            aValue = bValue;
          } else {
            // if it wasn't in the A command, see if an equivalent was
            if (aValue === undefined && conversionMap[bKey]) {
              aValue = aCommand[conversionMap[bKey]];
            }

            // if it doesn't have a converted value, use 0
            if (aValue === undefined) {
              aValue = 0;
            }
          }
        }

        aConverted[bKey] = aValue;
      });

      // update the type to match B
      aConverted.type = bCommand.type;
      aCommand = aConverted;
    }

    return aCommand;
  }

  /**
   * Extends an array of commands to the length of the second array
   * inserting points at the spot that is closest by X value. Ensures
   * all the points of commandsToExtend are in the extended array and that
   * only numPointsToExtend points are added.
   *
   * @param {Object[]} commandsToExtend The commands array to extend
   * @param {Object[]} referenceCommands The commands array to match
   * @return {Object[]} The extended commands1 array
   */
  function extend(commandsToExtend, referenceCommands, numPointsToExtend) {
    // map each command in B to a command in A by counting how many times ideally
    // a command in A was in the initial path (see https://github.com/pbeshai/d3-interpolate-path/issues/8)
    let initialCommandIndex;
    if (commandsToExtend.length > 1 && commandsToExtend[0].type === "M") {
      initialCommandIndex = 1;
    } else {
      initialCommandIndex = 0;
    }

    const counts = referenceCommands.reduce((counts, refCommand, i) => {
      // skip first M
      if (i === 0 && refCommand.type === "M") {
        counts[0] = 1;
        return counts;
      }

      let minDistance = Math.abs(
        commandsToExtend[initialCommandIndex].x - refCommand.x
      );
      let minCommand = initialCommandIndex;

      // find the closest point by X position in A
      for (let j = initialCommandIndex + 1; j < commandsToExtend.length; j++) {
        const distance = Math.abs(commandsToExtend[j].x - refCommand.x);
        if (distance < minDistance) {
          minDistance = distance;
          minCommand = j;
          // since we assume sorted by X, once we find a value farther, we can return the min.
        } else {
          break;
        }
      }

      counts[minCommand] = (counts[minCommand] || 0) + 1;
      return counts;
    }, {});

    // now extend the array adding in at the appropriate place as needed
    const extended = [];
    let numExtended = 0;
    for (let i = 0; i < commandsToExtend.length; i++) {
      // add in the initial point for this A command
      extended.push(commandsToExtend[i]);

      for (let j = 1; j < counts[i] && numExtended < numPointsToExtend; j++) {
        const commandToAdd = Object.assign({}, commandsToExtend[i]);
        // don't allow multiple Ms
        if (commandToAdd.type === "M") {
          commandToAdd.type = "L";
        } else {
          // try to set control points to x and y
          if (commandToAdd.x1 !== undefined) {
            commandToAdd.x1 = commandToAdd.x;
            commandToAdd.y1 = commandToAdd.y;
          }

          if (commandToAdd.x2 !== undefined) {
            commandToAdd.x2 = commandToAdd.x;
            commandToAdd.y2 = commandToAdd.y;
          }
        }
        extended.push(commandToAdd);
        numExtended += 1;
      }
    }

    return extended;
  }

  /**
   * Extends an array of commands to the length of the second array
   * inserting points at the spot that is closest by X value. Ensures
   * all the points of commandsToExtend are in the extended array and that
   * only numPointsToExtend points are added.
   *
   * @param {Object[]} commandsToExtend The commands array to extend
   * @param {Object[]} referenceCommands The commands array to match
   * @return {Object[]} The extended commands1 array
   */
  function extend2(commandsToExtend, referenceCommands, numPointsToExtend, alongTo="x") {
    // map each command in B to a command in A by counting how many times ideally
    // a command in A was in the initial path (see https://github.com/pbeshai/d3-interpolate-path/issues/8)
    let initialCommandIndex;
    if (commandsToExtend.length > 1 && commandsToExtend[0].type === "M") {
      initialCommandIndex = 1;
    } else {
      initialCommandIndex = 0;
    }
    let [m, subM] = alongTo === "x" ? ["x", "y"] : ["y", "x"];


    const counts = referenceCommands.reduce((counts, refCommand, i) => {
      // skip first M
      if (i === 0 && refCommand.type === "M") {
        counts[0] = 1;
        return counts;
      }

      let minDistance = Math.abs(
        commandsToExtend[initialCommandIndex][m] - refCommand[m]
      );
      let subMinDistance = Math.abs(
        commandsToExtend[initialCommandIndex][subM] - refCommand[subM]
      );
      let minCommand = initialCommandIndex;

      // find the closest point by X position in A
      for (let j = initialCommandIndex + 1; j < commandsToExtend.length; j++) {
        const distance = Math.abs(commandsToExtend[j][m] - refCommand[m]);
        const subDistance = Math.abs(commandsToExtend[j][subM] - refCommand[subM]);
        if (distance < minDistance) {
          minDistance = distance;
          minCommand = j;
          subMinDistance = subDistance;
          // since we assume sorted by X, once we find a value farther, we can return the min.
        } else if (distance === minDistance) {
          if (subDistance < subMinDistance) {
            minCommand = j;
            subMinDistance = subDistance;
          }
        } else {
          break;
        }
      }

      counts[minCommand] = (counts[minCommand] || 0) + 1;
      return counts;
    }, {});

    // now extend the array adding in at the appropriate place as needed
    const extended = [];
    let numExtended = 0;
    for (let i = 0; i < commandsToExtend.length; i++) {
      // add in the initial point for this A command
      extended.push(commandsToExtend[i]);

      for (let j = 1; j < counts[i] && numExtended < numPointsToExtend; j++) {
        const commandToAdd = Object.assign({}, commandsToExtend[i]);
        // don't allow multiple Ms
        if (commandToAdd.type === "M") {
          commandToAdd.type = "L";
        } else {
          // try to set control points to x and y
          if (commandToAdd.x1 !== undefined) {
            commandToAdd.x1 = commandToAdd.x;
            commandToAdd.y1 = commandToAdd.y;
          }

          if (commandToAdd.x2 !== undefined) {
            commandToAdd.x2 = commandToAdd.x;
            commandToAdd.y2 = commandToAdd.y;
          }
        }
        extended.push(commandToAdd);
        numExtended += 1;
      }
    }

    return extended;
  }

  /**
   * Interpolate from A to B by extending A and B during interpolation to have
   * the same number of points. This allows for a smooth transition when they
   * have a different number of points.
   *
   * Ignores the `Z` character in paths unless both A and B end with it.
   *
   * @param {String} a The `d` attribute for a path
   * @param {String} b The `d` attribute for a path
   */
  function interpolatePath(a, b, alongTo = "x") {
    // remove Z, remove spaces after letters as seen in IE
    const aNormalized =
      a == null ? "" : a.replace(/[Z]/gi, "").replace(/([MLCSTQAHV])\s*/gi, "$1");
    const bNormalized =
      b == null ? "" : b.replace(/[Z]/gi, "").replace(/([MLCSTQAHV])\s*/gi, "$1");
    const aPoints =
      aNormalized === "" ? [] : aNormalized.split(/(?=[MLCSTQAHV])/gi);
    const bPoints =
      bNormalized === "" ? [] : bNormalized.split(/(?=[MLCSTQAHV])/gi);

    // if both are empty, interpolation is always the empty string.
    if (!aPoints.length && !bPoints.length) {
      return function nullInterpolator() {
        return "";
      };
    }

    // if A is empty, treat it as if it used to contain just the first point
    // of B. This makes it so the line extends out of from that first point.
    if (!aPoints.length) {
      aPoints.push(bPoints[0]);

      // otherwise if B is empty, treat it as if it contains the first point
      // of A. This makes it so the line retracts into the first point.
    } else if (!bPoints.length) {
      bPoints.push(aPoints[0]);
    }

    // convert to command objects so we can match types
    let aCommands = aPoints.map(commandObject);
    let bCommands = bPoints.map(commandObject);

    // extend to match equal size
    const numPointsToExtend = Math.abs(bPoints.length - aPoints.length);

    if (numPointsToExtend !== 0) {
      // B has more points than A, so add points to A before interpolating
      if (bCommands.length > aCommands.length) {
        aCommands = extend2(aCommands, bCommands, numPointsToExtend, alongTo);

        // else if A has more points than B, add more points to B
      } else if (bCommands.length < aCommands.length) {
        bCommands = extend2(bCommands, aCommands, numPointsToExtend, alongTo);
      }
    }

    // commands have same length now.
    // convert A to the same type of B
    aCommands = aCommands.map((aCommand, i) =>
      convertToSameType(aCommand, bCommands[i])
    );

    let aProcessed = aCommands.map(commandToString).join("");
    let bProcessed = bCommands.map(commandToString).join("");

    // if both A and B end with Z add it back in
    if (
      (a == null || a[a.length - 1] === "Z") &&
      (b == null || b[b.length - 1] === "Z")
    ) {
      aProcessed += "Z";
      bProcessed += "Z";
    }

    const stringInterpolator = d3.interpolateString(aProcessed, bProcessed);

    return function pathInterpolator(t) {
      // at 1 return the final value without the extensions used during interpolation
      if (t === 1) {
        return b == null ? "" : b;
      }

      return stringInterpolator(t);
    };
  }
  /**
   * Interpolate from A to B by extending A and B during interpolation to have
   * the same number of points. This allows for a smooth transition when they
   * have a different number of points.
   *
   * Ignores the `Z` character in paths unless both A and B end with it.
   *
   * @param {String} a The `d` attribute for a path
   * @param {String} b The `d` attribute for a path
   */
  function interpolatePath2(a, b, alongTo = "x") {
    // remove Z, remove spaces after letters as seen in IE
    const aNormalized =
      a == null ? "" : a.replace(/[Z]/gi, "").replace(/([MLCSTQAHV])\s*/gi, "$1");
    const bNormalized =
      b == null ? "" : b.replace(/[Z]/gi, "").replace(/([MLCSTQAHV])\s*/gi, "$1");
    const aPoints =
      aNormalized === "" ? [] : aNormalized.split(/(?=[MLCSTQAHV])/gi);
    const bPoints =
      bNormalized === "" ? [] : bNormalized.split(/(?=[MLCSTQAHV])/gi);

    // if both are empty, interpolation is always the empty string.
    if (!aPoints.length && !bPoints.length) {
      return function nullInterpolator() {
        return "";
      };
    }

    // if A is empty, treat it as if it used to contain just the first point
    // of B. This makes it so the line extends out of from that first point.
    if (!aPoints.length) {
      aPoints.push(bPoints[0]);

      // otherwise if B is empty, treat it as if it contains the first point
      // of A. This makes it so the line retracts into the first point.
    } else if (!bPoints.length) {
      bPoints.push(aPoints[0]);
    }

    // convert to command objects so we can match types
    const aCommands = aPoints.map(commandObject);
    const bCommands = bPoints.map(commandObject);
    let hasZ = false;
    if (
      (a == null || a[a.length - 1] === "Z") &&
      (b == null || b[b.length - 1] === "Z")
    ) {
      hasZ = true;
    }

    // get tail
    // get head
    // concat tail + body + head
    const aExtent = d3.extent(aCommands, c => c[alongTo]);
    const bExtent = d3.extent(bCommands, c => c[alongTo]);
    if (alongTo === "x") {
      const aHeadI = aCommands.findIndex(c => c[alongTo] === aExtent[1]);
      const bHeadI = bCommands.findIndex(c => c[alongTo] === bExtent[1]);

      const aTop = aCommands.slice(0, aHeadI + 1);
      const bTop = bCommands.slice(0, bHeadI + 1);
      const aBottom = aCommands.slice(aHeadI + 1).reverse();
      const bBottom = bCommands.slice(bHeadI + 1).reverse();
      const hasBottom = aBottom.length > 0 && bBottom.length > 0;

      return t => {
        if (t === 1) {
          return b === null ? "" : b;
        }
        return (
          interpolateOutline(aTop, bTop, aExtent, bExtent)(t) +
          (hasBottom
            ? interpolateOutline(aBottom, bBottom, aExtent, bExtent, true, true)(t)
            : "") +
          (hasZ ? "Z" : "")
        );
      };
    } else {
      const aHeadI = aCommands.findIndex(c => c[alongTo] === aExtent[0]);
      const bHeadI = bCommands.findIndex(c => c[alongTo] === bExtent[0]);

      const aTop = aCommands.slice(0, aHeadI + 1).reverse();
      const bTop = bCommands.slice(0, bHeadI + 1).reverse();
      const aBottom = aCommands.slice(aHeadI + 1);
      const bBottom = bCommands.slice(bHeadI + 1);
      const hasBottom = aBottom.length > 0 && bBottom.length > 0;

      return t => {
        if (t === 1) {
          return b === null ? "" : b;
        }
        return (
          interpolateOutline(aTop, bTop, aExtent, bExtent, true)(t) +
          (hasBottom
            ? interpolateOutline(aBottom, bBottom, aExtent, bExtent, false, true)(t)
            : "") +
          (hasZ ? "Z" : "")
        );
      };
    }

    function interpolateOutline(
      aCommands,
      bCommands,
      aExtent,
      bExtent,
      reverse,
      isBottom = false
    ) {
      let head;
      let tail;
      let body;
      if (aExtent[1] < bExtent[0] || aExtent[0] > bExtent[1]) {
        // just interpolate
        body = getBody(aCommands, bCommands, reverse);
      } else {
        if (aExtent[1] > bExtent[1]) {
          // shrink head
          const i = aCommands.findIndex(c => c[alongTo] > bExtent[1]);
          head = getHead(aCommands.slice(i - 1), reverse, true, isBottom);
        } else if (aExtent[1] < bExtent[1]) {
          // extend head
          const i = bCommands.findIndex(c => c[alongTo] > aExtent[1]);
          head = getHead(bCommands.slice(i - 1), reverse, false, isBottom);
        }

        if (aExtent[0] < bExtent[0]) {
          // shrink tail
          const i = aCommands.findIndex(c => c[alongTo] >= bExtent[0]);
          tail = getTail(aCommands.slice(0, i + 1), reverse, true, isBottom);
        } else if (aExtent[0] > bExtent[0]) {
          // extend tail
          const i = bCommands.findIndex(c => c[alongTo] >= aExtent[0]);
          tail = getTail(bCommands.slice(0, i + 1), reverse, false, isBottom);
          // tail = getTail(bCommands.filter(c => c[alongTo] < aExtent[0]), false);
        }

        const bodyMin = Math.max(aExtent[0], bExtent[0]);
        const bodyMax = Math.min(aExtent[1], bExtent[1]);
        // get body
        body = getBody(
          aCommands.filter(c => c[alongTo] >= bodyMin && c[alongTo] <= bodyMax  ),
          bCommands.filter(c => c[alongTo] >= bodyMin && c[alongTo] <= bodyMax  ),
          reverse,
          !isBottom && ((reverse && !head) || (!reverse && !tail))
        );
      }
      if (reverse) {
        return t => {
          return (head ? head(t) : "") + body(t) + (tail ? tail(t) : "");
        };
      } else {
        return t => {
          return (tail ? tail(t) : "") + body(t) + (head ? head(t) : "");
        };
      }

    }

    function getBody(aCommands, bCommands, reverse = false, isTail = false) {
      // extend to match equal size
      const numPointsToExtend = Math.abs(bCommands.length - aCommands.length);
      if (aCommands.length <= 1 && bCommands.length <= 1) {
        return t => "";
      }
      if (numPointsToExtend !== 0) {
        // B has more points than A, so add points to A before interpolating
        if (bCommands.length > aCommands.length) {
          aCommands = extend(aCommands, bCommands, numPointsToExtend);

          // else if A has more points than B, add more points to B
        } else if (bCommands.length < aCommands.length) {
          bCommands = extend(bCommands, aCommands, numPointsToExtend);
        }
      }

      // commands have same length now.
      // convert A to the same type of B
      aCommands = aCommands.map((aCommand, i) =>
        convertToSameType(aCommand, bCommands[i])
      );
      aCommands = (reverse ? aCommands.reverse() : aCommands);
      bCommands = (reverse ? bCommands.reverse() : bCommands);
      if (isTail) {
        aCommands[0] = Object.assign({}, aCommands[0], { type: "M" });
        bCommands[0] = Object.assign({}, bCommands[0], { type: "M" });
      }
      const aProcessed = aCommands
        .map(commandToString)
        .join("");
      const bProcessed = bCommands
        .map(commandToString)
        .join("");

      const stringInterpolator = d3.interpolateString(aProcessed, bProcessed);

      return function pathInterpolator(t) {
        // at 1 return the final value without the extensions used during interpolation
        if (t === 1) {
          return bProcessed == null ? "" : bProcessed;
        }

        return stringInterpolator(t);
      };
    }

    function getHead(commands, reverse = false, isShrink = false, isBottom=false) {
      const d = commands.map(commandToString).join("");
      const L = commands.length;
      const phases = [];
      for (let i = 1; i <= L - 1; i++) {
        let aCommands = commands.slice(0, i).concat([commands[i - 1]]);
        let bCommands = commands.slice(0, i + 1);
        aCommands = (reverse ? aCommands.reverse() : aCommands);
        bCommands = (reverse ? bCommands.reverse() : bCommands);
        const aProcessed = aCommands
          .map(commandToString)
          .join("");
        const bProcessed = bCommands
          .map(commandToString)
          .join("");
        if (reverse && !isBottom) {
          aCommands[0] = Object.assign({}, aCommands[0], { type: "M" });
          bCommands[0] = Object.assign({}, bCommands[0], { type: "M" });
        }
        phases.push(function(t) {
          return d3.interpolateString(aProcessed, bProcessed)(t);
        });
      }

      return function(t) {
        if (isShrink) {
          t = 1 - t;
        }
        if (t === 1) {
          return d == null ? "" : d;
        }
        const phase = Math.floor(t * (L - 1));

        return phases[phase](t * (L - 1) - phase);
      };
    }

    function getTail(commands, reverse = false, isShrink = false, isBottom=false) {
      const d = commands.map(commandToString).join("");
      const L = commands.length;
      const phases = [];
      for (let i = 1; i < L; i++) {
        let aCommands = [commands[L - i]].concat(commands.slice(L - i, L));
        let bCommands = commands.slice(L - i - 1, L);

        aCommands = (reverse ? aCommands.reverse() : aCommands);
        bCommands = (reverse ? bCommands.reverse() : bCommands);

        if (!reverse && !isBottom) {
          aCommands[0] = Object.assign({}, aCommands[0], { type: "M" });
          bCommands[0] = Object.assign({}, bCommands[0], { type: "M" });
        }

        const aProcessed = aCommands
          .map(commandToString)
          .join("");
        const bProcessed = bCommands
          .map(commandToString)
          .join("");

        phases.push(function(t) {
          return d3.interpolateString(aProcessed, bProcessed)(t);
        });
      }
      return function(t) {
        if (isShrink) {
          t = 1 - t;
        }
        if (t === 1) {
          return d == null ? "" : d;
        }
        const phase = Math.floor(t * (L - 1));
        return phases[phase](t * (L - 1) - phase);
      };
    }
  }

  /* eslint-disable camelcase */




  function rectInterpolator(scales, encodes, signals, d, oldD, getRect) {
    let path_i;
    let path_f;
    const d_i = d.initial || oldD || d3.select(this).datum();
    const d_f = d.final || d;
    const encode_i = encodes.initial || encodes;
    const encode_f = encodes.final || encodes;
    const scale_i = {
      primary: scales.initial || scales,
      secondary: scales.final || scales
    };
    const scale_f = {
      primary: scales.final || scales,
      secondary: scales.initial || scales
    };
    const signal_i = signals.initial || signals;
    const signal_f = signals.final || signals;

    path_i = getRect(d_i, scale_i, encode_i, signal_i).path;
    path_f = getRect(d_f, scale_f, encode_f, signal_f).path;

    return interpolatePath(path_i, path_f);
  }
  function symbolInterpolator(scales, encodes, signals, d, oldD, getShape) {
    let shape_i;
    let shape_f;
    let shape_i_diminished;
    let shape_f_diminished;
    const d_i = d.initial || oldD || d3.select(this).datum();
    const d_f = d.final || d;
    const encode_i = encodes.initial || encodes;
    const encode_f = encodes.final || encodes;
    const scale_i = scales.initial || scales;
    const scale_f = scales.final || scales;
    const signal_i = signals.initial || signals;
    const signal_f = signals.final || signals;
    let isMorph = false;

    shape_i = getShape(d_i, scale_i, encode_i, signal_i);
    shape_f = getShape(d_f, scale_f, encode_f, signal_f);
    if (shape_i.meta.shape !== shape_f.meta.shape) {
      isMorph = true;
      shape_i_diminished = getShape(d_i, scale_i, encode_i, signal_i, true);
      shape_f_diminished = getShape(d_f, scale_f, encode_f, signal_f, true);
    }

    if (isMorph) {
      return t => {
        if (t < 0.5) {
          return interpolatePath(shape_i.path, shape_i_diminished.path)(t * 2);
        }
        return interpolatePath(
          shape_f_diminished.path,
          shape_f.path
        )((t - 0.5) * 2);
      };
    }
    return interpolatePath(shape_i.path, shape_f.path);
  }

  function areaLineInterpolatorWithScales(
    scales,
    encodes,
    marktypes,
    d,
    oldD,
    signals,
    getPath,
    interpolateStyle,
    alongTos
  ) {
    const encode_i = encodes.initial || encodes;
    const encode_f = encodes.final || encodes;
    const marktype_i = marktypes.initial || marktypes;
    // const marktype_i = "area";
    const marktype_f = marktypes.final || marktypes;
    const scale_i = scales.initial || scales;
    const scale_f = scales.final || scales;
    const signal_i = signals.initial || signals;
    const signal_f = signals.final || signals;
    const d_i = d.initial || oldD;
    const d_f = d.final || d;
    const alongTo_i = alongTos.initial || alongTos;
    const alongTo_f = alongTos.final || alongTos;
    const paths_11 = getPath(areaLineDToData(d_i), scale_i, encode_i, signal_i, marktype_i, alongTo_i);
    const paths_12 = getPath(areaLineDToData(d_i), scale_f, encode_i, signal_i, marktype_i, alongTo_i);
    const paths_21 = getPath(areaLineDToData(d_f), scale_i, encode_f, signal_f, marktype_f, alongTo_f);
    const paths_22 = getPath(areaLineDToData(d_f), scale_f, encode_f, signal_f, marktype_f, alongTo_f);

    if (
      isValidPath(paths_11) &&
      isValidPath(paths_12) &&
      isValidPath(paths_21) &&
      isValidPath(paths_22)
    ) {
      const interpolator_scale1 = interpolatePath(paths_11, paths_12, alongTo_i);
      const interpolator_scale2 = interpolatePath(paths_21, paths_22, alongTo_f);
      const interpolator_data =
        interpolateStyle === "update" ? interpolatePath2 : interpolatePath;
        // interpolateStyle === "update" ? interpolatePath3 : interpolatePath;
      return t => {
        return interpolator_data(
          interpolator_scale1(t),
          interpolator_scale2(t),
          alongTo_i
        )(t);
      };
    }
    const interpolator_data =
      interpolateStyle === "update" ? interpolatePath2 : interpolatePath;
      // interpolateStyle === "update" ? interpolatePath3 : interpolatePath;

    return interpolator_data(paths_11, paths_22, alongTo_i);
  }

  function areaLineInterpolator(
    scales,
    encodes,
    marktypes,
    d,
    oldD,
    signals,
    getPath,
    interpolateStyle
  ) {
    const marktype = typeof marktypes === "string" ? marktypes : undefined;

    if (marktype === "line") {
      const dataToPath = (data, scale, encode, signal) => {
        return getPath(data, scale, encode, signal, "line");
      };
      const computId = (encode, d) => {
        return !d
          ? undefined
          : [d.datum[encode.x.field], d.datum[encode.y.field]].join(",");
      };
      return computeLineInterpolator(
        areaLineDToData(d.initial || oldD),
        areaLineDToData(d.final || d),
        scales,
        encodes,
        signals,
        computId,
        dataToPath
      );
      // if (interpolateStyle === "update") {
      //   const dataToPath = (data, scale, encode, signal) => {
      //     return getPath(data, scale, encode, signal, "line");
      //   };
      //   const computId = (encode, d) => {
      //     return !d
      //       ? undefined
      //       : [d.datum[encode.x.field], d.datum[encode.y.field]].join(",");
      //   };
      //   return computeLineInterpolator(
      //     areaLineDToData(oldD),
      //     areaLineDToData(d),
      //     scales,
      //     encodes,
      //     signals,
      //     computId,
      //     dataToPath
      //   );
      // }

      // return areaLineInterpolatorWithScales.bind(this)(
      //   scales,
      //   encodes,
      //   "line",
      //   d,
      //   oldD,
      //   signals,
      //   getPath,
      //   interpolateStyle
      // );
    }
    if (marktype === "area" || marktype === "trail") {
      const alongTos = {
        initial: get(encodes, "initial", "orient", "value") === "horizontal" ? "y": "x",
        final: get(encodes, "final", "orient", "value") === "horizontal" ? "y": "x"
      };
      return areaLineInterpolatorWithScales.bind(this)(
        scales,
        encodes,
        marktype,
        d,
        oldD,
        signals,
        getPath,
        interpolateStyle,
        alongTos
      );
    }

    // when the marktype changes between "area" and "line", assume the line as area.

    if (marktypes.initial === "line" && marktypes.final === "area") {
      let alongTo = get(encodes, "final", "orient", "value") === "horizontal" ? "y": "x";
      return areaLineInterpolatorWithScales.bind(this)(scales, encodes, "area", d, oldD, signals, getPath, interpolateStyle, alongTo);
    } else { // area -> line
      let alongTo = get(encodes, "initial", "orient", "value") === "horizontal" ? "y": "x";
      let linePaths = getPath(
        areaLineDToData(d.final || d),
        scales.final || scales,
        encodes.final || encodes,
        signals.final || signals,
        "line");
      let intp = areaLineInterpolatorWithScales.bind(this)(scales, encodes, "area", d, oldD, signals, getPath, interpolateStyle, alongTo);
      return (t) => {
        return t >= 1 ? linePaths : intp(t);
      };
    }
  }

  function areaLineDToData(d) {
    if (!d) {
      return undefined;
    }
    return d.mark.marktype !== "group" ? d.mark.items : d.items[0].items;
  }

  // Interpolate path(dataA, scaleA) -> path(dataB, scaleB)
  function computeLineInterpolator(
    dataA,
    dataB,
    scales,
    encodes,
    signals,
    computeId,
    getPath
  ) {
    // 1) calculate two anchors between dataA and dataB
    const _encodes = encodes.initial && encodes.final ? encodes : {
      initial: encodes,
      final: encodes
    };
    const computeIdA = d => computeId(_encodes.initial, d);
    const computeIdB = d => computeId(_encodes.final, d);
    const La = dataA.length;
    const Lb = dataB.length;
    let i = dataB.findIndex(d => computeIdB(d) === computeIdA(dataA[0]));
    let j = dataB.findIndex(d => computeIdB(d) === computeIdA(dataA[La - 1]));
    let head;
    let tail;
    let body;

    if (i >= 0) {
      if (j >= 0) {
        if (j < i) {
          body = getBody(dataA, dataB, scales, _encodes, signals, getPath);
        } else {
          tail = getTail(
            dataB.slice(0, i + 1),
            false,
            scales,
            _encodes,
            signals,
            getPath
          );
          body = getBody(
            dataA,
            dataB.slice(i, j + 1),
            scales,
            _encodes,
            signals,
            getPath,
            false
          );
          head = getHead(
            dataB.slice(j),
            false,
            scales,
            _encodes,
            signals,
            getPath
          );
        }
      } else if (
        (j = dataA.findIndex(d => computeIdA(d) === computeIdB(dataB[Lb - 1]))) >= 0
      ) {
        tail = getTail(
          dataB.slice(0, i + 1),
          false,
          scales,
          _encodes,
          signals,
          getPath
        );
        body = getBody(
          dataA.slice(0, j + 1),
          dataB.slice(i),
          scales,
          _encodes,
          signals,
          getPath,
          false
        );
        head = getHead(dataA.slice(j), true, scales, _encodes, signals, getPath);
      } else {
        body = getBody(dataA, dataB, scales, _encodes, signals, getPath);
      }
    } else if (j >= 0) {
      if (
        (i = dataA.findIndex(d => computeIdA(d) === computeIdB(dataB[0]))) >= 0
      ) {
        tail = getTail(
          dataA.slice(0, i + 1),
          true,
          scales,
          _encodes,
          signals,
          getPath
        );
        body = getBody(
          dataA.slice(i),
          dataB.slice(0, j + 1),
          scales,
          _encodes,
          signals,
          getPath,
          false
        );
        head = getHead(dataB.slice(j), false, scales, _encodes, signals, getPath);
      } else {
        body = getBody(dataA, dataB, scales, _encodes, signals, getPath);
      }
    } else {
      i = dataA.findIndex(d => computeIdA(d) === computeIdB(dataB[0]));
      j = dataA.findIndex(d => computeIdA(d) === computeIdB(dataB[Lb - 1]));
      if (i >= 0 && j >= 0) {
        tail = getTail(
          dataA.slice(0, i + 1),
          true,
          scales,
          _encodes,
          signals,
          getPath
        );
        body = getBody(
          dataA.slice(i, j + 1),
          dataB,
          scales,
          _encodes,
          signals,
          getPath,
          false
        );
        head = getHead(dataA.slice(j), true, scales, _encodes, signals, getPath);
      } else {
        body = getBody(dataA, dataB, scales, _encodes, signals, getPath);
      }
    }

    if (head && tail && body) {
      return t => {
        if (t === 1) {
          return getPath(dataB, scales.final, _encodes.final, signals.final);
        }
        return tail(t) + body(t) + head(t);
      };
    }
    return t => {
      if (t === 1) {
        return getPath(dataB, scales.final, _encodes.final, signals.final);
      }
      return body(t);
    };
  }

  function getHead(data, isShrink, scales, encodes, signals, getPath) {
    const L = data.length;
    if (L <= 1) {
      return t => "";
    }

    const interpolators = ["initial", "final"].map(which => {
      const phases = [];
      const scale = scales[which];
      const encode = encodes[which];
      const signal = signals[which] || signals;
      for (let i = 0; i <= L - 2; i++) {
        const fromPath = getPath(
          data.slice(0, i + 1).concat(data.slice(i, i + 1)),
          scale,
          encode,
          signal
        ).replace(/^M/g, "L");
        const toPath = getPath(
          data.slice(0, i + 2),
          scale,
          encode,
          signal
        ).replace(/^M/g, "L");
        phases.push(function(t) {
          return d3.interpolateString(fromPath, toPath)(t);
        });
      }
      return function(t) {
        if (isShrink) {
          t = 1 - t;
        }
        if (t === 1) {
          return getPath(data, scale, encode, signal);
        }
        const phase = Math.floor(t * (L - 1));

        return phases[phase](t * (L - 1) - phase);
      };
    });

    return t => {
      return d3.interpolateString(interpolators[0](t), interpolators[1](t))(t);
    };
  }

  function getTail(data, isShrink, scales, encodes, signals, getPath) {
    const L = data.length;
    if (L <= 1) {
      return t => "";
    }
    const interpolators = ["initial", "final"].map(which => {
      const phases = [];
      const scale = scales[which];
      const encode = encodes[which];
      const signal = signals[which] || signals;
      for (let i = L - 2; i >= 0; i--) {
        const fromPath = getPath(
          data.slice(i + 1, i + 2).concat(data.slice(i + 1)),
          scale,
          encode,
          signal
        ).replace(/Z$/g, "");
        const toPath = getPath(data.slice(i), scale, encode, signal).replace(
          /Z$/g,
          ""
        );

        phases.push(function(t) {
          return d3.interpolateString(fromPath, toPath)(t);
        });
      }

      return function(t) {
        if (isShrink) {
          t = 1 - t;
        }
        if (t === 1) {
          return getPath(data, scale, encode, signal);
        }
        const phase = Math.floor(t * (L - 1));

        return phases[phase](t * (L - 1) - phase);
      };
    });
    return t => {
      return d3.interpolateString(interpolators[0](t), interpolators[1](t))(t);
    };
  }

  function getBody(
    fromData,
    toData,
    scales,
    encodes,
    signals,
    getPath,
    toBeAssembled
  ) {
    const pathPairs = ["initial", "final"].map(which => {
      const scale = scales[which];
      const encode = encodes[which];
      const signal = signals[which] || signals;
      let fromPath = getPath(fromData, scale, encode, signal);
      let toPath = getPath(toData, scale, encode, signal);

      if (toBeAssembled) {
        fromPath = fromPath.replace(/^M/g, "L").replace(/Z$/g, "");
        toPath = toPath.replace(/^M/g, "L").replace(/Z$/g, "");
      }
      return [fromPath, toPath];
    });

    if (
      isValidPath(pathPairs[0][0]) &&
      isValidPath(pathPairs[0][1]) &&
      isValidPath(pathPairs[1][0]) &&
      isValidPath(pathPairs[1][0])
    ) {
      const interpolator1 = interpolatePath(pathPairs[0][0], pathPairs[0][1]);
      const interpolator2 = interpolatePath(pathPairs[1][0], pathPairs[1][1]);
      return t => {
        return d3.interpolateString(interpolator1(t), interpolator2(t))(t);
      };
    }
    return d3.interpolateString(pathPairs[0][0], pathPairs[1][1]);
  }
  function isValidPath(p) {
    return p.indexOf("NaN") < 0;
  }

  /* eslint-disable prefer-destructuring */

  function fetchAttributes(d3Selection, props, scales, signal, encode, prevData) {
    props.forEach(prop => {
      propMap(prop).forEach(p => {
        if (p.type === "attrTween") {
          if (d3Selection.attrTween) {
            d3Selection.attrTween(getStyle(p.val), function(d) {
              const oldD = prevData ? prevData.get(this) : undefined;
              return getPropVal.bind(this)(p, encode, scales, signal, d, oldD);
            });
          } else {
            const tempP = Object.assign({}, p, { type: "attr" });
            d3Selection.attr(tempP.val, function(d) {
              const oldD = prevData ? prevData.get(this) : undefined;
              return getPropVal.bind(this)(
                tempP,
                encode,
                scales,
                signal,
                d,
                oldD
              );
            });
          }
        } else if (p.type === "attr") {
          d3Selection.attr(getStyle(p.val), function(d) {
            const oldD = prevData ? prevData.get(this) : undefined;
            let v = getPropVal.bind(this)(p, encode, scales, signal, d, oldD);
            if (p.val==="fontSize" && isNumber(v)) {
              return v + "px";
            }
            return v;
          });
        } else if (p.type === "text") {
          d3Selection.text(function(d) {
            const oldD = prevData ? prevData.get(this) : undefined;
            return getPropVal.bind(this)(p, encode, scales, signal, d, oldD);
          });
        } else if (p.type === "style") {
          if (p.asTween) {
            d3Selection.styleTween(getStyle(p.val), function(d) {
              const oldD = prevData ? prevData.get(this) : undefined;
              return getPropVal.bind(this)(p, encode, scales, signal, d, oldD);
            });
          } else {
            d3Selection.style(getStyle(p.val), function(d) {
              const oldD = prevData ? prevData.get(this) : undefined;
              return getPropVal.bind(this)(p, encode, scales, signal, d, oldD);
            });
          }
        }
      });
    });
  }

  function getPropVal(propInfo, encodes, scales, signals, d, oldD) {
    const signal = signals.final || signals;
    const encode = encodes.final || encodes;

    if (propInfo.elmType === "text") {
      if (propInfo.val === "transform") {
        // get transform
        const trfD = transformD.bind(this)(encode, scales, signal, d, false);
        const dx = decodeEncode.bind(this)("dx", encode, scales, signal, d);
        const dy = decodeEncode.bind(this)("dy", encode, scales, signal, d);
        trfD.x = (trfD.x || 0) + (dx || 0);
        trfD.y = (trfD.y || 0) + (dy || 0);
        const baseline = decodeEncode.bind(this)(
          "baseline",
          encode,
          scales,
          signal,
          d
        );
        const fontSize = decodeEncode.bind(this)(
          "fontSize",
          encode,
          scales,
          signal,
          d
        );
        if (oldD && oldD.align !== d.align) {
          const alignFactor = { right: -0.5, center: 0, left: 0.5 };
          trfD.x +=
            vega.textMetrics.width(d,d.text) *
            (alignFactor[d.align] - alignFactor[oldD.align]);
        }

        return `${transformItem(trfD)} ${transformItem({
        y: textOffset(Object.assign({ baseline, fontSize }, d))
      })}`;
      }
      if (propInfo.val === "text") {
        return encode.text
          ? decodeEncode.bind(this)("text", encode, scales, signal, d)
          : d.text;
      }
    } else if (propInfo.elmType === "title") {
      if (propInfo.val === "transform") {
        // get transform
        const trfD = transformD.bind(this)(encode, scales, signal, d);
        // let trfD = transformD.bind(this)(encode, scales, signal, d, false);
        const dx = decodeEncode.bind(this)("dx", encode, scales, signal, d);
        const dy = decodeEncode.bind(this)("dy", encode, scales, signal, d);
        trfD.x = (trfD.x || 0) + (dx || 0);
        trfD.y = (trfD.y || 0) + (dy || 0);
        const baseline = decodeEncode.bind(this)(
          "baseline",
          encode,
          scales,
          signal,
          d
        );
        const fontSize = decodeEncode.bind(this)(
          "fontSize",
          encode,
          scales,
          signal,
          d
        );
        return `${transformItem(trfD)} ${transformItem({
        y: textOffset(Object.assign({ baseline, fontSize }, d))
      })}`;
      }
      if (propInfo.val === "text") {
        return encode.text
          ? decodeEncode.bind(this)("text", encode, scales, signal, d)
          : d.text;
      }
    } else if (
      propInfo.elmType === "tick" ||
      propInfo.elmType === "grid" ||
      propInfo.elmType === "domain"
    ) {
      // hotfix
      if (propInfo.val === "transform") {
        // get transform
        let trfD = transformD.bind(this)(encode, scales, signal, d, false);
        trfD = Object.keys(trfD).length === 0 ? d : trfD;
        const x2 = decodeEncode.bind(this)("x2", encode, scales, signal, d);
        const y2 = decodeEncode.bind(this)("y2", encode, scales, signal, d);
        if (oldD) {
          if (x2 === 0 && (oldD.y2 - oldD.y) * y2 < 0) {
            trfD.y += y2;
          } else if (y2 === 0 && (oldD.x2 - oldD.x) * x2 < 0) {
            trfD.x += x2;
          }
        }
        return transformItem(Object.keys(trfD).length === 0 ? d : trfD);
      }
      if (propInfo.val === "x2") {
        let x2 = decodeEncode.bind(this)("x2", encode, scales, signal, d);
        if (isNaN(x2)) {
          return d.x2 - d.x;
        }
        if (oldD) {
          if ((oldD.x2 - oldD.x) * x2 < 0) {
            x2 = -x2;
          }
        }
        return isNaN(x2) ? d.x2 - d.x : x2;
      }
      if (propInfo.val === "y2") {
        let y2 = decodeEncode.bind(this)("y2", encode, scales, signal, d);
        if (isNaN(y2)) {
          return d.y2 - d.y;
        }
        if (oldD) {
          if ((oldD.y2 - oldD.y) * y2 < 0) {
            y2 = -y2;
          }
        }
        return y2;
      }
    } else if (propInfo.elmType === "rect") {
      if (propInfo.val === "transform") {
        return "";
      }
      if (propInfo.val === "d") {
        if (propInfo.type === "attrTween") {
          return rectInterpolator.bind(this)(
            scales,
            encodes,
            signals,
            d,
            oldD,
            getRect
          );
        }
        return getRect(d, scales, encodes, signal).path;
      }
    } else if (propInfo.elmType === "symbol") {
      if (propInfo.val === "d") {
        if (propInfo.type === "attrTween") {
          return symbolInterpolator.bind(this)(
            scales,
            encodes,
            signals,
            d,
            oldD,
            getShape
          );
        }
        return getShape(d, scales, encode, signal).path;
      }
      if (propInfo.val === "transform") {
        const trfD = transformD.bind(this)(encodes, scales, signal, d, false);
        return transformItem(Object.keys(trfD).length === 0 ? d : trfD);
      }
    } else if (propInfo.elmType === "gradient") {
      if (propInfo.val === "d") {
        const newD = Object.keys(encode.primary || encode)
          .filter(
            key =>
              ["x", "x2", "xc", "width", "y", "y2", "yc", "height"].indexOf(
                key
              ) >= 0
          )
          .reduce((acc, curr) => {
            acc[curr] = decodeEncode.bind(this)(curr, encode, scales, signal, d);
            return acc;
          }, {});
        let x; let y; let width; let height;
        if (isNaN(newD.x)) {
          x = isNaN(newD.xc - newD.width / 2)
            ? newD.x2
            : newD.xc - newD.width / 2;
        } else {
          x = newD.x;
        }
        if (isNaN(newD.width)) {
          width = isNaN(newD.x2 - newD.x) ? undefined : newD.x2 - newD.x;
        } else {
          width = newD.width;
        }

        if (!isNaN(newD.y2) && !isNaN(newD.y)) {
          y = Math.min(newD.y2, newD.y);
          height = Math.abs(newD.y2 - newD.y);
        } else {
          y = isNaN(newD.y) ? newD.y2 : newD.y;
          height = newD.height;
        }

        //  height = isNaN(newD.height) ? ( isNaN(newD.y2 - newD.y) ? undefined : (newD.y2 - newD.y)) : newD.height;
        // return vega.pathRectangle().x(x).y(y).width(width).height(height)();

        return vega.pathRectangle()
          .x(x)
          .y(y)
          .width(width)
          .height(height)();
      }
      if (propInfo.val === "transform") {
        const trfD = transformD.bind(this)(encode, scales, signal, d, false);
        return transformItem(Object.keys(trfD).length === 0 ? d : trfD);
      }
      if (propInfo.val === "fill") {
        if (propInfo.defs && !propInfo.isUpdate) {
          const url = propInfo.defs(d3.select(this.closest("svg")), d);
          return `url("${url}")`;
        }
      }
    } else if (propInfo.elmType === "rule") {
      if (propInfo.val === "transform") {
        // get transform
        const trfD = transformD.bind(this)(encode, scales, signal, d, false);
        return transformItem(Object.keys(trfD).length === 0 ? d : trfD);
      }
      if (propInfo.val === "x2") {
        const x2 = decodeEncode.bind(this)("x2", encode, scales, signal, d);
        const x = decodeEncode.bind(this)("x", encode, scales, signal, d);
        return isNumber(x2 - x) ? x2 - x : d.x2 || 0;
      }
      if (propInfo.val === "y2") {
        const y2 = decodeEncode.bind(this)("y2", encode, scales, signal, d);
        const y = decodeEncode.bind(this)("y", encode, scales, signal, d);
        return isNumber(y2 - y) ? y2 - y : d.y2 || 0;
      }
    } else if (propInfo.elmType === "group") {
      if (propInfo.val === "transform") {
        const trfD = transformD.bind(this)(encode, scales, signal, d);
        return transformItem(Object.keys(trfD).length === 0 ? d : trfD);
      }
    } else if (propInfo.elmType === "background") {
      if (propInfo.val === "d") {
        const rectD = {
          x: decodeEncode.bind(this)("x", encode, scales, signal, d) || 0,
          y: decodeEncode.bind(this)("y", encode, scales, signal, d) || 0,
          height: decodeEncode.bind(this)("height", encode, scales, signal, d),
          width: decodeEncode.bind(this)("width", encode, scales, signal, d)
        };
        return vega.pathRectangle()
          .x(rectD.x)
          .y(rectD.y)
          .width(rectD.width)
          .height(rectD.height)();
      }
    } else if (isLinearMarktype(propInfo.elmType)) {
      if (propInfo.val === "d") {
        if (propInfo.type === "attrTween") {
          const marktypes = propInfo.initialMarktype
            ? { initial: propInfo.initialMarktype, final: propInfo.elmType }
            : propInfo.elmType;
          return areaLineInterpolator.bind(this)(
            scales,
            encodes,
            marktypes,
            d,
            oldD,
            signals,
            getPath.bind(this),
            propInfo.interpolateStyle
          );
        }
        return getPath.bind(this)(
          areaLineDToData(d),
          scales,
          encode,
          signal,
          propInfo.elmType
        );
      }
      if (propInfo.val === "fill" && propInfo.asTween) {
        const getFill = encode =>
          decodeEncode.bind(this)(
            "fill",
            encode,
            scales,
            signal,
            d.mark.marktype !== "group" ? { datum: {} } : d
          );
        if (propInfo.initialMarktype === "area" && propInfo.elmType === "line") {
          // while area -> line, keep the fill of the path and remove at the end.
          const decodedValue = getFill({
            fill: (encodes.initial || encode).fill
          });
          return t => (t >= 1 ? "none" : decodedValue);
        }
        const decodedValue = getFill(encode);
        return (t) => decodedValue;
      }
      if (
        propInfo.val === "stroke" &&
        propInfo.initialMarktype === "line" &&
        propInfo.elmType === "area"
      ) {
        const _encode = { stroke: encode.stroke || encode.fill };
        return decodeEncode.bind(this)(
          "stroke",
          _encode,
          scales,
          signal,
          d.mark.marktype !== "group" ? { datum: {} } : d
        );
      }
      if (hasProp(encode, propInfo)) {
        // since data bind to the group of the line
        return decodeEncode.bind(this)(
          propInfo.val,
          encode,
          scales,
          signal,
          d.mark.marktype !== "group" ? { datum: {} } : d
        ) + (propInfo.val === "strokeWidth" ? "px" : "");
      }
    }

    if (propInfo.val === "text-anchor") {
      const textAnchor = {
        left: "start",
        center: "middle",
        right: "end"
      };
      return textAnchor[
        (oldD ? oldD.align : d.align) ||
          decodeEncode.bind(this)("align", encode, scales, signal, d)
      ];
    }
    if (hasProp(encode, propInfo)) {
      return decodeEncode.bind(this)(propInfo.val, encodes, scales, signal, d);
    }
    // Vega make some lables transparent to avoid the overlaps.
    // Gemini takes the vega's decisions.
    if (propInfo.elmType === "text" && propInfo.val === "opacity") {
      return d[propInfo.val];
    }
    return BR_PROP_DEFAULT[propInfo.elmType][propInfo.val];

    function hasProp(encode, propInfo) {
      return (
        get(encode, "primary", propInfo.val) ||
        get(encode, "secondary", propInfo.val) ||
        get(encode, propInfo.val)
      );
    }
    function getRect(d, scales, encodes, signal, isDiminished) {
      const encode = encodes.primary || encodes;
      const subEncode = encodes.secondary || encodes;
      const POSITION_ATTRS = [
        "x",
        "x2",
        "xc",
        "width",
        "y",
        "y2",
        "yc",
        "height",
        "cornerRadius"
      ];
      const newD = POSITION_ATTRS.reduce((acc, attr) => {
        if (encode[attr] || subEncode[attr]) {
          acc[attr] = decodeEncode.bind(this)(
            attr,
            encodes,
            scales,
            signal,
            d,
            false
          );
        }
        return acc;
      }, {});

      let x; let y; let width; let height; let cornerRadius;
      if (isNumber(newD.xc) && isNumber(newD.width)) {
        x = newD.xc - newD.width / 2;
        width = newD.width;
      } else if (isNumber(newD.x) && isNumber(newD.x2)) {
        x = Math.min(newD.x, newD.x2);
        width = Math.abs(newD.x - newD.x2);
      } else {
        x = isNumber(newD.x) ? newD.x : newD.x2;
        width = newD.width;
      }

      if (isNumber(newD.yc) && isNumber(newD.height)) {
        y = newD.yc - newD.height / 2;
        height = newD.height;
      } else if (isNumber(newD.y2) && isNumber(newD.y)) {
        y = Math.min(newD.y2, newD.y);
        height = Math.abs(newD.y2 - newD.y);
      } else {
        y = isNumber(newD.y) ? newD.y : newD.y2;
        height = newD.height;
      }

      cornerRadius = !isNumber(newD.cornerRadius) ? 0 : newD.cornerRadius;
      if (isDiminished) {
        return {
          path: vega.pathRectangle()
            .x(0)
            .y(0)
            .width(1)
            .height(1)(),
          meta: newD
        };
      }
      //  height = isNaN(newD.height) ? ( isNaN(newD.y2 - newD.y) ? undefined : (newD.y2 - newD.y)) : newD.height;
      // return vega.pathRectangle().x(x).y(y).width(width).height(height)();

      return {
        path: vega.pathRectangle()
          .x(x)
          .y(y)
          .width(width)
          .height(height)
          .cornerRadius(cornerRadius)(),
        meta: newD
      };
    }

    function getShape(d, scales, encodes, signal, isDiminished = false) {
      const encode = encodes.primary || encodes;
      let newD = Object.keys(encode)
        .filter(key => ["size", "shape"].indexOf(key) >= 0)
        .reduce((acc, curr) => {
          acc[curr] = decodeEncode.bind(this)(curr, encodes, scales, signal, d);
          return acc;
        }, {});
      const context = d3.path();
      newD = {
        shape: newD.shape || "circle",
        size: isNumber(newD.size) ? newD.size : isNumber(d.size) ? d.size : 30
      };

      vega.pathSymbols(newD.shape).draw(context, isDiminished ? 1 : newD.size);
      return {
        path: context.toString(),
        meta: newD
      };
    }

    function getPath(data, scales, encodes, signal, type, alongTo="x") {
      // let data = (d.mark.marktype !== "group" ? d : d.items[0].items[0]).mark.items;
      const encode = encodes.primary || encodes;
      const newData = data.map(oldD => {
        const defaultD = Object.keys(encode)
          .filter(key => ["x", "x2", "xc", "width", "y", "y2", "yc", "height", "size"].indexOf(key) >= 0) // "defined" channel is ignored due to performance issue.
          .reduce((acc, curr) => {
            const newVal = decodeEncode.bind(this)(
              curr,
              encodes,
              scales,
              signal,
              oldD
            );
            if (!isNumber(newVal)) {
              return acc;
            }
            acc[curr] = newVal;
            if (scales[curr] && scales[curr].type === "band") {
              acc[curr] += Math.round(
                scales[curr].bandwidth() * (encode.bandPosition || 0.5)
              );
            }
            return acc;
          }, {});
        defaultD.height = isNumber(defaultD.height)
          ? defaultD.height
          : Math.abs(defaultD.y2 - defaultD.y);
        defaultD.width = isNumber(defaultD.width)
          ? defaultD.width
          : Math.abs(defaultD.x2 - defaultD.x);
        return Object.assign(
          // {
          //   x: oldD.x,
          //   y: oldD.y,
          //   width: oldD.width,
          //   height: oldD.height
          // },
          defaultD
        );
      });

      if (type === "line") {
        return (
          d3.line()
            .x(d => Math.floor(d.x * 100) / 100)
            .y(d => Math.floor(d.y * 100) / 100)(newData) || ""
        );
      } else if (type === "area") {
        // areahShape  = d3_area().y(y).x1(x).x0(xw).defined(def),
        if (alongTo === "x") {
          newData.forEach(d => {
            d.y2 = isNumber(d.y2) ? d.y2 : d.y;
          });
          return (
            d3.area()
              .x(d => Math.floor(d.x * 100) / 100)
              .y1(d => Math.floor(Math.min(d.y, d.y2) * 100) / 100)
              .y0(
                d => Math.floor((Math.min(d.y, d.y2) + (d.height || 0)) * 100) / 100
              )(newData) || ""
          );
        } else {
          newData.forEach(d => {
            d.x2 = isNumber(d.x2) ? d.x2 : d.x;
          });
          return (
            d3.area()
              .y(d => Math.floor(d.y * 100) / 100)
              .x1(d => Math.floor(Math.min(d.x, d.x2) * 100) / 100)
              .x0(
                d => Math.floor((Math.min(d.x, d.x2) + (d.width || 0)) * 100) / 100
              )(newData) || ""
          );
        }

      } else if (type === "trail") {

        return vega.pathTrail()
          .x(d => d.x)
          .y(d=> d.y)
          .size(d=> (isNumber(d.size) ? d.size : 2)) // 2 is default size in Vega
          .defined(d=>(d.defined || true))(newData);
      }
    }
  }

  function transformD(encodes, scales, signal, d, inherit = true) {
    return Object.assign(
      {},
      Object.keys(encodes.primary || encodes.final || encodes)
        .filter(key => ["x", "y", "angle", "yc", "xc"].indexOf(key) >= 0)
        .reduce((acc, curr) => {
          const newVal = decodeEncode.bind(this)(
            curr,
            encodes,
            scales,
            signal,
            d
          );
          let prop = curr;
          if (isNaN(newVal)) {
            return acc;
          }
          if (curr === "xc") {
            prop = "x";
          } else if (curr === "yc") {
            prop = "y";
          }

          acc[prop] = isNaN(acc[prop]) ? newVal : acc[prop];
          return acc;
        }, {}),
      inherit ? d : {}
    );
  }
  function calculateGetValeus(encodes, scales, signals, computeScale, scNames) {
    return {
      update: {
        initial: (attr, getScales, d) => {
          const computedScales = computeScale(scales, scNames, getScales);
          return getPropVal(
            attr,
            encodes.initial.update,
            computedScales.initial,
            signals.initial,
            d
          );
        },
        final: (attr, getScales, d) => {
          const computedScales = computeScale(scales, scNames, getScales);
          return getPropVal(
            attr,
            encodes.final.update,
            computedScales.final,
            signals.final,
            d
          );
        },
        custom(attr, getScales, d_i, d_f) {
          const datum = {
            initial: d_i,
            final: d_f
          };

          const computedScales = computeScale(scales, scNames, getScales);
          return getPropVal.bind(this)(
            attr,
            encodes.final.update,
            computedScales,
            signals.final,
            datum
          );
        }
      },
      enter: {
        initial: (attr, getScales, d) => {
          const computedScales = computeScale(scales, scNames, getScales);

          return getPropVal(
            attr,
            encodes.initial.enter,
            { primary: computedScales.initial, secondary: computedScales.final },
            signals.initial,
            d
          );
        },
        final: (attr, getScales, d) => {
          const computedScales = computeScale(scales, scNames, getScales);
          return getPropVal(
            attr,
            encodes.final.enter,
            computedScales.final,
            signals.final,
            d
          );
        },
        custom(attr, getScales, d_i, d_f) {
          const datum = {
            initial: d_i,
            final: d_f
          };

          const computedScales = computeScale(scales, scNames, getScales);
          return getPropVal.bind(this)(
            attr,
            encodes.final.enter,
            computedScales,
            signals.final,
            datum
          );
        }
      },
      exit: {
        initial: (attr, getScales, d) => {
          const computedScales = computeScale(scales, scNames, getScales);
          return getPropVal(
            attr,
            encodes.initial.exit,
            computedScales.initial,
            signals.initial,
            d
          );
        },
        final: (attr, getScales, d) => {
          const computedScales = computeScale(scales, scNames, getScales);
          return getPropVal(
            attr,
            encodes.final.exit,
            { primary: computedScales.final, secondary: computedScales.initial },
            signals.final,
            d
          );
        },
        custom(attr, getScales, d_i, d_f) {
          const datum = {
            initial: d_i,
            final: d_f
          };

          const computedScales = computeScale(scales, scNames, getScales);
          return getPropVal.bind(this)(
            attr,
            encodes.final.exit,
            computedScales,
            signals.final,
            datum
          );
        }
      }
    };
  }

  function decodeEncode(prop, encodes, scales, signal, d) {
    let subScales = copy2(scales);
    if (scales.primary && scales.secondary) {
      subScales = scales.secondary;
      scales = scales.primary;
    } else if (scales.initial && scales.final) {
      scales = scales.final;
    }

    let encode = copy(encodes);
    let subEncode = copy(encodes);
    if (encodes.primary && encodes.secondary) {
      encode = encodes.primary;
      subEncode = encodes.secondary;
    } else if (encodes.initial && encodes.final) {
      subEncode = encode = encodes.final;
    }

    const enAttr = encode[prop];
    const subEnAttr = subEncode[prop];

    function getVal(enAttr, scales) {
      if (!enAttr) {
        return;
      }
      if (Array.isArray(enAttr)) {
        let isSelected = false;
        for (let i = 0; i < enAttr.length - 1; i++) {
          // Then the items should contain 'test' prop to test (except the last)
          if (evalSignalVal(enAttr[i].test, signal, scales, d.datum)) {
            enAttr = copy(enAttr[i]);
            isSelected = true;
            break;
          }
        }
        if (!isSelected) {
          enAttr = copy(enAttr[enAttr.length - 1]);
        }
      }
      let val, isSet = true;
      if (isValue(enAttr.value)) {
        val = enAttr.value;
      } else if (enAttr.field) {
        if (enAttr.field.group) {
          return d.mark.group[enAttr.field.group];
        }
        val = d.datum[enAttr.field];
      } else if (enAttr.signal) {
        val = evalSignalVal(enAttr.signal, signal, scales, d.datum);
      } else {
        isSet = false;
      }


      if (enAttr.scale) {
        const scName = enAttr.scale;
        const sc = scales[scName];
        if (isSet) {
          if ((!sc) || !isValue(sc(val))){
            return undefined
          }
          val = sc(val);
        }

        if (enAttr.band) {
          let bw = (sc && sc.type === "band") ? sc.bandwidth() : 0;
          bw = Math.round(
            bw *
              ((enAttr.band === true || isNumber(enAttr.band)) ? enAttr.band : 0.5)
          );
          val = isSet ? val + bw : bw;
        }
      }

      if (enAttr.exp) {
        console.error("Todo decodeEncdoe with exp.");
      }
      if (enAttr.mult) {
        if (isNumber(enAttr.mult)) {
          val *= enAttr.mult;
        } else {
          val *= decodeEncode(
            "mult",
            { mult: enAttr.mult },
            scales,
            signal,
            d
          );
        }
      }
      if (enAttr.offset) {
        if (isNumber(enAttr.offset)) {
          val += enAttr.offset;
        } else {
          val += decodeEncode(
            "offset",
            { offset: enAttr.offset },
            scales,
            signal,
            d
          );
        }
      }
      return val;
    }
    const fValPrimary = getVal(enAttr, scales);
    const fValSecondary = getVal(subEnAttr, subScales);
    return isValue(fValPrimary) ? fValPrimary : fValSecondary;
  }


  function evalSignalVal(signalVal, signal, scales, datum) {
    const VEGA_FUNCTIONS = [
      {
        name: "scale",
        fn: (scName, val) => (scales[scName] ? scales[scName](val) : undefined)
      },
      { name: "isValid", fn: o => o !== null && o === o },
      { name: "timeFormat", fn: (a, b) => vega.defaultLocale().timeFormat(b)(a) },
      { name: "timeUnitSpecifier", fn: (a, b) => vega.timeUnitSpecifier(a, b) }
    ];

    const codegen = vgCodegen({
      whitelist: ["datum"].concat(Object.keys(signal || {})),
      globalvar: "global"
    });


    VEGA_FUNCTIONS.forEach(fnDef => {
      codegen.functions[fnDef.name] = fnDef.name;
    });
    const extraFunctions = VEGA_FUNCTIONS.map(fnDef => fnDef.fn);
    const extraFunctionNames = VEGA_FUNCTIONS.map(fnDef => fnDef.name);

    const codegenVal = codegen(parse(signalVal));

    const fn = Function(
      "datum",
      ...Object.keys(signal || {}),
      ...extraFunctionNames,
      `return (${codegenVal.code})`
    );
    return fn(
      datum,
      ...Object.keys(signal || {}).map(key => signal[key]),
      ...extraFunctions
    );

  }

  const ORDER$1 = {
    ascending: d3.ascending,
    descending: d3.descending
  };

  function getOrderFn(isNumber, order) {
    if (isNumber && order) {
      return (a, b) => ORDER$1[order](Number(a), Number(b));
    }
    return ORDER$1[order];
  }

  function staggeredTiming(staggering, data, duration) {
    let N;
    let grouped;
    const dataWithTiming = data.map((d, i) => {
      return { ...d, __staggering_id__: i };
    });
    const subStaggering = staggering.staggering;

    const isNumber =
      staggering.by &&
      dataWithTiming.reduce((acc, d) => {
        let val;
        if (typeof staggering.by === "string") {
          val = (d.initial || d.final)[staggering.by];
        } else if (staggering.by.initial || staggering.by.final) {
          const which = staggering.by.initial ? "initial" : "final";
          val = (which === "initial"
            ? d.initial || d.final
            : d.final || d.initial)[staggering.by[which]];
        }
        return (acc = acc && (val !== undefined ? !isNaN(Number(val)) : true));
      }, true);
    if (!staggering.by) {


      const orderFn = getOrderFn(true, staggering.order);
      grouped = d3.groups(dataWithTiming, d => {
        const val = d.__staggering_id__;
        return val === undefined ? "__empty__" : val;
      });
      if (typeof(orderFn) === "function") {
        grouped.sort((a,b) => orderFn(a[0], b[0]));
      }
    } else if (typeof staggering.by === "string") {


      grouped = d3.groups(dataWithTiming, d => {
        const val = (d.initial || d.final)[staggering.by];
        return val === undefined ? "__empty__" : val;
      });

      const orderFn = getOrderFn(isNumber, staggering.order);
      if (typeof(orderFn) === "function") {
        grouped.sort((a,b) => orderFn(a[0], b[0]));
      }
    } else if (staggering.by.initial || staggering.by.final) {
      const which = staggering.by.initial ? "initial" : "final";


      grouped = d3.groups(dataWithTiming, d => {
        const val = (which === "initial"
          ? d.initial || d.final
          : d.final || d.initial)[staggering.by[which]];
        return val === undefined ? "__empty__" : val;
      });

      const orderFn = getOrderFn(isNumber, staggering.order);
      if (typeof(orderFn) === "function") {
        grouped.sort((a,b) => orderFn(a[0], b[0]));
      }
    }

    N = grouped.length;

    const ease = getEaseFn(staggering.ease || "linear") || d3.easeLinear;
    const r = staggering.overlap === undefined ? 1 : staggering.overlap;
    const delta_e = i => ease((i + 1) / N) - ease(i / N);
    const alpha = 1 / (delta_e(0) * r + 1 - r);

    let durations = new Array(N).fill(0);
    durations = durations.map((d, i) => delta_e(i) * alpha * duration);
    let delayAcc = 0;
    const delays = durations.map((dur, i, durations) => {
      const currDelay = delayAcc;
      if (i < N - 1) {
        delayAcc = delayAcc + dur - durations[i + 1] * r;
      }
      return currDelay;
    });

    if (subStaggering) {
      const timings = delays.map((d, i) => {
        return {
          delay: d,
          duration: durations[i]
        };
      });

      timings.groups = grouped.map((g, i) => {
        return staggeredTiming(subStaggering, g[1], durations[i]);
      });

      return getFlattenTimings(timings);
    }
    grouped.forEach((group, i) => {
      group[1].forEach(datum => {
        datum.delay = delays[i];
        datum.duration = durations[i];
      });
    });

    return dataWithTiming;
  }

  function getFlattenTimings(timings) {
    if (!timings.groups) {
      return timings;
    }
    return flatten(
      timings.map((g_t, i) => {
        return getFlattenTimings(timings.groups[i]).map(t => {
          return Object.assign({}, t, { delay: t.delay + g_t.delay });
        });
      })
    );
  }

  function computeTiming(initialData, finalData, stepTiming, joinKey, joinSet) {
    let timings = initialData.map((d_i, i) => {
      const key = joinKey(d_i, i, "initial");
      const found = finalData.find((d_f, j) => key === joinKey(d_f, j, "final"));
      return {
        initial: d_i.datum,
        final: found ? found.datum : null,
        set: found ? "update" : "exit",
        id: key,
        duration: stepTiming.duration,
        delay: stepTiming.delay
      };
    });
    timings = timings.concat(
      finalData
        .filter(d => joinSet(d) === "enter")
        .map((d, i) => {
          const key = joinKey(d, i, "final");
          return {
            initial: null,
            final: d.datum,
            set: "enter",
            id: key,
            duration: stepTiming.duration,
            delay: stepTiming.delay
          };
        })
    );

    if (stepTiming.staggering) {
      timings = staggeredTiming(
        stepTiming.staggering,
        timings,
        stepTiming.duration
      );
    }
    return timings;
  }

  function enumStepComputeTiming(enumerator, stepTiming) {
    // staggering
    let timings = enumerator.allKeys.map((d, i) => {
      let datum_i = enumerator.getDatum(d, 0);
      let datum_f = enumerator.getDatum(d, 0);
      for (let k = 1; k < enumerator.stopN; k++) {
        datum_i = datum_i || enumerator.getDatum(d, 0);
        datum_f = enumerator.getDatum(d, k) || datum_f;
      }

      return {
        initial: datum_i,
        final: datum_f,
        set: "update", // Todo
        id: i,
        key: d,
        duration: stepTiming.duration,
        delay: stepTiming.delay
      };
    });

    if (stepTiming.staggering) {
      timings = staggeredTiming(
        stepTiming.staggering,
        timings,
        stepTiming.duration
      );
    }
    timings = timings.sort((a, b) => a.id - b.id);
    return timings;
  }

  function markInterpolate(rawInfo, step, targetElm) {
    const joinKey = (d, i, initialOrFinal) => {
      return d.__gemini__ ?
        getJoinInfo(d, i, step, "joinKey") :
        (
          typeof(step.computeDatumId) === "function"
            ? step.computeDatumId(d, i)
            : step.computeDatumId[initialOrFinal || "initial"](d, i)
        );
    }; const joinSet = (d, i) => {
      return d.__gemini__ ? getJoinInfo(d, i, step, "animSet") : undefined;
    };

    const animVis = targetElm;
    const eView = rawInfo.eVis.view;

    const MARK_ATTRS = {
      rect: ["rect"],
      symbol: ["symbol"],
      rule: ["rule"],
      text: ["text", "align"]
    };

    return new Promise((resolve) => {
      const done = doneMaker();
      const timings = computeTiming(
        step.currData,
        step.nextData,
        step.timing,
        joinKey,
        joinSet
      );
      const {
        change,
        marktypes,
        scales,
        encodes,
        signals,
        specificScaleFor
      } = step;


      const isAdd = !change.initial && !!change.final,
        isRemove = !!change.initial && !change.final;
      // if (isValidMarktype(marktypes.initial) && isValidMarktype(marktypes.final) && marktypes.initial !== marktypes.final) {
      //   isAdd = isRemove = true;
      // }
      const easeFn = getEaseFn(step.timing.ease);

      // let doUpdate =  !isRemove && !isAdd && (change.encode !== false),
      //   doEnter = !isRemove && (isAdd || change.encode !== false),
      //   doExit = !isAdd && (isRemove || change.encode !== false);

      // if (change.encode) {
      //   doUpdate = change.encode.update === false ? false : doUpdate;
      //   doEnter = change.encode.enter === false ? false : doEnter;
      //   doExit = change.encode.exit === false ? false : doExit;
      // }
      // doExit = true;
      // doEnter = true;
      let marktype;

      if (isRemove) {
        marktype = marktypes.initial;
      } else if (isAdd) {
        marktype = marktypes.final;
      } else if (
        marktypes.initial &&
        marktypes.final &&
        marktypes.initial !== marktypes.final
      ) {
        if (change.marktype === false) {
          marktype = marktypes.initial;
        } else {
          marktype = marktypes.final;
        }
      } else {
        marktype = marktypes.initial || marktypes.final;
      }

      const svgElmType = getSvgElmType(marktype);
      const svgElmTypes = {
        initial: getSvgElmType(marktypes.initial),
        final: getSvgElmType(marktypes.final)
      };

      let marks = d3.select(`${animVis} .mark-${marktype}.role-mark.${change.compName}`);


      if (
        isAdd ||
        (marktypes.initial !== marktypes.final &&
          isValidMarktype(marktypes.final))
      ) {
        const sib = findAfterSibling(eView.scenegraph().root, change.compName);

        marks = addMark(
          d3.select(`${animVis  } .${change.final.parent.name} > g > g`),
          change.final,
          sib ? `.${sib.name}` : undefined
        );
      }

      if (step.enumerator) {
        if (!change.data) {
          console.error(
            "Cannot apply enumerator for a mark interpolation without data change!"
          );
        }
        const {enumerator} = step;
        let finalScaleNames = [];
        if (change.scale === true) {
          finalScaleNames = Object.keys(eView._runtime.scales);
        } else if (Array.isArray(change.scale)) {
          finalScaleNames = change.scale;
        }

        const getValues = {
          update: {
            initial(attr, getScales, d){

              let computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal.bind(this)(
                attr,
                encodes.initial.update,
                computedScales.initial,
                signals.initial,
                d);
            },

            final: function(attr, getScales, d){
              const computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal.bind(this)(
                attr,
                encodes.final.update,
                computedScales.final,
                signals.initial,
                d
              );
            },
            custom(attr, getScales, d_i, d_f) {
              let datum = {
                initial: d_i,
                final: d_f
              };

              let computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal.bind(this)(
                attr,
                encodes.final.update,
                computedScales,
                signals.final,
                datum);
            }
          },
          enter: {
            initial(attr, getScales, d){

              let computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal.bind(this)(
                attr,
                encodes.initial.enter,
                {primary: computedScales.initial, secondary: computedScales.final},
                signals.initial,
                d);
            },
            final(attr, getScales, d){
              let computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal.bind(this)(
                attr,
                encodes.final.enter,
                computedScales.final,
                signals.initial,
                d);

            },
            custom(attr, getScales, d_i, d_f){
              let datum = {
                initial: d_i,
                final: d_f
              };

              let computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal.bind(this)(
                attr,
                encodes.final.enter,
                computedScales,
                signals.final,
                datum);
            }
          },
          exit: {
            initial(attr, getScales, d){

              let computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal.bind(this)(
                attr,
                encodes.initial.exit,
                computedScales.initial,
                signals.initial,
                d);
            },
            final(attr, getScales, d){
              let computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal.bind(this)(
                attr,
                encodes.final.exit,
                {primary: computedScales.final, secondary: computedScales.initial},
                signals.final,
                d);
            },
            custom(attr, getScales, d_i, d_f){
              let datum = {
                initial: d_i,
                final: d_f
              };

              let computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal.bind(this)(
                attr,
                encodes.final.exit,
                computedScales,
                signals.final,
                datum);
            }
          }
        };
        // bind allKeys
        const newBoundMarks = marks
          .selectAll(svgElmType)
          .data(enumerator.allKeys, d => d);
        newBoundMarks.exit().remove();
        newBoundMarks.enter().append(svgElmType);

        const initialMarks = marks
          .selectAll(svgElmType)
          .filter(id => ["update", "exit"].indexOf(enumerator.set(id, 0)) >= 0);
        const allProps = MARK_ATTRS[marktype].reduce((acc, prop) => {
          return acc.concat(propMap(prop));
        }, []);
        allProps.forEach(p => {
          if (p.type === "attrTween") {
            const tempP = Object.assign({}, p, { type: "attr" });
            initialMarks[tempP.type](getStyle(tempP.val), id =>
              enumerator.getPropVal(tempP, getValues, 0, id)
            );
          } else if (p.type === "text") {
            initialMarks[p.type](id =>
              enumerator.getPropVal(p, getValues, 0, id)
            );
          } else {
            initialMarks[p.type](getStyle(p.val), id =>
              enumerator.getPropVal(p, getValues, 0, id)
            );
          }
        });



        // staggering
        const timings = enumStepComputeTiming(enumerator, step.timing);

        const animMarks = marks.selectAll(svgElmType).transition();

        allProps.forEach(p => {
          if (p.type === "attr") {
            animMarks.attrTween(p.val, function(d) {
              return enumerator.interpolateAlongEnumMaker(p, getValues, this)(d);
            });
          } else if (p.type === "attrTween") {
            animMarks.attrTween(p.val, function(d) {
              return enumerator.interpolateAlongEnumMaker(p, getValues, this)(d);
            });
          } else if (p.type === "text") {
            animMarks.tween("text", function(d) {
              const textInterpolator = enumerator.interpolateAlongEnumMaker(
                p,
                getValues,
                this
              )(d);
              return function(t) {
                this.setAttribute("text", textInterpolator(t));
              };
            });
          } else if (p.type === "style") {
            animMarks.styleTween(getStyle(p.val), d => {
              return enumerator.interpolateAlongEnumMaker(p, getValues, this)(d);
            });
          }
        });

        // interpolate them
        animMarks
          .duration((d, i) => timings[i].duration)
          .delay((d, i) => timings[i].delay)
          .ease(easeFn)
          .end()
          .then(() => {
            marks.selectAll(svgElmType).data(step.nextData);
            done("all", () => {resolve();});
          });



      } else {
        // If there is a marktype change between different svgElmTypes
        if (marktypes.initial !== marktypes.final) {
          let animMarksI; let animMarksF;
          if (isValidMarktype(marktypes.initial)) {
            const marks = d3.select(
              animVis + ` .mark-${marktypes.initial}.role-mark.${change.compName}`
            );
            animMarksI = marks.selectAll(svgElmTypes.initial);
            const newTimings =
              marktypes.final && !isValidMarktype(marktypes.final)
                ? computeTiming(
                  step.currData,
                  step.unpackedData,
                  step.timing,
                  joinKey,
                  joinSet
                )
                : timings;
            const prevData = d3.local();
            let nextData =
                marktypes.final && !isValidMarktype(marktypes.final)
                  ? step.unpackedData
                  : step.nextData;

            if (change.data || isAdd || isRemove) {
              animMarksI = animMarksI.data(step.currData);
              animMarksI.each(function(d) {
                prevData.set(this, d);
              });
              animMarksI = animMarksI.data(nextData, (d, i) =>
                joinKey(d, i, "initial")
              );
            } else {
              animMarksI.each(function(d) {
                prevData.set(this, d);
              });
            }

            exit(
              newTimings,
              animMarksI,
              marktypes.initial,
              {
                initial: encodes.initial.exit,
                final: encodes.final.exit
              },
              signals,
              prevData
            );

            update(
              newTimings,
              animMarksI,
              marktypes.initial,
              {
                initial: encodes.initial.update,
                final: encodes.initial.intermediate
              },
              // encode,
              signals,
              prevData,
              false,
              false
            );
          } else {
            done("exit", () => {
              resolve();
            });
          }

          if (isValidMarktype(marktypes.final)) {
            const prevData = d3.local();
            let newTimings = marktypes.initial && !isValidMarktype(marktypes.initial) ? computeTiming(step.unpackedData, step.nextData, step.timing, joinKey, joinSet) : timings;
            let currData = !marktypes.initial
              ? []
              : !isValidMarktype(marktypes.initial)
                ? step.unpackedData
                : animMarksI.data();
            const marks = d3.select(
              animVis + ` .mark-${marktypes.final}.role-mark.${change.compName}`
            );
            animMarksF = marks
              .selectAll(svgElmTypes.final)
              .filter(d => !d)
              .data(currData);

            fetchAttributes(
              animMarksF.enter().append(svgElmTypes.final),
              MARK_ATTRS[marktypes.final],
              { primary: scales.initial, secondary: scales.final },
              signals.initial,
              encodes.final.intermediate
            );
            animMarksF = marks.selectAll(svgElmTypes.final);
            animMarksF.each(function(d) {
              prevData.set(this, d);
            });
            if (change.data || isAdd || isRemove) {
              animMarksF = animMarksF.data(step.nextData, (d, i) =>
                joinKey(d, i, "final")
              );
            }

            enter(newTimings, animMarksF, marktypes.final);
            // fade-in the new martype
            update(
              newTimings,
              animMarksF,
              marktypes.final,
              {
                initial: encodes.final.intermediate,
                final: encodes.final.update
              },
              signals,
              prevData,
              true,
              true
            );
          } else {
            done("update", () => {
              resolve();
            });
            done("enter", () => {
              resolve();
            });
          }
        } else {
          let animMarks = marks.selectAll(svgElmType);
          const prevData = d3.local();
          animMarks.each(function(d) {
            prevData.set(this, d);
          });
          if (change.data || isAdd || isRemove) {
            // let nextData = change.marktype === false ? step.unpackedData : step.nextData;

            if (step.preFetchCurrData) {
              animMarks = animMarks.data(step.currData);
            }

            animMarks = animMarks.data(step.nextData, (d, i) => {
              // console.log(joinKey(d, i));
              return joinKey(d, i);
            });
          }

          // enter
          enter(timings, animMarks, marktype);

          // exit
          exit(
            timings,
            animMarks,
            marktype,
            {
              initial: encodes.initial.exit, // encodes.final.exit,
              final: encodes.final.exit
            },
            signals,
            prevData
          );

          update(
            timings,
            animMarks,
            marktype,
            {
              initial: encodes.initial.update, // encodes.final.update,
              final: encodes.final.update
            },
            signals,
            prevData
          );
        }
      }
      function enter(
        timings,
        animMarks,
        marktype,
        encodeInitial = encodes.initial.enter,
        encode = encodes.final.enter
      ) {
        // enter
        let enterI = animMarks.enter().append(getSvgElmType(marktype));
        let scalesForInitial = { primary: scales.initial, secondary: scales.final };
        if (specificScaleFor && specificScaleFor.enter && specificScaleFor.enter.initial === "final") {
          scalesForInitial.primary = scales.final;
        }
        fetchAttributes(
          enterI,
          MARK_ATTRS[marktype],
          scalesForInitial,
          signals.initial,
          {
            primary: encodeInitial,
            secondary: Object.assign({}, encode, { opacity: { value: 0 } })
          }
        );

        // If they are already entered,
        if (enterI.data().length <= 0) {
          enterI = animMarks.filter((d, i) => joinSet(d, i) === "enter");
        }
        if (enterI.data().length > 0) {
          // if (doEnter && enterI.data().length > 0) {
          const setType = "final";
          const enterF = enterI.transition();

          fetchAttributes(
            enterF,
            MARK_ATTRS[marktype],
            scales.final,
            signals.final,
            {
              initial: {
                primary: encodeInitial,
                secondary: Object.assign({}, encode, { opacity: { value: 0 } })
              },
              final: encode
            }
          );

          enterF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, setType)).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, setType)).delay
            )
            .ease(easeFn)
            .end()
            .then(() => {
              done("enter", () => {resolve();});
            });
        } else {
          done("enter", () => {
            resolve();
          });
        }
      }
      function exit(timings, animMarks, marktype, encode, signals, prevData) {
        // exit
        // initiate exit
        let exitI = animMarks.exit();
        // If they are already entered,
        if (exitI.data().length <= 0) {
          exitI = animMarks.filter((d, i) => joinSet(d, i) === "exit");
        }
        if (exitI.data().length > 0) {
          // if (doExit && exitI.data().length > 0) {
          const setType = "initial";
          const exitF = exitI.transition();
          let scalesForExit =  Object.assign({}, scales, {
            primary: scales.final,
            secondary: scales.initial
          });
          let encodes = {
            ...encode,
            primary: encode.final || encodes.final.exit,
            secondary: encode.initial || encodes.final.exit
          };
          if (specificScaleFor && specificScaleFor.exit && specificScaleFor.exit.final === "initial") {
            scalesForExit.primary = scales.initial;
          }
          fetchAttributes(
            exitF,
            MARK_ATTRS[marktype],
            scalesForExit,
            signals,
            encodes, // encode || encodes.final.exit,
            prevData
          );

          exitF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, setType)).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, setType)).delay
            )
            .ease(easeFn)
            .remove()
            .end()
            .then(function() {
              done("exit", () => {resolve();});
            });
          // Todo: when should we remove exit-marks?
        } else {
          done("exit", () => {
            resolve();
          });
        }
      }
      function update(
        timings,
        animMarks,
        marktype,
        encodes,
        signals,
        prevData,
        doStatusUpdate = true,
        filterUpdate = true
      ) {
        let updateF = filterUpdate
          ? animMarks.filter((d, i) => joinSet(d, i) === "update")
          : animMarks;
        if (change.data === false && updateF.data().length === 0) {
          updateF = animMarks;
        }

        if (updateF.data().length > 0) {
          const setType = "initial"; // Actually, it also can be 'final'.
          updateF = updateF.transition();

          fetchAttributes(
            updateF,
            MARK_ATTRS[marktype],
            scales,
            signals,
            encodes,
            prevData
          );
          updateF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, setType)).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, setType)).delay
            )
            .ease(easeFn)
            .end()
            .then(() => {
              if (doStatusUpdate) {
                done("update", () => {resolve();});
              }
            });
        } else if (doStatusUpdate) {
          done("update", () => {resolve();});
        }
      }
    });
    function isValidMarktype(marktype) {
      return !!MARK_ATTRS[marktype];
    }
  }
  function doneMaker() {
    const transitionStatus = {
      update: false,
      enter: false,
      exit: false
    };

    return function(which, cb, args) {
      if (which === "all") {
        transitionStatus.update = transitionStatus.enter = transitionStatus.exit = true;
      } else {
        transitionStatus[which] = true;
      }
      if (
        transitionStatus.update &&
        transitionStatus.enter &&
        transitionStatus.exit
      ) {
        cb(args);
      }
    };
  }


  function addMark(d3Selection, compSpec, before) {
    return d3Selection
      .insert("g", before)
      .attr("class", `mark-${compSpec.type} role-mark ${compSpec.name}`);
  }
  function getSvgElmType(markType){
    switch (markType) {
    case "rect":
    case "symbol":
      return "path";
    case "rule":
      return "line";
    case "text":
      return "text";

    }
  }

  function areaLineInterpolate(rawInfo, step, targetElm) {
    const joinKey = (d, i, initialOrFinal) => {
      return d.__gemini__ ?
        getJoinInfo(d, i, step, "joinKey") :
        ( typeof(step.computeDatumId) === "function"
          ? step.computeDatumId(d, i)
          : step.computeDatumId[initialOrFinal || "final"](d, i));
    }; const joinSet = (d, i) => {
      return d.__gemini__ ? getJoinInfo(d, i, step, "animSet") : undefined;
    };
    const MARK_ATTRS = {
      area: [{ name: "area", tweaks: [] }],
      line: [{ name: "line", tweaks: [] }],
      trail: [{ name: "trail", tweaks: [] }]
    };
    const tweaks = [{ type: "attrTween", val: "d", interpolateStyle: "update" }];
    const MARK_ATTRS_DATA_INTERPOLATE = {
      area: [{ name: "area", tweaks}],
      line: [{ name: "line", tweaks}],
      trail: [{ name: "trail", tweaks}]
    };


    // Get Timing

    const animVis = targetElm;
    const eView = rawInfo.eVis.view;
    const transitionStatus = {
      update: false,
      enter: false,
      exit: false
    };

    function done(which, cb, args) {
      if (which === "all") {
        transitionStatus.update = transitionStatus.enter = transitionStatus.exit = true;
      } else {
        transitionStatus[which] = true;
      }
      if (
        transitionStatus.update &&
        transitionStatus.enter &&
        transitionStatus.exit
      ) {
        cb(args);
      }
    }
    function isAreaLineMarktype(marktype) {
      return !!MARK_ATTRS[marktype];
    }

    return new Promise((resolve) => {
      const timings = computeTiming(
        step.currData,
        step.nextData,
        step.timing,
        joinKey,
        joinSet
      );
      const {change} = step;
      const easeFn = getEaseFn(step.timing.ease);
      const {marktypes} = step;

      const isAdd = !change.initial && !!change.final,
        isRemove = !!change.initial && !change.final;

      let marktype;
      if (
        marktypes.initial &&
        marktypes.final &&
        marktypes.initial !== marktypes.final
      ) {
        if (change.marktype === false) {
          marktype = marktypes.initial;
        } else {
          marktype = marktypes.final;
        }
      } else if (isRemove) {
        marktype = marktypes.initial;
      } else if (isAdd) {
        marktype = marktypes.final;
      } else {
        marktype = marktypes.initial || marktypes.final;
      }
      const {hasFacet} = step;
      // collect the scale objects to scale the initial/final values
      const {scales} = step;
      const {encodes} = step;
      const {signals} = step;

      if (isAdd || !isAreaLineMarktype(marktypes.initial)) {
        if (hasFacet.final) {
          const sib = findAfterSibling(
            eView.scenegraph().root,
            change.final.parent.name
          );

          addMark$1(
            d3.select(`${animVis  } .${change.final.parent.parent.name} > g > g`),
            change.final,
            sib ? `.${sib.name}` : undefined,
            { hasGroup: true }
          );
        } else {
          const sib = findAfterSibling(eView.scenegraph().root, change.compName);

          addMark$1(
            d3.select(`${animVis  } .${change.final.parent.name} > g > g`),
            change.final,
            sib ? `.${sib.name}` : undefined
          );
        }
      }

      if (step.enumerator) {
        let finalScaleNames = [];
        if (change.scale === true) {
          finalScaleNames = Object.keys(eView._runtime.scales);
        } else if (Array.isArray(change.scale)) {
          finalScaleNames = change.scale;
        }


        const {enumerator} = step;
        const getValues = {
          update: {
            initial: (attr, getScales, d) => {
              const computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal(
                attr,
                encodes.initial.update,
                computedScales.initial,
                signals.initial,
                d
              );
            },
            final: (attr, getScales, d) => {
              const computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal(
                attr,
                encodes.final.update,
                computedScales.final,
                signals.final,
                d
              );
            },
            custom: (attr, getScales, d_i, d_f) => {
              const pahtData = {
                initial: d_i.items[0].items[0],
                final: d_f.items[0].items[0]
              };
              const nuancedAttr = Object.assign({}, attr, {
                interpolateStyle: "update"
              });
              const computedScales = computeScale(scales, finalScaleNames, getScales);

              return getPropVal.bind(this)(
                change.scale ? attr : nuancedAttr,
                encodes.final.update,
                change.scale ? computedScales : computedScales.final,
                signals.final,
                pahtData
              );
            }
          },
          enter: {
            initial: (attr, getScales, d) => {
              const computedScales = computeScale(scales, finalScaleNames, getScales);

              return getPropVal(
                attr,
                encodes.initial.enter,
                {
                  primary: computedScales.initial,
                  secondary: computedScales.final
                },
                signals.initial,
                d
              );
            },
            final: (attr, getScales, d) => {
              const computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal(
                attr,
                encodes.final.enter,
                computedScales.final,
                signals.final,
                d
              );
            },
            custom(attr, getScales, d_i, d_f){
              let pahtData = {
                initial: change.scale ? d_f.items[0].items[0] : { mark: { items:[] } },
                final: d_f.items[0].items[0]
              };
              let nuancedAttr = Object.assign({}, attr, {interpolateStyle: "update"});
              let computedScales = computeScale(scales, finalScaleNames, getScales);

              return getPropVal.bind(this)(
                change.scale ? attr : nuancedAttr,
                encodes.final.update,
                change.scale ? computedScales : computedScales.final,
                signals.final,
                pahtData);
            }
          },
          exit: {
            initial: (attr, getScales, d) => {
              const computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal(
                attr,
                encodes.initial.exit,
                computedScales.initial,
                signals.initial,
                d
              );
            },
            final: (attr, getScales, d) => {
              const computedScales = computeScale(scales, finalScaleNames, getScales);
              return getPropVal(
                attr,
                encodes.final.exit,
                {
                  primary: computedScales.final,
                  secondary: computedScales.initial
                },
                signals.final,
                d
              );
            },
            custom: (attr, getScales, d_i) => {
              const pahtData = {
                initial: d_i.items[0].items[0],
                final: change.scale
                  ? d_i.items[0].items[0]
                  : { mark: { items: [] } }
              };

              const computedScales = computeScale(scales, finalScaleNames, getScales);
              const nuancedAttr = Object.assign({}, attr, {
                interpolateStyle: "update"
              });
              return getPropVal.bind(this)(
                change.scale ? attr : nuancedAttr,
                encodes.final.exit,
                change.scale ? computedScales : computedScales.initial,
                signals.final,
                pahtData
              );
            }
          }
        };
        if (hasFacet.initial && hasFacet.final) {
          // bind allKeys
          let markGs = d3.selectAll(animVis + ` .role-scope.${change.final.parent.name} > g`)
            .attr("class", "__sub");
          markGs = d3.select(animVis + ` .role-scope.${change.final.parent.name}`)
            .selectAll(".__sub");
          markGs = markGs.data(enumerator.allKeys, d => d);
          markGs.exit().remove();
          markGs = markGs.enter().append("g");
          markGs.append("path").attr("class", "background");

          // append mark mark
          let marks = markGs
            .append("g")
            .append("g")
            .attr("class", `${marktype}-mark role-mark ${change.compName}`)
            .append("path");

          const initialMarks = marks.filter(
            id => ["update", "exit"].indexOf(enumerator.set(id, 0)) >= 0
          );
          const allProps = MARK_ATTRS[marktype].reduce((acc, prop) => {
            return acc.concat(propMap(prop));
          }, []);

          // init
          allProps.forEach(p => {
            if (p.type === "attrTween") {
              const tempP = Object.assign({}, p, { type: "attr" });
              initialMarks[tempP.type](getStyle(tempP.val), id =>
                enumerator.getPropVal(tempP, getValues, 0, id)
              );
            } else {
              initialMarks[p.type](getStyle(p.val), id =>
                enumerator.getPropVal(p, getValues, 0, id)
              );
            }
          });

          const timings = enumStepComputeTiming(enumerator, step.timing);

          marks = marks.transition();

          allProps.forEach(p => {
            if (p.type === "attr") {
              marks.attrTween(p.val, function(d) {
                return enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues,
                  this
                )(d);
              });
            } else if (p.type === "attrTween") {
              marks.attrTween(p.val, function(d) {
                return enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues,
                  this
                )(d);
              });
            } else if (p.type === "text") {
              marks.tween("text", function(d) {
                const textInterpolator = enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues,
                  this
                )(d);
                return function(t) {
                  this.innerHTML = textInterpolator(t);
                };
              });
            } else if (p.type === "style") {
              marks.styleTween(getStyle(p.val), function(d) {
                return enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues,
                  this
                )(d);
              });
            }
          });

          // interpolate them
          marks
            .duration((d, i) => timings[i].duration)
            .delay((d, i) => timings[i].delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done("all", () => {
                resolve();
              });
            });
        } else if (!hasFacet.initial && !hasFacet.final) {
          let mark = d3.select(animVis + ` .mark-${marktype}.role-mark.${change.compName}`)
            .selectAll("path");

          mark = mark.data(enumerator.allKeys, d => d);
          mark.exit().remove();
          mark = mark.enter().append("path");

          const allProps = MARK_ATTRS[marktype].reduce((acc, prop) => {
            return acc.concat(propMap(prop));
          }, []);

          // init
          allProps.forEach(p => {
            if (p.type === "attrTween") {
              const tempP = Object.assign({}, p, { type: "attr" });
              mark[tempP.type](getStyle(tempP.val), id =>
                enumerator.getPropVal(tempP, getValues, 0, id)
              );
            } else {
              mark[p.type](getStyle(p.val), id =>
                enumerator.getPropVal(p, getValues, 0, id)
              );
            }
          });

          const timings = enumStepComputeTiming(enumerator, step.timing);

          mark = mark.transition();

          allProps.forEach(p => {
            if (p.type === "attr") {
              mark.attrTween(p.val, function(d) {
                return enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues,
                  this
                )(d);
              });
            } else if (p.type === "attrTween") {
              mark.attrTween(p.val, function(d) {
                return enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues,
                  this
                )(d);
              });
            } else if (p.type === "text") {
              mark.tween("text", function(d) {
                const textInterpolator = enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues,
                  this
                )(d);
                return function(t) {
                  this.innerHTML = textInterpolator(t);
                };
              });
            } else if (p.type === "style") {
              mark.styleTween(getStyle(p.val), function(d) {
                return enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues,
                  this
                )(d);
              });
            }
          });

          // interpolate them
          mark
            .duration((d, i) => timings[i].duration)
            .delay((d, i) => timings[i].delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done("all", () => {
                resolve();
              });
            });
        }
      } else if (marktypes.initial && !isAreaLineMarktype(marktypes.initial)) {
        // when marktype changes from other marks to area/line mark

        const setType = "final"; const marktype = marktypes.final;
        const prevData = d3.local();

        if (hasFacet.final) {
          const timings = computeTiming(
            step.groupedData,
            step.nextData,
            step.timing,
            joinKey,
            joinSet
          );
          let markGs = d3.selectAll(
            animVis + ` .role-scope.${change.final.parent.name} > g`
          );
          markGs = d3.select(`${animVis  } .role-scope.${change.final.parent.name}`)
            .selectAll(`.role-scope.${change.final.parent.name} > g`)
            .data(step.groupedData, (d, i) => joinKey(d, i, setType));

          // append group mark
          const enterIG = markGs.enter().append("g");
          enterIG.append("path").attr("class", "background");

          // append mark mark
          const enterIMark = enterIG
            .append("g")
            .append("g")
            .attr("class", `mark-${marktype} role-mark ${change.compName}`)
            .append("path");

          fetchAttributes(
            enterIMark,
            MARK_ATTRS[marktype],
            { primary: scales.initial, secondary: scales.final },
            signals.initial,
            encodes.final.intermediate
          );

          markGs = d3.select(`${animVis  } .role-scope.${change.final.parent.name}`)
            .selectAll(`.role-scope.${change.final.parent.name} > g`);

          markGs.each(function(d) {
            prevData.set(this, d);
          });
          markGs = markGs.data(step.nextData, (d, i) => joinKey(d, i, setType));

          update(
            timings,
            markGs,
            marktype,
            {
              initial: encodes.final.intermediate,
              final: encodes.final.update
            },
            prevData
          );

          enter(timings, markGs, marktype);

          done("exit", () => resolve());
        } else {
          let mark = d3.select(animVis + ` .mark-${marktype}.role-mark.${change.compName}`)
            .selectAll("path");
          mark = mark.data(step.groupedData);

          const enterI = mark.enter().append("path");

          fetchAttributes(
            enterI,
            MARK_ATTRS[marktype],
            { primary: scales.initial, secondary: scales.final },
            signals.initial,
            encodes.final.intermediate
          );

          let enterF = d3.select(
              animVis + ` .mark-${marktypes.final}.role-mark.${change.compName}`
            )
            .selectAll("path");
          enterF.each(function(d) {
            prevData.set(this, d);
          });

          enterF = enterF.data(step.nextData).transition();

          fetchAttributes(
            enterF,
            MARK_ATTRS[marktypes.final], // MARK_ATTRS_DATA_INTERPOLATE[marktype],
            scales,
            signals.final,
            encodes.final.update,
            prevData
          );

          enterF
            .duration(step.timing.duration)
            .delay(step.timing.delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done("all", () => {resolve();});
            });

        }
      } else if (marktypes.final && !isAreaLineMarktype(marktypes.final)) {
        // when marktype changes from area/line to the other marktypes
        // exit
        const timings = computeTiming(
          step.currData,
          step.groupedData,
          step.timing,
          joinKey,
          joinSet
        );
        const prevData = d3.local();
        const setType = "initial"; const marktype = marktypes.initial;
        if (hasFacet.initial) {
          let markGs = d3.selectAll(
            animVis + ` .role-scope.${change.initial.parent.name} > g`
          );
          markGs = d3.select(`${animVis  } .role-scope.${change.initial.parent.name}`)
            .selectAll(`.role-scope.${change.initial.parent.name} > g`);

          markGs.each(function(d) {
            prevData.set(this, d);
          });
          markGs = markGs.data(step.groupedData, (d, i) =>
            joinKey(d, i, setType)
          );

          exit(
            timings,
            markGs,
            marktype,
            {
              initial: encodes.initial.exit,
              final: encodes.final.exit
            },
            prevData,
            "initial"
          );

          update(
            timings,
            markGs,
            marktype,
            {
              initial: encodes.initial.update,
              final: encodes.initial.intermediate
            },
            prevData
          );
          done("enter", () => resolve());
        } else {
          let mark = d3.select(animVis + ` .mark-${marktype}.role-mark.${change.compName}`)
            .selectAll("path");
          mark.each(function(d) {
            prevData.set(this, d);
          });
          mark = mark.data(step.groupedData).transition();
          // fade-out by the exit encoding

          fetchAttributes(
            mark,
            MARK_ATTRS[marktype],
            Object.assign({}, scales, {
              primary: scales.final,
              secondary: scales.initial
            }),
            signals.final,
            {
              initial: encodes.initial.update,
              final: encodes.initial.intermediate
            },
            prevData
          );

          mark
            .duration(step.duration)
            .delay(step.delay)
            .ease(easeFn)
            // .remove()
            .end()
            .then(function() {
              done("all", () => {resolve();});
            });
        }
      } else if ((isRemove || hasFacet.final) && (isAdd || hasFacet.initial)) {
        // When adding or removing or changing marks with pathGroup
        const parentName = isAdd
          ? change.final.parent.name
          : isRemove
            ? change.initial.parent.name
            : change.initial.type === marktypes.initial
              ? change.initial.parent.name
              : change.final.parent.name;
        let markGs = d3.selectAll(animVis + ` .role-scope.${parentName} > g`)
          .attr("class", "__sub");

        markGs = d3.select(animVis + ` .role-scope.${parentName}`)
          .selectAll(".__sub");
        const prevData = d3.local();
        markGs.each(function(d) {
          prevData.set(this, d);
        });
        if (change.data || isAdd || isRemove) {
          markGs = markGs.data(step.nextData, (d, i) => joinKey(d, i));
        }

        // enter
        // if (doEnter) {
        enter(timings, markGs, marktypes.final); // , encodes.initial.enter, encodes.final.enter, "final")

        // exit
        // if (doExit) {
        exit(
          timings,
          markGs,
          marktypes.initial,
          {
            initial: encodes.initial.exit,
            final: encodes.final.exit
          },
          prevData,
          "initial"
        );

        // finalize update
        // if (doUpdate) {

        update(
          timings,
          markGs,
          marktypes,
          {
            initial: encodes.initial.update,
            final: encodes.final.update
          },
          prevData
        );

      } else if ((isRemove || !hasFacet.final) && (isAdd || !hasFacet.initial)) {
        // When adding or removing or updating a single mark without pathgroup

        const markG = d3.select(
          animVis + ` .mark-${marktypes.initial}.role-mark.${change.compName}`
        );
        let mark = markG.selectAll("path");
        const prevData = d3.local();
        mark.each(function(d) {
          prevData.set(this, d);
        });
        if (change.data || isAdd || isRemove) {
          mark = mark.data(step.nextData);
        }

        // enter

        const enterI = mark.enter().append("path");

        fetchAttributes(
          enterI,
          MARK_ATTRS[marktype],
          { primary: scales.initial, secondary: scales.final },
          signals.initial,
          encodes.initial.enter
        );
        if (enterI.data().length > 0) {
          let enterF = enterI.transition();

          fetchAttributes(
            enterF,
            MARK_ATTRS[marktype], // MARK_ATTRS_DATA_INTERPOLATE[marktype],
            scales.final,
            signals.final,
            encodes.final.enter
          );

          enterF
            .duration(step.timing.duration)
            .delay(step.timing.delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done("enter", () => {resolve();});
            });
        } else {
          done("enter", () => {
            resolve();
          });
        }


        // exit

        // initiate exit
        const exitI = mark.exit();

        if (exitI.data().length > 0) {
          // finalize exit
          const exitF = exitI.transition();

          fetchAttributes(
            exitF,
            MARK_ATTRS[marktype], // MARK_ATTRS_DATA_INTERPOLATE[marktype],
            { primary: scales.final, secondary: scales.initial },
            signals.final,
            encodes.final.exit
          );

          exitF
            .duration((d, i) => step.timing.duration)
            .delay((d, i) => step.timing.delay)
            .ease(easeFn)
            .end()
            .then(function() {
              done("exit", () => {resolve();});
            });
        } else {
          done("exit", () => {
            resolve();
          });
        }


        // finalize update

        if (mark.data().length > 0) {
          if (marktypes.initial !== marktypes.final) {
            markG.classed(`mark-${marktypes.initial}`, false);
            markG.classed(`mark-${marktypes.final}`, true);
          }

          const updateF = mark.transition();

          fetchAttributes(
            updateF,
            getProp(marktypes),
            scales,
            signals.final,
            {
              initial: encodes.initial.update,
              final: encodes.final.update
            },
            prevData
          );
          updateF
            .duration(step.timing.duration)
            .delay(step.timing.delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done("update", () => {resolve();});
            });
        } else {
          done("update", () => {
            resolve();
          });
        }


      } else if (!hasFacet.initial && hasFacet.final) {
        // single mark without pathgroup -> marks with pathgroup
        const prevData = d3.local();

        // Remove the single area
        let exitMark = d3.select(
            animVis + ` .mark-${marktypes.initial}.role-mark.${change.compName}`
          )
          .selectAll("path");
        exitMark = exitMark
          .each(function(d) {
            prevData.set(this, d);
          })
          .transition();

        fetchAttributes(
          exitMark,
          MARK_ATTRS[marktypes.initial], // MARK_ATTRS_DATA_INTERPOLATE[marktypes.initial],
          Object.assign({}, scales, {
            primary: scales.final,
            secondary: scales.initial
          }),
          signals.final,
          Object.assign({}, encodes.initial.exit, { opacity: { value: 0 } }),
          prevData
        );

        exitMark
          .duration((d, i) => timings.find(t => t.set === "exit").duration)
          .delay((d, i) => timings.find(t => t.set === "exit").delay)
          .ease(easeFn)
          .remove()
          .end()
          .then(function() {
            d3.select(`${animVis  } .mark-${marktypes.initial}.role-mark.${change.compName}`).remove();
            done("exit", () => {resolve();});
          });

        // Add pathgroup with marks
        const {parent} = change.final;
        const sib = findAfterSibling(eView.scenegraph().root, parent.name);

        addMark$1(
          d3.select(`${animVis  } .${parent.parent.name} > g > g`),
          change.final,
          sib ? `.${sib.name}` : undefined,
          { hasGroup: true }
        );

        const markGs = d3.select(animVis + ` .role-scope.${parent.name}`)
          .selectAll("g")
          .data(step.nextData);

        // append group mark
        const enterIG = markGs.enter().append("g");
        enterIG.append("path").attr("class", "background");
        // d (rect)
        // fill (none)

        // append mark mark
        const enterIMark = enterIG
          .append("g")
          .append("g")
          .attr("class", `${marktypes.final}-mark role-mark ${change.compName}`)
          .append("path");

        fetchAttributes(
          enterIMark,
          MARK_ATTRS[marktypes.final],
          { primary: scales.initial, secondary: scales.final },
          signals.initial,
          Object.assign({}, encodes.final.enter, { opacity: { value: 0 } })
          // encodes.initial.enter
        );

        const enterFMark = enterIMark
          .each(function(d) {
            prevData.set(this, d);
          })
          .transition();

        fetchAttributes(
          enterFMark,
          MARK_ATTRS[marktypes.final],
          scales,
          signals.final,
          encodes.final.enter,
          prevData
        );

        enterFMark
          .duration(
            (d, i) => timings.find(t => t.id === joinKey(d, i, "final")).duration
          )
          .delay(
            (d, i) => timings.find(t => t.id === joinKey(d, i, "final")).delay
          )
          .ease(easeFn)
          .end()
          .then(() => {
            done("enter", () => {resolve();});
          });
        done("update", () => {
          resolve();
        });
      } else if (hasFacet.initial && !hasFacet.final) {
        // marks with pathgroup -> single mark without pathgroup

        const {parent} = change.initial,
          prevData = d3.local();
        // Remove the pathgroup and the marks

        let exitMarks = d3.select(animVis + ` .role-scope.${parent.name}`)
          .selectAll(` .role-scope.${parent.name} > g`)
          .data(step.currData)
          .select(`.${change.compName} > path`)
          .each(function(d) {
            prevData.set(this, d);
          });

        exitMarks = exitMarks.transition();

        fetchAttributes(
          exitMarks,
          // MARK_ATTRS_DATA_INTERPOLATE[marktype],
          MARK_ATTRS[marktypes.initial],
          Object.assign({}, scales, {
            primary: scales.final,
            secondary: scales.initial
          }),
          signals.final,
          Object.assign({}, encodes.initial.exit, { opacity: { value: 0 } }),
          prevData
        );

        exitMarks
          .duration(
            (d, i) =>
              timings.find(t => t.id === joinKey(d, i, "initial")).duration
          )
          .delay(
            (d, i) => timings.find(t => t.id === joinKey(d, i, "initial")).delay
          )
          .ease(easeFn)
          .remove()
          .end()
          .then(function() {
            done("exit", () => {resolve();});
          });

        // Add the single area
        const sib = findAfterSibling(eView.scenegraph().root, change.compName);

        let enterIMark = addMark$1(
          d3.select(`${animVis  } .${change.final.parent.name} > g > g`),
          change.final,
          sib ? `.${sib.name}` : undefined
        );

        enterIMark = enterIMark
          .selectAll("path")
          .data(step.nextData)
          .enter()
          .append("path");

        fetchAttributes(
          enterIMark,
          MARK_ATTRS[marktypes.final],
          { primary: scales.initial, secondary: scales.final },
          signals.initial,
          Object.assign({}, encodes.final.enter, { opacity: { value: 0 } })
        );

        enterIMark.each(function(d) {
          prevData.set(this, d);
        });
        const enterF = enterIMark.transition();

        fetchAttributes(
          enterF,
          MARK_ATTRS[marktypes.final],
          scales,
          signals.final,
          encodes.final.enter,
          prevData
        );

        enterF
          .duration((d, i) => timings.find(t => t.set === "enter").duration)
          .delay((d, i) => timings.find(t => t.set === "enter").delay)
          .ease(easeFn)
          .end()
          .then(() => {
            done("enter", () => {resolve();});
          });
        done("update", () => {
          resolve();
        });
      }

      function getProp(marktypes) {
        const marktype =
          typeof marktypes === "string" ? marktypes : marktypes.final;
        const props = change.data && (isLinearMarktype(marktype)) ?
          MARK_ATTRS_DATA_INTERPOLATE[marktype] :
          MARK_ATTRS[marktype];
        if (
          isAreaLineMarktype(marktypes.initial) &&
          isAreaLineMarktype(marktypes.final) &&
          marktypes.final !== marktypes.initial
        ) {
          props[0].tweaks.push({
            type: "attrTween",
            val: "d",
            initialMarktype: marktypes.initial,
            interpolateStyle: "update"
          });
          props[0].tweaks.push({
            type: "style",
            val: "fill",
            initialMarktype: marktypes.initial,
            asTween: true
          });
          props[0].tweaks.push({
            type: "style",
            val: "stroke",
            initialMarktype: marktypes.initial
          });
        }
        return props;
      }
      function exit(
        timings,
        markGs,
        marktype,
        encodes,
        prevData,
        setType,
        isAllDone = false
      ) {
        // initiate exit
        let exitI = markGs.exit();

        // If they are already entered,
        if (exitI.data().length === 0 || !(change.data || isAdd || isRemove)) {
          exitI = markGs.filter(d => joinSet(d) === "exit");
        }
        if (exitI.data().length > 0) {
          const exitIMark = exitI.select(`.${change.compName} > path`);

          // finalize exit
          const exitFMark = exitIMark.transition();

          fetchAttributes(
            exitFMark,
            MARK_ATTRS[marktype],
            Object.assign({}, scales, {
              primary: scales.final,
              secondary: scales.initial
            }),
            signals.final,
            encodes,
            prevData
          );

          exitFMark
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, setType)).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, setType)).delay
            )
            .ease(easeFn)
            .remove()
            .end()
            .then(function() {
              exitI.remove();
              done(isAllDone ? "all" : "exit", () => {resolve();});
            });
        } else {
          done(isAllDone ? "all" : "exit", () => {
            resolve();
          });
        }
      }
      function update(timings, markGs, marktypes, encodes, prevData) {
        let updateF = markGs.filter(d => joinSet(d) === "update");

        if (change.data === false && updateF.data().length === 0) {
          updateF = markGs;
        }
        let updateFMark = updateF.select(`.${change.compName}`);
        if (marktypes.initial !== marktypes.final) {
          updateFMark.classed(`mark-${marktypes.initial}`, false);
          updateFMark.classed(`mark-${marktypes.final}`, true);
        }
        updateFMark = updateFMark.select("path");
        if (updateFMark.data().length > 0) {
          updateFMark = updateFMark.transition();
          const props = getProp(marktypes);
          fetchAttributes(
            updateFMark,
            props,
            // change.data ? MARK_ATTRS_DATA_INTERPOLATE[marktype] : MARK_ATTRS[marktype],
            scales,
            signals.final,
            encodes,
            prevData
          );
          updateFMark
            .duration(
              (d, i) => timings.find(t => t.id === joinKey(d, i)).duration
            )
            .delay((d, i) => timings.find(t => t.id === joinKey(d, i)).delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done("update", () => {resolve();});
            });
        } else {
          done("update", () => {
            resolve();
          });
        }
      }
      function enter(
        timings,
        markGs,
        marktype,
        encodeInitial = encodes.initial.enter,
        encode = encodes.final.enter
      ) {
        // append group mark
        const enterIG = markGs.enter().append("g");
        enterIG.append("path").attr("class", "background");

        // append mark mark
        let enterIMark = enterIG
          .append("g")
          .append("g")
          .attr("class", `mark-${marktype} role-mark ${change.compName}`)
          .append("path");

        fetchAttributes(
          enterIMark,
          MARK_ATTRS[marktype],
          { primary: scales.initial, secondary: scales.final },
          signals.initial,
          encodeInitial
        );

        // If they are already entered,
        if (enterIG.data().length === 0 || !(change.data || isAdd || isRemove)) {
          enterIMark = markGs
            .filter(d => joinSet(d) === "enter")
            .selectAll(`.${change.compName} > path`);
        }

        if (enterIMark.data().length > 0) {
          const prevData = d3.local();
          enterIMark.each(function(d) {
            prevData.set(this, d);
          });
          const enterFMark = enterIMark.transition();

          fetchAttributes(
            enterFMark,
            // MARK_ATTRS_DATA_INTERPOLATE[marktype],
            MARK_ATTRS[marktype],
            scales,
            signals.final,
            encode,
            prevData
          );

          enterFMark
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, "final")).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, "final")).delay
            )
            .ease(easeFn)
            .end()
            .then(() => {
              done("enter", () => {resolve();});
            });
        } else {
          done("enter", () => {
            resolve();
          });
        }
      }
    });

  }
  function addMark$1 (d3Selection, compSpec, before, opt = {}) {
    if (opt.hasGroup) {
      return d3Selection.insert("g", before)
        .attr("class", `mark-group role-scope ${compSpec.parent.name}`);
    }
    return d3Selection.insert("g", before)
      .attr("class", `mark-${compSpec.type} role-mark ${compSpec.name}`);

  }

  const INITIAL_STATUS = {
    update: false,
    enter: false,
    exit: false
  };

  function addAxis(d3Selection, newAxisScene, prior) {
    const scName = newAxisScene.name;
    const axisSubG = d3Selection
      .insert("g", prior)
      .attr("class", `mark-group role-axis ${scName}`)
      .append("g")
      .attr("transform", transformItem(newAxisScene.items[0]));

    const { datum } = newAxisScene.items[0];
    if (datum.ticks) {
      axisSubG.append("g").attr("class", "mark-rule role-axis-tick");
    }
    if (datum.labels) {
      axisSubG.append("g").attr("class", "mark-text role-axis-label");
    }
    if (datum.grid) {
      axisSubG.append("g").attr("class", "mark-rule role-axis-grid");
    }
    if (datum.domain) {
      axisSubG.append("g").attr("class", "mark-rule role-axis-domain");
    }
    if (datum.title) {
      axisSubG.append("g").attr("class", "mark-text role-axis-title");
    }

    return d3Selection;
  }

  function doneMaker$1(subComponents) {
    const transitionStatus = subComponents.reduce((acc, curr) => {
      acc[curr] = copy(INITIAL_STATUS);
      return acc;
    }, {});

    return function(which, cb) {
      if (which.length === 2) {
        if (which[1] === "all") {
          transitionStatus[which[0]].exit = true;
          transitionStatus[which[0]].enter = true;
          transitionStatus[which[0]].update = true;
        } else {
          transitionStatus[which[0]][which[1]] = true;
        }
      } else if (which === "all") {
        transitionStatus.update = true;
        transitionStatus.enter = true;
        transitionStatus.exit = true;
      } else {
        transitionStatus[which] = true;
      }

      const allDone = Object.keys(transitionStatus).reduce((acc, key) => {
        return (
          acc &&
          transitionStatus[key].update &&
          transitionStatus[key].enter &&
          transitionStatus[key].exit
        );
      }, true);
      if (allDone) {
        cb();
      }
    };
  }
  function axisInterpolate(rawInfo, step, targetElm) {
    function joinKeyGen(subcomp) {
      return (d, i, initialOrFinal = "initial") => {
        if (!d) {
          return i.toString();
        }
        if (!d.__gemini__) {
          return typeof step.computeDatumId[subcomp] === "function"
            ? step.computeDatumId[subcomp](d, i)
            : step.computeDatumId[subcomp][initialOrFinal](d, i);
          // return step.computeDatumId[subcomp](d, i);
        }
        return getJoinInfo(d, i, step, "joinKey");
      };
    }
    const joinSet = (d, i) => getJoinInfo(d, i, step, "animSet");
    const animVis = targetElm;
    const eView = rawInfo.eVis.view;

    const done = doneMaker$1(["tick", "label", "grid", "title", "domain"]);

    return new Promise(resolve => {
      // Mark Interpolate Data

      const { change } = step;
      const easeFn = getEaseFn(step.timing.ease);

      let defaultDo = true;
      if (change.encode === false) {
        defaultDo = false;
      }
      let doTicks = defaultDo;
      let doLabels = defaultDo;
      let doAxisG = defaultDo;
      let doTitle = defaultDo;
      let doDomain = defaultDo;
      let doGrid = defaultDo;

      if (change.encode) {
        doTicks = !(change.encode.ticks === false);
        doLabels = !(change.encode.labels === false);
        doAxisG = !(change.encode.axis === false);
        doTitle = !(change.encode.title === false);
        doGrid = !(change.encode.grid === false);
        doDomain = !(change.encode.domain === false);
      }

      let isRemove = false;
      let axis = d3.selectAll(`${animVis} .role-axis.${change.compName}`);

      const scName = change.compName;
      // collect the scale objects to scale the initial/final values
      const { scales } = step;
      const { signals } = step;

      // Add Axis
      if (change.initial === null) {
        // todo: find where-to-add d3Selection by searching eView.scenegraph
        const rootMark = d3.select(`${animVis} .mark-group.root g g `);
        const rootScene = eView.scenegraph().root;
        const sib = findAfterSibling(rootScene, change.compName);
        addAxis(
          rootMark,
          findComp(rootScene, scName, "axis")[0],
          sib ? `.${sib.name}` : undefined
        );
        axis = d3.selectAll(`${animVis} .role-axis.${change.compName}`);
      } else if (change.final === null) {
        // Remove Axis
        isRemove = true;
      }

      // update axis group
      if (isRemove) {
        const manualEncode =
          change.encode && change.encode.axis ? change.encode.axis.exit : {};
        const axisG = axis.select("g");
        const fAxisG = axisG.transition();
        fetchAttributes(
          fAxisG,
          ["group"],
          scales.final,
          signals.final,
          Object.assign({}, DEFAULT_ENCODE.axis.axis.exit, manualEncode)
        );
        fAxisG.duration(step.duration);
      } else if (doAxisG) {
        const axisG = axis.select("g");
        axisG.data(step.nextData.axis);
        const fAxisG = axisG.transition();
        fetchAttributes(
          fAxisG,
          ["group"],
          scales.final,
          signals.final,
          step.encodes.axis.final.update
        );
        fAxisG
          .delay(step.delay)
          .duration(step.duration)
          .ease(easeFn);
      }

      function calculateGetValues(encodes) {
        return {
          update: {
            initial: (attr, getScales, d) => {
              const computedScales = computeScale(scales, [scName], getScales);
              return getPropVal(
                attr,
                encodes.initial.update,
                computedScales.initial,
                signals.initial,
                d
              );
            },
            final: (attr, getScales, d) => {
              const computedScales = computeScale(scales, [scName], getScales);
              return getPropVal(
                attr,
                encodes.final.update,
                computedScales.final,
                signals.final,
                d
              );
            }
          },
          enter: {
            initial: (attr, getScales, d) => {
              const computedScales = computeScale(scales, [scName], getScales);

              return getPropVal(
                attr,
                encodes.initial.enter,
                computedScales.initial[scName]
                  ? computedScales.initial
                  : computedScales.final,
                signals.initial,
                d
              );
            },
            final: (attr, getScales, d) => {
              const computedScales = computeScale(scales, [scName], getScales);
              return getPropVal(
                attr,
                encodes.final.enter,
                computedScales.final,
                signals.final,
                d
              );
            }
          },
          exit: {
            initial: (attr, getScales, d) => {
              const computedScales = computeScale(scales, [scName], getScales);
              return getPropVal(
                attr,
                encodes.initial.exit,
                computedScales.initial,
                signals.initial,
                d
              );
            },
            final: (attr, getScales, d) => {
              const computedScales = computeScale(scales, [scName], getScales);
              return getPropVal(
                attr,
                encodes.final.exit,
                computedScales.final,
                signals.final,
                d
              );
            }
          }
        };
      }
      // update tick
      if (doTicks) {
        const tickG = axis.selectAll(".role-axis-tick");
        const encodes = step.encodes.ticks;

        const TICK_ATTRS = ["tick"];

        if (step.enumerator) {
          const enumerator = step.enumerator.tick;
          const getValues = calculateGetValues(encodes);
          // bind allKeys
          const newBoundTicks = tickG
            .selectAll("line")
            .data(enumerator.allKeys, d => d);
          newBoundTicks.exit().remove();
          newBoundTicks.enter().append("line");
          const allProps = TICK_ATTRS.reduce((acc, prop) => {
            return acc.concat(propMap(prop));
          }, []);
          const initialTicks = tickG
            .selectAll("line")
            .filter(id => ["update", "exit"].indexOf(enumerator.set(id, 0)) >= 0);
          allProps.forEach(p => {
            if (p.type === "attrTween") {
              const tempP = Object.assign({}, p, { type: "attr" });
              initialTicks[tempP.type](getStyle(tempP.val), id =>
                enumerator.getPropVal(tempP, getValues, 0, id)
              );
            } else if (p.type === "text") {
              initialTicks[p.type](id =>
                enumerator.getPropVal(p, getValues, 0, id)
              );
            } else {
              initialTicks[p.type](getStyle(p.val), id =>
                enumerator.getPropVal(p, getValues, 0, id)
              );
            }
          });

          const timings = enumStepComputeTiming(enumerator, step.timing);
          const ticks = tickG.selectAll("line").transition();

          allProps.forEach(p => {
            if (p.type === "attr") {
              ticks.attrTween(p.val, d => {
                return enumerator.interpolateAlongEnumMaker(p, getValues)(d);
              });
            } else if (p.type === "text") {
              ticks.tween("text", function(d) {
                const textInterpolator = enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues
                )(d);
                return function(t) {
                  this.innerHTML = textInterpolator(t);
                };
              });
            } else if (p.type === "style") {
              ticks.styleTween(getStyle(p.val), d => {
                return enumerator.interpolateAlongEnumMaker(p, getValues)(d);
              });
            }
          });

          // interpolate them
          ticks
            .duration((d, i) => timings[i].duration)
            .delay((d, i) => timings[i].delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done(["tick", "all"], () => {
                resolve();
              });
            });
        } else {
          let ticks = tickG.selectAll("line");
          const currData = step.currData.tick;
          const newData = step.nextData.tick;
          const joinKey = joinKeyGen("tick");
          const timings = computeTiming(
            currData,
            newData,
            step.timing,
            joinKey,
            joinSet
          );

          ticks = ticks.data(newData, d => joinKey(d));
          let enterTicksI = ticks.enter().append("line");
          fetchAttributes(
            enterTicksI,
            TICK_ATTRS,
            step.sameDomainDimension
              ? { primary: scales.initial, secondary: scales.final }
              : { primary: scales.final, secondary: scales.initial },
            signals.initial,
            encodes.initial.enter
          );

          if (enterTicksI.data().length <= 0) {
            enterTicksI = ticks.filter(d => joinSet(d) === "enter");
          }

          const enterTicksF = enterTicksI.transition();
          fetchAttributes(
            enterTicksF,
            TICK_ATTRS,
            scales.final,
            signals.final,
            encodes.final.enter
          );
          enterTicksF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, "final")).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, "final")).delay
            )
            .ease(easeFn)
            .end()
            .then(done(["tick", "enter"], () => resolve()));

          let exitTicksI = ticks.exit();
          if (exitTicksI.data().length <= 0) {
            exitTicksI = ticks.filter(d => joinSet(d) === "exit");
          }

          const exitTicksF = exitTicksI.transition();
          fetchAttributes(
            exitTicksF,
            TICK_ATTRS,
            // scales.final[scName] ? scales.final : scales.initial,
            step.sameDomainDimension
              ? { primary: scales.final, secondary: scales.initial }
              : { primary: scales.initial, secondary: scales.final }, // { primary: scales.final, secondary: scales.initial },
            signals.final,
            encodes.final.exit
          );
          exitTicksF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, "initial")).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, "initial")).delay
            )
            .ease(easeFn)
            .remove()
            .end()
            .then(done(["tick", "exit"], () => resolve()));

          if ( ticks.data().length > 0) {
            ticks = ticks.filter(d => joinSet(d) === "update").transition();
            // finalize the update set of the ticks
            fetchAttributes(
              ticks,
              TICK_ATTRS,
              scales.final,
              signals.final,
              encodes.final.update
            );

            ticks
              .duration(
                (d, i) => timings.find(t => t.id === joinKey(d, i)).duration
              )
              .delay((d, i) => timings.find(t => t.id === joinKey(d, i)).delay)
              .ease(easeFn)
              .end()
              .then(done(["tick", "update"], () => resolve()));
          } else {
            done(["tick", "update"], () => resolve());
          }
        }
      } else {
        done(["tick", "enter"], () => resolve());
        done(["tick", "exit"], () => resolve());
        done(["tick", "update"], () => resolve());
      }

      // update label
      const labelG = axis.selectAll(".role-axis-label");

      const LABEL_ATTRS = ["text", "align"];
      // const LABEL_ATTRS = [ "text" ];

      if (!labelG.empty() && doLabels) {
        const encodes = step.encodes.labels;

        if (step.enumerator) {
          const enumerator = step.enumerator.label;

          const getValues = calculateGetValues(encodes);
          // bind allKeys
          const newBoundLabels = labelG
            .selectAll("text")
            .data(enumerator.allKeys, d => d);
          newBoundLabels.exit().remove();
          newBoundLabels.enter().append("text");
          const allProps = LABEL_ATTRS.reduce((acc, prop) => {
            return acc.concat(propMap(prop));
          }, []);
          const initialLabels = labelG
            .selectAll("text")
            .filter(id => ["update", "exit"].indexOf(enumerator.set(id, 0)) >= 0);
          allProps.forEach(p => {
            if (p.type === "attrTween") {
              const tempP = Object.assign({}, p, { type: "attr" });
              initialLabels[tempP.type](getStyle(tempP.val), id =>
                enumerator.getPropVal(tempP, getValues, 0, id)
              );
            } else if (p.type === "text") {
              initialLabels[p.type](id =>
                enumerator.getPropVal(p, getValues, 0, id)
              );
            } else {
              initialLabels[p.type](getStyle(p.val), id =>
                enumerator.getPropVal(p, getValues, 0, id)
              );
            }
          });

          const labels = labelG.selectAll("text").transition();
          const timings = enumStepComputeTiming(enumerator, step.timing);
          allProps.forEach(p => {
            if (p.type === "attr") {
              labels.attrTween(p.val, d => {
                return enumerator.interpolateAlongEnumMaker(p, getValues)(d);
              });
            } else if (p.type === "text") {
              labels.tween("text", function(d) {
                const textInterpolator = enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues
                )(d);
                return function(t) {
                  this.innerHTML = textInterpolator(t);
                };
              });
            } else if (p.type === "style") {
              labels.styleTween(getStyle(p.val), d => {
                return enumerator.interpolateAlongEnumMaker(p, getValues)(d);
              });
            }
          });

          // interpolate them
          labels
            .duration((d, i) => timings[i].duration)
            .delay((d, i) => timings[i].delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done(["label", "all"], () => {
                resolve();
              });
            });
        } else {
          let labels = labelG.selectAll("text");
          const currData = step.currData.label;
          const newData = step.nextData.label;
          const joinKey = joinKeyGen("label");
          const timings = computeTiming(
            currData,
            newData,
            step.timing,
            joinKey,
            joinSet
          );
          const prevData = d3.local();
          labels.each(function(d) {
            prevData.set(this, d);
          });
          labels = labels.data(newData, d => joinKey(d));

          let enterLabelI = labels.enter().append("text");
          fetchAttributes(
            enterLabelI,
            LABEL_ATTRS,
            step.sameDomainDimension
              ? { primary: scales.initial, secondary: scales.final }
              : { primary: scales.final, secondary: scales.initial }, // { primary: scales.final, secondary: scales.initial },
            signals.initial,
            encodes.initial.enter
          );

          // entered labels

          if (enterLabelI.data().length <= 0) {
            enterLabelI = labels.filter(d => joinSet(d) === "enter");
          }

          const enterLabelF = enterLabelI.transition();
          fetchAttributes(
            enterLabelF,
            LABEL_ATTRS,
            scales.final,
            signals.final,
            encodes.final.enter
          );
          enterLabelF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, "final")).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, "final")).delay
            )
            .ease(easeFn)
            .end()
            .then(done(["label", "enter"], () => resolve()));

          // exit labels
          let exitLabelI = labels.exit();
          if (exitLabelI.data().length <= 0) {
            exitLabelI = labels.filter(d => joinSet(d) === "exit");
          }

          const exitLabelF = exitLabelI.transition();
          fetchAttributes(
            exitLabelF,
            LABEL_ATTRS,
            step.sameDomainDimension
              ? { primary: scales.final, secondary: scales.initial }
              : { primary: scales.initial, secondary: scales.final }, // { primary: scales.final, secondary: scales.initial },
            signals.final,
            encodes.final.exit,
            prevData
          );
          exitLabelF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, "initial")).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, "initial")).delay
            )
            .ease(easeFn)
            .remove()
            .end()
            .then(done(["label", "exit"], () => resolve()));

          // Todo update labels!!
          if ( labels.data().length > 0) {
            labels = labels.filter(d => joinSet(d) === "update").transition();
            // finalize the update set of the labels
            fetchAttributes(
              labels,
              LABEL_ATTRS,
              scales.final,
              signals.final,
              encodes.final.update,
              prevData
            );

            labels
              .duration(
                (d, i) => timings.find(t => t.id === joinKey(d, i)).duration
              )
              .delay((d, i) => timings.find(t => t.id === joinKey(d, i)).delay)
              .ease(easeFn)
              .end()
              .then(done(["label", "update"], () => resolve()));
          } else {
            done(["label", "update"], () => resolve());
          }
        }
      } else {
        done(["label", "enter"], () => resolve());
        done(["label", "exit"], () => resolve());
        done(["label", "update"], () => resolve());
      }

      // update grid
      let gridG = axis.selectAll(".role-axis-grid");
      const GRID_ATTRS = ["grid"];

      if (
        (!step.change.initial || step.change.initial.grid === false) &&
        step.change.final &&
        step.change.final.grid === true
      ) {
        // add grid
        gridG = axis
          .select("g")
          .select("g")
          .append("g")
          .attr("class", "mark-rule role-axis-grid");
      }
      if (!gridG.empty() && doGrid) {
        const encodes = step.encodes.grid;

        if (step.enumerator) {
          const enumerator = step.enumerator.grid;

          const getValues = calculateGetValues(encodes);

          // bind allKeys
          const newBoundGrids = gridG
            .selectAll("line")
            .data(enumerator.allKeys, d => d);
          newBoundGrids.exit().remove();
          newBoundGrids.enter().append("line");
          const initialGrids = gridG
            .selectAll("line")
            .filter(id => ["update", "exit"].indexOf(enumerator.set(id, 0)) >= 0);
          // init
          const allProps = GRID_ATTRS.reduce((acc, prop) => {
            return acc.concat(propMap(prop));
          }, []);

          allProps.forEach(p => {
            if (p.type === "attrTween") {
              const tempP = Object.assign({}, p, { type: "attr" });
              initialGrids[tempP.type](getStyle(tempP.val), id =>
                enumerator.getPropVal(tempP, getValues, 0, id)
              );
            } else if (p.type === "text") {
              initialGrids[p.type](id =>
                enumerator.getPropVal(p, getValues, 0, id)
              );
            } else {
              initialGrids[p.type](getStyle(p.val), id =>
                enumerator.getPropVal(p, getValues, 0, id)
              );
            }
          });

          const grids = gridG.selectAll("line").transition();
          const timings = enumStepComputeTiming(enumerator, step.timing);

          allProps.forEach(p => {
            if (p.type === "attr") {
              grids.attrTween(p.val, d => {
                return enumerator.interpolateAlongEnumMaker(p, getValues)(d);
              });
            } else if (p.type === "text") {
              grids.tween("text", function(d) {
                const textInterpolator = enumerator.interpolateAlongEnumMaker(
                  p,
                  getValues
                )(d);
                return function(t) {
                  this.innerHTML = textInterpolator(t);
                };
              });
            } else if (p.type === "style") {
              grids.styleTween(getStyle(p.val), d => {
                return enumerator.interpolateAlongEnumMaker(p, getValues)(d);
              });
            }
          });

          // interpolate them
          grids
            .duration((d, i) => timings[i].duration)
            .delay((d, i) => timings[i].delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done(["grid", "all"], () => {
                resolve();
              });
            });
        } else {
          let grids = gridG.selectAll("line");
          const currData = step.currData.grid;
          const newData = step.nextData.grid;
          const joinKey = joinKeyGen("grid");
          const timings = computeTiming(
            currData,
            newData,
            step.timing,
            joinKey,
            joinSet
          );
          const prevData = d3.local();
          grids.each(function(d) {
            prevData.set(this, d);
          });
          grids = grids.data(newData, d => joinKey(d));
          let enterGridI = grids.enter().append("line");
          fetchAttributes(
            enterGridI,
            GRID_ATTRS,
            // scales.initial[scName] ? scales.initial : scales.final,
            step.sameDomainDimension
              ? { primary: scales.initial, secondary: scales.final }
              : { primary: scales.final, secondary: scales.initial },
            signals.initial,
            encodes.initial.enter
          );

          if (enterGridI.data().length <= 0) {
            enterGridI = grids.filter(d => joinSet(d) === "enter");
          }

          const enterGridF = enterGridI.transition();
          fetchAttributes(
            enterGridF,
            GRID_ATTRS,
            scales.final,
            signals.final,
            encodes.final.enter
          );
          enterGridF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, "final")).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, "final")).delay
            )
            .ease(easeFn)
            .end()
            .then(done(["grid", "enter"], () => resolve()));

          let exitGridI = grids.exit();
          if (exitGridI.data().length <= 0) {
            exitGridI = grids.filter(d => joinSet(d) === "exit");
          }

          const exitGridF = exitGridI.transition();

          fetchAttributes(
            exitGridF,
            GRID_ATTRS,
            step.sameDomainDimension
              ? { primary: scales.final, secondary: scales.initial }
              : { primary: scales.initial, secondary: scales.final },
            // scales.final[scName] ? scales.final : scales.initial,
            signals.final,
            encodes.final.exit,
            prevData
          );
          exitGridF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, "initial")).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, "initial")).delay
            )
            .ease(easeFn)
            .remove()
            .end()
            .then(done(["grid", "exit"], () => resolve()));

          grids = grids.filter(d => joinSet(d) === "update").transition();
          // finalize the update set of the grids
          fetchAttributes(
            grids,
            GRID_ATTRS,
            scales.final,
            signals.final,
            encodes.final.update,
            prevData
          );

          grids
            .duration(
              (d, i) => timings.find(t => t.id === joinKey(d, i)).duration
            )
            .delay((d, i) => timings.find(t => t.id === joinKey(d, i)).delay)
            .ease(easeFn)
            .end()
            .then(done(["grid", "update"], () => resolve()));
        }
      } else {
        done(["grid", "enter"], () => resolve());
        done(["grid", "exit"], () => resolve());
        done(["grid", "update"], () => resolve());
      }
      // update title
      const TITLE_ATTRS = ["title", "align"];
      const titleG = axis.selectAll(".role-axis-title");
      if (!titleG.empty() && doTitle) {
        // Assume that there is no data binding (no enter and exit)

        const encodes = step.encodes.title;
        let title = titleG.selectAll("text");

        const iData = title.data();
        let fData = [];
        if (!isRemove) {

          if (step.change.scale === false) {
            fData = iData;
          } else {
            fData = eView._runtime.data[scName].values.value[0].items.filter(
              item => item.role === "axis-title"
            )[0].items;
          }
        }

        title.data(iData, d => d.text);
        title = title.data(fData, d => d.text);
        const enterTitleI = title.enter().append("text");

        fetchAttributes(
          enterTitleI,
          TITLE_ATTRS,
          {},
          signals.initial,
          encodes.initial.enter
        );

        const enterTitleF = enterTitleI.transition();
        fetchAttributes(
          enterTitleF,
          TITLE_ATTRS,
          {},
          signals.final,
          encodes.final.enter
        );
        enterTitleF
          .duration(step.duration)
          .delay(step.delay)
          .ease(easeFn)
          .end()
          .then(done(["title", "enter"], () => resolve()));

        const exitTitleI = title.exit();
        const exitTitleF = exitTitleI.transition();
        fetchAttributes(
          exitTitleF,
          TITLE_ATTRS,
          {},
          signals.final,
          encodes.final.exit
        );
        exitTitleF
          .duration(step.duration)
          .delay(step.delay)
          .ease(easeFn)
          .end()
          .then(done(["title", "exit"], () => resolve()));

        title = title.transition();
        // update the title
        fetchAttributes(
          title,
          TITLE_ATTRS,
          {},
          signals.final,
          encodes.final.update
        );

        title
          .duration(step.duration)
          .delay(step.delay)
          .ease(easeFn)
          .end()
          .then(done(["title", "update"], () => resolve()));
      } else {
        done(["title", "enter"], () => resolve());
        done(["title", "exit"], () => resolve());
        done(["title", "update"], () => resolve());
      }

      // update domain
      const DOMAIN_ATTRS = ["domain"];

      const domainG = axis.selectAll(".role-axis-domain");
      if (!domainG.empty() && doDomain) {
        const encodes = step.encodes.domain;
        let fData = [];
        if (!isRemove) {
          fData = eView._runtime.data[scName].values.value[0].items.filter(
            item => item.role === "axis-domain"
          )[0].items;
        }
        let domain = domainG.selectAll("line").data(fData);

        const iDomainEnter = domain.enter().append("line");
        fetchAttributes(
          iDomainEnter,
          DOMAIN_ATTRS,
          {},
          signals.initial,
          encodes.initial.enter
        );
        const fDomainEnter = iDomainEnter.transition();
        fetchAttributes(
          fDomainEnter,
          DOMAIN_ATTRS,
          {},
          signals.final,
          encodes.final.enter
        );
        fDomainEnter
          .duration(step.duration)
          .delay(step.delay)
          .ease(easeFn)
          .end()
          .then(done(["domain", "enter"], () => resolve()));

        const iDomainExit = domain.exit();
        fetchAttributes(
          iDomainExit,
          DOMAIN_ATTRS,
          {},
          signals.initial,
          encodes.initial.exit
        );
        const fDomainExit = iDomainExit.transition();
        fetchAttributes(
          fDomainExit,
          DOMAIN_ATTRS,
          {},
          signals.final,
          encodes.final.exit
        );
        fDomainExit
          .duration(step.duration)
          .delay(step.delay)
          .ease(easeFn)
          .end()
          .then(done(["domain", "exit"], () => resolve()));

        // update the domain

        fetchAttributes(
          domain,
          DOMAIN_ATTRS,
          scales.initial,
          signals.initial,
          encodes.initial.update
        );
        domain = domain.transition();

        fetchAttributes(
          domain,
          DOMAIN_ATTRS,
          scales.final,
          signals.final,
          encodes.final.update
        );

        domain
          .duration(step.duration)
          .delay(step.delay)
          .ease(easeFn)
          .end()
          .then(done(["domain", "update"], () => resolve()));
      } else {
        done(["domain", "enter"], () => resolve());
        done(["domain", "exit"], () => resolve());
        done(["domain", "update"], () => resolve());
      }
    });
  }

  const LEGEND_CHANNELS = [
    "fill",
    "opacity",
    "shape",
    "size",
    "stroke",
    "strokeDash",
    "strokeWidth"
  ];
  const INITIAL_STATUS$1 = {
    update: false,
    enter: false,
    exit: false
  };

  function doneMaker$2(subComponents, legendTypes, legend) {
    const transitionStatus = subComponents.reduce((acc, curr) => {
      acc[curr] = copy(INITIAL_STATUS$1);
      return acc;
    }, {});

    return function(which, cb) {
      if (which.length === 2) {
        if (which[1] === "all") {
          transitionStatus[which[0]].update = transitionStatus[
            which[0]
          ].enter = transitionStatus[which[0]].exit = true;
        } else {
          transitionStatus[which[0]][which[1]] = true;
        }
      } else if (which === "all") {
        transitionStatus.update = transitionStatus.enter = transitionStatus.exit = true;
      } else {
        transitionStatus[which] = true;
      }

      const allDone =
        ["title", "labels", "symbols", "pairs", "entries", "legend"].reduce(
          (acc, key) => {
            return (
              acc &&
              transitionStatus[key].update &&
              transitionStatus[key].enter &&
              transitionStatus[key].exit
            );
          },
          true
        ) ||
        ["title", "labels", "gradient", "bands", "entries", "legend"].reduce(
          (acc, key) => {
            return (
              acc &&
              transitionStatus[key].update &&
              transitionStatus[key].enter &&
              transitionStatus[key].exit
            );
          },
          true
        );
      if (allDone) {
        if (legendTypes.final) {
          if (legendTypes.final === "gradient") {
            legend.selectAll(".mark-group.role-scope").remove();
          } else {
            const entryG = legend.select(".role-legend-entry > g > g");
            legend
              .select(".role-legend-entry > g > g > .mark-text.role-legend-label")
              .remove();
            entryG.select(".mark-text.role-legend-band").remove();
            entryG.select(".mark-text.role-legend-gradient").remove();
          }
        }
        cb();
      }
    };
  }

  function legendInterpolate(rawInfo, step, targetElm) {
    function joinKeyGen(subcomp) {
      return (d, i, initialOrFinal = "initial") => {
        if (!d) {
          return i.toString();
        }
        if (!d.__gemini__) {
          return typeof step.computeDatumId[subcomp] === "function"
            ? step.computeDatumId[subcomp](d, i)
            : step.computeDatumId[subcomp][initialOrFinal](d, i);
          // return step.computeDatumId[subcomp](d, i);
        }
        return getJoinInfo(d, i, step, "joinKey");
      };
    }
    const joinSet = (d, i) => {
      return d.__gemini__ ? getJoinInfo(d, i, step, "animSet") : undefined;
    };
    const eView = rawInfo.eVis.view;

    return new Promise((resolve) => {
      // Mark Interpolate Data

      const { change } = step;
      const easeFn = getEaseFn(step.timing.ease);

      let doTitle;
      let doSymbols;
      let doLabels;
      let doGradient;

      doTitle = doSymbols = doLabels = doGradient = true;

      if (change.encode === false) {
        doTitle = doSymbols = doLabels = doGradient = false;
      } else if (change.encode) {
        doTitle = !(change.encode.title === false);
        doSymbols = !(change.encode.symbols === false);
        doLabels = !(change.encode.labels === false);
        doGradient = !(change.encode.gradient === false);
      }

      const { isRemove } = step;
      const { isAdd } = step;
      let legend = d3.select(`${targetElm} .role-legend.${change.compName}`);
      const done = doneMaker$2(
        [
          "entries",
          "title",
          "labels",
          "gradient",
          "symbols",
          "legend",
          "pairs",
          "bands"
        ],
        step.legendTypes,
        legend
      );
      const { compName } = change;
      // collect the scale objects to scale the initial/final values
      const { scales } = step;
      const { signals } = step;
      const { encodes } = step;
      const { legendTypes } = step;

      // add/remove/update legend
      if (isAdd) {
        const rootMark = d3.select(`${targetElm} .mark-group.root g g `);
        const rootScene = eView.scenegraph().root;
        const sib = findAfterSibling(rootScene, change.compName);
        addLegend(
          rootMark,
          findComp(rootScene, change.compName, "legend")[0],
          sib ? `.${sib.name}` : undefined
        );
        legend = d3.selectAll(`${targetElm} .role-legend.${change.compName}`);

        done(["legend", "all"], () => resolve());
        done(["entries", "all"], () => resolve());
      } else if (isRemove) {
        const manualEncode =
          change.encode && change.encode.legend ? change.encode.legend.exit : {};
        const legendG = legend.select("g");
        const fLegendG = legendG.transition();
        fetchAttributes(
          fLegendG,
          ["group"],
          scales.final,
          signals.final,
          Object.assign({}, step.encodes.legend.final.exit, manualEncode)
        );
        fLegendG
          .duration(step.duration)
          .end()
          .then(() => {
            done(["legend", "all"], () => resolve());
            done(["entries", "all"], () => resolve());
          });
      } else {
        // update legend G
        const fLegendD = findComp(eView.scenegraph().root, compName, "legend")[0]
          .items[0];
        const encode = {
          x: { value: fLegendD.x },
          y: { value: fLegendD.y }
        };

        const legendG = legend.select("g");
        const fData = [eView._runtime.data[compName].values.value[0].datum];
        legendG.data(fData);
        const fLegendG = legendG.transition();
        fetchAttributes(
          fLegendG,
          ["group"],
          scales.final,
          signals.final,
          Object.assign({}, step.encodes.legend.update, encode)
        );
        fLegendG
          .duration(step.duration)
          .end()
          .then(() => {
            done(["legend", "all"], () => resolve());
            done(["entries", "all"], () => resolve());
          });
      }

      const scNames = {
        initial: [],
        final: []
      };
      LEGEND_CHANNELS.forEach(channel => {
        if (change.initial && change.initial[channel]) {
          scNames.initial.push(change.initial[channel]);
        }
        if (change.final && change.final[channel]) {
          scNames.final.push(change.final[channel]);
        }
      });

      let finalScaleNames = [];
      if (change.scale === true || isAdd) {
        finalScaleNames = scNames.final;
      } else if (Array.isArray(change.scale)) {
        finalScaleNames = change.scale;
      } else if (typeof change.scale === "object") {
        finalScaleNames = Object.keys(change.scale).filter(
          scName => change.scale[scName]
        );
      }

      if (step.enumerator) {
        if (legendTypes.initial !== legendTypes.final) {
          console.error("Cannot enumerate the change of the legend type.");
        }
        const legType = legendTypes.initial || legendTypes.final;
        let subComps;
        if (legType === "symbol") {
          const pairs = legend
            .select(".role-legend-entry .role-scope")
            .selectAll(".role-scope > g")
            .data(step.enumerator.pairs.allKeys, d => d);
          pairs.exit().remove();
          const enterPairSubGs = pairs
            .enter()
            .append("g")
            .append("g");
          enterPairSubGs
            .append("g")
            .attr("class", "mark-symbol role-legend-symbol")
            .append("path")
            .datum((d, i) => step.enumerator.symbols.allKeys[i]);
          enterPairSubGs
            .append("g")
            .attr("class", "mark-text role-legend-label")
            .append("text")
            .datum((d, i) => step.enumerator.labels.allKeys[i]);

          subComps = [
            {
              name: "pairs",
              selection: legend
                .select(".role-legend-entry .role-scope")
                .selectAll(".role-scope > g"),
              props: ["group"]
            },
            {
              name: "symbols",
              selection: legend
                .select(".role-legend-entry .role-scope")
                .selectAll(".role-legend-symbol > path"),
              props: ["symbol"]
            },
            {
              name: "labels",
              selection: legend
                .select(".role-legend-entry .role-scope")
                .selectAll(".role-legend-label > text"),
              props: ["text"]
            }
          ];
        } else {
          // bind allKeys
          const selection = legend
            .select(".role-legend-label")
            .selectAll("text")
            .data(step.enumerator.labels.allKeys, d => d);
          selection.exit().remove();
          selection.enter().append("text");

          subComps = [
            {
              name: "labels",
              selection: legend.select(".role-legend-label").selectAll("text"),
              svgElmType: "text",
              props: ["text"]
            }
          ];
          if (step.change.initial.isBand) {
            const selection = legend
              .select(".role-legend-band ")
              .selectAll("path")
              .data(step.enumerator.bands.allKeys, d => d);
            selection.exit().remove();
            selection.enter().append("path");

            subComps.push({
              name: "bands",
              selection: legend.select(".role-legend-band ").selectAll("path"),
              svgElmType: "path",
              props: ["rect"]
            });
          } else {
            done(["bands", "all"], () => {
              resolve();
            });
          }
          done(["gradient", "all"], () => {
            resolve();
          }); // The gradient elms cannot be enumerated.
        }

        subComps.forEach(subComp => {
          const subCompEnumerator = step.enumerator[subComp.name];
          const getValues = calculateGetValeus(
            encodes[subComp.name],
            scales,
            signals,
            computeScale,
            finalScaleNames
          );
          const allProps = subComp.props.reduce((acc, prop) => {
            return acc.concat(propMap(prop));
          }, []);

          const initials = subComp.selection.filter(
            id => ["update", "exit"].indexOf(subCompEnumerator.set(id, 0)) >= 0
          );
          allProps.forEach(p => {
            if (p.type === "attrTween") {
              const tempP = Object.assign({}, p, { type: "attr" });
              initials[tempP.type](getStyle(tempP.val), id =>
                subCompEnumerator.getPropVal(tempP, getValues, 0, id)
              );
            } else if (p.type === "text") {
              initials[p.type](id =>
                subCompEnumerator.getPropVal(p, getValues, 0, id)
              );
            } else {
              initials[p.type](getStyle(p.val), id =>
                subCompEnumerator.getPropVal(p, getValues, 0, id)
              );
            }
          });

          const subCompTransition = subComp.selection.transition();
          const timings = enumStepComputeTiming(subCompEnumerator, step.timing);
          allProps.forEach(p => {
            if (p.type === "attr") {
              subCompTransition.attrTween(p.val, d => {
                return subCompEnumerator.interpolateAlongEnumMaker(
                  p,
                  getValues
                )(d);
              });
            } else if (p.type === "attrTween") {
              subCompTransition.attrTween(p.val, function(d) {
                return subCompEnumerator.interpolateAlongEnumMaker(
                  p,
                  getValues,
                  this
                )(d);
              });
            } else if (p.type === "text") {
              subCompTransition.tween("text", function(d) {
                const textInterpolator = subCompEnumerator.interpolateAlongEnumMaker(
                  p,
                  getValues
                )(d);
                return function(t) {
                  this.innerHTML = textInterpolator(t);
                };
              });
            } else if (p.type === "style") {
              subCompTransition.styleTween(getStyle(p.val), d => {
                return subCompEnumerator.interpolateAlongEnumMaker(
                  p,
                  getValues
                )(d);
              });
            }
          });

          // interpolate them
          subCompTransition
            .duration((d, i) => timings[i].duration)
            .delay((d, i) => timings[i].delay)
            .ease(easeFn)
            .end()
            .then(() => {
              done([subComp.name, "all"], () => {
                resolve();
              });
            });
        });
      } else {
        if (
          [legendTypes.initial, legendTypes.final].indexOf("symbol") >= 0 &&
          (doSymbols || doLabels)
        ) {
          if (legendTypes.initial !== "symbol") {
            // add the frame for the symbol legend.
            legend
              .select(" .role-legend-entry > g > g")
              .append("g")
              .attr("class", "mark-group role-scope");
          }

          let pairs = legend
            .select(".role-legend-entry .role-scope")
            .selectAll(".role-scope > g");

          const joinKey = {
            pairs: joinKeyGen("pairs"),
            symbols: joinKeyGen("symbols"),
            labels: joinKeyGen("labels")
          }; // currData.symbols === currData.labels
          const nextDataLabels =
            legendTypes.final !== "symbol" ? [] : step.nextData.labels;
          const currDataLabels =
            legendTypes.initial !== "symbol" ? [] : step.currData.labels;
          const timings = {
            pairs: computeTiming(
              step.currData.pairs,
              step.nextData.pairs,
              step.timing,
              joinKey.pairs,
              joinSet
            ),
            symbols: computeTiming(
              step.currData.symbols,
              step.nextData.symbols,
              step.timing,
              joinKey.symbols,
              joinSet
            ),
            labels: computeTiming(
              currDataLabels,
              nextDataLabels,
              step.timing,
              joinKey.labels,
              joinSet
            )
          };

          const prevData = d3.local();

          pairs.selectAll(".role-legend-symbol > path").each(function(d) {
            prevData.set(this, d);
          });

          pairs = pairs.data(step.nextData.pairs, d => joinKey.pairs(d));
          // if (!isRemove && (isAnimSetSymbols.enter || isAnimSetLabels.enter)) {
          if (!isRemove && pairs.enter().data().length > 0) {
            let enterPairsI = pairs.enter().append("g");
            const enterPairsIsubG = enterPairsI.append("g");
            let enterSymbolsI = enterPairsIsubG
              .append("g")
              .attr("class", "mark-symbol role-legend-symbol")
              .append("path")
              .datum((d, i) => step.nextData.symbols[i]);
            let enterLabelsI = enterPairsIsubG
              .append("g")
              .attr("class", "mark-text role-legend-label")
              .append("text")
              .datum((d, i) => step.nextData.labels[i]);

            const actingScales = step.sameDomainDimension
              ? { primary: scales.initial, secondary: scales.final }
              : { primary: scales.final, secondary: scales.initial };

            fetchAttributes(
              enterPairsI,
              ["group"],
              actingScales,
              signals.initial,
              encodes.pairs.initial.enter
            );

            fetchAttributes(
              enterSymbolsI,
              ["symbol"],
              actingScales,
              signals.initial,
              encodes.symbols.initial.enter
            );

            fetchAttributes(
              enterLabelsI,
              ["text"],
              actingScales,
              signals.initial,
              encodes.labels.initial.enter
            );

            if (enterPairsI.data().length <= 0) {
              enterPairsI = pairs.filter(d => joinSet(d) === "enter");
            }

            const enterPairsF = enterPairsI.transition();
            fetchAttributes(
              enterPairsF,
              ["group"],
              scales.final,
              signals.final,
              encodes.pairs.final.enter
            );
            enterPairsF
              .duration(
                (d, i) =>
                  timings.pairs.find(t => t.id === joinKey.pairs(d, i, "final"))
                    .duration
              )
              .delay(
                (d, i) =>
                  timings.pairs.find(t => t.id === joinKey.pairs(d, i, "final"))
                    .delay
              )
              .ease(easeFn)
              .end()
              .then(done(["pairs", "enter"], () => resolve()));

            if (enterSymbolsI.data().length <= 0) {
              enterSymbolsI = pairs
                .selectAll(".role-legend-symbol > path")
                .filter(d => joinSet(d) === "enter");
            }
            const enterSymbolsF = enterSymbolsI.transition();
            fetchAttributes(
              enterSymbolsF,
              ["symbol"],
              scales,
              signals.final,
              encodes.symbols.final.enter
            );
            enterSymbolsF
              .duration(
                (d, i) =>
                  timings.symbols.find(
                    t => t.id === joinKey.symbols(d, i, "final")
                  ).duration
              )
              .delay(
                (d, i) =>
                  timings.symbols.find(
                    t => t.id === joinKey.symbols(d, i, "final")
                  ).delay
              )
              .ease(easeFn)
              .end()
              .then(done(["symbols", "enter"], () => resolve()));

            if (enterLabelsI.data().length <= 0) {
              enterLabelsI = pairs
                .selectAll(".role-legend-label > text")
                .filter(d => joinSet(d) === "enter");
            }
            const enterLabelsF = enterLabelsI.transition();
            fetchAttributes(
              enterLabelsF,
              ["text"],
              scales.final,
              signals.final,
              encodes.labels.final.enter
            );
            enterLabelsF
              .duration(
                (d, i) =>
                  timings.labels.find(t => t.id === joinKey.labels(d, i, "final"))
                    .duration
              )
              .delay(
                (d, i) =>
                  timings.labels.find(t => t.id === joinKey.labels(d, i, "final"))
                    .delay
              )
              .ease(easeFn)
              .end()
              .then(done(["labels", "enter"], () => resolve()));
          } else {
            done(["pairs", "enter"], () => resolve());
            done(["symbols", "enter"], () => resolve());
            done(["labels", "enter"], () => resolve());
          }

          // if (!isAdd && (isAnimSetSymbols.exit || isAnimSetLabels.exit)) {
          if (!isAdd && pairs.exit().data().length > 0) {
            let exitPairsI = pairs.exit();
            if (exitPairsI.data().length <= 0) {
              exitPairsI = pairs.filter(d => joinSet(d) === "exit");
            }
            const actingScales = step.sameDomainDimension
              ? { primary: scales.final, secondary: scales.initial }
              : { primary: scales.initial, secondary: scales.final };

            const exitPairsF = exitPairsI.transition();
            fetchAttributes(
              exitPairsF,
              ["group"],
              actingScales,
              signals.final,
              encodes.pairs.final.exit
            );
            exitPairsF
              .duration(
                (d, i) =>
                  timings.pairs.find(t => t.id === joinKey.pairs(d, i, "initial"))
                    .duration
              )
              .delay(
                (d, i) =>
                  timings.pairs.find(t => t.id === joinKey.pairs(d, i, "initial"))
                    .delay
              )
              .ease(easeFn)
              .remove()
              .end()
              .then(done(["pairs", "exit"], () => resolve()));

            const exitSymbolsI = exitPairsI.selectAll(
              ".role-legend-symbol > path"
            );
            const exitSymbolsF = exitSymbolsI.transition();
            fetchAttributes(
              exitSymbolsF,
              ["symbol"],
              Object.assign({}, scales, {
                primary: scales.final,
                secondary: scales.initial
              }),
              signals.final,
              encodes.symbols.final.exit
            );
            exitSymbolsF
              .duration(
                (d, i) =>
                  timings.symbols.find(
                    t => t.id === joinKey.symbols(d, i, "initial")
                  ).duration
              )
              .delay(
                (d, i) =>
                  timings.symbols.find(
                    t => t.id === joinKey.symbols(d, i, "initial")
                  ).delay
              )
              .ease(easeFn)
              .remove()
              .end()
              .then(done(["symbols", "exit"], () => resolve()));

            const exitLabelsI = exitPairsI.selectAll(".role-legend-label > text");
            const exitLabelsF = exitLabelsI.transition();
            fetchAttributes(
              exitLabelsF,
              ["text"],
              actingScales,
              signals.final,
              encodes.labels.final.exit
            );
            exitLabelsF
              .duration(
                (d, i) =>
                  timings.labels.find(
                    t => t.id === joinKey.labels(d, i, "initial")
                  ).duration
              )
              .delay(
                (d, i) =>
                  timings.labels.find(
                    t => t.id === joinKey.labels(d, i, "initial")
                  ).delay
              )
              .ease(easeFn)
              .remove()
              .end()
              .then(done(["labels", "exit"], () => resolve()));
          } else {
            done(["pairs", "exit"], () => resolve());
            done(["labels", "exit"], () => resolve());
            done(["symbols", "exit"], () => resolve());
          }

          if (pairs.data().length > 0) {
            // if ((isAnimSetSymbols.update || isAnimSetLabels.update) && pairs.data().length > 0) {
            const updatePairsF = pairs
              .filter(d => joinSet(d) === "update")
              .transition();
            // finalize the update set of the pairs
            fetchAttributes(
              updatePairsF,
              ["group"],
              scales.final,
              signals.final,
              encodes.pairs.final.update
            );

            updatePairsF
              .duration(
                (d, i) =>
                  timings.pairs.find(t => t.id === joinKey.pairs(d, i)).duration
              )
              .delay(
                (d, i) =>
                  timings.pairs.find(t => t.id === joinKey.pairs(d, i)).delay
              )
              .ease(easeFn)
              .end()
              .then(done(["pairs", "update"], () => resolve()));

            const updateSymbolsI = pairs
              .select(".role-legend-symbol > path")
              .datum((d, i) => step.nextData.symbols[i]);
            const updateSymbolsF = updateSymbolsI.transition();
            fetchAttributes(
              updateSymbolsF,
              ["symbol"],
              scales,
              signals.final,
              {
                initial: encodes.symbols.initial.update,
                final: encodes.symbols.final.update
              },
              prevData
            );
            updateSymbolsF
              .duration(
                (d, i) =>
                  timings.symbols.find(t => t.id === joinKey.symbols(d, i))
                    .duration
              )
              .delay(
                (d, i) =>
                  timings.symbols.find(t => t.id === joinKey.symbols(d, i)).delay
              )
              .ease(easeFn)
              .end()
              .then(done(["symbols", "update"], () => resolve()));

            const updateLabelsI = pairs
              .select(".role-legend-label > text")
              .datum((d, i) => step.nextData.labels[i]);
            const updateLabelsF = updateLabelsI.transition();
            fetchAttributes(
              updateLabelsF,
              ["text"],
              scales.final,
              signals.final,
              encodes.labels.final.update
            );
            updateLabelsF
              .duration(
                (d, i) =>
                  timings.labels.find(t => t.id === joinKey.labels(d, i)).duration
              )
              .delay(
                (d, i) =>
                  timings.labels.find(t => t.id === joinKey.labels(d, i)).delay
              )
              .ease(easeFn)
              .end()
              .then(done(["labels", "update"], () => resolve()));
          } else {
            done(["pairs", "update"], () => resolve());
            done(["symbols", "update"], () => resolve());
            done(["labels", "update"], () => resolve());
          }
        }
        if (
          [legendTypes.initial, legendTypes.final].indexOf("gradient") >= 0 &&
          (doGradient || doLabels)
        ) {
          const entryG = legend.select(" .role-legend-entry > g > g");
          if (legendTypes.initial !== "gradient") {
            // add the frame for the symbol legend.
            entryG.append("g").attr("class", "mark-text role-legend-label");

            if (step.change.final.isBand) {
              entryG.append("g").attr("class", "mark-rect role-legend-band");
            } else {
              entryG.append("g").attr("class", "mark-rect role-legend-gradient");
            }
          }

          if (step.change.initial.isBand && !step.change.final.isBand ) {
            entryG.append("g").attr("class", "mark-rect role-legend-gradient");
          } else if (!step.change.initial.isBand && step.change.final.isBand) {
            entryG.append("g").attr("class", "mark-rect role-legend-band");
          }

          const labelG = legend.select(
            " .role-legend-entry > g > g > .role-legend-label"
          );
          if (doLabels && !labelG.empty()) {
            gradientSubComp("labels", labelG, "text", ["text"]);
          } else {
            done(["labels", "all"], () => resolve());
          }

          const gradientG = legend.select(".role-legend-gradient");
          if (doGradient && !gradientG.empty()) {
            gradientSubComp("gradient", gradientG, "path", ["gradient"]);
          } else {
            done(["gradient", "all"], () => resolve());
          }

          const bandsG = legend.select(".role-legend-band");
          if (doGradient && !bandsG.empty()) {
            gradientSubComp("bands", bandsG, "path", ["rect"]);
          } else {
            done(["bands", "all"], () => resolve());
          }
        }
      }

      // Title
      const titleG = legend.select(".role-legend-title");
      if (!titleG.empty() && doTitle) {
        let title = titleG.selectAll("text");


        const joinKey = joinKeyGen("title");
        const timings = computeTiming(
          step.currData.title,
          step.nextData.title,
          step.timing,
          joinKey,
          joinSet
        );

        title = title.data(step.nextData.title, d => d.text);
        const enterTitleI = title.enter().append("text");

        fetchAttributes(
          enterTitleI,
          ["title", "align"],
          {},
          signals.initial,
          encodes.title.initial.enter
        );


        const enterTitleF = enterTitleI.transition();
        fetchAttributes(
          enterTitleF,
          ["title", "align"],
          {},
          signals.final,
          encodes.title.final.enter
        );
        enterTitleF
          .duration(
            (d, i) =>
              timings.find(t => t.id === joinKey(d, i, "final")).duration
          )
          .delay(
            (d, i) => timings.find(t => t.id === joinKey(d, i, "final")).delay
          )
          .ease(easeFn)
          .end()
          .then(done(["title", "enter"], () => resolve()));




        const exitTitleI = title.exit();
        const exitTitleF = exitTitleI.transition();
        fetchAttributes(
          exitTitleF,
          ["title", "align"],
          {},
          signals.final,
          encodes.title.final.exit
        );
        exitTitleF
          .duration(
            (d, i) =>
              timings.find(t => t.id === joinKey(d, i, "initial")).duration
          )
          .delay(
            (d, i) => timings.find(t => t.id === joinKey(d, i, "initial")).delay
          )
          .ease(easeFn)
          .remove()
          .end()
          .then(done(["title", "exit"], () => resolve()));




        title = title.transition();
        // update the title
        fetchAttributes(
          title,
          ["title", "align"],
          {},
          signals.final,
          encodes.title.final.update
        );

        title
          .duration(
            (d, i) => timings.find(t => t.id === joinKey(d, i)).duration
          )
          .delay((d, i) => timings.find(t => t.id === joinKey(d, i)).delay)
          .ease(easeFn)
          .end()
          .then(done(["title", "update"], () => resolve()));

      }


      function gradientSubComp(
        subCompName,
        subCompG,
        subCompSvgElmType,
        subCompProps
      ) {
        const prevData = d3.local();
        let subCompSelection = subCompG.selectAll(subCompSvgElmType);

        const joinKey = joinKeyGen(subCompName);
        const nextData =
          subCompName === "labels" && legendTypes.final !== "gradient"
            ? []
            : step.nextData[subCompName];
        const currData =
          subCompName === "labels" && legendTypes.initial !== "gradient"
            ? []
            : step.currData[subCompName];
        const timings = computeTiming(
          currData,
          nextData,
          step.timing,
          joinKey,
          joinSet
        );
        subCompSelection.each(function(d) {
          prevData.set(this, d);
        });
        subCompSelection = subCompSelection.data(nextData, (d, i) =>
          joinKey(d, i)
        );

        // if (!isRemove && isAnimSet.enter) {
        if (!isRemove && subCompSelection.enter().data().length > 0) {
          let enterSubCompI = subCompSelection.enter().append(subCompSvgElmType);

          fetchAttributes(
            enterSubCompI,
            subCompProps,
            step.sameDomainDimension
              ? { primary: scales.initial, secondary: scales.final }
              : { primary: scales.final, secondary: scales.initial },
            signals.initial,
            encodes[subCompName].initial.enter
          );

          if (enterSubCompI.data().length <= 0) {
            enterSubCompI = subCompG
              .selectAll(subCompSvgElmType)
              .filter(d => joinSet(d) === "enter");
          }
          const enterSubCompF = enterSubCompI.transition();
          fetchAttributes(
            enterSubCompF,
            subCompProps,
            scales,
            signals.final,
            encodes[subCompName].final.enter,
            prevData
          );
          enterSubCompF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, "final")).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, "final")).delay
            )
            .ease(easeFn)
            .end()
            .then(done([subCompName, "enter"], () => resolve()));
        } else {
          done([subCompName, "enter"], () => resolve());
        }

        // if (!isAdd && isAnimSet.exit) {
        if (!isAdd && subCompSelection.exit().data().length > 0) {
          const exitSubCompI = subCompSelection.exit();
          const exitSubCompF = exitSubCompI.transition();
          fetchAttributes(
            exitSubCompF,
            subCompProps,
            step.sameDomainDimension
              ? { primary: scales.final, secondary: scales.initial }
              : { primary: scales.initial, secondary: scales.final },
            signals.final,
            encodes[subCompName].final.exit,
            prevData
          );
          exitSubCompF
            .duration(
              (d, i) =>
                timings.find(t => t.id === joinKey(d, i, "initial")).duration
            )
            .delay(
              (d, i) => timings.find(t => t.id === joinKey(d, i, "initial")).delay
            )
            .ease(easeFn)
            .remove()
            .end()
            .then(done([subCompName, "exit"], () => resolve()));
        } else {
          done([subCompName, "exit"], () => resolve());
        }

        // if ((isAnimSet.update) && subCompSelection.data().length > 0) {
        if (subCompSelection.data().length > 0) {
          const updateSubCompF = subCompSelection.transition();
          let modifiedSubCompProps = subCompName === "gradient"
            ? [{ name: "gradient", excludes: [{ type: "style", val: "fill" }] }]
            : subCompProps;


          fetchAttributes(
            updateSubCompF,
            modifiedSubCompProps,
            scales,
            signals.final,
            {
              initial: encodes[subCompName].initial.update,
              final: encodes[subCompName].final.update
            },
            prevData
          );
          if (subCompName === "gradient") {
            updateGradientFill(subCompSelection, step);
          }



          updateSubCompF
            .duration(
              (d, i) => timings.find(t => t.id === joinKey(d, i)).duration
            )
            .delay((d, i) => timings.find(t => t.id === joinKey(d, i)).delay)
            .ease(easeFn)
            .end()
            .then(done([subCompName, "update"], () => resolve()));
        } else {
          done([subCompName, "update"], () => resolve());
        }
      }
    });
  }
  function updateGradientFill(gradCompSelection, step) {
    const url = gradCompSelection.node().style.fill.replace(/^url\(['"]/, "").replace(/['"]\)$/, "");
    const vgDatum = gradCompSelection.data()[0];
    const gradientId = url.split("#").pop();
    const gradient = d3.select(`#${gradientId}`);
    gradient.selectAll("stop")
      .data(vgDatum.fill.stops, d => (d || {}).offset)
      .transition()
      .attr("stop-color", d=> d.color)
      .duration(step.duration)
      .delay(step.delay);
    gradient.transition()
      .attr("x1", vgDatum.fill.x1)
      .attr("x2", vgDatum.fill.x2)
      .attr("y1", vgDatum.fill.y1)
      .attr("y2", vgDatum.fill.y2)
      .duration(step.duration)
      .delay(step.delay);

  }
  function addLegend(d3Selection, newLegendScene) {
    const compName = newLegendScene.name;
    const elem = svgRender(newLegendScene).getElementsByClassName(
      "role-legend"
    )[0];
    d3Selection.node().appendChild(elem);
    const { datum } = newLegendScene.items[0];
    // after adding the rendered result, delete the items to re-encode according to `encodes`.

    if (datum.title) {
      d3Selection.select(`.${compName} .role-legend-title text`).remove();
    }
    if (datum.type === "symbol") {
      d3Selection
        .selectAll(`.${compName} .role-legend-entry .role-scope > g`)
        .remove();
    } else {
      d3Selection
        .selectAll(`.${compName} .role-legend-entry .role-legend-label > text`)
        .remove();
      d3Selection
        .selectAll(`.${compName} .role-legend-entry .role-legend-gradient > path`)
        .remove();
      d3Selection
        .selectAll(`.${compName} .role-legend-entry .role-legend-band > path`)
        .remove();
    }

    return d3Selection;
  }

  function viewInterpolate(rawInfo, step, targetElm) {
    const animVis = targetElm;

    return new Promise((resolve) => {
      const easeFn = getEaseFn(step.timing.ease);

      if (step.change.signal === false) {
        resolve();
      }

      const view = d3.select(`${animVis} svg`);
      const svgEncode = step.encodes.final.svg;
      // update svg
      // When just applying attr("width", ...), the size of the chart jitters.
      view
        .transition()
        .tween("resize", function() {
          const w = d3.interpolate(
            this.getAttribute("width"),
            svgEncode.width.value
          );
          const h = d3.interpolate(
            this.getAttribute("height"),
            svgEncode.height.value
          );
          return function(t) {
            const _w = Math.round(w(t) * 1) / 1;
            const _h = Math.round(h(t) * 1) / 1;
            this.setAttribute("width", _w);
            this.setAttribute("height", _h);
            this.setAttribute("viewBox", `0 0 ${_w} ${_h}`);
          };
        })
        .duration(step.duration)
        .delay(step.delay)
        .ease(easeFn)
        .end()
        .then(() => {
          resolve();
        });

      // update svg > g
      view
        .select("g")
        .transition()
        .attr(
          "transform",
          transformItem({ x: svgEncode.x.value, y: svgEncode.y.value })
        )
        .duration(step.duration)
        .delay(step.delay)
        .ease(easeFn);

      // update background
      let root = view.select(".root g > .background");
      const rootEncode = step.encodes.final.root;
      const fDatum = Object.keys(rootEncode).reduce((fDatum, key) => {
        fDatum[key] = rootEncode[key].value;
        return fDatum;
      }, {});
      root = root.data([fDatum]).transition();
      fetchAttributes(
        root,
        ["background", "fill", "stroke"],
        {},
        step.signals.final,
        rootEncode
      );

      root
        .duration(step.duration)
        .delay(step.delay)
        .ease(easeFn);

      // update frame
    });
  }

  const LIBRARY = {
    legend: legendInterpolate,
    axis: axisInterpolate,
    mark: {
      interpolate: {
        others: markInterpolate,
        areaLine: areaLineInterpolate
      },
      marktypeChange
    },
    view: viewInterpolate,
    pause: step => {
      return new Promise((resolve) => {
        setTimeout(function() {
          resolve();
        }, step.duration + step.delay);
      });
    }
  };
  function Actuator(step) {
    let template;
    const { marktypes } = step;
    if (step.compType === "mark") {
      if (
        marktypes.final &&
        marktypes.initial &&
        marktypes.initial !== step.marktypes.final
      ) {
        template = LIBRARY.mark.marktypeChange;
      } else if (
        isLinearMarktype(marktypes.initial) || isLinearMarktype(marktypes.final)
      ) {
        template = LIBRARY.mark.interpolate.areaLine;
      } else {
        template = LIBRARY.mark.interpolate.others;
      }
    } else {
      template = LIBRARY[step.compType];
    }

    return template;
  }

  async function marktypeChange(rawInfo, step, targetElm) {
    const mTypeI = step.marktypes.initial;
    const mTypeF = step.marktypes.final;
    if ( isLinearMarktype(mTypeF) && isLinearMarktype(mTypeI)) {
      return LIBRARY.mark.interpolate.areaLine(rawInfo, step, targetElm);
    }
    if (
      ( isLinearMarktype(mTypeI) && ["rule", "rect", "symbol", "text"].indexOf(mTypeF) >= 0) ||
      ( isLinearMarktype(mTypeF) && ["rule", "rect", "symbol", "text"].indexOf(mTypeI) >= 0)
    ) {
      return Promise.all([
        LIBRARY.mark.interpolate.others(rawInfo, step, targetElm),
        LIBRARY.mark.interpolate.areaLine(rawInfo, step, targetElm)
      ]);
    }
    return LIBRARY.mark.interpolate.others(rawInfo, step, targetElm);
  }

  async function autoScaleOrder(extendedSchedule, resolves, rawInfo) {
    const mainTimeline = extendedSchedule.getTimeline(":main");

    let extendedTimeline = await attachStates(mainTimeline, rawInfo);
    const scaleOrderResovles = resolves.filter(r => r.autoScaleOrder),
      scheduleAlternator = extendedSchedule.getTimelineAlternator(scaleOrderResovles);

    while (!validateScaleOrder(scaleOrderResovles, extendedTimeline)) {
      const altTimeline = scheduleAlternator();
      if (!altTimeline) {
        extendedTimeline = await attachStates(mainTimeline, rawInfo);
        break;
      }
      extendedTimeline = await attachStates(altTimeline, rawInfo);
    }
    return extendedTimeline;
  }

  function validateScaleOrder(resolves, timeline) {
    let valid = true;
    resolves.forEach(resolve => {
      resolve.autoScaleOrder.forEach(compName => {
        const foundTrack = timeline.find(track => track.compName === compName);
        if (foundTrack && foundTrack.scaleOrderValid === false) {
          valid = false;
        }
      });
    });
    return valid;
  }

  class AnimationSequence {

    constructor(animations) {
      this.animations = animations;
      this.status = "ready";
      this.specs = animations.map(anim => anim.spec);
      this.logs = [];
      this.rawInfos = animations.map(anim => anim.rawInfo);
    }

    log(timestamp, message, info) {
      if (typeof message === "string" && typeof timestamp === "number") {
        this.logs.push({
          timestamp,
          message,
          info
        });
      }
      return this.logs;
    }

    async play (targetElm) {
      // play and return the promsie
      const globalSTime = new Date();


      for (let i = 0; i < this.animations.length; i++) {
        const animation = this.animations[i];
        this.log(new Date() - globalSTime, `Start the ${i}-th animated transition.`);
        await animation.play(targetElm);
        if (i < (this.animations.length - 1)) {
          const target = document.querySelector(targetElm);
          target.textContent = "";
          target.append(animation.rawInfo.eVis.htmlDiv);
        }
      }
    }
  }

  function vl2vg4gemini(vlSpec) {
    let vgSpec = compile$2(vlSpec).spec;
    vgSpec.axes = mergeDuplicatedAxes(vgSpec.axes);
    appendNamesOnGuides(vgSpec);
    return vgSpec;
  }


  function castVL2VG(vlSpec) {
    if (vlSpec && vlSpec.$schema && vlSpec.$schema.indexOf("https://vega.github.io/schema/vega-lite") >= 0){
      return vl2vg4gemini(vlSpec)
    }
    return vlSpec
  }


  function appendNamesOnGuides(vgSpec){
    if (vgSpec.axes) {
      vgSpec.axes.forEach(axis => {
        if (!axis.encode) {
          axis.encode = {axis: {name: axis.scale}};
        } else {
          axis.encode.axis = { ...axis.encode.axis, name: axis.scale };
        }
      });
    }
    if (vgSpec.legends) {
      vgSpec.legends.forEach((legend, i) => {
        if (!legend.encode) {
          legend.encode = {legend: {name: `legend${i}`}};
        } else {
          legend.encode.legend = Object.assign({}, legend.encode.legend, {name: `legend${i}`});
        }
      });
    }
  }


  function mergeDuplicatedAxes(vegaAxes) {
    if (!vegaAxes || vegaAxes.length <= 0) {
      return [];
    }
    let axesScales = vegaAxes.filter(a => a.grid).map(a => a.scale);

    return d3.rollups(vegaAxes,
      axes => {
        let axisWithGrid = axes.find(a => a.grid);
        let axisWithoutGrid = { ...axes.find(a => !a.grid) };

        if (axisWithGrid) {
          axisWithoutGrid.grid = true;
          if (axisWithGrid.gridScale) {
            axisWithoutGrid.gridScale = axisWithGrid.gridScale;
          }
          axisWithoutGrid.zindex = 0;
        }
        return axisWithoutGrid;
      },
      axis => axis.scale
    ).map(d => d[1])
     .sort((a,b) => (axesScales.indexOf(a.scale) - axesScales.indexOf(b.scale)));
  }

  function attachAnimTemplates(schedule) {
    schedule.forEach(track => {
      track.steps = track.steps.map(step => {
        const template = Actuator(step);
        if (!template) {
          console.error(
            `There is no such animation template for ${step.compType}.`
          );
        }

        step.template = template;
        return step;
      });
    });
    return schedule;
  }

  class Gemini {

    static async animateSequence(visSequence, animSpecs) {
      // 1) compile the each hop
      const views = new Array(visSequence.length);
      const animations = [];
      for (let i = 1; i < visSequence.length; i++) {
        const sSpec = castVL2VG(visSequence[i-1]);
        const eSpec = castVL2VG(visSequence[i]);
        const gemSpec = animSpecs[i-1];
        const sDiv = document.createElement("div");
        const eDiv = document.createElement("div");
        const sView = await new vega.View(vega.parse(sSpec), {
          renderer: "svg"
        }).runAsync();
        const eView = await new vega.View(vega.parse(eSpec), {
          renderer: "svg"
        }).runAsync();

        // create ones for replacing divs.
        await new vega.View(vega.parse(sSpec), {
          renderer: "svg"
        }).initialize(sDiv).runAsync();
        await new vega.View(vega.parse(eSpec), {
          renderer: "svg"
        }).initialize(eDiv).runAsync();

        const rawInfo = {
          sVis: { view: sView, spec: sSpec, htmlDiv: sDiv },
          eVis: { view: eView, spec: eSpec, htmlDiv: eDiv }
        };


        animations.push(await _animate(gemSpec, rawInfo));

        if (i===1 && !views[i-1]){
          views[i-1] = sView;
        }      if (!views[i]){
          views[i] = eView;
        }    }

      return new AnimationSequence(animations);
    }
    static async animate(startVisSpec, endVisSpec, geminiSpec) {
      const sSpec = castVL2VG(startVisSpec), eSpec = (endVisSpec);
      const eView = await new vega.View(vega.parse(eSpec), {
        renderer: "svg"
      }).runAsync();

      const sView = await new vega.View(vega.parse(sSpec), {
        renderer: "svg"
      }).runAsync();

      const rawInfo = {
        sVis: { view: sView, spec: sSpec },
        eVis: { view: eView, spec: eSpec }
      };


      return await _animate(geminiSpec, rawInfo);
    }
  }
  async function _animate(gemSpec, rawInfo){
    const { schedule, resolves } = parse$1(gemSpec, rawInfo);
    schedule.tracks = attachChanges(rawInfo, schedule.tracks);
    const finalTimeline = await autoScaleOrder(schedule, resolves, rawInfo);

    return new Animation(attachAnimTemplates(finalTimeline), rawInfo, gemSpec);
  }

  const MIN_POS_DELTA = 3;
  const CHANNEL_TO_ATTRS = [
    { channel: "x", attrs: ["x", "x2", "xc", "width"] },
    { channel: "y", attrs: ["y", "y2", "yc", "height"] },
    { channel: "color", attrs: ["stroke", "fill"] },
    { channel: "shape", attrs: ["shape"] },
    { channel: "size", attrs: ["size"] },
    { channel: "opacity", attrs: ["opacity"] },
    { channel: "text", attrs: ["text"] },
    { channel: "others", attrs: ["tooltip", "define", "strokeWidth"] }
  ];
  const CHANNELS$1 = ["x", "y", "color", "shape", "size", "opacity", "text"];

  const CHANNEL_TO_ATTRS_OBJ = {
    x: ["x", "x2", "xc", "width"],
    y: ["y", "y2", "yc", "height"],
    color: ["stroke", "fill"],
    shape: ["shape"],
    size: ["size"],
    opacity: ["opacity"],
    text: ["text"],
    others: ["tooltip", "define", "strokeWidth"]
  };

  function getSubEncodeByChannel(encode, channel) {
    const subEncode = {};
    if (channel === "others") {
      const otherEncode = copy(encode);
      CHANNEL_TO_ATTRS.reduce((channelRelatedAttrs, ch2Attrs) => {
        return (channelRelatedAttrs = channelRelatedAttrs.concat(ch2Attrs.attrs));
      }, []).forEach(attr => {
        delete otherEncode[attr];
      });

      return otherEncode;
    }

    CHANNEL_TO_ATTRS_OBJ[channel]
      // .filter(attr => encode[attr])
      .forEach(attr => {
        subEncode[attr] = encode[attr];
      });
    return subEncode;
  }
  function getCoreAttr(subEncode, channel, marktype){
    if (!subEncode) {
      return;
    }
    if (channel === "color") {
      let coreAttr = ["line", "rule", "symbol"].indexOf(marktype) >= 0
        ? subEncode.stroke
        : subEncode.fill;

      if (
        coreAttr === "symbol" &&
          subEncode.fill &&
          subEncode.fill.value !== "transparent"
      ) {
        coreAttr = subEncode.fill;
      }

      return coreAttr;
    }
    if (channel==="x") {
      return subEncode.x  || subEncode.xc;
    } else if (channel==="y") {
      return subEncode.y  || subEncode.yc;
    }
    return subEncode[channel];
  }

  function setUpRecomOpt(opt) {
    let _opt = copy(opt);
    _opt.axes = _opt.axes || {};
    for (const scaleName in _opt.scales || {}) {
      _opt.axes[scaleName] = _opt.axes[scaleName] || {};
      _opt.axes[scaleName].change = _opt.axes[scaleName].change || {};
      _opt.axes[scaleName].change.scale = _opt.axes[scaleName].change.scale || {};
      if (_opt.axes[scaleName].change.scale !== false) {
        _opt.axes[scaleName].change.scale.domainDimension = _opt.scales[scaleName].domainDimension;
      }
    }
    return _opt
  }

  function detectDiffs(rawInfo, userInput = {}) {
    // 0) compare signals
    const signalDiffs = detectSignalDiffs(rawInfo);

    const matches = getChanges(
      getComponents(rawInfo.sVis.spec),
      getComponents(rawInfo.eVis.spec)
    );
    const scaleDiffs = matches
      .filter(match => match.compType === "scale")
      .reduce((scaleDiffs, match) => {
        scaleDiffs[match.compName] = match;
        scaleDiffs[match.compName].meta = detectScaleDiffs(match, rawInfo, userInput.scales);

        return scaleDiffs;
      }, {});

    const compDiffs = matches
      .filter(match => {
        return (
          ["root", "pathgroup"].indexOf(match.compName) < 0 &&
          match.compType !== "scale"
        );
      }).map(match => {
        switch (match.compType) {
        case "mark":
          match.meta = detectMarkDiffs(match, rawInfo, scaleDiffs);
          break;
        case "axis":
          match.meta = detectAxisDiffs(match, rawInfo, scaleDiffs);
          break;
        case "legend":
          match.meta = detectLegendDiffs(match, rawInfo, scaleDiffs);
          break;
        }

        return match;
      });
    const viewDiffs = detectViewDiff(rawInfo);

    // 1) should return the components
    return {
      compDiffs,
      scaleDiffs,
      signalDiffs,
      viewDiffs
    };
  }
  function appendCompScaleDiff(usedScales, scaleDiffs) {
    let compScaleDiffDetails = {}; let compScaleDiff = false;

    usedScales.forEach(scaleName => {
      compScaleDiffDetails[scaleName] = scaleDiffs[scaleName].meta;
      compScaleDiff = compScaleDiff || scaleDiffs[scaleName].meta;
    }, {});

    return compScaleDiff ? compScaleDiffDetails : false;
  }
  function detectMarkDiffs(match, rawInfo, scaleDiffs) {
    let markDiffs = { view: { deltaW: 0, deltaH: 0 } };
    if (!match.initial) {
      markDiffs.add = true;
      markDiffs.view = { deltaW: MIN_POS_DELTA, deltaH: MIN_POS_DELTA };
    } else if (!match.final) {
      markDiffs.remove = true;
      markDiffs.view = { deltaW: MIN_POS_DELTA, deltaH: MIN_POS_DELTA };
    }

    // marktype
    markDiffs.marktype = !match.initial || !match.final || (match.initial.type !== match.final.type);

    // compare the encodes per channel
    const enAttrs_i = Object.keys(get(match, "initial", "encode", "update") || {});
    let enAttrs_f = Object.keys(get(match, "final", "encode", "update") || {});
    markDiffs.usedEnAttrs = enAttrs_i.concat(enAttrs_f).unique();

    markDiffs.encode = CHANNELS$1.reduce((encodeDiffs, channel) => {
      const subEncode_i = getSubEncodeByChannel(
        get(match, "initial", "encode", "update") || {},
        channel
      );
      let subEncode_f = getSubEncodeByChannel(
        get(match, "final", "encode", "update") || {},
        channel
      );

      encodeDiffs[channel] = !deepEqual(subEncode_i, subEncode_f);

      // ignoreable encode diffs (d (opacity) > 0.5 )
      if (
        channel === "opacity" &&
        (get(subEncode_i, "opacity", "value") ||
          get(subEncode_i, "opacity") === undefined) &&
        (get(subEncode_f, "opacity", "value") ||
          get(subEncode_f, "opacity") === undefined)
      ) {
        const opacityVal_i = get(subEncode_i, "opacity", "value") || 1.0;
        let opacityVal_f = get(subEncode_f, "opacity", "value") || 1.0;
        if (Math.abs(opacityVal_i - opacityVal_f) < 0.5) {
          encodeDiffs.opacity = false;
        }
      }

      //
      if (markDiffs.marktype && encodeDiffs[channel]) {
        const marktype_i = get(match, "initial", "type"),
          marktype_f = get(match, "final", "type");
        let coreEnAttr_i = getCoreAttr(subEncode_i, channel, marktype_i);
        let coreEnAttr_f = getCoreAttr(subEncode_f, channel, marktype_f);

        if (deepEqual(coreEnAttr_i, coreEnAttr_f)) {
          encodeDiffs[channel] = "byMarktypeChange";
        }
      }

      //
      return encodeDiffs;
    }, {});



    // find the used scales
    let usedScales = [];
    ["update"].forEach(set => {
      const encode_i = match.initial && match.initial.encode[set];
      const encode_f = match.final && match.final.encode[set];

      [encode_i, encode_f].forEach(encode => {
        Object.keys(encode || {}).map(attr => {
          if (Array.isArray(encode[attr])) {
            usedScales = usedScales.concat(
              encode[attr].filter(ch => ch.scale).map(ch => ch.scale)
            );
          } else if (encode[attr].scale) {
            usedScales.push(encode[attr].scale);
          }
        });
      });
    });
    markDiffs.usedScales = usedScales.unique();
    markDiffs.scale = appendCompScaleDiff(markDiffs.usedScales, scaleDiffs);
    markDiffs.scNames = Object.keys(markDiffs.scale);
    markDiffs.view = {
      deltaW: markDiffs.scale.x
        ? markDiffs.scale.x.rangeDelta
        : markDiffs.view.deltaW,
      deltaH: markDiffs.scale.y
        ? markDiffs.scale.y.rangeDelta
        : markDiffs.view.deltaH
    };
    if (markDiffs.scale.y && markDiffs.scale.y.add) {
      markDiffs.view.deltaH = MIN_POS_DELTA;
    } else if (markDiffs.scale.y && markDiffs.scale.y.remove) {
      markDiffs.view.deltaH = -MIN_POS_DELTA;
    }

    if (markDiffs.scale.x && markDiffs.scale.x.add) {
      markDiffs.view.deltaW = MIN_POS_DELTA;
    } else if (markDiffs.scale.x && markDiffs.scale.x.remove) {
      markDiffs.view.deltaW = -MIN_POS_DELTA;
    }

    // Get data and compare
    // get dataComp name
    // let iDataCompName = computeHasFacet(match.initial) ? match.initial.parent.from.facet.data : match.initial.from.data,
    //   fDataCompName = computeHasFacet(match.final) ? match.final.parent.from.facet.data : match.final.from.data;

    // markDiffs.data = isDiffDataComp(
    //   findDataComp(rawInfo.sVis.spec, iDataCompName),
    //   findDataComp(rawInfo.eVis.spec, fDataCompName),
    //   rawInfo
    // );
    // if (markDiffs.data || true) {
    let iData = match.initial
      ? getMarkData(rawInfo.sVis.view, match.initial, match.compName)
      : [];
    let fData = match.final
      ? getMarkData(rawInfo.eVis.view, match.final, match.compName)
      : [];

    if (match.initial && (computeHasFacet(match.initial) || isGroupingMarktype(match.initial.type))) {
      iData = unpackData(iData);
    }
    if (match.final && (computeHasFacet(match.final) || isGroupingMarktype(match.final.type))) {
      fData = unpackData(fData);
    }
    if (!markDiffs.data) {

      iData = computeHasFacet(match.initial) ? unpackData(iData) : iData;
      fData = computeHasFacet(match.final) ? unpackData(fData) : fData;

      markDiffs.data = isDiffData(iData, fData);
    }

    // }

    return markDiffs;
  }

  function detectScaleDiffs(match, rawInfo, userInputScales = {}) {
    if (!match.initial) {
      return {add: true};
    } if (!match.final) {
      return {remove: true};
    }

    //get range diff
    let rangeDelta = 0;

    let rangeVals_i = rawInfo.sVis.view.scale(match.initial.name).range(),
      rangeVals_f = rawInfo.eVis.view.scale(match.final.name).range();

    if (!deepEqual(rangeVals_i, rangeVals_f)){
      if ((rangeVals_i.length === 2 && isNumber(rangeVals_i[0]) && isNumber(rangeVals_i[1]))
        && (rangeVals_f.length === 2 && isNumber(rangeVals_f[0]) && isNumber(rangeVals_f[1]))) {
        rangeDelta = Math.abs(rangeVals_f[0]-rangeVals_f[1]) - Math.abs(rangeVals_i[0]-rangeVals_i[1]);
      }
    }

    //get domain diff
    let domainVals_i = rawInfo.sVis.view.scale(match.initial.name).domain(),
      domainVals_f = rawInfo.eVis.view.scale(match.final.name).domain();
    let domainValueDiff = !deepEqual(domainVals_i, domainVals_f);

    //get the other diffs
    let others_i = copy(match.initial);
    delete others_i.range;
    delete others_i.domain;
    let others_f = copy(match.final);
    delete others_f.range;
    delete others_f.domain;
    let scaleDiff = !deepEqual(others_i, others_f);

    if (!scaleDiff && !domainValueDiff && rangeDelta === 0) {
      return false;
    }

    scaleDiff = {
      rangeDelta: rangeDelta,
      domainValueDiff: !deepEqual(domainVals_i, domainVals_f)
    };

    let userInputDomainDimensionDiff = get(userInputScales[match.initial.name], "domainDimension");
    scaleDiff.domainSpaceDiff = userInputDomainDimensionDiff === "diff" ? true : (
      userInputDomainDimensionDiff === "same" ? false :
        !deepEqual(match.initial.domain, match.final.domain)
    );


    if ((["band", "point", "ordinal"].indexOf(match.initial.type) >= 0) &&
      (["band", "point", "ordinal"].indexOf(match.final.type) >= 0)) {
      scaleDiff.stayDiscrete = true;
    }
    return scaleDiff;
  }

  function detectLegendDiffs(match, rawInfo, scaleDiffs) {
    const legendDiffs = {
      usedScales: [],
      view: { deltaW: 0, deltaH: 0, x: 0, y: 0 }
    };
    if (!match.initial) {
      legendDiffs.add = true;
      legendDiffs.view = {
        deltaW: MIN_POS_DELTA,
        deltaH: MIN_POS_DELTA,
        x: MIN_POS_DELTA,
        y: MIN_POS_DELTA
      };
    } else if (!match.final) {
      legendDiffs.remove = true;
      legendDiffs.view = {
        deltaW: -MIN_POS_DELTA,
        deltaH: -MIN_POS_DELTA,
        x: -MIN_POS_DELTA,
        y: -MIN_POS_DELTA
      };
    }

    const legend_i = copy(match.initial || {}); let legend_f = copy(match.final || {});

    // 1) scale diff
    [
      "fill",
      "opacity",
      "shape",
      "size",
      "stroke",
      "strokeDash",
      "strokeWidth"
    ].forEach(scale => {
      if (match.initial && match.initial[scale]) {
        legendDiffs.usedScales.push(match.initial[scale]);
      }
      if (match.final && match.final[scale]) {
        legendDiffs.usedScales.push(match.final[scale]);
      }

      delete legend_i[scale];
      delete legend_f[scale];
    }, false);
    legendDiffs.usedScales = legendDiffs.usedScales.unique();
    legendDiffs.scale = appendCompScaleDiff(legendDiffs.usedScales, scaleDiffs);
    legendDiffs.scNames = Object.keys(legendDiffs.scale);
    // 2) encode diff
    legendDiffs.encode = !deepEqual(legend_i, legend_f);

    // 3) Pos Diff
    if (match.initial && match.final) {
      const legendGDatum = {
        initial: findComp(
          rawInfo.sVis.view.scenegraph().root,
          match.compName,
          "legend"
        )[0].items[0],
        final: findComp(
          rawInfo.eVis.view.scenegraph().root,
          match.compName,
          "legend"
        )[0].items[0]
      };

      legendDiffs.view.x = legendGDatum.final.x - legendGDatum.initial.x;
      legendDiffs.view.y = legendGDatum.final.y - legendGDatum.initial.y;
    }

    return legendDiffs;
  }

  function detectAxisDiffs(match, rawInfo, scaleDiffs) {
    const axisDiffs = {
      view: { deltaW: 0, deltaH: 0, x: 0, y: 0 }
    };
    if (!match.initial) {
      axisDiffs.add = true;
      axisDiffs.view = {
        deltaW: MIN_POS_DELTA,
        deltaH: MIN_POS_DELTA,
        x: MIN_POS_DELTA,
        y: MIN_POS_DELTA
      };
    } else if (!match.final) {
      axisDiffs.remove = true;
      axisDiffs.view = {
        deltaW: -MIN_POS_DELTA,
        deltaH: -MIN_POS_DELTA,
        x: -MIN_POS_DELTA,
        y: -MIN_POS_DELTA
      };
    }
    // 1) scale diff
    axisDiffs.usedScales = [];
    if (match.initial) {
      axisDiffs.usedScales.push(match.initial.scale);
    } else if (match.final) {
      axisDiffs.usedScales.push(match.final.scale);
    }

    axisDiffs.scale = appendCompScaleDiff(axisDiffs.usedScales, scaleDiffs);
    axisDiffs.scNames = Object.keys(axisDiffs.scale);
    if (match.final && match.initial) {
      axisDiffs.view = {
        deltaW: axisDiffs.scale.x ? axisDiffs.scale.x.rangeDelta : 0,
        deltaH: axisDiffs.scale.y ? axisDiffs.scale.y.rangeDelta : 0
      };
      if (match.initial.scale === match.final.scale) {
        if (!!match.initial.grid !== !!match.final.grid) {
          if (match.final.scale === "x") {
            axisDiffs.view.deltaH = match.initial.grid
              ? -MIN_POS_DELTA
              : MIN_POS_DELTA;
          } else if (match.final.scale === "y") {
            axisDiffs.view.deltaW = match.initial.grid
              ? -MIN_POS_DELTA
              : MIN_POS_DELTA;
          }
        } else if (!!match.initial.grid && !!match.final.grid) {
          let delta =
            get(scaleDiffs, match.initial.gridScale, "meta", "rangeDelta") || 0;
          if (match.final.orient === "left" || match.final.orient === "right") {
            axisDiffs.view.deltaW = delta;
          } else {
            axisDiffs.view.deltaH = delta;
          }
        }
      }
    }

    // 2) encode diff
    const axis_i = copy(match.initial) || {}; let axis_f = copy(match.final || {});
    delete axis_i.scale;
    delete axis_f.scale;
    axisDiffs.encode = !deepEqual(axis_i, axis_f);

    // 3) Pos Diff
    if (match.initial && match.final) {
      const axisGDatum = {
        initial: findComp(
          rawInfo.sVis.view.scenegraph().root,
          match.compName,
          "axis"
        )[0].items[0],
        final: findComp(
          rawInfo.eVis.view.scenegraph().root,
          match.compName,
          "axis"
        )[0].items[0]
      };
      let fWidth = axisGDatum.final.bounds.x2 - axisGDatum.final.bounds.x1,
        iWidth = axisGDatum.initial.bounds.x2 - axisGDatum.initial.bounds.x1,
        fHeight = axisGDatum.final.bounds.y2 - axisGDatum.final.bounds.y1,
        iHeight = axisGDatum.initial.bounds.y2 - axisGDatum.initial.bounds.y1;

      axisDiffs.view.deltaW += fWidth - iWidth;
      axisDiffs.view.deltaH += fHeight - iHeight;

      axisDiffs.view.x = axisGDatum.final.x - axisGDatum.initial.x;
      axisDiffs.view.y = axisGDatum.final.y - axisGDatum.initial.y;
    }

    return axisDiffs;
  }
  function detectViewDiff(rawInfo) {
    const viewDiffs = getViewChange(rawInfo);
    const paddingDiff = viewDiffs.final.padding - viewDiffs.initial.padding;
    viewDiffs.deltaW = viewDiffs.final.viewWidth - viewDiffs.initial.viewWidth + paddingDiff;
    viewDiffs.deltaH = viewDiffs.final.viewHeight - viewDiffs.initial.viewHeight + paddingDiff;
    viewDiffs.width = {};
    viewDiffs.height = {};
    if (Math.abs(viewDiffs.deltaW) > MIN_POS_DELTA/2) {
      viewDiffs.width[viewDiffs.deltaW > 0 ? "increase" : "decrease"] = true;
    }
    if (Math.abs(viewDiffs.deltaH) > MIN_POS_DELTA/2) {
      viewDiffs.height[viewDiffs.deltaH > 0 ? "increase" : "decrease"] = true;
    }
    viewDiffs.scNames = [];

    return viewDiffs;
  }

  function detectSignalDiffs(rawInfo) {
    const signalDiffs = {
      initial: rawInfo.sVis.view._runtime.signals,
      final: rawInfo.eVis.view._runtime.signals,
      meta: {
        update: [],
        exit: [],
        enter: [],
        same: []
      }
    };
    Object.keys(signalDiffs.initial)
      .concat(Object.keys(signalDiffs.final))
      .unique()
      .forEach(sgName => {
        let sg_f = signalDiffs.final[sgName];
        let sg_i = signalDiffs.initial[sgName];
        if (!sg_f) {
          signalDiffs.meta.exit.push(sgName);
        } else if (!sg_i) {
          signalDiffs.meta.enter.push(sgName);
        } else if (!deepEqual(sg_f.value, sg_i.value)) {
          signalDiffs.meta.update.push(sgName);
        } else {
          signalDiffs.meta.same.push(sgName);
        }
      });
    return signalDiffs;
  }

  function isDiffData(iData, fData) {
    const diff = { column: false, row: false };

    let iFields = iData[0] ? Object.keys(iData[0].datum) : [];
    let fFields = fData[0] ? Object.keys(fData[0].datum) : [];
    let sharedFields = [];
    if (!deepEqual(iFields, fFields)) {
      if (iFields.containAll(fFields)) {
        diff.column = "removed";
        sharedFields = fFields;
      } else if (fFields.containAll(iFields)) {
        diff.column = "added";
        sharedFields = iFields;
      } else {
        diff.column = "changed";
        sharedFields = iFields.filter(f => fFields.indexOf(f) >= 0);
      }
    } else {
      sharedFields = iFields;
    }

    if (sharedFields.length > 0) {
      const mappedIData = iData.map(d =>
        sharedFields.map(f => d.datum[f]).join(",")
      );
      const mappedFData = fData.map(d =>
        sharedFields.map(f => d.datum[f]).join(",")
      );
      diff.row = !deepEqual(mappedIData, mappedFData);
    } else {
      diff.row = iData.length !== fData.length;
    }

    if (!diff.column && !diff.row) {
      return false;
    }
    diff.sharedFields = sharedFields;
    return diff;
  }

  // function isDiffDataComp(iDataComp, fDataComp, rawInfo) {
  //   if (iDataComp.source || fDataComp.source) {
  //     let newIDataComp = iDataComp,
  //       newFDataComp = fDataComp;
  //     if (iDataComp.source && typeof(iDataComp.source) === "string") {
  //       newIDataComp = findDataComp(rawInfo.sVis.spec, iDataComp.source);
  //       newIDataComp.transform = (newIDataComp.transform || []).concat(iDataComp.transform);
  //     }
  //     if (fDataComp.source && typeof(fDataComp.source) === "string") {
  //       newFDataComp = findDataComp(rawInfo.eVis.spec, fDataComp.source);
  //       newFDataComp.transform = (newFDataComp.transform || []).concat(fDataComp.transform);
  //     }

  //     return isDiffDataComp(newIDataComp, newFDataComp, rawInfo)
  //   }

  //   let _i = copy(iDataComp), _f = copy(fDataComp);
  //   delete _i.name;
  //   // delete _i.values;
  //   delete _f.name;
  //   // delete _f.values;
  //   if (_i.values && _f.values) {
  //     if (_i.values.length !== _f.values.length) {
  //       return true
  //     }
  //     if ( JSON.stringify(_i.values.sort()) !== JSON.stringify(_f.values.sort())){
  //       return true
  //     }

  //   }
  //   delete _i.values;
  //   delete _f.values;
  //   return !deepEqual(_i, _f);
  //   //compare all except for "name".  ("values" may take a lot of times...)
  // }

  // function findDataComp(spec, compName) {
  //   return spec.data.find(comp => comp.name === compName);
  // }

  function applyMarkDiffs(
    markDiff,
    applyingDiffs,
    rawInfo,
    extraDiffsByMarktypeChange = []
  ) {

    const markCompSummary = new MarkSummary(markDiff, rawInfo);

    applyingDiffs.forEach(diff => {
      markCompSummary.applyDiff(diff, extraDiffsByMarktypeChange);
    });
    return markCompSummary;
  }


  class MarkSummary {
    constructor(markDiff, rawInfo) {
      const vegaView = rawInfo.sVis.view;
      let data = getMarkData(
        vegaView,
        markDiff.initial,
        markDiff.compName,

      );
      let hasFacet = markDiff.initial ? computeHasFacet(markDiff.initial) : undefined;
      let isGroupingMtype = markDiff.initial ? isGroupingMarktype(markDiff.initial.type) : undefined;
      data = hasFacet || isGroupingMtype ? unpackData(data) : data;
      this.markDiff = markDiff;
      this.rawInfo = rawInfo;
      this.isEmpty = markDiff.add;
      this.marktype = get(markDiff, "initial", "type");
      this.encode = get(markDiff, "initial", "encode", "update") || {};

      this.data = {
        hasFacet,
        isGroupingMarktype: isGroupingMtype,
        fields: data[0] ? Object.keys(data[0].datum) : [],
        values: data
      };

      this.scales = markDiff.meta.usedScales.reduce((scales, scName) => {
        const scale_i = vegaView._runtime.scales[scName];
        if (scale_i) {
          scales[scName] = scale_i.value;
        }
        return scales;
      }, {});

      this.style = get(markDiff, "initial", "style");
    }

    applyDiff(diff, extraDiffsByMarktypeChange) {

      if (diff === "add") {
        this.isEmpty = true;
      }
      if (diff === "remove") {
        this.isEmpty = false;
      }
      if (diff === "marktype") {
        this.marktype = get(this.markDiff, "final", "type");
        extraDiffsByMarktypeChange.forEach(extraDiff => {
          this.applyDiff(extraDiff);
        });
      } else if (diff === "data") {
        this.data = {
          isGroupingMarktype: this.markDiff.final ? isGroupingMarktype(this.markDiff.final.type) : undefined,
          hasFacet: this.markDiff.final ? computeHasFacet(this.markDiff.final) : undefined,
        };
        let data = getMarkData(
          this.rawInfo.eVis.view,
          this.markDiff.final,
          this.markDiff.compName
        );
        data = this.data.hasFacet || this.data.isGroupingMarktype ? unpackData(data) : data;
        this.data.fields = data[0] ? Object.keys(data[0].datum) : [];
        this.data.values = data;
      } else if (diff.indexOf("encode.") >= 0) {
        const channel = diff.replace("encode.", "");
        this.encode = Object.assign(
          {},
          this.encode,
          this.markDiff.final ? getSubEncodeByChannel(this.markDiff.final.encode.update, channel) : {}
        );
      } else if (diff.indexOf("scale.") >= 0) {
        const scName = diff.replace("scale.", "");
        const scale_f = this.rawInfo.eVis.view._runtime.scales[scName];
        if (scale_f) {
          this.scales[scName] = scale_f.value;
        } else {
          delete this.scales[scName];
        }
      } else if (diff === "style") {
        this.style = get(this.markDiff, "final", "style");
      }
      return this;
    }

  }
  // Todo
  // Make Test

  function checkMarkComp(markCompSummary) {
    const { encode } = markCompSummary;
    const { marktype } = markCompSummary;
    const { data } = markCompSummary;
    const { scales } = markCompSummary;

    if (markCompSummary.isEmpty) {
      return { result: true };
    }

    // encode - marktype
    if (marktype === "rect") {
      const isXEncodeValid = containAnyAttrSet(
        [
          ["x", "x2"],
          ["x", "width"],
          ["xc", "width"]
        ],
        encode
      );
      const isYEncodeValid = containAnyAttrSet(
        [
          ["y", "y2"],
          ["y", "height"],
          ["yc", "height"]
        ],
        encode
      );
      if (!isXEncodeValid || !isYEncodeValid) {
        return { result: false, reasons: ["encode", "marktype"] };
      }
    } else if (marktype === "area") {
      const isValid =
        encode.orient && encode.orient.value === "horizontal"
          ? containAnyAttrSet(
            [
              ["x", "x2", "y"],
              ["x", "y", "width"]
            ],
            encode
          )
          : containAnyAttrSet(
            [
              ["x", "y2", "y"],
              ["x", "y", "height"]
            ],
            encode
          );

      if (!isValid) {
        return { result: false, reasons: ["encode", "marktype"] };
      }
    } else if (marktype === "line") {
      const isInValid = containAnyAttrSet(
        [ ["x2", "x"], ["y2", "y"], ["y", "height"], ["yc", "height"], ["x", "width"], ["xc", "width"] ],
        encode
      );
      if (isInValid) {
        return { result: false, reasons: ["encode", "marktype"] };
      }
    } else if (marktype === "text") {
      if (!encode.text) {
        return { result: false, reasons: ["encode", "marktype"] };
      }
    } else if (marktype === "rule") {
      if (
        !containAnyAttrSet(
          [
            ["x", "x2", "y"],
            ["y", "y2", "x"]
          ],
          encode
        )
      ) {
        return { result: false, reasons: ["encode", "marktype"] };
      }
    } else if (!marktype) {
      return { result: false, reasons: ["marktype"] };
    }

    // encode - data, encode - data - scale, encode - scale
    const attrs = Object.keys(encode);
    let valid = true;
    Object.keys(scales || {}).forEach(scName => {

      if (!attrs.find(attr => {
        if (!encode[attr]) {
          return false;
        }
        const enAttrs = Array.isArray(encode[attr]) ? encode[attr] : [ encode[attr] ];
        return enAttrs.find(enAttr => enAttr.scale === scName);
      })) {
        valid = false;
      }
    });
    if (!valid) {
      return { reasons: ["encode", "scale"], result: false };
    }

    for (let i = 0; i < attrs.length; i++) {
      const enAttrs = Array.isArray(encode[attrs[i]]) ? encode[attrs[i]] : [ encode[attrs[i]] ];
      for (let j = 0; j < enAttrs.length; j++) {
        const enAttr = enAttrs[j];
        if (enAttr && enAttr.scale) {
          if (!scales[enAttr.scale]) {
            return { reasons: ["encode", "scale"], result: false };
          }
          if (enAttr.band && scales[enAttr.scale].type !== "band") {
            return { reasons: ["encode", "scale"], result: false };
          }
        }
        if (enAttr && enAttr.field && !enAttr.field.group) {
          let field = enAttr.field;
          if (enAttr.field.parent) {
            field = enAttr.field.parent;
          }
          if (data.fields.indexOf(field) < 0) {
            return { result: false, reasons: ["encode", "data"] };
          }
          if (enAttr.scale) {
            const foundScale = scales[enAttr.scale];
            const vals = data.values.map(d => d.datum[field]);
            const scaleDomain = foundScale.domain();
            let valid = true;

            if (["band", "ordinal", "point"].indexOf(foundScale.type) >= 0) {
              // for discrete scales
              valid =
                valid &&
                vals.reduce(
                  (acc, v) => (acc = acc && scaleDomain.indexOf(v) >= 0),
                  true
                );
            } else if (foundScale.type === "linear") {
              const max = Math.max(...vals);
              const min = Math.min(...vals);
              valid = valid && scaleDomain[0] <= min && scaleDomain[1] >= max;
            } else if (foundScale.type === "time") {
              const max = Math.max(...vals);
              const min = Math.min(...vals);
              valid = valid && scaleDomain[0] <= min && scaleDomain[1] >= max;
            }

            if (!valid) {
              return { reasons: ["encode", "data", "scale"], result: false };
            }
          }
        }
      }
    }
    return { result: true };
  }

  function containAnyAttrSet(possibleAttrSets, encode) {
    return possibleAttrSets.reduce((valid, attrs) => {
      const hasAttrs = attrs.reduce(
        (hasAttrs, attr) => hasAttrs && encode[attr],
        true
      );
      return valid || hasAttrs;
    }, false);
  }

  function validate$2(pseudoTimeline, stageN) {
    return (
      // checkViewAxisConstraint(pseudoTimeline) &&
      checkViewLegendConstraint(pseudoTimeline) &&
      checkUnempty(pseudoTimeline) &&
      pseudoTimeline.concat.length === stageN &&
      checkMarkConstraint(pseudoTimeline)
    );
  }
  function checkUnempty(pseudoTl) {
    return !pseudoTl.concat.find(stage => stage.sync.length === 0);
  }

  function checkViewLegendConstraint(pseudoTl) {
    const viewChanges = {
      marks: [],
      legends: []
    };

    pseudoTl.concat.forEach((stage, i) => {
      stage.sync.forEach(pseudoStep => {
        const delta = {
          x: get(pseudoStep, "diff", "meta", "view", "x"),
          y: get(pseudoStep, "diff", "meta", "view", "y"),
          width: get(pseudoStep, "diff", "meta", "view", "deltaW"),
          height: get(pseudoStep, "diff", "meta", "view", "deltaH")
        };

        if (["legend", "mark"].indexOf(pseudoStep.diff.compType) >= 0) {
          const vc = {
            x:
              delta.x >= MIN_POS_DELTA
                ? "inc"
                : delta.x <= -MIN_POS_DELTA
                  ? "dec"
                  : false,
            y:
              delta.y >= MIN_POS_DELTA
                ? "inc"
                : delta.y <= -MIN_POS_DELTA
                  ? "dec"
                  : false,
            width:
              delta.width >= MIN_POS_DELTA
                ? "inc"
                : delta.width <= -MIN_POS_DELTA
                  ? "dec"
                  : false,
            height:
              delta.height >= MIN_POS_DELTA
                ? "inc"
                : delta.height <= -MIN_POS_DELTA
                  ? "dec"
                  : false,
            when: i
          };
          if (vc.x || vc.y || vc.width || vc.height) {
            if (pseudoStep.diff.compType === "legend") {
              vc.orient =
                get(pseudoStep, "diff", "initial", "orient") ||
                get(pseudoStep, "diff", "final", "orient") ||
                "right";
              viewChanges.legends.push(vc);
            } else {
              viewChanges.marks.push(vc);
            }
          }
        }
      });
    });
    if (viewChanges.marks.length === 0 || viewChanges.legends.length === 0) {
      return true;
    }

    for (const markViewChange of viewChanges.marks) {
      const rightLegendVCs = viewChanges.legends.filter(
        vc => vc.orient === "right"
      );
      if (rightLegendVCs.length > 0) {
        if (markViewChange.width === "inc") {
          if (
            markViewChange.when <
            Math.min(
              ...rightLegendVCs.filter(vc => vc.x === "inc").map(c => c.when)
            )
          ) {
            return false;
          }
        } else if (markViewChange.width === "dec") {
          if (
            markViewChange.when >
            Math.max(
              ...rightLegendVCs.filter(vc => vc.x === "dec").map(c => c.when)
            )
          ) {
            return false;
          }
        }
      }
      const bottomLegendVCs = viewChanges.legends.filter(
        vc => vc.orient === "bottom"
      );
      if (bottomLegendVCs.length > 0) {
        if (markViewChange.height === "inc") {
          if (
            markViewChange.when <
            Math.min(
              ...bottomLegendVCs.filter(vc => vc.y === "inc").map(c => c.when)
            )
          ) {
            return false;
          }
        } else if (markViewChange.height === "dec") {
          if (
            markViewChange.when >
            Math.max(
              ...bottomLegendVCs.filter(vc => vc.y === "dec").map(c => c.when)
            )
          ) {
            return false;
          }
        }
      }
    }

    return true;
  }

  function checkMarkConstraint(pseudoTl) {
    for (const stage of pseudoTl.concat) {
      const markPseduoSteps = stage.sync.filter(
        pseudoStep => pseudoStep.diff.compType === "mark"
      );
      for (let i = 0; i < markPseduoSteps.length; i++) {
        const pseudoStep = markPseduoSteps[i];
        if (
          (
            deepEqual(pseudoStep.factorSets.current, ["data"]) ||
            deepEqual(pseudoStep.factorSets.current, ["data", "marktype"])
          ) &&
          pseudoStep.diff.meta.data.row === false
        ) {
          return false;
        }
        /*
        if pseudoStep.factorSets.current has "data"
         && pseudoStep.diff.meta.data.row === false
         && pseudoStep.diff.initial.encode.
        */
      }
    }
    return true;
  }

  // Enuemerate a set of steps (<stageN) by splitting the diffs.
  function enumeratePseudoTimelines(diffs, stageN, rawInfo, timing) {
    // Assume: Axes and legends cannot be splitted
    // Assume: There is only one mark component. (no add/remove of the mark components)

    // 0. find the mark components.
    const markDiffs = diffs.compDiffs.filter(
      diff => diff.compType === "mark"
    );

    const enumedMarksPusedoSteps = markDiffs.map(markDiff => {
      // 1. find valid splitting factors of the mark components.
      const { allFactors, extraFactorsByMarktype } = findAllFactors(markDiff);

      // 2. enumerate by assigning a value among [0, ..., stageN -1] on each factor
      const skippingCondition = new SkippingConditions();
      const enumed = [];

      for (let i = 0; i < Math.pow(stageN, allFactors.length); i++) {
        const factorAssignment = getFactorAssignment(i, allFactors.length, stageN);

        let valid = true;
        const factorSets = [];
        for (let j = 0; j < stageN - 1; j++) {
          const applyingFactors = allFactors.filter((factor, factorId) => {
            return factorAssignment[factorId] >= stageN - j - 1;
          });

          if (skippingCondition.check(applyingFactors)) {
            valid = false;
            break;
          }

          const markCompSummary = applyMarkDiffs(
            markDiff,
            applyingFactors,
            rawInfo,
            extraFactorsByMarktype
          );
          // 3. Check if the intermediate mark components are valid. If not, exclude the enumerated steps.
          const { reasons } = checkMarkComp(markCompSummary);

          if (reasons) {
            // register a new skipping condition
            const newSkippingCondition = allFactors
              .filter(factor =>
                reasons.find(reason => factor.indexOf(reason) >= 0)
              )
              .map(factor => {
                return {factor, include: applyingFactors.indexOf(factor) >= 0};
              });
            skippingCondition.register(newSkippingCondition);

            valid = false;
            break;
          } else if (
            !factorSets.find(
              appFctrs => appFctrs.toString() === applyingFactors.toString()
            )
          ) {
            factorSets.push(applyingFactors);
          }
        }

        if (valid) {
          factorSets.push(allFactors);
          if (
            !enumed.find(
              fctrSets => fctrSets.toString() === factorSets.toString()
            )
          ) {
            enumed.push(factorSets);
          }
        }
      }

      return enumed.map(factorSets => {
        let prevFactorSet;
        return factorSets.map(factorSet => {
          let newPseudoStep = {
            diff: markDiff,
            factorSets: {
              current: prevFactorSet
                ? factorSet.exclude(prevFactorSet)
                : factorSet,
              applied: factorSet,
              all: allFactors,
              extraByMarktype: extraFactorsByMarktype
            }
          };
          prevFactorSet = factorSet;
          return newPseudoStep;
        });
      });

    });

    const axespseudoSteps = getAxisPseudoSteps(diffs);

    const legendspseudoSteps = getLegendPseudoSteps(diffs);

    let pseudoTimelines;
    if (enumedMarksPusedoSteps.length === 1) {
      pseudoTimelines = enumArraysByItems(
        enumedMarksPusedoSteps[0],
        legendspseudoSteps.concat(axespseudoSteps),
        enumTlByStep
      ).map(pseudoTl => {
        return {
          concat: pseudoTl.map(stage => {
            return { sync: Array.isArray(stage) ? stage : [stage] };
          })
        };
      });
    } else if (stageN ===1 ) {
      pseudoTimelines = [
        {
          concat: [
            {
              sync: [
                ...enumedMarksPusedoSteps.map(steps => steps[0][0]),
                ...legendspseudoSteps,
                ...axespseudoSteps
              ]
            }
          ]
        }
      ];
    }
    else {
      console.error(
        "Currently, Gemini Recommendation only supports a single mark without adding or removing."
      );
      console.error("TODO: cross join the pseudo timelines of each mark.");
    }


    pseudoTimelines = pseudoTimelines
      .map(pseudoTl => {
        pseudoTl.concat = pseudoTl.concat.map(stage => {
          let currSync = stage.sync;

          // filter empty mark pStep
          currSync = currSync.filter(pStep => {
            return (pStep.diff.compType !== "mark") ||
              (
                !(
                  (pStep.factorSets.applied.length === 0) ||
                  (pStep.factorSets.current.length === 0)
                ) &&
                !(
                  (pStep.factorSets.all.indexOf("add") >= 0) &&
                  (pStep.factorSets.applied.indexOf("add") < 0)
                ) &&
                !(
                  (pStep.factorSets.all.indexOf("remove") >= 0) &&
                  (pStep.factorSets.applied.length !== pStep.factorSets.current.length)
                )
              );
          });
          return { sync: currSync };
        });
        return pseudoTl;
    });

    pseudoTimelines = pseudoTimelines.filter(pseudoTl => validate$2(pseudoTl, stageN));
      // .map((pseudoTl, i) => appendGuideMoves(pseudoTl, axespseudoSteps, legendspseudoSteps))
    pseudoTimelines = pseudoTimelines.map(pseudoTl => appendViewDiff(pseudoTl, diffs.viewDiffs))
      .map(pseudoTl => appendGridChanges(pseudoTl))
      .map(pseudoTl => appendTiming(pseudoTl, timing));



    return pseudoTimelines;
  }

  function appendTiming(pseudoTl, timing = {}) {
    const totalDuration = timing.totalDuration || 2000;
    pseudoTl.concat.forEach(stage => {
      for (const pseudoStep of stage.sync) {
        pseudoStep.timing = {
          duration: { ratio: Math.floor(100 / pseudoTl.concat.length) / 100 }
        };

      }
    });
    pseudoTl.totalDuration = totalDuration;
    return pseudoTl;
  }
  function getLegendPseudoSteps(diffs) {
    return diffs.compDiffs
      .filter(
        diff =>
          diff.compType === "legend" &&
          (diff.meta.scale ||
            diff.meta.encode ||
            diff.meta.add ||
            diff.meta.remove ||
            Math.abs(diff.meta.view.x) - MIN_POS_DELTA > 0 ||
            Math.abs(diff.meta.view.y) - MIN_POS_DELTA > 0 ||
            Math.abs(diff.meta.view.deltaH) - MIN_POS_DELTA > 0 ||
            Math.abs(diff.meta.view.deltaW) - MIN_POS_DELTA > 0)
      )
      .reduce((steps, diff) => {
        let factors = [];
        if (diff.meta.add) {
          factors = [`add.${diff.meta.usedScales.sort().join("_")}`];
        } else if (diff.meta.remove) {
          factors = [`remove.${diff.meta.usedScales.sort().join("_")}`];
        } else {
          if (diff.meta.scale) {
            factors = factors.concat(Object.keys(diff.meta.scale).map(scName => `scale.${scName}`));
          }
          if (diff.meta.encode) {
            factors.push("encode");
          }
          if (diff.meta.view.x !== 0 || diff.meta.view.y !== 0) {
            factors.push("encode.position");
          }
        }

        // return steps.concat(
        //   factors.map(fctr => {
        //     return { diff: diff, factorSets: {current: [fctr],  all: factors} }
        //   })
        // );
        return steps.concat({ diff, factorSets: {current: factors,  all: factors} });
      }, []);
  }
  function getAxisPseudoSteps(diffs) {
    return diffs.compDiffs
      .filter(
        diff =>
          diff.compType === "axis" &&
          (diff.meta.scale ||
            diff.meta.encode ||
            diff.meta.add ||
            diff.meta.remove ||
            Math.abs(diff.meta.view.x) - MIN_POS_DELTA > 0 ||
            Math.abs(diff.meta.view.y) - MIN_POS_DELTA > 0 ||
            Math.abs(diff.meta.view.deltaH) - MIN_POS_DELTA > 0 ||
            Math.abs(diff.meta.view.deltaW) - MIN_POS_DELTA > 0)
      )
      .filter(diff => {
        if (diff.meta.remove || diff.meta.add) {
          return true;
        }

        if (diff.meta.scale[diff.meta.usedScales[0]]) {
          const scaleDiff = diff.meta.scale[diff.meta.usedScales[0]];
          return scaleDiff.rangeDelta === 0 &&
            !scaleDiff.domainValueDiff &&
            scaleDiff.stayDiscrete
            ? false
            : true;
        }
        return true;
      })
      .map(diff => {
        let factors = [];
        if (diff.meta.add) {
          factors = [`add.${diff.compName}`];
        } else if (diff.meta.remove) {
          factors = [`remove.${diff.compName}`];
        } else {
          if (diff.meta.scale) {
            factors = factors.concat(Object.keys(diff.meta.scale).map(scName => `scale.${scName}`));
            factors.push("encode");
          }

          if (diff.meta.view.x !== 0 || diff.meta.view.y !== 0) {
            factors.push("encode.position");
          }
        }
        return { diff, factorSets: {current: factors, applied: factors, all: factors} };
      });
  }


  function appendViewDiff(pseudoTl, viewDiffs) {
    const done = {
      increase: { width: false, height: false },
      decrease: { width: false, height: false }
    };
    function appendDiff(stage, incOrDec) {
      for (const which of ["width", "height"]) {
        if (
          viewDiffs[which][incOrDec] &&
          needViewDiff(stage.sync, incOrDec, which) &&
          !done[incOrDec][which]
        ) {
          const found = stage.sync.find(pStep => pStep.diff.compType === "view");
          if (found) {
            found.factorSets.current.push(which);
          } else {
            stage.sync.push({

              diff: {
                compName: viewDiffs.compName,
                compType: viewDiffs.compType,
                meta: viewDiffs
              },
              factorSets: { current: [which] }
            });
          }

          done[incOrDec][which] = true;
        }
      }

      return stage;
    }
    return {
      concat: pseudoTl.concat
        .map((stage, j) => appendDiff(stage, "increase"))
        .reverse()
        .map(stage => appendDiff(stage, "decrease"))
        .reverse()
    };
  }
  function needViewDiff(pseudoSteps, incOrDec, which) {
    for (const pseudoStep of pseudoSteps.filter(
      step => ["mark", "axis", "legend"].indexOf(step.diff.compType) >= 0
    )) {
      let deltaProp = which === "width" ? "x" : "y";
      if (pseudoStep.diff.compType === "mark") {
        deltaProp = which === "width" ? "deltaW" : "deltaH";
      } else if (pseudoStep.diff.compType === "axis") {
        if (
          ["left", "top"].indexOf(
            (pseudoStep.diff.initial || pseudoStep.diff.final).orient
          ) >= 0
        ) {
          deltaProp = which === "width" ? "deltaW" : "deltaH";
        }
      }
      let hasViwRelatedScaleDiff = true;
      if (pseudoStep.diff.compType === "mark") {
        hasViwRelatedScaleDiff =
          pseudoStep.factorSets.current.indexOf(
            which === "width" ? "scale.x" : "scale.y"
          ) >= 0;
      }

      if (
        pseudoStep.diff.meta.view[deltaProp] >= MIN_POS_DELTA &&
        incOrDec === "increase" &&
        hasViwRelatedScaleDiff
      ) {
        return true;
      }
      if (
        pseudoStep.diff.meta.view[deltaProp] <= -MIN_POS_DELTA &&
        incOrDec === "decrease" &&
        hasViwRelatedScaleDiff
      ) {
        return true;
      }
    }
    return false;
  }

  // When the size of the mark view changes, grid lines should be extended.
  function appendGridChanges(pseudoTl) {
    // Currently only one pStep is generated.
    let xAxisPStep, yAxisPStep;
    pseudoTl.concat.forEach(stage => {
      xAxisPStep = xAxisPStep || stage.sync.find(aPStep =>
        !aPStep.diff.meta.add &&
        !aPStep.diff.meta.remove &&
        aPStep.diff.compType === "axis" &&
        aPStep.diff.meta.scNames[0] === "x");
      yAxisPStep = yAxisPStep || stage.sync.find(aPStep =>
        !aPStep.diff.meta.add &&
        !aPStep.diff.meta.remove &&
        aPStep.diff.compType === "axis" &&
        aPStep.diff.meta.scNames[0] === "y");
    });

    if (!xAxisPStep && !yAxisPStep) {
      return pseudoTl;
    }
    return {
      ...pseudoTl,
      concat: pseudoTl.concat.map(stage => {
        let newStage = copy(stage);
        // if there is any mark.view change
        if ( stage.sync.find(pStep => ["mark", "axis"].indexOf(pStep.diff.compType) >= 0 && pStep.diff.meta.view.deltaH !== 0) ) {
          if (xAxisPStep && !stage.sync.find(pStep => pStep.diff.compType === "axis" && pStep.diff.meta.scNames[0] === "x")) {

            xAxisPStep.factorSets.all.push("encode.only.grid");
            let gridChangingAxisPStep = {
              ...xAxisPStep,
              factorSets: {
                all: copy(xAxisPStep.factorSets.all),
                applied: ["encode.only.grid"],
                current: ["encode.only.grid"]
              }
            };
            xAxisPStep.factorSets.applied.push("encode.only.grid");
            newStage.sync.push(gridChangingAxisPStep);
          }
        }

        if ( stage.sync.find(pStep => ["mark", "axis"].indexOf(pStep.diff.compType) >= 0 && pStep.diff.meta.view.deltaW !== 0) ) {
          if (yAxisPStep && !stage.sync.find(pStep => pStep.diff.compType === "axis" && pStep.diff.meta.scNames[0] === "y")) {
            yAxisPStep.factorSets.all.push("encode.only.grid");
            let gridChangingAxisPStep = {
              ...yAxisPStep,
              factorSets: {
                all: copy(yAxisPStep.factorSets.all),
                applied: ["encode.only.grid"],
                current: ["encode.only.grid"]
              }
            };
            yAxisPStep.factorSets.applied.push("encode.only.grid");
            newStage.sync.push(gridChangingAxisPStep);
          }
        }

        return newStage;
      })
    };

  }
  function enumTlByStep(Tl, step) {
    const newTls = [];
    for (let i = 0; i < Tl.length; i++) {
      const newTl = copy(Tl);
      if (!Array.isArray(newTl[i])) {
        newTl[i] = [newTl[i]];
      }
      const found = newTl[i].find(stp => stp.diff.compName === step.diff.compName);
      if (found) {
        found.factorSets.current = found.factorSets.current.concat(
          step.factorSets.current
        );
      } else {
        newTl[i].push(step);
      }

      newTls.push(newTl);
    }
    return newTls;
  }

  // choose the factors having diffs between initial and final.
  function findAllFactors(markDiff) {
    const allFactors = [];
    let diffInfo = markDiff.meta;
    let extraFactorsByMarktype = [];
    if (diffInfo.add) {
      allFactors.push("add");
    }

    if (diffInfo.remove) {
      allFactors.push("remove");
      return { allFactors, extraFactorsByMarktype };
    }

    if (diffInfo.marktype) {
      allFactors.push("marktype");
      extraFactorsByMarktype.push("encode.others");
    }
    if (diffInfo.data) {
      if (diffInfo.data.row !== false || diffInfo.data.column !== "removed") {
        allFactors.push("data");
      }
    }
    if (diffInfo.scale) {
      Object.keys(diffInfo.scale).forEach(scName => {
        const scaleDiff = diffInfo.scale[scName];
        if (scaleDiff) {
          allFactors.push(`scale.${scName}`);
        }
      });
    }
    Object.keys(diffInfo.encode).forEach(chName => {
      const chDiff = diffInfo.encode[chName];
      if (chDiff === true) {
        allFactors.push(`encode.${chName}`);
      } else if (chDiff === "byMarktypeChange") {
        extraFactorsByMarktype.push(`encode.${chName}`);
      }
    });
    return { allFactors, extraFactorsByMarktype };
  }

  function getFactorAssignment(i, factorLen, stageN) {
    let quotient = i;
    const assignment = new Array(factorLen);
    for (let j = 0; j < factorLen; j++) {
      assignment[j] = quotient % stageN;
      quotient = Math.floor(quotient / stageN);
    }
    return assignment;
  }

  class SkippingConditions {
    constructor() {
      this.registered = [];
    }

    register(condition) {
      this.registered.push(condition);
    }

    check(factors) {
      for (let i = 0; i < this.registered.length; i++) {
        const condition = this.registered[i];
        const result = condition.reduce((satisfying, condF) => {
          return (satisfying =
            satisfying && factors.indexOf(condF.factor) >= 0 === condF.include);
        }, true);

        if (result) {
          return true;
        }
      }
      return false;
    }
  }

  // legendspseudoSteps.map(pStep => pStep.diff.compName)
  //   .unique()
  //   .forEach(legendName => {
  //   let mergedLegendStep = mergePusedoSteps(currSync.filter(pStep => pStep.diff.compName === legendName))
  //   if (mergedLegendStep){
  //     currSync = currSync.filter(pStep => pStep.diff.compName !== legendName).concat([mergedLegendStep])
  //   }
  // });
  // function mergePusedoSteps(pSteps) {
  //   if (pSteps.length === 0) {
  //     return;
  //   }
  //   const merged = copy(pSteps[0]);
  //   merged.factorSets = {
  //     applied: pSteps.reduce((applied, pStep) => applied.concat(pStep.factorSets ? pStep.factorSets.applied : []), []),
  //     all: merged.factorSets ? merged.factorSets.all : [],
  //     extraByMarktype: merged.factorSets ? merged.factorSets.extraByMarktype : []
  //   }

  //   return merged;
  // }

  // function appendGuideMoves(pseudoTl, axespseudoSteps, legendspseudoSteps) {
  //   let bottomAxisPStep = axespseudoSteps.find(pStep =>
  //     (pStep.diff.initial && pStep.diff.initial.orient === "bottom") &&
  //     (pStep.diff.final && pStep.diff.final.orient === "bottom")
  //   );
  //   let rightLegendPStep = legendspseudoSteps.find(pStep =>
  //     (pStep.diff.initial && pStep.diff.initial.orient === "right") &&
  //     (pStep.diff.final && pStep.diff.final.orient === "right")
  //   );
  //   let bottomAxisMoved = false;
  //   pseudoTl.concat.forEach(stage => {
  //     let markPseudoSteps = stage.sync.filter(pStep => pStep.diff.compType === "mark");
  //     let widthChange = !!markPseudoSteps.find(mPseudoStep =>
  //       mPseudoStep.factorSets.current.indexOf("scale.x") >= 0 && mPseudoStep.diff.meta.view.deltaW !== 0
  //     );

  //     if (bottomAxisPStep) {
  //       let thisbottomAxisPStep = stage.sync.find(pStep => pStep.diff.compName === bottomAxisPStep.diff.compName );
  //       if (bottomAxisMoved && thisbottomAxisPStep) {
  //         thisbottomAxisPStep.factorSets.current = thisbottomAxisPStep.factorSets.current.filter(fctr => fctr !== "encode.position");
  //       }

  //       if ((markPseudoSteps.length > 0)) {
  //         let heightChange = !!markPseudoSteps.find(mPseudoStep =>
  //           mPseudoStep.factorSets.current.indexOf("scale.y") >= 0 && mPseudoStep.diff.meta.view.deltaH !== 0
  //         );
  //         if (heightChange) {
  //           // If marks height change, the bottom axis should move
  //           if (!thisbottomAxisPStep && !bottomAxisMoved) {
  //             // add axisPStep only changing axisG
  //             stage.sync.push({
  //               diff: bottomAxisPStep.diff,
  //               factorSets: {
  //                 current: ["encode.position"],
  //                 applied: ["encode.position"],
  //                 all: bottomAxisPStep.factorSets.all
  //               }
  //             })
  //           }
  //           bottomAxisMoved = true;
  //         } else {
  //           // If marks height does not change, the bottom axis should not move
  //           if (thisbottomAxisPStep && !bottomAxisMoved) {
  //             // bottomAxisPStep should not move
  //             thisbottomAxisPStep.factorSets.current = thisbottomAxisPStep.factorSets.current.filter(fctr => fctr !== "encode.position")

  //           }
  //           bottomAxisMoved = false;
  //         }
  //       } else {
  //         if (thisbottomAxisPStep) {
  //           bottomAxisMoved = true;
  //         }
  //       }
  //     }

  //   })

  //   return pseudoTl;
  //   // If marks width change, the right axis should move
  //   // If marks width change, the right legend should move

  //   // If marks width does nont change, the right axis should  not move
  //   // If marks width does not change, the right legend should not move
  // }

  function PERCEPTION_CAP(duration) {
    // if (duration < 0) {
    //   console.error("Duration cannot be negative!");
    // } else if (duration <= 0) {
    //   return 0.3
    // } else if (duration <= 667) {
    //   return 0.5
    // } else if (duration <= 1000) {
    //   return 0.8
    // } else if (duration <= 2000) {
    //   return 1.0
    // } else
    //   return 1.5
    // }
    // return 1.00 / (1 + Math.exp(-(duration-1250)/180)) + 0.4
    // return 1.00 / (1 + Math.exp(-(duration-1250)/180)) + 0.35
    return 1.4 / (1 + Math.exp(-(duration - 1200) / 300));
  }

  // Tuning for the mturk study
  // // Stimulus 1
  // stage1-rank1 > stage3-rank1, stage2-rank2, stage2-rank3
  // stage2-rank1 > stage3-rank1, stage2-rank2, stage2-rank3

  // // Stimulus 2
  // s1R1 > *

  // // Stimulus 3
  // stage1-rank1 > *
  // stage2-rank1 > stage2-rank2, stage3-rank1

  // // Stimulus 4
  // stage1-rank1 > stage2-rank3

  const sameDomain = (pseudoStep, foundFactor) => {
    return (
      get(
        pseudoStep,
        "diff",
        "meta",
        "scale",
        foundFactor.split(".")[1],
        "domainSpaceDiff"
      ) === false
    );
  };
  const diffDomain = (pseudoStep, foundFactor) => {
    return (
      get(
        pseudoStep,
        "diff",
        "meta",
        "scale",
        foundFactor.split(".")[1],
        "domainSpaceDiff"
      ) === true
    );
  };
  const noFactors = factors => {
    return function(pseudoStep) {
      for (const fctr of factors) {
        if (pseudoStep.factorSets.current.indexOf(fctr) >= 0) {
          return false;
        }
      }
      return true;
    };
  };
  const PERCEPTION_COST = {
    mark: [
      { factor: "marktype", cost: 0.3 },
      { factor: "data", cost: 0.5 },
      { factor: "scale.y", cost: 0.4, with: [sameDomain] },
      { factor: "scale.x", cost: 0.4, with: [sameDomain] },
      { factor: "scale.color", cost: 0.4, with: [sameDomain] },
      { factor: "scale.shape", cost: 0.4, with: [sameDomain] },
      { factor: "scale.size", cost: 0.4, with: [sameDomain] },
      { factor: "scale.y", cost: 0.65, without: [sameDomain] },
      { factor: "scale.x", cost: 0.65, without: [sameDomain] },
      { factor: "scale.color", cost: 0.65, without: [sameDomain] },
      { factor: "scale.shape", cost: 0.65, without: [sameDomain] },
      { factor: "scale.size", cost: 0.65, without: [sameDomain] },
      { factor: "encode.x", cost: 0.3 },
      { factor: "encode.y", cost: 0.3 },
      { factor: "encode.color", cost: 0.3 },
      { factor: "encode.shape", cost: 0.3 },
      { factor: "encode.size", cost: 0.3 },
      { factor: "encode.opacity", cost: 0.2 }
    ],
    axis: [
      // { factor: "scale.*", cost: 0.7 },
      // { factor: "add.*", cost: 1 },
      // { factor: "remove.*", cost: 1 },
      { factor: "encode", cost: 0.3 },
      { factor: "scale", cost: 0.5, with: [sameDomain] },
      { factor: "add", cost: 0.7 },
      { factor: "remove", cost: 0.7 },
      { factor: "scale", cost: 1, without: [sameDomain] }
    ],
    legend: [
      // { factor: "scale.*", cost: 0.7 },
      // { factor: "add.*", cost: 1 },
      // { factor: "remove.*", cost: 1 },
      { factor: "encode", cost: 0.3 },
      { factor: "scale", cost: 0.5, with: [sameDomain] },
      { factor: "add", cost: 0.7 },
      { factor: "remove", cost: 0.7 },
      { factor: "scale", cost: 1, without: [sameDomain] }
    ]
  };

  const PENALTY_COMBOS = [
    {
      chunks: [
        [
          {
            compType: "mark",
            factor: "scale.y",
            with: [diffDomain, noFactors(["encode.y"])]
          }
        ]
      ],
      cost: 1.0
    },
    {
      chunks: [
        [
          {
            compType: "mark",
            factor: "scale.x",
            with: [diffDomain, noFactors(["encode.x"])]
          }
        ]
      ],
      cost: 1.0
    },
    {
      chunks: [
        [
          {
            compType: "mark",
            factor: "scale.size",
            with: [diffDomain, noFactors(["encode.size"])]
          }
        ]
      ],
      cost: 1.0
    },
    {
      chunks: [
        [
          {
            compType: "mark",
            factor: "scale.color",
            with: [diffDomain, noFactors(["encode.color"])]
          }
        ]
      ],
      cost: 1.0
    }
  ];

  const DISCOUNT_COMBOS = [
    {
      chunks: [
        [
          { compType: "mark", factor: "scale.y", with: [sameDomain] },
          { compType: "mark", factor: "scale.x", with: [sameDomain] }
        ]
      ],
      cost: -0.2
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "scale.size" },
          { compType: "mark", factor: "scale.shape" }
        ],
        [
          { compType: "mark", factor: "scale.color" },
          { compType: "mark", factor: "scale.shape" }
        ],
        [
          { compType: "mark", factor: "scale.color" },
          { compType: "mark", factor: "scale.size" }
        ],
        [
          { compType: "mark", factor: "scale.size" },
          { compType: "mark", factor: "scale.opacity" }
        ],
        [
          { compType: "mark", factor: "scale.opacity" },
          { compType: "mark", factor: "scale.shape" }
        ],
        [
          { compType: "mark", factor: "scale.color" },
          { compType: "mark", factor: "scale.opacity" }
        ],
        [
          { compType: "mark", factor: "scale.color" },
          { compType: "mark", factor: "scale.size" },
          { compType: "mark", factor: "scale.shape" }
        ],
        [
          { compType: "mark", factor: "scale.size" },
          { compType: "mark", factor: "scale.shape" },
          { compType: "mark", factor: "scale.opacity" }
        ],
        [
          { compType: "mark", factor: "scale.color" },
          { compType: "mark", factor: "scale.shape" },
          { compType: "mark", factor: "scale.opacity" }
        ],
        [
          { compType: "mark", factor: "scale.color" },
          { compType: "mark", factor: "scale.size" },
          { compType: "mark", factor: "scale.opacity" }
        ],
        [
          { compType: "mark", factor: "scale.color" },
          { compType: "mark", factor: "scale.size" },
          { compType: "mark", factor: "scale.opacity" },
          { compType: "mark", factor: "scale.shape" }
        ]
      ],
      cost: -0.1
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "scale.y", with: [sameDomain] },
          { compType: "axis", factor: "scale.y", with: [sameDomain] }
        ]
      ],
      cost: -0.5
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "scale.y", with: [diffDomain] },
          { compType: "axis", factor: "scale.y", with: [diffDomain] }
        ]
      ],
      cost: -1
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "encode.y" },
          { compType: "axis", factor: "add.y" }
        ],
        [
          { compType: "mark", factor: "encode.y" },
          { compType: "axis", factor: "remove.y" }
        ]
      ],
      cost: -0.7
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "scale.x", with: [sameDomain] },
          { compType: "axis", factor: "scale.x", with: [sameDomain] }
        ]
      ],
      cost: -0.5
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "scale.x", with: [diffDomain] },
          { compType: "axis", factor: "scale.x", with: [diffDomain] }
        ]
      ],
      cost: -1
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "encode.x" },
          { compType: "axis", factor: "add.x" }
        ],
        [
          { compType: "mark", factor: "encode.x" },
          { compType: "axis", factor: "remove.x" }
        ]
      ],
      cost: -0.7
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "scale.color" },
          { compType: "legend", contain: "color" }
        ]
      ],
      cost: -0.5
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "scale.size" },
          { compType: "legend", contain: "size" }
        ]
      ],
      cost: -0.5
    },
    {
      chunks: [
        [
          { compType: "mark", factor: "scale.shape" },
          { compType: "legend", contain: "shape" }
        ]
      ],
      cost: -0.5
    }
  ];

  function evaluate(pseudoTimeline) {
    const stageCosts = [];
    const cappedStageCosts = [];
    const N = pseudoTimeline.concat.length;
    const cost = pseudoTimeline.concat.reduce((cost, stage, i) => {
      const totalCost = stage.sync.reduce((sum, pseudoStep) => {
        pseudoStep.meta = { cost: getCost(pseudoStep) };
        return sum + getCost(pseudoStep);
      }, 0);
      const comboCost = getComboCost(stage.sync);
      const dur = pseudoTimeline.totalDuration / pseudoTimeline.concat.length;
      const cap = PERCEPTION_CAP(dur) * Math.pow(0.99, N - 1 - i);
      stage.meta = {
        totalCost: roundUp(totalCost),
        comboCost: roundUp(comboCost),
        cap,
        cost: roundUp(Math.max(totalCost + comboCost - cap, 0))
      };
      stageCosts.push(Math.max(totalCost + comboCost));
      cappedStageCosts.push(Math.max(totalCost + comboCost - cap, 0));
      return cost + Math.max(totalCost + comboCost - cap, 0);
    }, 0);

    return {
      cost: roundUp(cost),
      tiebreaker: mean(stageCosts),
      tiebreaker2: variance(cappedStageCosts)
    };
  }

  function getComboCost(pseudoSteps) {
    const check = (piece, factorSet) => {
      return factorSet.find(
        fctr => fctr === piece.factor || fctr.indexOf(piece.contain) >= 0
      );
    };

    return DISCOUNT_COMBOS.concat(PENALTY_COMBOS).reduce(
      (totalDiscount, combo) => {
        for (const chunk of combo.chunks) {
          const isChunk = chunk.reduce((isChunk, piece) => {
            const found = pseudoSteps.find(pStep => {
              return (
                pStep.diff.compType === piece.compType &&
                check(piece, pStep.factorSets.current)
              );
            });
            if (!found) {
              return false;
            }

            if (piece.with) {
              isChunk = piece.with.reduce((isChunk, subCondition) => {
                return isChunk && subCondition(found, piece.factor);
              }, isChunk);
            }

            return isChunk && !!found;
          }, true);
          if (isChunk) {
            totalDiscount += combo.cost;
            break;
          }
        }
        return totalDiscount;
      },
      0
    );
  }

  function getCost(pseudoStep) {
    // Todo
    if (
      pseudoStep.diff.compType === "view" ||
      pseudoStep.diff.compType === "pause"
    ) {
      return 0;
    }
    let stepCost = 0;
    for (const condition of PERCEPTION_COST[pseudoStep.diff.compType]) {
      const foundFactor = pseudoStep.factorSets.current.find(
        fctr => fctr.indexOf(condition.factor) >= 0
      );
      let with_without = true;
      if (foundFactor && condition.with) {
        with_without = condition.with.reduce((sat, subCondition) => {
          return sat && subCondition(pseudoStep, foundFactor);
        }, true);
      } else if (foundFactor && condition.without) {
        with_without = condition.without.reduce((sat, subCondition) => {
          return sat && !subCondition(pseudoStep, foundFactor);
        }, true);
      }

      stepCost += foundFactor && with_without ? condition.cost : 0;
    }
    return stepCost;
  }

  function generateTimeline(pseudoTimeline, userInput, includeMeta) {
    // Assume: pseudoTimeline = {concat: [ {sync: [...] }, {sync: [...]}, ...]}
    // Assume: userInput= {marks: {...}, axes: {...}, legends: {...}, scales: {...}}
    let defaultOpt = {
      timing: {
        duration: {
          ratio: Math.floor(100 / pseudoTimeline.concat.length) / 100
        }
      }
    };
    if (userInput.global) {
      defaultOpt = Object.assign(defaultOpt, userInput.global);
    }
    let opt;

    const newConcat = pseudoTimeline.concat.map(syncBlock => {
      return {
        sync: syncBlock.sync.map(pseudoStep => {
          let step;
          switch (pseudoStep.diff.compType) {
          case "mark":
            opt = Object.assign(
              {},
              defaultOpt,
              get(userInput, "marks", pseudoStep.diff.compName) || {}
            );
            step = generateMarkCompStep(pseudoStep, opt);
            break;
          case "axis":
            opt = Object.assign(
              {},
              defaultOpt,
              get(userInput, "axes", pseudoStep.diff.compName) || {}
            );
            step = generateAxisCompStep(pseudoStep, opt);
            break;
          case "legend":
            opt = Object.assign(
              {},
              defaultOpt,
              get(userInput, "legends", pseudoStep.diff.compName) || {}
            );
            step = generateLegendCompStep(pseudoStep, opt);
            break;
          case "view":
            step = generateViewCompStep(pseudoStep, opt);
            break;
          }
          if (includeMeta) {
            step.meta = pseudoStep.meta;
          }

          return step;
        }),
        ...(includeMeta ? { meta: syncBlock.meta } : {})
      };
    });
    return { concat: newConcat };
  }

  function generateViewCompStep(pseudoViewStep, opt) {
    return {
      component: "view",
      change: {
        signal: pseudoViewStep.factorSets.current
      },
      timing: pseudoViewStep.timing || copy(opt.timing)
    };
  }

  function generateAxisCompStep(pseudoStep, opt) {
    const scaleDomainDimension = get(opt, "change", "scale", "domainDimension");
    const { factorSets } = pseudoStep;
    const step = {
      component: { axis: pseudoStep.diff.compName },
      change: {},
      timing: pseudoStep.timing || copy(opt.timing)
    };
    if (scaleDomainDimension !== undefined) {
      step.change = { scale: { domainDimension: scaleDomainDimension } };
    }
    if (
      factorSets.all.indexOf("scale.y") >= 0 &&
      factorSets.applied.indexOf("scale.y") < 0
    ) {
      step.change.scale = false;
    } else if (
      factorSets.all.indexOf("scale.x") >= 0 &&
      factorSets.applied.indexOf("scale.x") < 0
    ) {
      step.change.scale = false;
    }
    if (
      factorSets.applied.indexOf("encode") < 0 &&
      factorSets.all.indexOf("encode") >= 0
    ) {
      step.change.encode = false;
    }

    if (
      step.change.encode === false &&
      factorSets.applied.indexOf("encode.only.grid") >= 0
    ) {
      step.change.encode = {
        grid: true,
        axis: true,
        labels: false,
        title: false,
        ticks: false,
        domain: false
      };
    }

    if (
      ( (step.change.encode === false) ||
        (get(step, "change", "encode", "axis") === false) ) &&
      factorSets.applied.indexOf("encode.position") >= 0
    ) {
      if (step.change.encode) {
        step.change.encode.axis = false;
      } else {
        step.change.encode = {axis: false};
      }
    }

    if (isEmpty(step.change)) {
      delete step.change;
    }

    return step;
  }

  function generateLegendCompStep(pseudoStep, opt) {
    const step = {
      component: { legend: pseudoStep.diff.compName },
      timing: pseudoStep.timing || copy(opt.timing)
    };
    // const factorSets = pseudoStep.factorSets;
    // if (factorSets && factorSets.current && factorSets.current.length > 0) {
    //   step.change = {
    //     scale: factorSets.current.map(fct => fct.replace("scale.", ""))
    //   };
    // }
    // if (factorSets.current.indexOf("encode.position") < 0 && factorSets.all.indexOf("encode.position") >= 0) {
    //   step.change = {
    //     ...(step.change || {}),
    //     encode: { legend: false }
    //   };
    // }
    return step;
  }

  function generateMarkCompStep(pseudoStep, opt) {
    const markCompDiff = pseudoStep.diff;
    const { factorSets } = pseudoStep;
    const step = {
      component: { mark: markCompDiff.compName },
      change: getBlankChange(factorSets.all),
      timing: pseudoStep.timing || copy(opt.timing)
    };
    if (factorSets.applied.indexOf("remove") >= 0) {
      delete step.change;
      return step;
    }
    // change.scale
    const scaleFactros = factorSets.applied.filter(
      fctr => fctr.indexOf("scale") >= 0
    );
    if (scaleFactros.length > 0) {
      step.change.scale = scaleFactros.map(fctr => fctr.replace("scale.", ""));
    }

    // change.data
    if (factorSets.applied.indexOf("data") >= 0) {
      step.change.data = get(opt, "change", "data") || true;
    }

    // Todo: For encode factors not in the factorSet, then it should not specify anything.
    // change.encode
    const encodeFactors = factorSets.applied.filter(
      fctr => fctr.indexOf("encode") >= 0
    );
    const encodeChange = getBlankEncodeChange(
      factorSets.all.concat(factorSets.extraByMarktype)
    );

    if (encodeFactors.length > 0) {
      encodeFactors.forEach(fctr => {
        const channel = fctr.replace("encode.", "");
        const attrs = CHANNEL_TO_ATTRS_OBJ[channel];
        attrs.forEach(attr => {
          delete encodeChange.update[attr];
          delete encodeChange.exit[attr];
          delete encodeChange.enter[attr];
        });
      });
    }
    step.change.encode = encodeChange;

    // change.marktype
    if (factorSets.applied.indexOf("marktype") >= 0) {
      step.change.marktype = true;

      factorSets.extraByMarktype.forEach(fctr => {
        const channel = fctr.replace("encode.", "");
        const attrs = CHANNEL_TO_ATTRS_OBJ[channel];
        attrs.forEach(attr => {
          delete step.change.encode.update[attr];
          delete step.change.encode.exit[attr];
          delete step.change.encode.enter[attr];
        });
      });
    }

    ["update", "enter", "exit"].forEach(dataSet => {
      if (!isEmpty(get(step, "change", "encode", dataSet))) {
        step.change.encode[dataSet] = Object.keys(step.change.encode[dataSet])
          .filter(attr => markCompDiff.meta.usedEnAttrs.indexOf(attr) >= 0)
          .reduce((acc, attr) => {
            acc[attr] = step.change.encode[dataSet][attr];
            return acc;
          }, {});
      }

      if (isEmpty(get(step, "change", "encode", dataSet))) {
        step.change.encode[dataSet] = true;
      }
    });

    return step;
  }

  // It provides a change.encode that does not change any attribute.
  // The blankEncodeChanges are to be assigned by encode factors.
  function getBlankEncodeChange(relatedFactors) {
    const blankEncode = relatedFactors
      .filter(fctr => fctr.indexOf("encode") >= 0)
      .map(fctr => CHANNEL_TO_ATTRS_OBJ[fctr.replace("encode.", "")])
      .reduce((blankEncode, attrs) => {
        attrs.forEach(attr => {
          blankEncode[attr] = false;
        });
        return blankEncode;
      }, {});

    const blankExitEncode = copy(blankEncode);
    delete blankExitEncode.opacity;

    return {
      update: copy(blankEncode),
      enter: blankExitEncode,
      exit: blankExitEncode
    };
  }
  function getBlankChange(allFactors) {
    return ["scale", "signal", "data", "encode", "marktype"].reduce(
      (change, factor) => {
        if (allFactors.find(f => f.indexOf(factor) >= 0)) {
          change[factor] = false;
        }
        return change;
      },
      {}
    );
  }

  async function recommend (
    sSpec,
    eSpec,
    opt = { marks: {}, axes: {}, legends: {}, scales: {} }
  ) {
    const {
      rawInfo,
      userInput,
      stageN,
      includeMeta,
      timing
    } = await initialSetUp(sSpec, eSpec, opt);

    if (!canRecommend(sSpec, eSpec).result && stageN !== 1) {
      return canRecommend(sSpec, eSpec);
    }

    const detected = detectDiffs(rawInfo, userInput);

    let pseudoTls = enumeratePseudoTimelines(detected, stageN, rawInfo, timing);
    pseudoTls = pseudoTls
      .map(pseudoTl => {
        pseudoTl.eval = evaluate(pseudoTl);
        return pseudoTl;
      })
      .sort((a, b) => compareCost(a.eval, b.eval));

    return pseudoTls.map(pseudoTl => {
      const meta = includeMeta ? pseudoTl.eval : undefined;
      return {
        spec: {
          timeline: generateTimeline(pseudoTl, userInput, includeMeta),
          totalDuration: timing.totalDuration,
          meta
        },
        pseudoTimeline: pseudoTl
      };
    });
  }
  function compareCost(a, b) {
    if (a.cost === b.cost) {
      if (a.tiebreaker === b.tiebreaker) {
        return a.tiebreaker2 - b.tiebreaker2;
      }
      return a.tiebreaker - b.tiebreaker;
    }
    return a.cost - b.cost;
  }

  async function initialSetUp(sSpec, eSpec, opt = { marks: {}, axes: {}, legends: {}, scales: {} }) {
    let _opt = copy(opt);
    const stageN = Number(opt.stageN) || 2;
    const { includeMeta } = opt;
    const timing = { totalDuration: _opt.totalDuration || 2000 };
    _opt = setUpRecomOpt(_opt);
    const eView = await new vega.View(vega.parse(castVL2VG(eSpec)), {
      renderer: "svg"
    }).runAsync();

    const sView = await new vega.View(vega.parse(castVL2VG(sSpec)), {
      renderer: "svg"
    }).runAsync();


    const rawInfo = {
      sVis: { spec: copy(castVL2VG(sSpec)), view: sView },
      eVis: { spec: copy(castVL2VG(eSpec)), view: eView }
    };

    return { rawInfo, userInput: _opt, stageN, includeMeta, timing}
  }

  function canRecommend(sSpec, eSpec, stageN) {

    const compDiffs = getChanges(
      getComponents(castVL2VG(sSpec)),
      getComponents(castVL2VG(eSpec))
    ).filter(match => {
      return (
        ["root", "pathgroup"].indexOf(match.compName) < 0 &&
        match.compType !== "scale"
      );
    });
    if (compDiffs.filter(comp => comp.compType === "mark").length >= 2 && stageN >1) {
      return { result: false, reason: "Gemini cannot recomend animations for transitions with multiple marks." };
    }
    return { result: true };
  }

  async function allAtOnce(sSpec,
    eSpec,
    opt = { marks: {}, axes: {}, legends: {}, scales: {} }
  ) {
    const sVGSpec = castVL2VG(sSpec), eVGSpec = castVL2VG(eSpec);
    const {
      rawInfo,
      userInput,
      stageN,
      includeMeta,
      timing
    } = await initialSetUp(sVGSpec, eVGSpec, {stageN:1, ...opt});

    const detected = detectDiffs(rawInfo, userInput);

    const steps = detected.compDiffs.map(cmpDiff => {
      let comp = {};
      comp[cmpDiff.compType] = cmpDiff.compName;
      return {
        component: comp,
        timing: {duration: {ratio: 1}}
      }
    });
    for (const incOrDec of ["increase", "decrease"]) {
      if (detected.viewDiffs.height[incOrDec] || detected.viewDiffs.width[incOrDec]) {
        steps.push({
          component: "view",
          timing: {duration: {ratio: 1}}
        });
        break;
      }
    }

    return {
      timeline: {
        sync: steps
      },
      totalDuration: opt.totalDuration || 2000
    }

  }

  var graphscape = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
     module.exports = factory(d3__default, vega__default, src) ;
  }(commonjsGlobal, (function (d3, vega, vl) {
    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var d3__default = /*#__PURE__*/_interopDefaultLegacy(d3);
    var vega__default = /*#__PURE__*/_interopDefaultLegacy(vega);
    var vl__default = /*#__PURE__*/_interopDefaultLegacy(vl);

    function accessor(fn, fields, name) {
      fn.fields = fields || [];
      fn.fname = name;
      return fn;
    }

    function getter(path) {
      return path.length === 1 ? get1(path[0]) : getN(path);
    }

    const get1 = field => function (obj) {
      return obj[field];
    };

    const getN = path => {
      const len = path.length;
      return function (obj) {
        for (let i = 0; i < len; ++i) {
          obj = obj[path[i]];
        }

        return obj;
      };
    };

    function error(message) {
      throw Error(message);
    }

    function splitAccessPath(p) {
      const path = [],
            n = p.length;
      let q = null,
          b = 0,
          s = '',
          i,
          j,
          c;
      p = p + '';

      function push() {
        path.push(s + p.substring(i, j));
        s = '';
        i = j + 1;
      }

      for (i = j = 0; j < n; ++j) {
        c = p[j];

        if (c === '\\') {
          s += p.substring(i, j);
          s += p.substring(++j, ++j);
          i = j;
        } else if (c === q) {
          push();
          q = null;
          b = -1;
        } else if (q) {
          continue;
        } else if (i === b && c === '"') {
          i = j + 1;
          q = c;
        } else if (i === b && c === "'") {
          i = j + 1;
          q = c;
        } else if (c === '.' && !b) {
          if (j > i) {
            push();
          } else {
            i = j + 1;
          }
        } else if (c === '[') {
          if (j > i) push();
          b = i = j + 1;
        } else if (c === ']') {
          if (!b) error('Access path missing open bracket: ' + p);
          if (b > 0) push();
          b = 0;
          i = j + 1;
        }
      }

      if (b) error('Access path missing closing bracket: ' + p);
      if (q) error('Access path missing closing quote: ' + p);

      if (j > i) {
        j++;
        push();
      }

      return path;
    }

    function field(field, name, opt) {
      const path = splitAccessPath(field);
      field = path.length === 1 ? path[0] : field;
      return accessor((opt && opt.get || getter)(path), [field], name || field);
    }

    field('id');
    accessor(_ => _, [], 'identity');
    accessor(() => 0, [], 'zero');
    accessor(() => 1, [], 'one');
    accessor(() => true, [], 'true');
    accessor(() => false, [], 'false');

    function isFunction(_) {
      return typeof _ === 'function';
    }

    const hop = Object.prototype.hasOwnProperty;

    function has(object, property) {
      return hop.call(object, property);
    }

    function isString(_) {
      return typeof _ === 'string';
    }

    function toSet(_) {
      const s = {},
            n = _.length;

      for (let i = 0; i < n; ++i) s[_[i]] = true;

      return s;
    }

    const RawCode = 'RawCode';
    const Literal = 'Literal';
    const Property = 'Property';
    const Identifier = 'Identifier';
    const ArrayExpression = 'ArrayExpression';
    const BinaryExpression = 'BinaryExpression';
    const CallExpression = 'CallExpression';
    const ConditionalExpression = 'ConditionalExpression';
    const LogicalExpression = 'LogicalExpression';
    const MemberExpression = 'MemberExpression';
    const ObjectExpression = 'ObjectExpression';
    const UnaryExpression = 'UnaryExpression';

    function ASTNode(type) {
      this.type = type;
    }

    ASTNode.prototype.visit = function (visitor) {
      let c, i, n;
      if (visitor(this)) return 1;

      for (c = children(this), i = 0, n = c.length; i < n; ++i) {
        if (c[i].visit(visitor)) return 1;
      }
    };

    function children(node) {
      switch (node.type) {
        case ArrayExpression:
          return node.elements;

        case BinaryExpression:
        case LogicalExpression:
          return [node.left, node.right];

        case CallExpression:
          return [node.callee].concat(node.arguments);

        case ConditionalExpression:
          return [node.test, node.consequent, node.alternate];

        case MemberExpression:
          return [node.object, node.property];

        case ObjectExpression:
          return node.properties;

        case Property:
          return [node.key, node.value];

        case UnaryExpression:
          return [node.argument];

        case Identifier:
        case Literal:
        case RawCode:
        default:
          return [];
      }
    }
    /*
      The following expression parser is based on Esprima (http://esprima.org/).
      Original header comment and license for Esprima is included here:

      Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
      Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
      Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
      Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
      Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
      Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
      Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
      Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
      Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
      Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:

        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.

      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */


    var TokenName, source, index, length, lookahead;
    var TokenBooleanLiteral = 1,
        TokenEOF = 2,
        TokenIdentifier = 3,
        TokenKeyword = 4,
        TokenNullLiteral = 5,
        TokenNumericLiteral = 6,
        TokenPunctuator = 7,
        TokenStringLiteral = 8,
        TokenRegularExpression = 9;
    TokenName = {};
    TokenName[TokenBooleanLiteral] = 'Boolean';
    TokenName[TokenEOF] = '<end>';
    TokenName[TokenIdentifier] = 'Identifier';
    TokenName[TokenKeyword] = 'Keyword';
    TokenName[TokenNullLiteral] = 'Null';
    TokenName[TokenNumericLiteral] = 'Numeric';
    TokenName[TokenPunctuator] = 'Punctuator';
    TokenName[TokenStringLiteral] = 'String';
    TokenName[TokenRegularExpression] = 'RegularExpression';
    var SyntaxArrayExpression = 'ArrayExpression',
        SyntaxBinaryExpression = 'BinaryExpression',
        SyntaxCallExpression = 'CallExpression',
        SyntaxConditionalExpression = 'ConditionalExpression',
        SyntaxIdentifier = 'Identifier',
        SyntaxLiteral = 'Literal',
        SyntaxLogicalExpression = 'LogicalExpression',
        SyntaxMemberExpression = 'MemberExpression',
        SyntaxObjectExpression = 'ObjectExpression',
        SyntaxProperty = 'Property',
        SyntaxUnaryExpression = 'UnaryExpression'; // Error messages should be identical to V8.

    var MessageUnexpectedToken = 'Unexpected token %0',
        MessageUnexpectedNumber = 'Unexpected number',
        MessageUnexpectedString = 'Unexpected string',
        MessageUnexpectedIdentifier = 'Unexpected identifier',
        MessageUnexpectedReserved = 'Unexpected reserved word',
        MessageUnexpectedEOS = 'Unexpected end of input',
        MessageInvalidRegExp = 'Invalid regular expression',
        MessageUnterminatedRegExp = 'Invalid regular expression: missing /',
        MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',
        MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';
    var ILLEGAL = 'ILLEGAL',
        DISABLED = 'Disabled.'; // See also tools/generate-unicode-regex.py.

    var RegexNonAsciiIdentifierStart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'),
        // eslint-disable-next-line no-misleading-character-class
    RegexNonAsciiIdentifierPart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'); // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
      /* istanbul ignore next */
      if (!condition) {
        throw new Error('ASSERT: ' + message);
      }
    }

    function isDecimalDigit(ch) {
      return ch >= 0x30 && ch <= 0x39; // 0..9
    }

    function isHexDigit(ch) {
      return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
      return '01234567'.indexOf(ch) >= 0;
    } // 7.2 White Space


    function isWhiteSpace(ch) {
      return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;
    } // 7.3 Line Terminators


    function isLineTerminator(ch) {
      return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
    } // 7.6 Identifier Names and Identifiers


    function isIdentifierStart(ch) {
      return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
      ch >= 0x41 && ch <= 0x5A || // A..Z
      ch >= 0x61 && ch <= 0x7A || // a..z
      ch === 0x5C || // \ (backslash)
      ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
    }

    function isIdentifierPart(ch) {
      return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
      ch >= 0x41 && ch <= 0x5A || // A..Z
      ch >= 0x61 && ch <= 0x7A || // a..z
      ch >= 0x30 && ch <= 0x39 || // 0..9
      ch === 0x5C || // \ (backslash)
      ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
    } // 7.6.1.1 Keywords


    const keywords = {
      'if': 1,
      'in': 1,
      'do': 1,
      'var': 1,
      'for': 1,
      'new': 1,
      'try': 1,
      'let': 1,
      'this': 1,
      'else': 1,
      'case': 1,
      'void': 1,
      'with': 1,
      'enum': 1,
      'while': 1,
      'break': 1,
      'catch': 1,
      'throw': 1,
      'const': 1,
      'yield': 1,
      'class': 1,
      'super': 1,
      'return': 1,
      'typeof': 1,
      'delete': 1,
      'switch': 1,
      'export': 1,
      'import': 1,
      'public': 1,
      'static': 1,
      'default': 1,
      'finally': 1,
      'extends': 1,
      'package': 1,
      'private': 1,
      'function': 1,
      'continue': 1,
      'debugger': 1,
      'interface': 1,
      'protected': 1,
      'instanceof': 1,
      'implements': 1
    };

    function skipComment() {
      while (index < length) {
        const ch = source.charCodeAt(index);

        if (isWhiteSpace(ch) || isLineTerminator(ch)) {
          ++index;
        } else {
          break;
        }
      }
    }

    function scanHexEscape(prefix) {
      var i,
          len,
          ch,
          code = 0;
      len = prefix === 'u' ? 4 : 2;

      for (i = 0; i < len; ++i) {
        if (index < length && isHexDigit(source[index])) {
          ch = source[index++];
          code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
        } else {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
      }

      return String.fromCharCode(code);
    }

    function scanUnicodeCodePointEscape() {
      var ch, code, cu1, cu2;
      ch = source[index];
      code = 0; // At least, one hex digit is required.

      if (ch === '}') {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      while (index < length) {
        ch = source[index++];

        if (!isHexDigit(ch)) {
          break;
        }

        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
      }

      if (code > 0x10FFFF || ch !== '}') {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      } // UTF-16 Encoding


      if (code <= 0xFFFF) {
        return String.fromCharCode(code);
      }

      cu1 = (code - 0x10000 >> 10) + 0xD800;
      cu2 = (code - 0x10000 & 1023) + 0xDC00;
      return String.fromCharCode(cu1, cu2);
    }

    function getEscapedIdentifier() {
      var ch, id;
      ch = source.charCodeAt(index++);
      id = String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

      if (ch === 0x5C) {
        if (source.charCodeAt(index) !== 0x75) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }

        ++index;
        ch = scanHexEscape('u');

        if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }

        id = ch;
      }

      while (index < length) {
        ch = source.charCodeAt(index);

        if (!isIdentifierPart(ch)) {
          break;
        }

        ++index;
        id += String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

        if (ch === 0x5C) {
          id = id.substr(0, id.length - 1);

          if (source.charCodeAt(index) !== 0x75) {
            throwError({}, MessageUnexpectedToken, ILLEGAL);
          }

          ++index;
          ch = scanHexEscape('u');

          if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
            throwError({}, MessageUnexpectedToken, ILLEGAL);
          }

          id += ch;
        }
      }

      return id;
    }

    function getIdentifier() {
      var start, ch;
      start = index++;

      while (index < length) {
        ch = source.charCodeAt(index);

        if (ch === 0x5C) {
          // Blackslash (U+005C) marks Unicode escape sequence.
          index = start;
          return getEscapedIdentifier();
        }

        if (isIdentifierPart(ch)) {
          ++index;
        } else {
          break;
        }
      }

      return source.slice(start, index);
    }

    function scanIdentifier() {
      var start, id, type;
      start = index; // Backslash (U+005C) starts an escaped character.

      id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.
      // Thus, it must be an identifier.

      if (id.length === 1) {
        type = TokenIdentifier;
      } else if (keywords.hasOwnProperty(id)) {
        // eslint-disable-line no-prototype-builtins
        type = TokenKeyword;
      } else if (id === 'null') {
        type = TokenNullLiteral;
      } else if (id === 'true' || id === 'false') {
        type = TokenBooleanLiteral;
      } else {
        type = TokenIdentifier;
      }

      return {
        type: type,
        value: id,
        start: start,
        end: index
      };
    } // 7.7 Punctuators


    function scanPunctuator() {
      var start = index,
          code = source.charCodeAt(index),
          code2,
          ch1 = source[index],
          ch2,
          ch3,
          ch4;

      switch (code) {
        // Check for most common single-character punctuators.
        case 0x2E: // . dot

        case 0x28: // ( open bracket

        case 0x29: // ) close bracket

        case 0x3B: // ; semicolon

        case 0x2C: // , comma

        case 0x7B: // { open curly brace

        case 0x7D: // } close curly brace

        case 0x5B: // [

        case 0x5D: // ]

        case 0x3A: // :

        case 0x3F: // ?

        case 0x7E:
          // ~
          ++index;
          return {
            type: TokenPunctuator,
            value: String.fromCharCode(code),
            start: start,
            end: index
          };

        default:
          code2 = source.charCodeAt(index + 1); // '=' (U+003D) marks an assignment or comparison operator.

          if (code2 === 0x3D) {
            switch (code) {
              case 0x2B: // +

              case 0x2D: // -

              case 0x2F: // /

              case 0x3C: // <

              case 0x3E: // >

              case 0x5E: // ^

              case 0x7C: // |

              case 0x25: // %

              case 0x26: // &

              case 0x2A:
                // *
                index += 2;
                return {
                  type: TokenPunctuator,
                  value: String.fromCharCode(code) + String.fromCharCode(code2),
                  start: start,
                  end: index
                };

              case 0x21: // !

              case 0x3D:
                // =
                index += 2; // !== and ===

                if (source.charCodeAt(index) === 0x3D) {
                  ++index;
                }

                return {
                  type: TokenPunctuator,
                  value: source.slice(start, index),
                  start: start,
                  end: index
                };
            }
          }

      } // 4-character punctuator: >>>=


      ch4 = source.substr(index, 4);

      if (ch4 === '>>>=') {
        index += 4;
        return {
          type: TokenPunctuator,
          value: ch4,
          start: start,
          end: index
        };
      } // 3-character punctuators: === !== >>> <<= >>=


      ch3 = ch4.substr(0, 3);

      if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
        index += 3;
        return {
          type: TokenPunctuator,
          value: ch3,
          start: start,
          end: index
        };
      } // Other 2-character punctuators: ++ -- << >> && ||


      ch2 = ch3.substr(0, 2);

      if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {
        index += 2;
        return {
          type: TokenPunctuator,
          value: ch2,
          start: start,
          end: index
        };
      }

      if (ch2 === '//') {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      } // 1-character punctuators: < > = ! + - * % & | ^ /


      if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
        ++index;
        return {
          type: TokenPunctuator,
          value: ch1,
          start: start,
          end: index
        };
      }

      throwError({}, MessageUnexpectedToken, ILLEGAL);
    } // 7.8.3 Numeric Literals


    function scanHexLiteral(start) {
      let number = '';

      while (index < length) {
        if (!isHexDigit(source[index])) {
          break;
        }

        number += source[index++];
      }

      if (number.length === 0) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      if (isIdentifierStart(source.charCodeAt(index))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      return {
        type: TokenNumericLiteral,
        value: parseInt('0x' + number, 16),
        start: start,
        end: index
      };
    }

    function scanOctalLiteral(start) {
      let number = '0' + source[index++];

      while (index < length) {
        if (!isOctalDigit(source[index])) {
          break;
        }

        number += source[index++];
      }

      if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      return {
        type: TokenNumericLiteral,
        value: parseInt(number, 8),
        octal: true,
        start: start,
        end: index
      };
    }

    function scanNumericLiteral() {
      var number, start, ch;
      ch = source[index];
      assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
      start = index;
      number = '';

      if (ch !== '.') {
        number = source[index++];
        ch = source[index]; // Hex number starts with '0x'.
        // Octal number starts with '0'.

        if (number === '0') {
          if (ch === 'x' || ch === 'X') {
            ++index;
            return scanHexLiteral(start);
          }

          if (isOctalDigit(ch)) {
            return scanOctalLiteral(start);
          } // decimal number starts with '0' such as '09' is illegal.


          if (ch && isDecimalDigit(ch.charCodeAt(0))) {
            throwError({}, MessageUnexpectedToken, ILLEGAL);
          }
        }

        while (isDecimalDigit(source.charCodeAt(index))) {
          number += source[index++];
        }

        ch = source[index];
      }

      if (ch === '.') {
        number += source[index++];

        while (isDecimalDigit(source.charCodeAt(index))) {
          number += source[index++];
        }

        ch = source[index];
      }

      if (ch === 'e' || ch === 'E') {
        number += source[index++];
        ch = source[index];

        if (ch === '+' || ch === '-') {
          number += source[index++];
        }

        if (isDecimalDigit(source.charCodeAt(index))) {
          while (isDecimalDigit(source.charCodeAt(index))) {
            number += source[index++];
          }
        } else {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
      }

      if (isIdentifierStart(source.charCodeAt(index))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      return {
        type: TokenNumericLiteral,
        value: parseFloat(number),
        start: start,
        end: index
      };
    } // 7.8.4 String Literals


    function scanStringLiteral() {
      var str = '',
          quote,
          start,
          ch,
          code,
          octal = false;
      quote = source[index];
      assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
      start = index;
      ++index;

      while (index < length) {
        ch = source[index++];

        if (ch === quote) {
          quote = '';
          break;
        } else if (ch === '\\') {
          ch = source[index++];

          if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
            switch (ch) {
              case 'u':
              case 'x':
                if (source[index] === '{') {
                  ++index;
                  str += scanUnicodeCodePointEscape();
                } else {
                  str += scanHexEscape(ch);
                }

                break;

              case 'n':
                str += '\n';
                break;

              case 'r':
                str += '\r';
                break;

              case 't':
                str += '\t';
                break;

              case 'b':
                str += '\b';
                break;

              case 'f':
                str += '\f';
                break;

              case 'v':
                str += '\x0B';
                break;

              default:
                if (isOctalDigit(ch)) {
                  code = '01234567'.indexOf(ch); // \0 is not octal escape sequence

                  if (code !== 0) {
                    octal = true;
                  }

                  if (index < length && isOctalDigit(source[index])) {
                    octal = true;
                    code = code * 8 + '01234567'.indexOf(source[index++]); // 3 digits are only allowed when string starts
                    // with 0, 1, 2, 3

                    if ('0123'.indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {
                      code = code * 8 + '01234567'.indexOf(source[index++]);
                    }
                  }

                  str += String.fromCharCode(code);
                } else {
                  str += ch;
                }

                break;
            }
          } else {
            if (ch === '\r' && source[index] === '\n') {
              ++index;
            }
          }
        } else if (isLineTerminator(ch.charCodeAt(0))) {
          break;
        } else {
          str += ch;
        }
      }

      if (quote !== '') {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      return {
        type: TokenStringLiteral,
        value: str,
        octal: octal,
        start: start,
        end: index
      };
    }

    function testRegExp(pattern, flags) {
      let tmp = pattern;

      if (flags.indexOf('u') >= 0) {
        // Replace each astral symbol and every Unicode code point
        // escape sequence with a single ASCII symbol to avoid throwing on
        // regular expressions that are only valid in combination with the
        // `/u` flag.
        // Note: replacing with the ASCII symbol `x` might cause false
        // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
        // perfectly valid pattern that is equivalent to `[a-b]`, but it
        // would be replaced by `[x-b]` which throws an error.
        tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1) => {
          if (parseInt($1, 16) <= 0x10FFFF) {
            return 'x';
          }

          throwError({}, MessageInvalidRegExp);
        }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
      } // First, detect invalid regular expressions.


      try {
        new RegExp(tmp);
      } catch (e) {
        throwError({}, MessageInvalidRegExp);
      } // Return a regular expression object for this pattern-flag pair, or
      // `null` in case the current environment doesn't support the flags it
      // uses.


      try {
        return new RegExp(pattern, flags);
      } catch (exception) {
        return null;
      }
    }

    function scanRegExpBody() {
      var ch, str, classMarker, terminated, body;
      ch = source[index];
      assert(ch === '/', 'Regular expression literal must start with a slash');
      str = source[index++];
      classMarker = false;
      terminated = false;

      while (index < length) {
        ch = source[index++];
        str += ch;

        if (ch === '\\') {
          ch = source[index++]; // ECMA-262 7.8.5

          if (isLineTerminator(ch.charCodeAt(0))) {
            throwError({}, MessageUnterminatedRegExp);
          }

          str += ch;
        } else if (isLineTerminator(ch.charCodeAt(0))) {
          throwError({}, MessageUnterminatedRegExp);
        } else if (classMarker) {
          if (ch === ']') {
            classMarker = false;
          }
        } else {
          if (ch === '/') {
            terminated = true;
            break;
          } else if (ch === '[') {
            classMarker = true;
          }
        }
      }

      if (!terminated) {
        throwError({}, MessageUnterminatedRegExp);
      } // Exclude leading and trailing slash.


      body = str.substr(1, str.length - 2);
      return {
        value: body,
        literal: str
      };
    }

    function scanRegExpFlags() {
      var ch, str, flags;
      str = '';
      flags = '';

      while (index < length) {
        ch = source[index];

        if (!isIdentifierPart(ch.charCodeAt(0))) {
          break;
        }

        ++index;

        if (ch === '\\' && index < length) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        } else {
          flags += ch;
          str += ch;
        }
      }

      if (flags.search(/[^gimuy]/g) >= 0) {
        throwError({}, MessageInvalidRegExp, flags);
      }

      return {
        value: flags,
        literal: str
      };
    }

    function scanRegExp() {
      var start, body, flags, value;
      lookahead = null;
      skipComment();
      start = index;
      body = scanRegExpBody();
      flags = scanRegExpFlags();
      value = testRegExp(body.value, flags.value);
      return {
        literal: body.literal + flags.literal,
        value: value,
        regex: {
          pattern: body.value,
          flags: flags.value
        },
        start: start,
        end: index
      };
    }

    function isIdentifierName(token) {
      return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
    }

    function advance() {
      skipComment();

      if (index >= length) {
        return {
          type: TokenEOF,
          start: index,
          end: index
        };
      }

      const ch = source.charCodeAt(index);

      if (isIdentifierStart(ch)) {
        return scanIdentifier();
      } // Very common: ( and ) and ;


      if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
        return scanPunctuator();
      } // String literal starts with single quote (U+0027) or double quote (U+0022).


      if (ch === 0x27 || ch === 0x22) {
        return scanStringLiteral();
      } // Dot (.) U+002E can also start a floating-point number, hence the need
      // to check the next character.


      if (ch === 0x2E) {
        if (isDecimalDigit(source.charCodeAt(index + 1))) {
          return scanNumericLiteral();
        }

        return scanPunctuator();
      }

      if (isDecimalDigit(ch)) {
        return scanNumericLiteral();
      }

      return scanPunctuator();
    }

    function lex() {
      const token = lookahead;
      index = token.end;
      lookahead = advance();
      index = token.end;
      return token;
    }

    function peek() {
      const pos = index;
      lookahead = advance();
      index = pos;
    }

    function finishArrayExpression(elements) {
      const node = new ASTNode(SyntaxArrayExpression);
      node.elements = elements;
      return node;
    }

    function finishBinaryExpression(operator, left, right) {
      const node = new ASTNode(operator === '||' || operator === '&&' ? SyntaxLogicalExpression : SyntaxBinaryExpression);
      node.operator = operator;
      node.left = left;
      node.right = right;
      return node;
    }

    function finishCallExpression(callee, args) {
      const node = new ASTNode(SyntaxCallExpression);
      node.callee = callee;
      node.arguments = args;
      return node;
    }

    function finishConditionalExpression(test, consequent, alternate) {
      const node = new ASTNode(SyntaxConditionalExpression);
      node.test = test;
      node.consequent = consequent;
      node.alternate = alternate;
      return node;
    }

    function finishIdentifier(name) {
      const node = new ASTNode(SyntaxIdentifier);
      node.name = name;
      return node;
    }

    function finishLiteral(token) {
      const node = new ASTNode(SyntaxLiteral);
      node.value = token.value;
      node.raw = source.slice(token.start, token.end);

      if (token.regex) {
        if (node.raw === '//') {
          node.raw = '/(?:)/';
        }

        node.regex = token.regex;
      }

      return node;
    }

    function finishMemberExpression(accessor, object, property) {
      const node = new ASTNode(SyntaxMemberExpression);
      node.computed = accessor === '[';
      node.object = object;
      node.property = property;
      if (!node.computed) property.member = true;
      return node;
    }

    function finishObjectExpression(properties) {
      const node = new ASTNode(SyntaxObjectExpression);
      node.properties = properties;
      return node;
    }

    function finishProperty(kind, key, value) {
      const node = new ASTNode(SyntaxProperty);
      node.key = key;
      node.value = value;
      node.kind = kind;
      return node;
    }

    function finishUnaryExpression(operator, argument) {
      const node = new ASTNode(SyntaxUnaryExpression);
      node.operator = operator;
      node.argument = argument;
      node.prefix = true;
      return node;
    } // Throw an exception


    function throwError(token, messageFormat) {
      var error,
          args = Array.prototype.slice.call(arguments, 2),
          msg = messageFormat.replace(/%(\d)/g, (whole, index) => {
        assert(index < args.length, 'Message reference must be in range');
        return args[index];
      });
      error = new Error(msg);
      error.index = index;
      error.description = msg;
      throw error;
    } // Throw an exception because of the token.


    function throwUnexpected(token) {
      if (token.type === TokenEOF) {
        throwError(token, MessageUnexpectedEOS);
      }

      if (token.type === TokenNumericLiteral) {
        throwError(token, MessageUnexpectedNumber);
      }

      if (token.type === TokenStringLiteral) {
        throwError(token, MessageUnexpectedString);
      }

      if (token.type === TokenIdentifier) {
        throwError(token, MessageUnexpectedIdentifier);
      }

      if (token.type === TokenKeyword) {
        throwError(token, MessageUnexpectedReserved);
      } // BooleanLiteral, NullLiteral, or Punctuator.


      throwError(token, MessageUnexpectedToken, token.value);
    } // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.


    function expect(value) {
      const token = lex();

      if (token.type !== TokenPunctuator || token.value !== value) {
        throwUnexpected(token);
      }
    } // Return true if the next token matches the specified punctuator.


    function match(value) {
      return lookahead.type === TokenPunctuator && lookahead.value === value;
    } // Return true if the next token matches the specified keyword


    function matchKeyword(keyword) {
      return lookahead.type === TokenKeyword && lookahead.value === keyword;
    } // 11.1.4 Array Initialiser


    function parseArrayInitialiser() {
      const elements = [];
      index = lookahead.start;
      expect('[');

      while (!match(']')) {
        if (match(',')) {
          lex();
          elements.push(null);
        } else {
          elements.push(parseConditionalExpression());

          if (!match(']')) {
            expect(',');
          }
        }
      }

      lex();
      return finishArrayExpression(elements);
    } // 11.1.5 Object Initialiser


    function parseObjectPropertyKey() {
      index = lookahead.start;
      const token = lex(); // Note: This function is called only from parseObjectProperty(), where
      // EOF and Punctuator tokens are already filtered out.

      if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
        if (token.octal) {
          throwError(token, MessageStrictOctalLiteral);
        }

        return finishLiteral(token);
      }

      return finishIdentifier(token.value);
    }

    function parseObjectProperty() {
      var token, key, id, value;
      index = lookahead.start;
      token = lookahead;

      if (token.type === TokenIdentifier) {
        id = parseObjectPropertyKey();
        expect(':');
        value = parseConditionalExpression();
        return finishProperty('init', id, value);
      }

      if (token.type === TokenEOF || token.type === TokenPunctuator) {
        throwUnexpected(token);
      } else {
        key = parseObjectPropertyKey();
        expect(':');
        value = parseConditionalExpression();
        return finishProperty('init', key, value);
      }
    }

    function parseObjectInitialiser() {
      var properties = [],
          property,
          name,
          key,
          map = {},
          toString = String;
      index = lookahead.start;
      expect('{');

      while (!match('}')) {
        property = parseObjectProperty();

        if (property.key.type === SyntaxIdentifier) {
          name = property.key.name;
        } else {
          name = toString(property.key.value);
        }

        key = '$' + name;

        if (Object.prototype.hasOwnProperty.call(map, key)) {
          throwError({}, MessageStrictDuplicateProperty);
        } else {
          map[key] = true;
        }

        properties.push(property);

        if (!match('}')) {
          expect(',');
        }
      }

      expect('}');
      return finishObjectExpression(properties);
    } // 11.1.6 The Grouping Operator


    function parseGroupExpression() {
      expect('(');
      const expr = parseExpression();
      expect(')');
      return expr;
    } // 11.1 Primary Expressions


    const legalKeywords = {
      'if': 1
    };

    function parsePrimaryExpression() {
      var type, token, expr;

      if (match('(')) {
        return parseGroupExpression();
      }

      if (match('[')) {
        return parseArrayInitialiser();
      }

      if (match('{')) {
        return parseObjectInitialiser();
      }

      type = lookahead.type;
      index = lookahead.start;

      if (type === TokenIdentifier || legalKeywords[lookahead.value]) {
        expr = finishIdentifier(lex().value);
      } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
        if (lookahead.octal) {
          throwError(lookahead, MessageStrictOctalLiteral);
        }

        expr = finishLiteral(lex());
      } else if (type === TokenKeyword) {
        throw new Error(DISABLED);
      } else if (type === TokenBooleanLiteral) {
        token = lex();
        token.value = token.value === 'true';
        expr = finishLiteral(token);
      } else if (type === TokenNullLiteral) {
        token = lex();
        token.value = null;
        expr = finishLiteral(token);
      } else if (match('/') || match('/=')) {
        expr = finishLiteral(scanRegExp());
        peek();
      } else {
        throwUnexpected(lex());
      }

      return expr;
    } // 11.2 Left-Hand-Side Expressions


    function parseArguments() {
      const args = [];
      expect('(');

      if (!match(')')) {
        while (index < length) {
          args.push(parseConditionalExpression());

          if (match(')')) {
            break;
          }

          expect(',');
        }
      }

      expect(')');
      return args;
    }

    function parseNonComputedProperty() {
      index = lookahead.start;
      const token = lex();

      if (!isIdentifierName(token)) {
        throwUnexpected(token);
      }

      return finishIdentifier(token.value);
    }

    function parseNonComputedMember() {
      expect('.');
      return parseNonComputedProperty();
    }

    function parseComputedMember() {
      expect('[');
      const expr = parseExpression();
      expect(']');
      return expr;
    }

    function parseLeftHandSideExpressionAllowCall() {
      var expr, args, property;
      expr = parsePrimaryExpression();

      for (;;) {
        if (match('.')) {
          property = parseNonComputedMember();
          expr = finishMemberExpression('.', expr, property);
        } else if (match('(')) {
          args = parseArguments();
          expr = finishCallExpression(expr, args);
        } else if (match('[')) {
          property = parseComputedMember();
          expr = finishMemberExpression('[', expr, property);
        } else {
          break;
        }
      }

      return expr;
    } // 11.3 Postfix Expressions


    function parsePostfixExpression() {
      const expr = parseLeftHandSideExpressionAllowCall();

      if (lookahead.type === TokenPunctuator) {
        if (match('++') || match('--')) {
          throw new Error(DISABLED);
        }
      }

      return expr;
    } // 11.4 Unary Operators


    function parseUnaryExpression() {
      var token, expr;

      if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
        expr = parsePostfixExpression();
      } else if (match('++') || match('--')) {
        throw new Error(DISABLED);
      } else if (match('+') || match('-') || match('~') || match('!')) {
        token = lex();
        expr = parseUnaryExpression();
        expr = finishUnaryExpression(token.value, expr);
      } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
        throw new Error(DISABLED);
      } else {
        expr = parsePostfixExpression();
      }

      return expr;
    }

    function binaryPrecedence(token) {
      let prec = 0;

      if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
        return 0;
      }

      switch (token.value) {
        case '||':
          prec = 1;
          break;

        case '&&':
          prec = 2;
          break;

        case '|':
          prec = 3;
          break;

        case '^':
          prec = 4;
          break;

        case '&':
          prec = 5;
          break;

        case '==':
        case '!=':
        case '===':
        case '!==':
          prec = 6;
          break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
        case 'in':
          prec = 7;
          break;

        case '<<':
        case '>>':
        case '>>>':
          prec = 8;
          break;

        case '+':
        case '-':
          prec = 9;
          break;

        case '*':
        case '/':
        case '%':
          prec = 11;
          break;
      }

      return prec;
    } // 11.5 Multiplicative Operators
    // 11.6 Additive Operators
    // 11.7 Bitwise Shift Operators
    // 11.8 Relational Operators
    // 11.9 Equality Operators
    // 11.10 Binary Bitwise Operators
    // 11.11 Binary Logical Operators


    function parseBinaryExpression() {
      var marker, markers, expr, token, prec, stack, right, operator, left, i;
      marker = lookahead;
      left = parseUnaryExpression();
      token = lookahead;
      prec = binaryPrecedence(token);

      if (prec === 0) {
        return left;
      }

      token.prec = prec;
      lex();
      markers = [marker, lookahead];
      right = parseUnaryExpression();
      stack = [left, token, right];

      while ((prec = binaryPrecedence(lookahead)) > 0) {
        // Reduce: make a binary expression from the three topmost entries.
        while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
          right = stack.pop();
          operator = stack.pop().value;
          left = stack.pop();
          markers.pop();
          expr = finishBinaryExpression(operator, left, right);
          stack.push(expr);
        } // Shift.


        token = lex();
        token.prec = prec;
        stack.push(token);
        markers.push(lookahead);
        expr = parseUnaryExpression();
        stack.push(expr);
      } // Final reduce to clean-up the stack.


      i = stack.length - 1;
      expr = stack[i];
      markers.pop();

      while (i > 1) {
        markers.pop();
        expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
        i -= 2;
      }

      return expr;
    } // 11.12 Conditional Operator


    function parseConditionalExpression() {
      var expr, consequent, alternate;
      expr = parseBinaryExpression();

      if (match('?')) {
        lex();
        consequent = parseConditionalExpression();
        expect(':');
        alternate = parseConditionalExpression();
        expr = finishConditionalExpression(expr, consequent, alternate);
      }

      return expr;
    } // 11.14 Comma Operator


    function parseExpression() {
      const expr = parseConditionalExpression();

      if (match(',')) {
        throw new Error(DISABLED); // no sequence expressions
      }

      return expr;
    }

    function parser(code) {
      source = code;
      index = 0;
      length = source.length;
      lookahead = null;
      peek();
      const expr = parseExpression();

      if (lookahead.type !== TokenEOF) {
        throw new Error('Unexpect token after expression.');
      }

      return expr;
    }

    var Constants = {
      NaN: 'NaN',
      E: 'Math.E',
      LN2: 'Math.LN2',
      LN10: 'Math.LN10',
      LOG2E: 'Math.LOG2E',
      LOG10E: 'Math.LOG10E',
      PI: 'Math.PI',
      SQRT1_2: 'Math.SQRT1_2',
      SQRT2: 'Math.SQRT2',
      MIN_VALUE: 'Number.MIN_VALUE',
      MAX_VALUE: 'Number.MAX_VALUE'
    };

    function Functions(codegen) {
      function fncall(name, args, cast, type) {
        let obj = codegen(args[0]);

        if (cast) {
          obj = cast + '(' + obj + ')';
          if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';
        }

        return obj + '.' + name + (type < 0 ? '' : type === 0 ? '()' : '(' + args.slice(1).map(codegen).join(',') + ')');
      }

      function fn(name, cast, type) {
        return args => fncall(name, args, cast, type);
      }

      const DATE = 'new Date',
            STRING = 'String',
            REGEXP = 'RegExp';
      return {
        // MATH functions
        isNaN: 'Number.isNaN',
        isFinite: 'Number.isFinite',
        abs: 'Math.abs',
        acos: 'Math.acos',
        asin: 'Math.asin',
        atan: 'Math.atan',
        atan2: 'Math.atan2',
        ceil: 'Math.ceil',
        cos: 'Math.cos',
        exp: 'Math.exp',
        floor: 'Math.floor',
        log: 'Math.log',
        max: 'Math.max',
        min: 'Math.min',
        pow: 'Math.pow',
        random: 'Math.random',
        round: 'Math.round',
        sin: 'Math.sin',
        sqrt: 'Math.sqrt',
        tan: 'Math.tan',
        clamp: function (args) {
          if (args.length < 3) error('Missing arguments to clamp function.');
          if (args.length > 3) error('Too many arguments to clamp function.');
          const a = args.map(codegen);
          return 'Math.max(' + a[1] + ', Math.min(' + a[2] + ',' + a[0] + '))';
        },
        // DATE functions
        now: 'Date.now',
        utc: 'Date.UTC',
        datetime: DATE,
        date: fn('getDate', DATE, 0),
        day: fn('getDay', DATE, 0),
        year: fn('getFullYear', DATE, 0),
        month: fn('getMonth', DATE, 0),
        hours: fn('getHours', DATE, 0),
        minutes: fn('getMinutes', DATE, 0),
        seconds: fn('getSeconds', DATE, 0),
        milliseconds: fn('getMilliseconds', DATE, 0),
        time: fn('getTime', DATE, 0),
        timezoneoffset: fn('getTimezoneOffset', DATE, 0),
        utcdate: fn('getUTCDate', DATE, 0),
        utcday: fn('getUTCDay', DATE, 0),
        utcyear: fn('getUTCFullYear', DATE, 0),
        utcmonth: fn('getUTCMonth', DATE, 0),
        utchours: fn('getUTCHours', DATE, 0),
        utcminutes: fn('getUTCMinutes', DATE, 0),
        utcseconds: fn('getUTCSeconds', DATE, 0),
        utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),
        // sequence functions
        length: fn('length', null, -1),
        join: fn('join', null),
        indexof: fn('indexOf', null),
        lastindexof: fn('lastIndexOf', null),
        slice: fn('slice', null),
        reverse: function (args) {
          return '(' + codegen(args[0]) + ').slice().reverse()';
        },
        // STRING functions
        parseFloat: 'parseFloat',
        parseInt: 'parseInt',
        upper: fn('toUpperCase', STRING, 0),
        lower: fn('toLowerCase', STRING, 0),
        substring: fn('substring', STRING),
        split: fn('split', STRING),
        replace: fn('replace', STRING),
        trim: fn('trim', STRING, 0),
        // REGEXP functions
        regexp: REGEXP,
        test: fn('test', REGEXP),
        // Control Flow functions
        if: function (args) {
          if (args.length < 3) error('Missing arguments to if function.');
          if (args.length > 3) error('Too many arguments to if function.');
          const a = args.map(codegen);
          return '(' + a[0] + '?' + a[1] + ':' + a[2] + ')';
        }
      };
    }

    function stripQuotes(s) {
      const n = s && s.length - 1;
      return n && (s[0] === '"' && s[n] === '"' || s[0] === '\'' && s[n] === '\'') ? s.slice(1, -1) : s;
    }

    function codegen(opt) {
      opt = opt || {};
      const allowed = opt.allowed ? toSet(opt.allowed) : {},
            forbidden = opt.forbidden ? toSet(opt.forbidden) : {},
            constants = opt.constants || Constants,
            functions = (opt.functions || Functions)(visit),
            globalvar = opt.globalvar,
            fieldvar = opt.fieldvar,
            outputGlobal = isFunction(globalvar) ? globalvar : id => "".concat(globalvar, "[\"").concat(id, "\"]");
      let globals = {},
          fields = {},
          memberDepth = 0;

      function visit(ast) {
        if (isString(ast)) return ast;
        const generator = Generators[ast.type];
        if (generator == null) error('Unsupported type: ' + ast.type);
        return generator(ast);
      }

      const Generators = {
        Literal: n => n.raw,
        Identifier: n => {
          const id = n.name;

          if (memberDepth > 0) {
            return id;
          } else if (has(forbidden, id)) {
            return error('Illegal identifier: ' + id);
          } else if (has(constants, id)) {
            return constants[id];
          } else if (has(allowed, id)) {
            return id;
          } else {
            globals[id] = 1;
            return outputGlobal(id);
          }
        },
        MemberExpression: n => {
          const d = !n.computed,
                o = visit(n.object);
          if (d) memberDepth += 1;
          const p = visit(n.property);

          if (o === fieldvar) {
            // strip quotes to sanitize field name (#1653)
            fields[stripQuotes(p)] = 1;
          }

          if (d) memberDepth -= 1;
          return o + (d ? '.' + p : '[' + p + ']');
        },
        CallExpression: n => {
          if (n.callee.type !== 'Identifier') {
            error('Illegal callee type: ' + n.callee.type);
          }

          const callee = n.callee.name,
                args = n.arguments,
                fn = has(functions, callee) && functions[callee];
          if (!fn) error('Unrecognized function: ' + callee);
          return isFunction(fn) ? fn(args) : fn + '(' + args.map(visit).join(',') + ')';
        },
        ArrayExpression: n => '[' + n.elements.map(visit).join(',') + ']',
        BinaryExpression: n => '(' + visit(n.left) + ' ' + n.operator + ' ' + visit(n.right) + ')',
        UnaryExpression: n => '(' + n.operator + visit(n.argument) + ')',
        ConditionalExpression: n => '(' + visit(n.test) + '?' + visit(n.consequent) + ':' + visit(n.alternate) + ')',
        LogicalExpression: n => '(' + visit(n.left) + n.operator + visit(n.right) + ')',
        ObjectExpression: n => '{' + n.properties.map(visit).join(',') + '}',
        Property: n => {
          memberDepth += 1;
          const k = visit(n.key);
          memberDepth -= 1;
          return k + ':' + visit(n.value);
        }
      };

      function codegen(ast) {
        const result = {
          code: visit(ast),
          globals: Object.keys(globals),
          fields: Object.keys(fields)
        };
        globals = {};
        fields = {};
        return result;
      }

      codegen.functions = functions;
      codegen.constants = constants;
      return codegen;
    }

    var vegaExpression_module = /*#__PURE__*/Object.freeze({
      __proto__: null,
      ASTNode: ASTNode,
      ArrayExpression: ArrayExpression,
      BinaryExpression: BinaryExpression,
      CallExpression: CallExpression,
      ConditionalExpression: ConditionalExpression,
      Identifier: Identifier,
      Literal: Literal,
      LogicalExpression: LogicalExpression,
      MemberExpression: MemberExpression,
      ObjectExpression: ObjectExpression,
      Property: Property,
      RawCode: RawCode,
      UnaryExpression: UnaryExpression,
      codegen: codegen,
      constants: Constants,
      functions: Functions,
      parse: parser
    });

    var TYPES = {
      QUANTITATIVE: 'quantitative',
      ORDINAL: 'ordinal',
      TEMPORAL: 'temporal',
      NOMINAL: 'nominal',
      GEOJSON: 'geojson'
    };
    var CHANNELS = ["x", "y", "color", "shape", "size", "text", "row", "column"];
    var OPS = ["equal", "lt", "lte", "gt", "gte", "range", "oneOf", "valid"];
    var LOGIC_OPS = ["and", "or", "not"];
    var constants = {
      TYPES: TYPES,
      CHANNELS: CHANNELS,
      OPS: OPS,
      LOGIC_OPS: LOGIC_OPS
    };

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var util = createCommonjsModule(function (module, exports) {

      exports.isArray = Array.isArray || function (obj) {
        return {}.toString.call(obj) === '[object Array]';
      };

      function isString(item) {
        return typeof item === 'string' || item instanceof String;
      }

      exports.isString = isString;

      function isin(item, array) {
        return array.indexOf(item) !== -1;
      }

      exports.isin = isin;

      function json(s, sp) {
        return JSON.stringify(s, null, sp);
      }

      exports.json = json;

      function keys(obj) {
        var k = [],
            x;

        for (x in obj) {
          k.push(x);
        }

        return k;
      }

      exports.keys = keys;

      function duplicate(obj) {
        if (obj === undefined) {
          return undefined;
        }

        return JSON.parse(JSON.stringify(obj));
      }

      exports.duplicate = duplicate;
      exports.copy = duplicate;

      function forEach(obj, f, thisArg) {
        if (obj.forEach) {
          obj.forEach.call(thisArg, f);
        } else {
          for (var k in obj) {
            f.call(thisArg, obj[k], k, obj);
          }
        }
      }

      exports.forEach = forEach;

      function any(arr, f) {
        var i = 0,
            k;

        for (k in arr) {
          if (f(arr[k], k, i++)) {
            return true;
          }
        }

        return false;
      }

      exports.any = any;

      function nestedMap(collection, f, level, filter) {
        return level === 0 ? collection.map(f) : collection.map(function (v) {
          var r = nestedMap(v, f, level - 1);
          return filter ? r.filter(nonEmpty) : r;
        });
      }

      exports.nestedMap = nestedMap;

      function nestedReduce(collection, f, level, filter) {
        return level === 0 ? collection.reduce(f, []) : collection.map(function (v) {
          var r = nestedReduce(v, f, level - 1);
          return filter ? r.filter(nonEmpty) : r;
        });
      }

      exports.nestedReduce = nestedReduce;

      function nonEmpty(grp) {
        return !exports.isArray(grp) || grp.length > 0;
      }

      exports.nonEmpty = nonEmpty;

      function traverse(node, arr) {
        if (node.value !== undefined) {
          arr.push(node.value);
        } else {
          if (node.left) {
            traverse(node.left, arr);
          }

          if (node.right) {
            traverse(node.right, arr);
          }
        }

        return arr;
      }

      exports.traverse = traverse;

      function extend(obj, b) {
        var rest = [];

        for (var _i = 2; _i < arguments.length; _i++) {
          rest[_i - 2] = arguments[_i];
        }

        for (var x, name, i = 1, len = arguments.length; i < len; ++i) {
          x = arguments[i];

          for (name in x) {
            obj[name] = x[name];
          }
        }

        return obj;
      }

      exports.extend = extend;

      function union(arr1, arr2, accessor = d => d) {
        let result = [...arr1];
        return result.concat(arr2.filter(x => !arr1.find(y => accessor(x) === accessor(y))));
      }

      exports.union = union;

      (function (gen) {
        function getOpt(opt) {
          return (opt ? keys(opt) : []).reduce(function (c, k) {
            c[k] = opt[k];
            return c;
          }, Object.create({}));
        }

        gen.getOpt = getOpt;
      })(exports.gen || (exports.gen = {}));

      function powerset(list) {
        var ps = [[]];

        for (var i = 0; i < list.length; i++) {
          for (var j = 0, len = ps.length; j < len; j++) {
            ps.push(ps[j].concat(list[i]));
          }
        }

        return ps;
      }

      exports.powerset = powerset;

      function chooseKorLess(list, k) {
        var subset = [[]];

        for (var i = 0; i < list.length; i++) {
          for (var j = 0, len = subset.length; j < len; j++) {
            var sub = subset[j].concat(list[i]);

            if (sub.length <= k) {
              subset.push(sub);
            }
          }
        }

        return subset;
      }

      exports.chooseKorLess = chooseKorLess;

      function chooseK(list, k) {
        var subset = [[]];
        var kArray = [];

        for (var i = 0; i < list.length; i++) {
          for (var j = 0, len = subset.length; j < len; j++) {
            var sub = subset[j].concat(list[i]);

            if (sub.length < k) {
              subset.push(sub);
            } else if (sub.length === k) {
              kArray.push(sub);
            }
          }
        }

        return kArray;
      }

      exports.chooseK = chooseK;

      function cross(a, b) {
        var x = [];

        for (var i = 0; i < a.length; i++) {
          for (var j = 0; j < b.length; j++) {
            x.push(a[i].concat(b[j]));
          }
        }

        return x;
      }

      exports.cross = cross;

      function find(array, f, obj) {
        for (var i = 0; i < array.length; i += 1) {
          if (f(obj) === f(array[i])) {
            return i;
          }
        }

        return -1;
      }

      exports.find = find;

      function rawEqual(a, b) {
        return JSON.stringify(a) === JSON.stringify(b);
      }

      exports.rawEqual = rawEqual;

      function arrayDiff(a, b, f) {
        return a.filter(function (x) {
          if (!f) {
            return b.findIndex(y => deepEqual(x, y)) < 0;
          } else return find(b, f, x) < 0;
        });
      }

      exports.arrayDiff = arrayDiff;

      function unionObjectArray(a, b, f) {
        return arrayDiff(a, b, f).concat(b);
      }

      exports.unionObjectArray = unionObjectArray;

      function deepEqual(obj1, obj2) {
        if (obj1 === obj2) {
          return true;
        }

        if (isDate(obj1) && isDate(obj2)) {
          return Number(obj1) === Number(obj2);
        }

        if (typeof obj1 === "object" && obj1 !== undefined && typeof obj2 === "object" && obj2 !== undefined) {
          const props1 = Object.keys(obj1);
          const props2 = Object.keys(obj2);

          if (props1.length !== props2.length) {
            return false;
          }

          for (let i = 0; i < props1.length; i++) {
            const prop = props1[i];

            if (!Object.prototype.hasOwnProperty.call(obj2, prop) || !deepEqual(obj1[prop], obj2[prop])) {
              return false;
            }
          }

          return true;
        }

        return false;
      }

      exports.deepEqual = deepEqual;

      function isDate(o) {
        return o !== undefined && typeof o.getMonth === "function";
      } // partitioning the array into N_p arrays


      function partition(arr, N_p) {
        if (arr.length === N_p) {
          return [arr.map(item => [item])];
        } else if (N_p === 1) {
          return [[arr]];
        } else if (N_p > arr.length) {
          throw new Error("Cannot partition the array of ".concat(arr.length, " into ").concat(N_p, "."));
        } else if (arr.length === 0) {
          return;
        }

        let item = [arr[0]];
        let newArr = arr.slice(1);
        let results = partition(newArr, N_p - 1).map(pt => {
          let newPt = duplicate(pt);
          newPt.push(item);
          return newPt;
        });
        return partition(newArr, N_p).reduce((results, currPt) => {
          return results.concat(currPt.map((p, i, currPt) => {
            let newPt = duplicate(currPt);
            let newP = duplicate(p);
            newP.push(item[0]);
            newPt[i] = newP;
            return newPt;
          }));
        }, results);
      }

      exports.partition = partition;

      function permutate(arr) {
        if (arr.length === 1) {
          return [arr];
        }

        if (arr.length === 2) {
          return [arr, [arr[1], arr[0]]];
        }

        return arr.reduce((acc, anchor, i) => {
          const workingArr = duplicate(arr);
          workingArr.splice(i, 1);
          acc = acc.concat(permutate(workingArr).map(newArr => {
            return [anchor].concat(newArr);
          }));
          return acc;
        }, []);
      }

      exports.permutate = permutate;

      function intersection(arr1, arr2, accessor = d => d) {
        return arr2.filter(x => arr1.filter(y => accessor(x) === accessor(y)).length > 0);
      }

      exports.intersection = intersection;

      function unique(arr, accessor = d => d) {
        let maps = arr.map(accessor).reduce((acc, curr) => {
          acc[curr] = true;
          return acc;
        }, {});
        return Object.keys(maps);
      }

      exports.unique = unique;
    });

    var DEFAULT_EDIT_OPS = {
      "markEditOps": {
        "AREA_BAR": {
          "name": "AREA_BAR",
          "cost": 0.03
        },
        "AREA_LINE": {
          "name": "AREA_LINE",
          "cost": 0.02
        },
        "AREA_POINT": {
          "name": "AREA_POINT",
          "cost": 0.04
        },
        "AREA_TEXT": {
          "name": "AREA_TEXT",
          "cost": 0.08
        },
        "AREA_TICK": {
          "name": "AREA_TICK",
          "cost": 0.04
        },
        "BAR_LINE": {
          "name": "BAR_LINE",
          "cost": 0.04
        },
        "BAR_POINT": {
          "name": "BAR_POINT",
          "cost": 0.02
        },
        "BAR_TEXT": {
          "name": "BAR_TEXT",
          "cost": 0.06
        },
        "BAR_TICK": {
          "name": "BAR_TICK",
          "cost": 0.02
        },
        "LINE_POINT": {
          "name": "LINE_POINT",
          "cost": 0.03
        },
        "LINE_TEXT": {
          "name": "LINE_TEXT",
          "cost": 0.07
        },
        "LINE_TICK": {
          "name": "LINE_TICK",
          "cost": 0.03
        },
        "POINT_TEXT": {
          "name": "POINT_TEXT",
          "cost": 0.05
        },
        "POINT_TICK": {
          "name": "POINT_TICK",
          "cost": 0.01
        },
        "TEXT_TICK": {
          "name": "TEXT_TICK",
          "cost": 0.05
        }
      },
      "transformEditOps": {
        "SCALE": {
          "name": "SCALE",
          "cost": 0.6
        },
        "SORT": {
          "name": "SORT",
          "cost": 0.61
        },
        "BIN": {
          "name": "BIN",
          "cost": 0.62
        },
        "AGGREGATE": {
          "name": "AGGREGATE",
          "cost": 0.63
        },
        "ADD_FILTER": {
          "name": "ADD_FILTER",
          "cost": 0.65
        },
        "REMOVE_FILTER": {
          "name": "REMOVE_FILTER",
          "cost": 0.65
        },
        "MODIFY_FILTER": {
          "name": "MODIFY_FILTER",
          "cost": 0.64
        }
      },
      "encodingEditOps": {
        "ADD_X": {
          "name": "ADD_X",
          "cost": 4.59
        },
        "ADD_Y": {
          "name": "ADD_Y",
          "cost": 4.59
        },
        "ADD_COLOR": {
          "name": "ADD_COLOR",
          "cost": 4.55
        },
        "ADD_SHAPE": {
          "name": "ADD_SHAPE",
          "cost": 4.51
        },
        "ADD_SIZE": {
          "name": "ADD_SIZE",
          "cost": 4.53
        },
        "ADD_ROW": {
          "name": "ADD_ROW",
          "cost": 4.57
        },
        "ADD_COLUMN": {
          "name": "ADD_COLUMN",
          "cost": 4.57
        },
        "ADD_TEXT": {
          "name": "ADD_TEXT",
          "cost": 4.49
        },
        "ADD_X_COUNT": {
          "name": "ADD_X_COUNT",
          "cost": 4.58
        },
        "ADD_Y_COUNT": {
          "name": "ADD_Y_COUNT",
          "cost": 4.58
        },
        "ADD_COLOR_COUNT": {
          "name": "ADD_COLOR_COUNT",
          "cost": 4.54
        },
        "ADD_SHAPE_COUNT": {
          "name": "ADD_SHAPE_COUNT",
          "cost": 4.5
        },
        "ADD_SIZE_COUNT": {
          "name": "ADD_SIZE_COUNT",
          "cost": 4.52
        },
        "ADD_ROW_COUNT": {
          "name": "ADD_ROW_COUNT",
          "cost": 4.56
        },
        "ADD_COLUMN_COUNT": {
          "name": "ADD_COLUMN_COUNT",
          "cost": 4.56
        },
        "ADD_TEXT_COUNT": {
          "name": "ADD_TEXT_COUNT",
          "cost": 4.48
        },
        "REMOVE_X_COUNT": {
          "name": "REMOVE_X_COUNT",
          "cost": 4.58
        },
        "REMOVE_Y_COUNT": {
          "name": "REMOVE_Y_COUNT",
          "cost": 4.58
        },
        "REMOVE_COLOR_COUNT": {
          "name": "REMOVE_COLOR_COUNT",
          "cost": 4.54
        },
        "REMOVE_SHAPE_COUNT": {
          "name": "REMOVE_SHAPE_COUNT",
          "cost": 4.5
        },
        "REMOVE_SIZE_COUNT": {
          "name": "REMOVE_SIZE_COUNT",
          "cost": 4.52
        },
        "REMOVE_ROW_COUNT": {
          "name": "REMOVE_ROW_COUNT",
          "cost": 4.56
        },
        "REMOVE_COLUMN_COUNT": {
          "name": "REMOVE_COLUMN_COUNT",
          "cost": 4.56
        },
        "REMOVE_TEXT_COUNT": {
          "name": "REMOVE_TEXT_COUNT",
          "cost": 4.48
        },
        "REMOVE_X": {
          "name": "REMOVE_X",
          "cost": 4.59
        },
        "REMOVE_Y": {
          "name": "REMOVE_Y",
          "cost": 4.59
        },
        "REMOVE_COLOR": {
          "name": "REMOVE_COLOR",
          "cost": 4.55
        },
        "REMOVE_SHAPE": {
          "name": "REMOVE_SHAPE",
          "cost": 4.51
        },
        "REMOVE_SIZE": {
          "name": "REMOVE_SIZE",
          "cost": 4.53
        },
        "REMOVE_ROW": {
          "name": "REMOVE_ROW",
          "cost": 4.57
        },
        "REMOVE_COLUMN": {
          "name": "REMOVE_COLUMN",
          "cost": 4.57
        },
        "REMOVE_TEXT": {
          "name": "REMOVE_TEXT",
          "cost": 4.49
        },
        "MODIFY_X": {
          "name": "MODIFY_X",
          "cost": 4.71
        },
        "MODIFY_Y": {
          "name": "MODIFY_Y",
          "cost": 4.71
        },
        "MODIFY_COLOR": {
          "name": "MODIFY_COLOR",
          "cost": 4.67
        },
        "MODIFY_SHAPE": {
          "name": "MODIFY_SHAPE",
          "cost": 4.63
        },
        "MODIFY_SIZE": {
          "name": "MODIFY_SIZE",
          "cost": 4.65
        },
        "MODIFY_ROW": {
          "name": "MODIFY_ROW",
          "cost": 4.69
        },
        "MODIFY_COLUMN": {
          "name": "MODIFY_COLUMN",
          "cost": 4.69
        },
        "MODIFY_TEXT": {
          "name": "MODIFY_TEXT",
          "cost": 4.61
        },
        "MODIFY_X_ADD_COUNT": {
          "name": "MODIFY_X_ADD_COUNT",
          "cost": 4.7
        },
        "MODIFY_Y_ADD_COUNT": {
          "name": "MODIFY_Y_ADD_COUNT",
          "cost": 4.7
        },
        "MODIFY_COLOR_ADD_COUNT": {
          "name": "MODIFY_COLOR_ADD_COUNT",
          "cost": 4.66
        },
        "MODIFY_SHAPE_ADD_COUNT": {
          "name": "MODIFY_SHAPE_ADD_COUNT",
          "cost": 4.62
        },
        "MODIFY_SIZE_ADD_COUNT": {
          "name": "MODIFY_SIZE_ADD_COUNT",
          "cost": 4.64
        },
        "MODIFY_ROW_ADD_COUNT": {
          "name": "MODIFY_ROW_ADD_COUNT",
          "cost": 4.68
        },
        "MODIFY_COLUMN_ADD_COUNT": {
          "name": "MODIFY_COLUMN_ADD_COUNT",
          "cost": 4.68
        },
        "MODIFY_TEXT_ADD_COUNT": {
          "name": "MODIFY_TEXT_ADD_COUNT",
          "cost": 4.6
        },
        "MODIFY_X_REMOVE_COUNT": {
          "name": "MODIFY_X_REMOVE_COUNT",
          "cost": 4.7
        },
        "MODIFY_Y_REMOVE_COUNT": {
          "name": "MODIFY_Y_REMOVE_COUNT",
          "cost": 4.7
        },
        "MODIFY_COLOR_REMOVE_COUNT": {
          "name": "MODIFY_COLOR_REMOVE_COUNT",
          "cost": 4.66
        },
        "MODIFY_SHAPE_REMOVE_COUNT": {
          "name": "MODIFY_SHAPE_REMOVE_COUNT",
          "cost": 4.62
        },
        "MODIFY_SIZE_REMOVE_COUNT": {
          "name": "MODIFY_SIZE_REMOVE_COUNT",
          "cost": 4.64
        },
        "MODIFY_ROW_REMOVE_COUNT": {
          "name": "MODIFY_ROW_REMOVE_COUNT",
          "cost": 4.68
        },
        "MODIFY_COLUMN_REMOVE_COUNT": {
          "name": "MODIFY_COLUMN_REMOVE_COUNT",
          "cost": 4.68
        },
        "MODIFY_TEXT_REMOVE_COUNT": {
          "name": "MODIFY_TEXT_REMOVE_COUNT",
          "cost": 4.6
        },
        "MOVE_X_ROW": {
          "name": "MOVE_X_ROW",
          "cost": 4.45
        },
        "MOVE_X_COLUMN": {
          "name": "MOVE_X_COLUMN",
          "cost": 4.43
        },
        "MOVE_X_SIZE": {
          "name": "MOVE_X_SIZE",
          "cost": 4.46
        },
        "MOVE_X_SHAPE": {
          "name": "MOVE_X_SHAPE",
          "cost": 4.46
        },
        "MOVE_X_COLOR": {
          "name": "MOVE_X_COLOR",
          "cost": 4.46
        },
        "MOVE_X_Y": {
          "name": "MOVE_X_Y",
          "cost": 4.44
        },
        "MOVE_X_TEXT": {
          "name": "MOVE_X_TEXT",
          "cost": 4.46
        },
        "MOVE_Y_ROW": {
          "name": "MOVE_Y_ROW",
          "cost": 4.43
        },
        "MOVE_Y_COLUMN": {
          "name": "MOVE_Y_COLUMN",
          "cost": 4.45
        },
        "MOVE_Y_SIZE": {
          "name": "MOVE_Y_SIZE",
          "cost": 4.46
        },
        "MOVE_Y_SHAPE": {
          "name": "MOVE_Y_SHAPE",
          "cost": 4.46
        },
        "MOVE_Y_COLOR": {
          "name": "MOVE_Y_COLOR",
          "cost": 4.46
        },
        "MOVE_Y_X": {
          "name": "MOVE_Y_X",
          "cost": 4.44
        },
        "MOVE_Y_TEXT": {
          "name": "MOVE_Y_TEXT",
          "cost": 4.46
        },
        "MOVE_COLOR_ROW": {
          "name": "MOVE_COLOR_ROW",
          "cost": 4.47
        },
        "MOVE_COLOR_COLUMN": {
          "name": "MOVE_COLOR_COLUMN",
          "cost": 4.47
        },
        "MOVE_COLOR_SIZE": {
          "name": "MOVE_COLOR_SIZE",
          "cost": 4.43
        },
        "MOVE_COLOR_SHAPE": {
          "name": "MOVE_COLOR_SHAPE",
          "cost": 4.43
        },
        "MOVE_COLOR_Y": {
          "name": "MOVE_COLOR_Y",
          "cost": 4.46
        },
        "MOVE_COLOR_X": {
          "name": "MOVE_COLOR_X",
          "cost": 4.46
        },
        "MOVE_COLOR_TEXT": {
          "name": "MOVE_COLOR_TEXT",
          "cost": 4.43
        },
        "MOVE_SHAPE_ROW": {
          "name": "MOVE_SHAPE_ROW",
          "cost": 4.47
        },
        "MOVE_SHAPE_COLUMN": {
          "name": "MOVE_SHAPE_COLUMN",
          "cost": 4.47
        },
        "MOVE_SHAPE_SIZE": {
          "name": "MOVE_SHAPE_SIZE",
          "cost": 4.43
        },
        "MOVE_SHAPE_COLOR": {
          "name": "MOVE_SHAPE_COLOR",
          "cost": 4.43
        },
        "MOVE_SHAPE_Y": {
          "name": "MOVE_SHAPE_Y",
          "cost": 4.46
        },
        "MOVE_SHAPE_X": {
          "name": "MOVE_SHAPE_X",
          "cost": 4.46
        },
        "MOVE_SHAPE_TEXT": {
          "name": "MOVE_SHAPE_TEXT",
          "cost": 4.43
        },
        "MOVE_SIZE_ROW": {
          "name": "MOVE_SIZE_ROW",
          "cost": 4.47
        },
        "MOVE_SIZE_COLUMN": {
          "name": "MOVE_SIZE_COLUMN",
          "cost": 4.47
        },
        "MOVE_SIZE_SHAPE": {
          "name": "MOVE_SIZE_SHAPE",
          "cost": 4.43
        },
        "MOVE_SIZE_COLOR": {
          "name": "MOVE_SIZE_COLOR",
          "cost": 4.43
        },
        "MOVE_SIZE_Y": {
          "name": "MOVE_SIZE_Y",
          "cost": 4.46
        },
        "MOVE_SIZE_X": {
          "name": "MOVE_SIZE_X",
          "cost": 4.46
        },
        "MOVE_SIZE_TEXT": {
          "name": "MOVE_SIZE_TEXT",
          "cost": 4.43
        },
        "MOVE_TEXT_ROW": {
          "name": "MOVE_TEXT_ROW",
          "cost": 4.47
        },
        "MOVE_TEXT_COLUMN": {
          "name": "MOVE_TEXT_COLUMN",
          "cost": 4.47
        },
        "MOVE_TEXT_SHAPE": {
          "name": "MOVE_TEXT_SHAPE",
          "cost": 4.43
        },
        "MOVE_TEXT_COLOR": {
          "name": "MOVE_TEXT_COLOR",
          "cost": 4.43
        },
        "MOVE_TEXT_Y": {
          "name": "MOVE_TEXT_Y",
          "cost": 4.46
        },
        "MOVE_TEXT_X": {
          "name": "MOVE_TEXT_X",
          "cost": 4.46
        },
        "MOVE_TEXT_SIZE": {
          "name": "MOVE_TEXT_SIZE",
          "cost": 4.43
        },
        "MOVE_COLUMN_ROW": {
          "name": "MOVE_COLUMN_ROW",
          "cost": 4.44
        },
        "MOVE_COLUMN_SIZE": {
          "name": "MOVE_COLUMN_SIZE",
          "cost": 4.47
        },
        "MOVE_COLUMN_SHAPE": {
          "name": "MOVE_COLUMN_SHAPE",
          "cost": 4.47
        },
        "MOVE_COLUMN_COLOR": {
          "name": "MOVE_COLUMN_COLOR",
          "cost": 4.47
        },
        "MOVE_COLUMN_Y": {
          "name": "MOVE_COLUMN_Y",
          "cost": 4.45
        },
        "MOVE_COLUMN_X": {
          "name": "MOVE_COLUMN_X",
          "cost": 4.43
        },
        "MOVE_COLUMN_TEXT": {
          "name": "MOVE_COLUMN_TEXT",
          "cost": 4.47
        },
        "MOVE_ROW_COLUMN": {
          "name": "MOVE_ROW_COLUMN",
          "cost": 4.44
        },
        "MOVE_ROW_SIZE": {
          "name": "MOVE_ROW_SIZE",
          "cost": 4.47
        },
        "MOVE_ROW_SHAPE": {
          "name": "MOVE_ROW_SHAPE",
          "cost": 4.47
        },
        "MOVE_ROW_COLOR": {
          "name": "MOVE_ROW_COLOR",
          "cost": 4.47
        },
        "MOVE_ROW_Y": {
          "name": "MOVE_ROW_Y",
          "cost": 4.43
        },
        "MOVE_ROW_X": {
          "name": "MOVE_ROW_X",
          "cost": 4.45
        },
        "MOVE_ROW_TEXT": {
          "name": "MOVE_ROW_TEXT",
          "cost": 4.47
        },
        "SWAP_X_Y": {
          "name": "SWAP_X_Y",
          "cost": 4.42
        },
        "SWAP_ROW_COLUMN": {
          "name": "SWAP_ROW_COLUMN",
          "cost": 4.41
        },
        "ceiling": {
          "cost": 47.1,
          "alternatingCost": 51.81
        }
      }
    };
    var editOpSet = {
      DEFAULT_EDIT_OPS: DEFAULT_EDIT_OPS
    };

    function neighbors(spec, additionalFields, additionalChannels, importedEncodingEditOps) {
      var neighbors = [];
      var encodingEditOps = importedEncodingEditOps || editOpSet.DEFAULT_ENCODING_EDIT_OPS;
      var inChannels = util.keys(spec.encoding);
      var exChannels = additionalChannels;
      inChannels.forEach(function (channel) {
        var newNeighbor = util.duplicate(spec);
        var editOpType = "REMOVE_" + channel.toUpperCase();
        editOpType += spec.encoding[channel].field === "*" ? "_COUNT" : "";
        var editOp = util.duplicate(encodingEditOps[editOpType]);
        var newAdditionalFields = util.duplicate(additionalFields);

        if (util.find(newAdditionalFields, util.rawEqual, newNeighbor.encoding[channel]) === -1) {
          newAdditionalFields.push(newNeighbor.encoding[channel]);
        }

        var newAdditionalChannels = util.duplicate(additionalChannels);
        editOp.detail = {
          "before": {
            "field": newNeighbor.encoding[channel].field,
            channel
          },
          "after": undefined
        };
        newAdditionalChannels.push(channel);
        delete newNeighbor.encoding[channel];

        {
          newNeighbor.editOp = editOp;
          newNeighbor.additionalFields = newAdditionalFields;
          newNeighbor.additionalChannels = newAdditionalChannels;
          neighbors.push(newNeighbor);
        }
        additionalFields.forEach(function (field, index) {
          if (field.field !== spec.encoding[channel].field || field.type !== spec.encoding[channel].type) {
            newNeighbor = util.duplicate(spec);
            editOpType = "MODIFY_" + channel.toUpperCase();

            if (spec.encoding[channel].field === "*" && field.field !== "*") {
              editOpType += "_REMOVE_COUNT";
            } else if (spec.encoding[channel].field !== "*" && field.field === "*") {
              editOpType += "_ADD_COUNT";
            }

            editOp = util.duplicate(encodingEditOps[editOpType]);
            newAdditionalFields = util.duplicate(additionalFields);
            newAdditionalFields.splice(index, 1);

            if (util.find(newAdditionalFields, util.rawEqual, newNeighbor.encoding[channel]) === -1) {
              newAdditionalFields.push(newNeighbor.encoding[channel]);
            }

            newAdditionalChannels = util.duplicate(additionalChannels);
            newNeighbor.encoding[channel] = field;
            editOp.detail = {
              "before": { ...spec.encoding[channel],
                channel
              },
              "after": { ...field,
                channel
              }
            };

            {
              newNeighbor.editOp = editOp;
              newNeighbor.additionalFields = newAdditionalFields;
              newNeighbor.additionalChannels = newAdditionalChannels;
              neighbors.push(newNeighbor);
            }
          }
        });
        inChannels.forEach(function (anotherChannel) {
          if (anotherChannel === channel || ["x", "y"].indexOf(channel) < 0 || ["x", "y"].indexOf(anotherChannel) < 0) {
            return;
          }

          newNeighbor = util.duplicate(spec);
          editOp = util.duplicate(encodingEditOps["SWAP_X_Y"]);
          newAdditionalFields = util.duplicate(additionalFields);
          newAdditionalChannels = util.duplicate(additionalChannels);
          var tempChannel = util.duplicate(newNeighbor.encoding[channel]);
          newNeighbor.encoding[channel] = newNeighbor.encoding[anotherChannel];
          newNeighbor.encoding[anotherChannel] = tempChannel;
          editOp.detail = {
            "before": {
              "field": spec.encoding["x"].field,
              "channel": "x"
            },
            "after": {
              "field": spec.encoding["y"].field,
              "channel": "y"
            }
          };

          {
            newNeighbor.editOp = editOp;
            newNeighbor.additionalFields = newAdditionalFields;
            newNeighbor.additionalChannels = newAdditionalChannels;
            neighbors.push(newNeighbor);
          }
        });
        exChannels.forEach(function (exChannel, index) {
          newNeighbor = util.duplicate(spec);
          var newNeighborChannels = (channel + "_" + exChannel).toUpperCase();
          editOp = util.duplicate(encodingEditOps["MOVE_" + newNeighborChannels]);
          newAdditionalFields = util.duplicate(additionalFields);
          newAdditionalChannels = util.duplicate(additionalChannels);
          newAdditionalChannels.splice(index, 1);
          newAdditionalChannels.push(channel);
          newNeighbor.encoding[exChannel] = util.duplicate(newNeighbor.encoding[channel]);
          delete newNeighbor.encoding[channel];
          editOp.detail = {
            "before": {
              channel
            },
            "after": {
              "channel": exChannel
            }
          };

          {
            newNeighbor.editOp = editOp;
            newNeighbor.additionalFields = newAdditionalFields;
            newNeighbor.additionalChannels = newAdditionalChannels;
            neighbors.push(newNeighbor);
          }
        });
      });
      exChannels.forEach(function (channel, chIndex) {
        additionalFields.forEach(function (field, index) {
          var newNeighbor = util.duplicate(spec);
          var editOpType = "ADD_" + channel.toUpperCase();
          editOpType += field.field === "*" ? "_COUNT" : "";
          var editOp = util.duplicate(encodingEditOps[editOpType]);
          var newAdditionalFields = util.duplicate(additionalFields);
          var newAdditionalChannels = util.duplicate(additionalChannels);
          newAdditionalFields.splice(index, 1);
          newNeighbor.encoding[channel] = field;
          newAdditionalChannels.splice(chIndex, 1);
          editOp.detail = {
            "before": undefined,
            "after": {
              "field": field.field,
              channel
            }
          };

          {
            newNeighbor.editOp = editOp;
            newNeighbor.additionalFields = newAdditionalFields;
            newNeighbor.additionalChannels = newAdditionalChannels;
            neighbors.push(newNeighbor);
          }
        });
      });

      for (var i = 0; i < neighbors.length; i += 1) {
        for (var j = i + 1; j < neighbors.length; j += 1) {
          if (sameEncoding(neighbors[i].encoding, neighbors[j].encoding)) {
            neighbors.splice(j, 1);
            j -= 1;
          }
        }
      }

      return neighbors;
    }

    var neighbors_1 = neighbors;

    function sameEncoding(a, b) {
      var aKeys = util.keys(a);
      var bKeys = util.keys(b);

      if (aKeys.length !== bKeys.length) {
        return false;
      }

      var allKeys = util.union(aKeys, bKeys);

      for (var i = 0; i < allKeys.length; i += 1) {
        var key = allKeys[i];

        if (!(a[key] && b[key])) {
          return false;
        }

        if (a[key].field !== b[key].field || a[key].type !== b[key].type) {
          return false;
        }
      }

      return true;
    }

    var sameEncoding_1 = sameEncoding;
    var neighbor = {
      neighbors: neighbors_1,
      sameEncoding: sameEncoding_1
    };

    var expr = /*@__PURE__*/getAugmentedNamespace(vegaExpression_module);

    const {
      TYPES: TYPES$1,
      CHANNELS: CHANNELS$1,
      OPS: OPS$1,
      LOGIC_OPS: LOGIC_OPS$1
    } = constants;
    const DEFAULT_EDIT_OPS$1 = editOpSet.DEFAULT_EDIT_OPS;

    async function transition(s, d, importedTransitionCosts, transOptions) {
      var importedMarkEditOps = importedTransitionCosts ? importedTransitionCosts.markEditOps : DEFAULT_EDIT_OPS$1["markEditOps"];
      var importedTransformEditOps = importedTransitionCosts ? importedTransitionCosts.transformEditOps : DEFAULT_EDIT_OPS$1["transformEditOps"];
      var importedEncodingEditOps = importedTransitionCosts ? importedTransitionCosts.encodingEditOps : DEFAULT_EDIT_OPS$1["encodingEditOps"];

      let _transformEditOps = await transformEditOps(s, d, importedTransformEditOps, transOptions);

      var trans = {
        mark: markEditOps(s, d, importedMarkEditOps).map(eo => {
          return { ...eo,
            type: "mark"
          };
        }),
        transform: _transformEditOps.map(eo => {
          return { ...eo,
            type: "transform"
          };
        }),
        encoding: encodingEditOps(s, d, importedEncodingEditOps).map(eo => {
          return { ...eo,
            type: "encoding"
          };
        })
      }; //Todo: if there is a MOVE_A_B and the field has Transform, ignore the transform

      const re = new RegExp("^MOVE_");
      trans.transform = trans.transform.filter(editOp => {
        if (editOp.name.indexOf("FILTER") >= 0) {
          return true;
        }

        let moveEditOps = trans.encoding.filter(eo => re.test(eo.name));

        if (moveEditOps.length === 0) {
          return true;
        }

        moveEditOps.forEach(moveEditOp => {
          let sChannel = moveEditOp.detail.before.channel,
              dChannel = moveEditOp.detail.after.channel;
          let removed = editOp.detail.findIndex(dt => dt.how === "removed" && dt.channel === sChannel);
          let added = editOp.detail.findIndex(dt => dt.how === "added" && dt.channel === dChannel);

          if (removed >= 0 && added >= 0) {
            editOp.detail = editOp.detail.filter((dt, i) => [removed, added].indexOf(i) < 0);
          }
        });
        return editOp.detail.length > 0;
      });
      var cost = 0;
      cost = trans.encoding.reduce(function (prev, editOp) {
        if (editOp.name.indexOf('_COUNT') >= 0) {
          var channel = editOp.name.replace(/COUNT/g, '').replace(/ADD/g, '').replace(/REMOVE/g, '').replace(/MODIFY/g, '').replace(/_/g, '').toLowerCase();
          var aggEditOp = trans.transform.filter(function (editOp) {
            return editOp.name === "AGGREGATE";
          })[0];

          if (aggEditOp && aggEditOp.detail.length === 1 && aggEditOp.detail.filter(function (dt) {
            return dt.channel.toLowerCase() === channel;
          }).length) {
            aggEditOp.cost = 0;
          }

          var binEditOp = trans.transform.filter(function (editOp) {
            return editOp.name === "BIN";
          })[0];

          if (binEditOp && binEditOp.detail.filter(function (dt) {
            if (dt.how === "added") {
              return d.encoding[dt.channel].type === TYPES$1.QUANTITATIVE;
            } else {
              return s.encoding[dt.channel].type === TYPES$1.QUANTITATIVE;
            }
          }).length > 0) {
            binEditOp.cost = 0;
          }
        }

        prev += editOp.cost;
        return prev;
      }, cost);
      cost = trans.mark.reduce(function (prev, editOp) {
        prev += editOp.cost;
        return prev;
      }, cost);
      cost = trans.transform.reduce(function (prev, editOp) {
        prev += editOp.cost;
        return prev;
      }, cost);
      return { ...trans,
        cost
      };
    }

    var transition_1 = transition;

    function markEditOps(s, d, importedMarkEditOps) {
      var editOps = [];
      var markEditOps = importedMarkEditOps || DEFAULT_EDIT_OPS$1["markEditOps"];
      var newEditOp;
      const sMarkType = typeof s.mark === "object" ? s.mark.type : s.mark;
      const dMarkType = typeof d.mark === "object" ? d.mark.type : d.mark;

      if (!sMarkType || !dMarkType || sMarkType === dMarkType || sMarkType === "null" || dMarkType === "null") {
        return editOps;
      } else {
        var editOpName = [sMarkType.toUpperCase(), dMarkType.toUpperCase()].sort().join("_");

        if (markEditOps[editOpName]) {
          newEditOp = util.duplicate(markEditOps[editOpName]);
          newEditOp.detail = {
            "before": sMarkType,
            "after": dMarkType
          };
          editOps.push(newEditOp);
        } else {
          console.error("Cannot find ".concat(editOpName, " marktype change edit op."));
        }
      }

      return editOps;
    }

    var markEditOps_1 = markEditOps;

    async function transformEditOps(s, d, importedTransformEditOps, transOptions) {
      const TRANSFORM_TYPES = ["SCALE", "SORT", "AGGREGATE", "BIN", "SETTYPE"];
      var transformEditOps = importedTransformEditOps || DEFAULT_EDIT_OPS$1["transformEditOps"];
      var editOps = [];

      for (let i = 0; i < CHANNELS$1.length; i++) {
        const channel = CHANNELS$1[i];

        for (let j = 0; j < TRANSFORM_TYPES.length; j++) {
          const transformType = TRANSFORM_TYPES[j];
          let editOp;

          if (transformType === "SETTYPE" && transformEditOps[transformType]) {
            editOp = transformSettype(s, d, channel, transformEditOps);
          } else if (transformType === "SCALE" && transformEditOps[transformType]) {
            editOp = await scaleEditOps(s, d, channel, transformEditOps[transformType], transOptions);
          } else if (transformEditOps[transformType]) {
            editOp = transformBasic(s, d, channel, transformType, transformEditOps);
          }

          if (editOp) {
            let found = editOps.find(eo => eo.name === editOp.name);

            if (found) {
              found.detail.push(editOp.detail);
            } else {
              editOp.detail = [editOp.detail];
              editOps.push(editOp);
            }
          }
        }
      }
      var importedFilterEditOps = {
        "MODIFY_FILTER": transformEditOps["MODIFY_FILTER"],
        "ADD_FILTER": transformEditOps["ADD_FILTER"],
        "REMOVE_FILTER": transformEditOps["REMOVE_FILTER"]
      };
      editOps = editOps.concat(filterEditOps(s, d, importedFilterEditOps));
      return editOps;
    }

    var transformEditOps_1 = transformEditOps;

    function transformBasic(s, d, channel, transform, transformEditOps) {
      var sHas = false;
      var dHas = false;
      var editOp;
      var sEditOp, dEditOp;

      if (s.encoding[channel] && s.encoding[channel][transform.toLowerCase()]) {
        sHas = true;
        sEditOp = s.encoding[channel][transform.toLowerCase()];
      }

      if (d.encoding[channel] && d.encoding[channel][transform.toLowerCase()]) {
        dHas = true;
        dEditOp = d.encoding[channel][transform.toLowerCase()];
      }

      if (sHas && dHas && !util.rawEqual(sEditOp, dEditOp)) {
        editOp = util.duplicate(transformEditOps[transform]);
        editOp.detail = {
          how: "modified",
          channel: channel
        };
        return editOp;
      } else if (sHas && !dHas) {
        editOp = util.duplicate(transformEditOps[transform]);
        editOp.detail = {
          how: "removed",
          channel: channel
        };
        return editOp;
      } else if (!sHas && dHas) {
        editOp = util.duplicate(transformEditOps[transform]);
        editOp.detail = {
          how: "added",
          channel: channel
        };
        return editOp;
      }
    }

    var transformBasic_1 = transformBasic;

    async function scaleEditOps(s, d, channel, scaleTransformEditOps, transOptions) {
      var sHas = false,
          sOnlyHasDomainRelated = false;
      var dHas = false,
          dOnlyHasDomainRelated = false;
      var editOp, sScaleDef, dScaleDef;

      if (s.encoding[channel] && s.encoding[channel].scale) {
        sHas = true;
        sScaleDef = { ...s.encoding[channel].scale
        };

        if (!Object.keys(sScaleDef).find(key => ["domain", "zero"].indexOf(key) < 0)) {
          sOnlyHasDomainRelated = true;
        }
      }

      if (d.encoding[channel] && d.encoding[channel].scale) {
        dHas = true;
        dScaleDef = { ...d.encoding[channel].scale
        };

        if (!Object.keys(dScaleDef).find(key => ["domain", "zero"].indexOf(key) < 0)) {
          dOnlyHasDomainRelated = true;
        }
      }

      if (transOptions && transOptions.omitIncludeRawDomain) {
        if (sScaleDef && sScaleDef.domain && dScaleDef.domain === "unaggregated") {
          delete sScaleDef.domain;

          if (Object.keys(sScaleDef).length === 0) {
            sOnlyHasDomainRelated = false;
            sHas = false;
          }
        }

        if (dScaleDef && dScaleDef.domain && dScaleDef.domain === "unaggregated") {
          delete dScaleDef.domain;

          if (Object.keys(dScaleDef).length === 0) {
            dOnlyHasDomainRelated = false;
            dHas = false;
          }
        }
      }

      if (sHas && dHas && !util.rawEqual(sScaleDef, dScaleDef)) {
        if (sOnlyHasDomainRelated && dOnlyHasDomainRelated && (await sameDomain(s, d, channel))) {
          return;
        }

        editOp = util.duplicate(scaleTransformEditOps);
        editOp.detail = {
          how: "modified",
          channel: channel,
          fieldType: {
            from: s.encoding[channel].type,
            to: d.encoding[channel].type
          }
        };
        return editOp;
      } else if (sHas && !dHas) {
        if (sOnlyHasDomainRelated && (await sameDomain(s, d, channel))) {
          return;
        }

        editOp = util.duplicate(scaleTransformEditOps);
        editOp.detail = {
          how: "removed",
          channel: channel,
          fieldType: s.encoding[channel].type
        };
        return editOp;
      } else if (!sHas && dHas) {
        if (dOnlyHasDomainRelated && (await sameDomain(s, d, channel))) {
          return;
        }

        editOp = util.duplicate(scaleTransformEditOps);
        editOp.detail = {
          how: "added",
          channel: channel,
          fieldType: d.encoding[channel].type
        };
        return editOp;
      }
    }

    var scaleEditOps_1 = scaleEditOps;

    async function sameDomain(s, d, channel) {
      let dView, sView;

      try {
        dView = await new vega__default['default'].View(vega__default['default'].parse(vl__default['default'].compile(util.duplicate(d)).spec), {
          renderer: "svg"
        }).runAsync();
        sView = await new vega__default['default'].View(vega__default['default'].parse(vl__default['default'].compile(util.duplicate(s)).spec), {
          renderer: "svg"
        }).runAsync();
      } catch (e) {
        return false;
      }

      const sScale = sView._runtime.scales[channel].value;
      const dScale = dView._runtime.scales[channel].value;
      return util.deepEqual(sScale.domain(), dScale.domain());
    }

    var sameDomain_1 = sameDomain;

    function filterEditOps(s, d, importedFilterEditOps) {
      var sFilters = [],
          dFilters = [];
      var editOps = [];

      if (s.transform) {
        sFilters = getFilters(s.transform.filter(trsfm => trsfm.filter).map(trsfm => trsfm.filter));
      }

      if (d.transform) {
        dFilters = getFilters(d.transform.filter(trsfm => trsfm.filter).map(trsfm => trsfm.filter));
      }

      if (sFilters.length === 0 && dFilters.length === 0) {
        return editOps;
      }

      var dOnly = util.arrayDiff(dFilters, sFilters);
      var sOnly = util.arrayDiff(sFilters, dFilters);
      var isFind = false;

      for (var i = 0; i < dOnly.length; i++) {
        for (var j = 0; j < sOnly.length; j++) {
          if (dOnly[i].id === sOnly[j].id) {
            var newEditOp = util.duplicate(importedFilterEditOps["MODIFY_FILTER"]);
            newEditOp.detail = {
              "what": [],
              "id": sOnly[j].id,
              "before": [],
              "after": [],
              "sFilter": sOnly[j],
              "eFilter": dOnly[i]
            };

            if (!util.deepEqual(sOnly[j].op, dOnly[i].op)) {
              newEditOp.detail.what.push("op");
              newEditOp.detail.before.push(sOnly[j].op);
              newEditOp.detail.after.push(dOnly[i].op);
            }

            if (!util.deepEqual(sOnly[j].value, dOnly[i].value)) {
              newEditOp.detail.what.push("value");
              newEditOp.detail.before.push(sOnly[j].value);
              newEditOp.detail.after.push(dOnly[i].value);
            }

            editOps.push(newEditOp);
            dOnly.splice(i, 1);
            sOnly.splice(j, 1);
            isFind = true;
            break;
          }
        }

        if (isFind) {
          isFind = false;
          i--;
          continue;
        }
      }

      for (var i = 0; i < dOnly.length; i++) {
        var newEditOp = util.duplicate(importedFilterEditOps["ADD_FILTER"]);
        newEditOp.detail = newEditOp.detail = {
          "id": dOnly[i].id,
          "what": ["field", "op", "value"],
          "before": [undefined, undefined, undefined],
          "after": [dOnly[i].field, dOnly[i].op, dOnly[i].value],
          "eFilter": dOnly[i],
          "sFilter": undefined
        };
        editOps.push(newEditOp);
      }

      for (var i = 0; i < sOnly.length; i++) {
        var newEditOp = util.duplicate(importedFilterEditOps["REMOVE_FILTER"]);
        newEditOp.detail = newEditOp.detail = {
          "id": sOnly[i].id,
          "what": ["field", "op", "value"],
          "before": [sOnly[i].field, sOnly[i].op, sOnly[i].value],
          "after": [undefined, undefined, undefined],
          "sFilter": sOnly[i],
          "eFilter": undefined
        };
        editOps.push(newEditOp);
      }

      return editOps;
    }

    var filterEditOps_1 = filterEditOps;

    function getFilters(filterExpression) {
      let filters;

      if (util.isArray(filterExpression)) {
        filters = filterExpression.reduce((acc, expression) => {
          return acc.concat(parsePredicateFilter(expression));
        }, []);
      } else {
        filters = parsePredicateFilter(filterExpression);
      }

      filters = d3__default['default'].groups(filters, filter => filter.id).map(group => {
        return {
          id: group[0],
          field: group[1].map(filter => filter.field),
          op: group[1].map(filter => filter.op),
          value: group[1].map(filter => filter.value)
        };
      });
      return filters;
    }

    var getFilters_1 = getFilters;

    function parsePredicateFilter(expression) {
      let parsed = [];

      if (util.isString(expression)) {
        parsed = parsed.concat(stringFilter(expression));
      } else {
        LOGIC_OPS$1.filter(logicOp => expression.hasOwnProperty(logicOp)).forEach(logicOp => {
          let subParsed;

          if (util.isArray(expression[logicOp])) {
            subParsed = expression[logicOp].reduce((subParsed, expr) => {
              return subParsed.concat(parsePredicateFilter(expr));
            }, []);
          } else {
            subParsed = parsePredicateFilter(expression[logicOp]);
          }

          let id = subParsed.map(f => f.id).join("_");
          parsed.push({
            "id": "".concat(logicOp, ">[").concat(id, "]"),
            "op": logicOp,
            "value": subParsed
          });
        });
        OPS$1.filter(op => expression.hasOwnProperty(op)).forEach(op => {
          parsed.push({
            "id": expression.field,
            "field": expression.field,
            "op": op,
            "value": JSON.stringify(expression[op])
          });
        });
      }

      if (parsed.length === 0) {
        console.log("WARN: cannot parse filters.");
      }

      return parsed;
    }

    var parsePredicateFilter_1 = parsePredicateFilter;

    function stringFilter(expression) {
      var parser = expr["parse"];
      var expressionTree = parser(expression);
      return binaryExprsFromExprTree(expressionTree, [], 0).map(function (bExpr) {
        return {
          "id": bExpr.left.property.name,
          "field": bExpr.left.property.name,
          "op": bExpr.operator,
          "value": bExpr.right.raw
        };
      });

      function binaryExprsFromExprTree(tree, arr, depth) {
        if (tree.operator === '||' || tree.operator === '&&') {
          arr = binaryExprsFromExprTree(tree.left, arr, depth + 1);
          arr = binaryExprsFromExprTree(tree.right, arr, depth + 1);
        } else if (['==', '===', '!==', '!=', '<', '<=', '>', '>='].indexOf(tree.operator) >= 0) {
          tree.depth = depth;
          arr.push(tree);
        }

        return arr;
      }
    }

    function transformSettype(s, d, channel, transformEditOps) {
      var editOp;

      if (s.encoding[channel] && d.encoding[channel] && d.encoding[channel]["field"] === s.encoding[channel]["field"] && d.encoding[channel]["type"] !== s.encoding[channel]["type"]) {
        editOp = util.duplicate(transformEditOps["SETTYPE"]);
        editOp.detail = {
          "before": s.encoding[channel]["type"],
          "after": d.encoding[channel]["type"],
          channel: channel
        };
        return editOp;
      }
    }

    var transformSettype_1 = transformSettype;

    function encodingEditOps(s, d, importedEncodingEditOps) {
      if (neighbor.sameEncoding(s.encoding, d.encoding)) {
        return [];
      }

      var sChannels = util.keys(s.encoding);
      var sFields = sChannels.map(function (key) {
        return s.encoding[key];
      });
      var dChannels = util.keys(d.encoding);
      var dFields = dChannels.map(function (key) {
        return d.encoding[key];
      });
      var additionalFields = util.union(dFields, sFields, function (field) {
        return field.field + "_" + field.type;
      });
      var additionalChannels = util.arrayDiff(dChannels, sChannels);
      var u;

      function nearestNode(nodes) {
        var minD = Infinity;
        var argMinD = -1;
        nodes.forEach(function (node, index) {
          if (node.distance < minD) {
            minD = node.distance;
            argMinD = index;
          }
        });
        return nodes.splice(argMinD, 1)[0];
      }

      var nodes = neighbor.neighbors(s, additionalFields, additionalChannels, importedEncodingEditOps).map(function (neighbor) {
        neighbor.distance = neighbor.editOp.cost, neighbor.prev = [s];
        return neighbor;
      });
      s.distance = 0;
      s.prev = [];
      var doneNodes = [s];

      while (nodes.length > 0) {
        u = nearestNode(nodes);

        if (neighbor.sameEncoding(u.encoding, d.encoding)) {
          break;
        }

        if (u.distance >= importedEncodingEditOps.ceiling.cost) {
          return [{
            name: 'OVER_THE_CEILING',
            cost: importedEncodingEditOps.ceiling.alternatingCost
          }];
        }

        var newNodes = neighbor.neighbors(u, additionalFields, u.additionalChannels, importedEncodingEditOps);
        newNodes.forEach(function (newNode) {
          var node;

          for (var i = 0; i < doneNodes.length; i += 1) {
            if (neighbor.sameEncoding(doneNodes[i].encoding, newNode.encoding)) {
              return;
            }
          }

          for (var i = 0; i < nodes.length; i += 1) {
            if (neighbor.sameEncoding(nodes[i].encoding, newNode.encoding)) {
              node = nodes[i];
              break;
            }
          }

          if (node) {
            if (node.distance > u.distance + newNode.editOp.cost) {
              node.distance = u.distance + newNode.editOp.cost;
              node.editOp = newNode.editOp;
              node.prev = u.prev.concat([u]);
            }
          } else {
            newNode.distance = u.distance + newNode.editOp.cost;
            newNode.prev = u.prev.concat([u]);
            nodes.push(newNode);
          }
        });
        doneNodes.push(u);
      }

      if (!neighbor.sameEncoding(u.encoding, d.encoding) && nodes.length === 0) {
        return [{
          name: "UNREACHABLE",
          cost: 999
        }];
      }

      var result = [].concat(u.prev.map(function (node) {
        return node.editOp;
      }).filter(function (editOp) {
        return editOp;
      }));
      result.push(u.editOp);
      return result;
    }

    var encodingEditOps_1 = encodingEditOps;
    var trans = {
      transition: transition_1,
      markEditOps: markEditOps_1,
      transformEditOps: transformEditOps_1,
      transformBasic: transformBasic_1,
      scaleEditOps: scaleEditOps_1,
      sameDomain: sameDomain_1,
      filterEditOps: filterEditOps_1,
      getFilters: getFilters_1,
      parsePredicateFilter: parsePredicateFilter_1,
      transformSettype: transformSettype_1,
      encodingEditOps: encodingEditOps_1
    };

    function TSP(matrix, value, fixFirst) {
      var head, sequences;

      function enumSequences(arr) {
        var out = [];

        if (arr.length === 1) {
          out.push(arr);
          return out;
        } else {
          for (var i = 0; i < arr.length; i++) {
            var arrTemp = JSON.parse(JSON.stringify(arr));
            var head = arrTemp.splice(i, 1);
            enumSequences(arrTemp).map(function (seq) {
              out.push(head.concat(seq));
            });
          }

          return out;
        }
      }

      var sequence = matrix[0].map(function (elem, i) {
        return i;
      });

      if (!isNaN(fixFirst)) {
        head = sequence.splice(fixFirst, 1);
        sequences = enumSequences(sequence).map(function (elem) {
          return head.concat(elem);
        });
      } else {
        sequences = enumSequences(sequence);
      }

      var minDistance = Infinity;
      var distance = 0;
      var out = [];
      var all = [];

      for (var i = 0; i < sequences.length; i++) {
        if (i * 100 / sequences.length % 10 === 0) ;

        for (var j = 0; j < sequences[i].length - 1; j++) {
          distance += matrix[sequences[i][j]][sequences[i][j + 1]][value];
        }

        distance = Math.round(distance * 10000) / 10000;
        all.push({
          sequence: sequences[i],
          distance: distance
        });

        if (distance <= minDistance) {
          if (distance === minDistance) {
            out.push({
              sequence: sequences[i],
              distance: minDistance
            });
          } else {
            out = [];
            out.push({
              sequence: sequences[i],
              distance: distance
            });
          }
          minDistance = distance; // console.log(i,minDistance);
        }

        distance = 0;
      }

      return {
        out: out,
        all: all
      };
    } // var matrix = JSON.parse(fs.readFileSync(process.argv[2],'utf8'));
    // var fixFirst = Number(process.argv[3]);
    // console.log(TSP(matrix,"rank",fixFirst));


    var TSP_1 = {
      TSP: TSP
    };

    function scoreSimple(coverage, patternLength, inputLength) {
      var w_c = 1,
          w_l = 0;
      return (coverage * w_c + patternLength / inputLength * w_l) / (w_c + w_l);
    }

    function PatternOptimizer(inputArray, uniqTransitionSets) {
      var Optimized = [],
          maxScore = 0; // var inputDistance = distance(inputArray, uniqTransitionSets);

      for (var l = 1; l <= inputArray.length; l++) {
        for (var i = 0; i < inputArray.length - l + 1; i++) {
          var appear = [i];

          for (var j = 0; j < inputArray.length - l + 1; j++) {
            if (i !== j && isSameSub(inputArray, i, i + (l - 1), j)) {
              appear.push(j);
            }
          }

          var overlap = false;

          for (var k = 0; k < appear.length - 1; k++) {
            if (appear[k + 1] - appear[k] < l) {
              overlap = true;
              break;
            } // if(period !== 0 && period !== appear[k+1] - appear[k]){
            //   rythmic = false;
            //   break;
            // }
            // period = appear[k+1] - appear[k];

          } // if (appear.length > 1 && !overlap && rythmic ){


          if (appear.length > 1 && !overlap) {
            var newPattern = dup(inputArray).splice(i, l);
            var RPcoverage = coverage(inputArray, l, appear);

            if (!Optimized.find(function (rp) {
              return s(rp.pattern) === s(newPattern);
            })) {
              newPattern = {
                'pattern': newPattern,
                'appear': appear,
                'coverage': RPcoverage
              };
              newPattern.patternScore = scoreSimple(newPattern.coverage, l, inputArray.length);

              if (newPattern.patternScore > maxScore) {
                maxScore = newPattern.patternScore;
                Optimized = [newPattern];
              } else if (newPattern.patternScore === maxScore) {
                Optimized.push(newPattern);
              }
            }
          }
        }
      }

      return Optimized;
    }

    function coverage(array, Patternlength, appear) {
      var s,
          coverage = 0;

      for (var i = 0; i < appear.length - 1; i++) {
        s = i;

        while (appear[i] + Patternlength > appear[i + 1]) {
          i++;
        }

        coverage += appear[i] + Patternlength - appear[s];
      }

      if (i === appear.length - 1) {
        coverage += Patternlength;
      }
      return coverage / array.length;
    }

    function isSameSub(array, i1, f1, i2, f2) {
      for (var i = 0; i < f1 - i1 + 1; i++) {
        if (array[i1 + i] !== array[i2 + i]) {
          return false;
        }
      }

      return true;
    }

    function s(a) {
      return JSON.stringify(a);
    }

    function dup(a) {
      return JSON.parse(s(a));
    } // console.log(PatternOptimizer("231111".split(''),[1,1,1,1]));
    // console.log(coverage("sdsdxxxasdsdsdaasdsdsdsdsdsdsdsd".split(''), 2, [ 0, 2, 8, 10, 12, 16, 18, 20, 22, 24, 26, 28, 30 ]))


    var PatternOptimizer_1 = {
      PatternOptimizer: PatternOptimizer
    };

    function TieBreaker(result, transitionSetsFromEmptyVis) {
      var filterState = {};
      var filterScore = [];
      var filterSequenceCost = 0;

      for (var i = 0; i < result.charts.length; i++) {
        let spec = result.charts[i];

        if (spec.transform) {
          let filters = spec.transform.filter(trsfm => trsfm.filter).map(trsfm => trsfm.filter);

          for (var j = 0; j < filters.length; j++) {
            let filter = filters[j];

            if (filter.hasOwnProperty("field") && filter.hasOwnProperty("equal")) {
              if (filterState[filter.field]) {
                filterState[filter.field].push(filter.equal);
              } else {
                filterState[filter.field] = [filter.equal];
                filterScore.push({
                  "field": filter.field,
                  "score": 0
                });
              }
            }
          }
        }
      }

      for (var i = 0; i < filterScore.length; i++) {
        for (var j = 1; j < filterState[filterScore[i].field].length; j++) {
          if (filterState[filterScore[i].field][j - 1] < filterState[filterScore[i].field][j]) {
            filterScore[i].score += 1;
          } else if (filterState[filterScore[i].field][j - 1] > filterState[filterScore[i].field][j]) {
            filterScore[i].score -= 1;
          }
        }

        filterSequenceCost += Math.abs(filterScore[i].score + 0.1) / (filterState[filterScore[i].field].length - 1 + 0.1);
      }

      filterSequenceCost = filterScore.length > 0 ? 1 - filterSequenceCost / filterScore.length : 0;
      return {
        'tiebreakCost': filterSequenceCost,
        'reasons': filterScore
      };
    }

    var TieBreaker_1 = {
      TieBreaker: TieBreaker
    };

    async function sequence(specs, options, editOpSet$1, callback) {
      if (!editOpSet$1) {
        editOpSet$1 = editOpSet.DEFAULT_EDIT_OPS;
      }

      function distanceWithPattern(dist, globalWeightingTerm, filterCost) {
        return (dist + filterCost / 1000) * globalWeightingTerm;
      }

      var transitionSetsFromEmptyVis = await getTransitionSetsFromSpec({
        "mark": "null",
        "encoding": {}
      }, specs, editOpSet$1);

      if (!options.fixFirst) {
        var startingSpec = {
          "mark": "null",
          "encoding": {}
        };
        specs = [startingSpec].concat(specs);
      }

      var transitions = await getTransitionSets(specs, editOpSet$1);
      transitions = extendTransitionSets(transitions);
      var TSPResult = TSP_1.TSP(transitions, "cost", options.fixFirst === true ? 0 : undefined);
      var TSPResultAll = TSPResult.all.filter(function (seqWithDist) {
        return seqWithDist.sequence[0] === 0;
      }).map(function (tspR) {
        var sequence = tspR.sequence;
        var transitionSet = [];

        for (var i = 0; i < sequence.length - 1; i++) {
          transitionSet.push(transitions[sequence[i]][sequence[i + 1]]);
        }
        var pattern = transitionSet.map(function (r) {
          return r.id;
        });
        var POResult = PatternOptimizer_1.PatternOptimizer(pattern, transitions.uniq);
        var result = {
          "sequence": sequence,
          "transitions": transitionSet,
          "sumOfTransitionCosts": tspR.distance,
          "patterns": POResult,
          "globalWeightingTerm": !!POResult[0] ? 1 - POResult[0].patternScore : 1,
          "charts": sequence.map(function (index) {
            return specs[index];
          })
        };
        var tbResult = TieBreaker_1.TieBreaker(result, transitionSetsFromEmptyVis);
        result.filterSequenceCost = tbResult.tiebreakCost;
        result.filterSequenceCostReasons = tbResult.reasons;
        result.sequenceCost = distanceWithPattern(result.sumOfTransitionCosts, result.globalWeightingTerm, tbResult.tiebreakCost);
        return result;
      }).sort(function (a, b) {
        if (a.sequenceCost > b.sequenceCost) {
          return 1;
        }

        if (a.sequenceCost < b.sequenceCost) {
          return -1;
        } else {
          return a.sequence.join(',') > b.sequence.join(',') ? 1 : -1;
        }
      });
      var minSequenceCost = TSPResultAll[0].sequenceCost;

      for (var i = 0; i < TSPResultAll.length; i++) {
        if (TSPResultAll[i].sequenceCost === minSequenceCost) {
          TSPResultAll[i].isOptimum = true;
        } else {
          break;
        }
      }

      var returnValue = TSPResultAll;

      if (callback) {
        callback(returnValue);
      }

      return returnValue;
    }

    async function getTransitionSetsFromSpec(spec, specs, editOpSet) {
      var transitions = [];

      for (var i = 0; i < specs.length; i++) {
        transitions.push(await trans.transition(specs[i], spec, editOpSet, {
          omitIncludeRawDomin: true
        }));
      }

      return transitions;
    }

    async function getTransitionSets(specs, editOpSet) {
      var transitions = [];

      for (var i = 0; i < specs.length; i++) {
        transitions.push([]);

        for (var j = 0; j < specs.length; j++) {
          transitions[i].push(await trans.transition(specs[i], specs[j], editOpSet, {
            omitIncludeRawDomin: true
          }));
        }
      }

      return transitions;
    }

    function extendTransitionSets(transitions) {
      var uniqTransitionSets = [];
      var flatCosts = transitions.reduce(function (prev, curr) {
        for (var i = 0; i < curr.length; i++) {
          prev.push(curr[i].cost);
          var transitionSetSH = transitionShorthand(curr[i]);
          var index = uniqTransitionSets.map(function (tr) {
            return tr.shorthand;
          }).indexOf(transitionSetSH);

          if (index === -1) {
            curr[i]["id"] = uniqTransitionSets.push({
              tr: curr[i],
              shorthand: transitionSetSH
            }) - 1;
          } else {
            curr[i]["id"] = index;
          }
        }
        return prev;
      }, []);
      var uniqueCosts = [...new Set(flatCosts)].map(function (val) {
        return Number(val);
      }).sort(function (a, b) {
        return a - b;
      });
      var rank = d3__default['default'].scaleOrdinal().domain(uniqueCosts).range([0, uniqueCosts.length]);

      for (var i = 0; i < transitions.length; i++) {
        for (var j = 0; j < transitions[i].length; j++) {
          transitions[i][j]["start"] = i;
          transitions[i][j]["destination"] = j;
          transitions[i][j]["rank"] = Math.floor(rank(transitions[i][j].cost));
        }
      }

      transitions.uniq = uniqTransitionSets;
      return transitions;
    }

    function transitionShorthand(transition) {
      return transition.mark.concat(transition.transform).concat(transition.encoding).map(function (tr) {
        if (tr.detail) {
          if (tr.name === "MODIFY_FILTER") {
            return tr.name + '(' + JSON.stringify(tr.detail.id) + ')';
          }

          return tr.name + '(' + JSON.stringify(tr.detail) + ')';
        }

        return tr.name;
      }).sort().join('|');
    }

    var sequence_2 = sequence;
    var sequence_1 = {
      sequence: sequence_2
    };

    const {
      parsePredicateFilter: parsePredicateFilter$1
    } = trans;

    function apply(sSpec, eSpec, editOps) {
      checkApplyingEditOps(editOps);
      let resultSpec = editOps.reduce((resultSpec, editOp) => {
        if (editOp.type === "mark") {
          resultSpec = applyMarkEditOp(resultSpec, eSpec);
        } else if (editOp.type === "transform") {
          resultSpec = applyTransformEditOp(resultSpec, eSpec, editOp);
        } else if (editOp.type === "encoding") {
          resultSpec = applyEncodingEditOp(resultSpec, eSpec, editOp);
        }

        return resultSpec;
      }, util.duplicate(sSpec)); //an intermediate spec by applying edit operations on the sSpec

      checkSpec(resultSpec);
      return resultSpec;
    }

    var apply_2 = apply;

    function applyMarkEditOp(targetSpec, eSpec, editOp) {
      let resultSpec = util.duplicate(targetSpec);
      resultSpec.mark = eSpec.mark;
      return resultSpec;
    }

    var applyMarkEditOp_1 = applyMarkEditOp;

    function applyTransformEditOp(targetSpec, eSpec, editOp) {
      let resultSpec = util.duplicate(targetSpec);
      const transformType = editOp.name.toLowerCase();
      const details = !util.isArray(editOp.detail) ? [editOp.detail] : editOp.detail;

      if (transformType.indexOf("filter") >= 0) {
        if (editOp.name === "REMOVE_FILTER" || editOp.name === "MODIFY_FILTER") {
          resultSpec.transform.filter(tfm => {
            return tfm.filter && parsePredicateFilter$1(tfm.filter)[0].id === editOp.detail.id;
          }).forEach(filter => {
            if (resultSpec.transform) {
              let i = resultSpec.transform.findIndex(trsfm => util.deepEqual(trsfm, filter));
              resultSpec.transform.splice(i, 1);
            }
          });
        }

        if (editOp.name === "ADD_FILTER" || editOp.name === "MODIFY_FILTER") {
          eSpec.transform.filter(tfm => {
            return tfm.filter && parsePredicateFilter$1(tfm.filter)[0].id === editOp.detail.id;
          }).forEach(filter => {
            if (!resultSpec.transform) {
              resultSpec.transform = [filter];
            } else if (!resultSpec.transform.find(trsfm => util.deepEqual(filter, trsfm))) {
              resultSpec.transform.push(filter);
            }
          });
        }
      } else {
        details.forEach(detail => {
          let fieldDef = resultSpec.encoding[detail.channel];

          if (fieldDef) {
            //Todo: cannot apply SCALE if the channel has a different type.
            if (detail.how === "removed") {
              delete fieldDef[transformType];
            } else {
              // console.log(fieldDef.type, detail.fieldType)
              if (transformType === "scale" && fieldDef.type !== detail.fieldType) {
                throw new UnapplicableEditOPError("Cannot apply ".concat(editOp.name, " since it requires \"").concat(detail.fieldType, "\" field instead of \"").concat(fieldDef.type, "\"."));
              }

              fieldDef[transformType] = eSpec.encoding[detail.channel][transformType];
            }
          } else {
            throw new UnapplicableEditOPError("Cannot apply ".concat(editOp.name, " since there is no \"").concat(detail.channel, "\" channel."));
          }
        });
      }

      return resultSpec;
    }

    var applyTransformEditOp_1 = applyTransformEditOp;

    function applyEncodingEditOp(targetSpec, eSpec, editOp) {
      let resultSpec = util.duplicate(targetSpec);

      if (editOp.name.indexOf("REMOVE") === 0) {
        let channel = editOp.detail.before.channel;

        if (resultSpec.encoding[channel]) {
          delete resultSpec.encoding[channel];
        } else {
          throw new UnapplicableEditOPError("Cannot apply ".concat(editOp.name, " since there is no \"").concat(channel, "\" channel."));
        }
      } else if (editOp.name.indexOf("ADD") === 0) {
        let channel = editOp.detail.after.channel;

        if (resultSpec.encoding[channel]) {
          throw new UnapplicableEditOPError("Cannot apply ".concat(editOp.name, " since \"").concat(channel, "\" already exists."));
        } else {
          resultSpec.encoding[channel] = util.duplicate(eSpec.encoding[channel]);
        }
      } else if (editOp.name.indexOf("MOVE") === 0) {
        let sChannel = editOp.detail.before.channel,
            dChannel = editOp.detail.after.channel;

        if (!resultSpec.encoding[sChannel]) {
          throw new UnapplicableEditOPError("Cannot apply ".concat(editOp.name, " since there is no \"").concat(sChannel, "\" channel."));
        } else if (resultSpec.encoding[dChannel]) {
          throw new UnapplicableEditOPError("Cannot apply ".concat(editOp.name, " since \"").concat(dChannel, "\" already exists."));
        } else {
          resultSpec.encoding[dChannel] = util.duplicate(resultSpec.encoding[sChannel]);
          delete resultSpec.encoding[sChannel];
        }
      } else if (editOp.name.indexOf("MODIFY") === 0) {
        let channel = editOp.detail.before.channel,
            field = editOp.detail.after.field,
            type = editOp.detail.after.type;

        if (!resultSpec.encoding[channel]) {
          throw new UnapplicableEditOPError("Cannot apply ".concat(editOp.name, " since there is no \"").concat(channel, "\" channel."));
        } else {
          resultSpec.encoding[channel].field = field;
          resultSpec.encoding[channel].type = type;
        }
      } else if (editOp.name.indexOf("SWAP_X_Y") === 0) {
        if (!resultSpec.encoding.x || !resultSpec.encoding.y) {
          throw new UnapplicableEditOPError("Cannot apply ".concat(editOp.name, " since there is no \"x\" and \"y\" channels."));
        } else {
          let temp = util.duplicate(resultSpec.encoding.y);
          resultSpec.encoding.y = util.duplicate(resultSpec.encoding.x);
          resultSpec.encoding.x = temp;
        }
      }

      return resultSpec;
    }

    var applyEncodingEditOp_1 = applyEncodingEditOp;

    function checkSpec(spec) {
      let lg = vega__default['default'].logger();
      const warnings = [],
            errors = [];

      lg.warn = m => {
        warnings.push(m);
      };

      lg.error = m => {
        errors.push(m);
      };

      vl__default['default'].compile(spec, {
        logger: lg
      });
      let hasAggregate = false;

      for (const key in spec.encoding) {
        if (spec.encoding.hasOwnProperty(key)) {
          const fieldDef = spec.encoding[key];

          if (fieldDef.aggregate) {
            hasAggregate = true;
          }

          if (fieldDef.field === "*" && !fieldDef.aggregate) {
            warnings.push("'*' field should innclude aggregate.");
          }
        }
      }

      if (hasAggregate) {
        const hasNoAggOnQField = Object.keys(spec.encoding).filter(ch => {
          return spec.encoding[ch].type === "quantitative" && !spec.encoding[ch].aggregate;
        }).length > 0;

        if (hasNoAggOnQField) {
          warnings.push("Aggregate should be applied on all quantitative fields.");
        }
      }

      if (warnings.length > 0 || errors.length > 0) {
        throw new InvalidVLSpecError("The resulted spec is not valid Vega-Lite Spec.", {
          warnings,
          errors
        });
      }
    }

    function checkApplyingEditOps(editOps) {
      // _COUNT encodig should be applied with AGGREGATE
      if (editOps.find(eo => eo.name.indexOf("_COUNT") >= 0) && !editOps.find(eo => eo.name === "AGGREGATE")) {
        throw new UnapplicableEditOpsError("_COUNT encoding edit operations cannot be applied without AGGREGATE.");
      }
    }

    class UnapplicableEditOPError extends Error {
      constructor(message) {
        super(message);
        this.name = "UnapplicableEditOPError";
      }

    }

    class InvalidVLSpecError extends Error {
      constructor(message, info) {
        super(message);
        this.name = "InvalidVLSpecError";
        this.info = info;
      }

    }

    class UnapplicableEditOpsError extends Error {
      constructor(message) {
        super(message);
        this.name = "UnapplicableEditOpsError";
      }

    }

    var apply_1 = {
      apply: apply_2,
      applyMarkEditOp: applyMarkEditOp_1,
      applyTransformEditOp: applyTransformEditOp_1,
      applyEncodingEditOp: applyEncodingEditOp_1
    };

    const {
      copy,
      deepEqual,
      partition,
      permutate,
      union,
      intersection
    } = util;
    const apply$1 = apply_1.apply; // Take two vega-lite specs and enumerate paths [{sequence, editOpPartition (aka transition)}]:

    async function enumerate(sVLSpec, eVLSpec, editOps, transM, withExcluded = false) {
      if (editOps.length < transM) {
        throw new CannotEnumStagesMoreThanTransitions(editOps.length, transM);
      }

      const editOpPartitions = partition(editOps, transM);
      const orderedEditOpPartitions = editOpPartitions.reduce((ordered, pt) => {
        return ordered.concat(permutate(pt));
      }, []);
      const sequences = [];
      let excludedPaths = [];

      for (const editOpPartition of orderedEditOpPartitions) {
        let sequence = [copy(sVLSpec)];
        let currSpec = copy(sVLSpec);
        let valid = true;

        for (let i = 0; i < editOpPartition.length; i++) {
          const editOps = editOpPartition[i];

          if (i === editOpPartition.length - 1) {
            sequence.push(eVLSpec);
            break; // The last spec should be the same as eVLSpec;
          }

          try {
            currSpec = apply$1(copy(currSpec), eVLSpec, editOps);
          } catch (e) {
            if (["UnapplicableEditOPError", "InvalidVLSpecError", "UnapplicableEditOpsError"].indexOf(e.name) < 0) {
              throw e;
            } else {
              valid = false;
              excludedPaths.push({
                info: e,
                editOpPartition,
                invalidSpec: currSpec
              });
              break;
            }
          }

          sequence.push(copy(currSpec));
        }

        const mergedScaleDomain = await getMergedScale(sequence);
        sequence = sequence.map((currSpec, i) => {
          if (i === 0 || i === sequence.length - 1) {
            return currSpec;
          }

          return applyMergedScale(currSpec, mergedScaleDomain, editOpPartition[i - 1]);
        });

        if (valid && validate(sequence)) {
          sequences.push({
            sequence,
            editOpPartition
          });
        }
      }

      if (withExcluded) {
        return {
          sequences,
          excludedPaths
        };
      }

      return sequences;
    }

    var enumerate_2 = enumerate;

    function applyMergedScale(vlSpec, mergedScaleDomain, currEditOps) {
      let currSpec = copy(vlSpec);
      let sortEditOp = currEditOps.find(eo => eo.name === "SORT");

      for (const channel in mergedScaleDomain) {
        // When sort editOps are applied, do not change the corresponding scale domain.
        if (sortEditOp && sortEditOp.detail.find(dt => dt.channel === channel)) {
          continue;
        }

        if (mergedScaleDomain.hasOwnProperty(channel)) {
          if (currSpec.encoding[channel]) {
            if (!currSpec.encoding[channel].scale) {
              currSpec.encoding[channel].scale = {};
            }

            currSpec.encoding[channel].scale.domain = mergedScaleDomain[channel];

            if (currSpec.encoding[channel].scale.zero !== undefined) {
              delete currSpec.encoding[channel].scale.zero;
            }
          }
        }
      }

      return currSpec;
    } // Get the scales including all data points while doing transitions.


    async function getMergedScale(sequence) {
      const views = await Promise.all(sequence.map(vlSpec => {
        return new vega__default['default'].View(vega__default['default'].parse(vl__default['default'].compile(vlSpec).spec), {
          renderer: "svg"
        }).runAsync();
      }));
      let commonEncoding = sequence.reduce((commonEncoding, vlSpec, i) => {
        let encoding = Object.keys(vlSpec.encoding).map(channel => {
          return {
            channel,
            ...vlSpec.encoding[channel],
            runtimeScale: views[i]._runtime.scales[channel]
          };
        });

        if (i === 0) {
          return encoding;
        }

        return intersection(encoding, commonEncoding, ch => {
          return [ch.channel, ch.field || "", ch.type || "", ch.runtimeScale ? ch.runtimeScale.type : ""].join("_");
        });
      }, []).map(encoding => {
        return { ...encoding,
          domains: views.map(view => {
            return view._runtime.scales[encoding.channel] ? view._runtime.scales[encoding.channel].value.domain() : undefined;
          })
        };
      });
      commonEncoding = commonEncoding.filter(encoding => {
        //if all the domains are the same, then don't need to merge
        return !encoding.domains.filter(d => d).reduce((accDomain, domain) => {
          if (deepEqual(domain, accDomain)) {
            return domain;
          }

          return undefined;
        }, encoding.domains[0]);
      });
      return commonEncoding.reduce((mergedScaleDomains, encoding) => {
        if (!encoding.runtimeScale) {
          return mergedScaleDomains;
        }

        const vlType = encoding.type,
              domains = encoding.domains;

        if (vlType === "quantitative") {
          mergedScaleDomains[encoding.channel] = [Math.min(...domains.map(domain => domain[0])), Math.max(...domains.map(domain => domain[1]))];
        } else if (vlType === "nominal" || vlType === "ordinal") {
          mergedScaleDomains[encoding.channel] = domains.reduce((merged, domain) => {
            return union(merged, domain);
          }, []);
        } else if (vlType === "temporal") {
          mergedScaleDomains[encoding.channel] = [Math.min(...domains.map(domain => domain[0])), Math.max(...domains.map(domain => domain[1]))];
        }

        return mergedScaleDomains;
      }, {});
    }

    var getMergedScale_1 = getMergedScale;

    function validate(sequence) {
      //Todo: check if the sequence is a valid vega-lite spec.
      let prevChart = sequence[0];

      for (let i = 1; i < sequence.length; i++) {
        const currChart = sequence[i];

        if (deepEqual(prevChart, currChart)) {
          return false;
        }

        prevChart = sequence[i];
      }

      return true;
    }

    var validate_1 = validate;

    class CannotEnumStagesMoreThanTransitions extends Error {
      constructor(editOpsN, transM) {
        super("Cannot enumerate ".concat(transM, " transitions for ").concat(editOpsN, " edit operations. The number of transitions should lesser than the number of possible edit operations."));
        this.name = "CannotEnumStagesMoreThanTransitions";
      }

    }

    var enumerate_1 = {
      enumerate: enumerate_2,
      getMergedScale: getMergedScale_1,
      validate: validate_1
    };

    const {
      unique
    } = util;
    var HEURISTIC_RULES = [{
      name: "filter-then-aggregate",
      type: "A-Then-B",
      editOps: ["FILTER", "AGGREGATE"],
      condition: (filter, aggregate) => {
        return aggregate.detail && aggregate.detail.find(dt => dt.how === "added");
      },
      score: 1
    }, {
      name: "disaggregate-then-filter",
      type: "A-Then-B",
      editOps: ["AGGREGATE", "FILTER"],
      condition: (aggregate, filter) => {
        return aggregate.detail && aggregate.detail.find(dt => dt.how === "removed");
      },
      score: 1
    }, {
      name: "filter-then-bin",
      type: "A-Then-B",
      editOps: ["FILTER", "BIN"],
      condition: (filter, bin) => {
        return bin.detail && bin.detail.find(dt => dt.how === "added");
      },
      score: 1
    }, {
      name: "unbin-then-filter",
      type: "A-Then-B",
      editOps: ["BIN", "FILTER"],
      condition: (bin, filter) => {
        return bin.detail && bin.detail.find(dt => dt.how === "removed");
      },
      score: 1
    }, {
      name: "no-aggregate-then-bin",
      type: "A-Then-B",
      editOps: ["AGGREGATE", "BIN"],
      condition: (aggregate, bin) => {
        return aggregate.detail && aggregate.detail.find(dt => dt.how === "added");
      },
      score: -1
    }, {
      name: "no-unbin-then-disaggregate",
      type: "A-Then-B",
      editOps: ["BIN", "AGGREGATE"],
      condition: (bin, aggregate) => {
        return aggregate.detail && aggregate.detail.find(dt => dt.how === "removed");
      },
      score: -1
    }, {
      name: "encoding(MODIFY)-then-aggregate",
      type: "A-Then-B",
      editOps: ["ENCODING", "AGGREGATE"],
      condition: (encoding, aggregate) => {
        return encoding.name.indexOf("MODIFY") >= 0 && aggregate.detail && aggregate.detail.find(dt => dt.how === "added");
      },
      score: 1
    }, {
      name: "disaggregate-then-encoding(MODIFY)",
      type: "A-Then-B",
      editOps: ["AGGREGATE", "ENCODING"],
      condition: (aggregate, encoding) => {
        return encoding.name.indexOf("MODIFY") >= 0 && aggregate.detail && aggregate.detail.find(dt => dt.how === "removed");
      },
      score: 1
    }, {
      name: "encoding(add)-then-aggregate",
      type: "A-Then-B",
      editOps: ["ENCODING", "AGGREGATE"],
      condition: (encoding, aggregate) => {
        return encoding.name.indexOf("ADD") >= 0 && aggregate.detail && aggregate.detail.find(dt => dt.how === "added");
      },
      score: 1
    }, {
      name: "disaggregate-then-encoding(remove)",
      type: "A-Then-B",
      editOps: ["AGGREGATE", "ENCODING"],
      condition: (aggregate, encoding) => {
        return encoding.name.indexOf("REMOVE") >= 0 && aggregate.detail && aggregate.detail.find(dt => dt.how === "removed");
      },
      score: 1
    }, {
      name: "no-mark-then-aggregate",
      type: "A-Then-B",
      editOps: ["MARK", "AGGREGATE"],
      condition: (mark, aggregate) => {
        return aggregate.detail && aggregate.detail.find(dt => dt.how === "added");
      },
      score: -1
    }, {
      name: "no-disaggregate-then-mark",
      type: "A-Then-B",
      editOps: ["AGGREGATE", "MARK"],
      condition: (aggregate, mark) => {
        return aggregate.detail && aggregate.detail.find(dt => dt.how === "removed");
      },
      score: -1
    }, {
      name: "modifying-with-scale",
      type: "A-With-B",
      editOps: ["ENCODING.MODIFY", "SCALE"],
      score: 1
    }, {
      name: "no-filtering-with-filtering",
      type: "A-With-B",
      editOps: ["FILTER"],
      condition: editOps => {
        return unique(editOps.FILTER, f => f.position).length < editOps.FILTER.length;
      },
      score: -1
    }, {
      name: "bin-with-aggregate",
      type: "A-With-B",
      editOps: ["AGGREGATE", "BIN"],
      score: 1
    } // {
    //   editOps: [TRANSFORM, ENCODING.REMOVE],
    //   condition: (transform, remove) => {
    //     return transform.detail.field === remove.detail.before.field
    //   },
    //   score: 1
    // },
    // {
    //   editOps: [TRANSFORM, ENCODING.MODIFY],
    //   condition: (transform, modify) => {
    //     return transform.detail.field === modify.detail.after.field
    //   },
    //   score: 1
    // },
    // {
    //   editOps: [TRANSFORM, ENCODING.ADD],
    //   condition: (transform, add) => {
    //     return transform.detail.field === add.detail.after.field
    //   },
    //   score: 1
    // },
    // {
    //   editOps: [ENCODING.MODIFY, TRANSFORM],
    //   condition: (transform, modify) => {
    //     return transform.detail.field === modify.detail.before.field
    //   },
    //   score: 1
    // }
    ];
    var evaluateRules = {
      HEURISTIC_RULES: HEURISTIC_RULES
    };

    const RULES = evaluateRules.HEURISTIC_RULES;
    const {
      copy: copy$1,
      intersection: intersection$1
    } = util;

    function evaluate(editOpPartition) {
      let satisfiedRules = findRules(editOpPartition, RULES);
      let score = satisfiedRules.reduce((score, rule) => {
        return score + rule.score;
      }, 0);
      return {
        score,
        satisfiedRules
      };
    }

    var evaluate_2 = evaluate;

    function findRules(editOpPartition, rules = RULES) {
      return rules.filter(_rule => {
        let rule = copy$1(_rule);

        for (let j = 0; j < rule.editOps.length; j++) {
          const ruleEditOp = rule.editOps[j];
          rule[ruleEditOp] = [];

          for (let i = 0; i < editOpPartition.length; i++) {
            const editOpPart = editOpPartition[i];
            let newFoundEditOps = findEditOps(editOpPart, ruleEditOp);

            if (newFoundEditOps.length > 0) {
              rule[ruleEditOp] = [...rule[ruleEditOp], ...newFoundEditOps.map(eo => {
                return { ...eo,
                  position: i
                };
              })];
            }
          }

          if (rule[ruleEditOp].length === 0) {
            return false; // when there is no corresponding edit op for the rule in given editOp partition.
          }
        }

        if (rule.type === "A-With-B") {
          let foundEditOps = rule.editOps.map(eo => rule[eo]);

          if (foundEditOps.filter(eo => !eo).length !== 0) {
            return false;
          }

          let positions = rule.editOps.reduce((positions, eo, i) => {
            let currPositions = rule[eo].map(d => d.position);

            if (i === 0) {
              return currPositions;
            }

            return intersection$1(positions, currPositions);
          }, []);

          if (positions.length === 0) {
            return false;
          } else if (_rule.condition) {
            let mappedFoundEditOps = rule.editOps.reduce((acc, eo) => {
              acc[eo] = rule[eo];
              return acc;
            }, {});
            return _rule.condition(mappedFoundEditOps);
          }

          return true;
        } else {
          for (let i = 0; i < rule[rule.editOps[0]].length; i++) {
            const followed = rule[rule.editOps[0]][i];

            for (let j = 0; j < rule[rule.editOps[1]].length; j++) {
              const following = rule[rule.editOps[1]][j];

              if (followed.position >= following.position) {
                return false;
              }

              if (_rule.condition && !_rule.condition(followed, following)) {
                return false;
              }
            }
          }

          return true;
        }
      });
    }

    var findRules_1 = findRules;

    function findEditOps(editOps, query) {
      return editOps.filter(eo => {
        if (query === "TRANSFORM") {
          return eo.type === "transform";
        } else if (query === "ENCODING") {
          return eo.type === "encoding";
        } else if (query === "MARK") {
          return eo.type === "mark";
        } else if (query === "ENCODING.MODIFY") {
          return eo.type === "encoding" && eo.name.indexOf("MODIFY") >= 0;
        }

        return eo.name.indexOf(query) >= 0;
      });
    }

    var evaluate_1 = {
      evaluate: evaluate_2,
      findRules: findRules_1
    };

    const {
      copy: copy$2
    } = util;
    const {
      enumerate: enumerate$1
    } = enumerate_1;
    const {
      evaluate: evaluate$1
    } = evaluate_1;
    const getTransition = trans.transition;

    async function path(sSpec, eSpec, transM) {
      validateInput(sSpec, eSpec);
      const transition = await getTransition(copy$2(sSpec), copy$2(eSpec));
      const editOps = [...transition.mark, ...transition.transform, ...transition.encoding];
      let result = {};

      if (transM === undefined) {
        for (let m = 1; m <= editOps.length; m++) {
          result[m] = await enumAndEval(sSpec, eSpec, editOps, m);
        }

        return result;
      }

      return await enumAndEval(sSpec, eSpec, editOps, transM);
    }

    var path_2 = path;

    async function enumAndEval(sSpec, eSpec, editOps, transM) {
      let result = await enumerate$1(sSpec, eSpec, editOps, transM);
      return result.map(seq => {
        return { ...seq,
          eval: evaluate$1(seq.editOpPartition)
        };
      }).sort((a, b) => {
        return b.eval.score - a.eval.score;
      });
    }

    function validateInput(sSpec, eSpec) {
      //check if specs are single-view vega-lite chart
      if (!isValidVLSpec(sSpec) || !isValidVLSpec(eSpec)) {
        return {
          error: "Gemini++ cannot recommend keyframes for the given Vega-Lite charts."
        };
      }
    }

    var validateInput_1 = validateInput;

    function isValidVLSpec(spec) {
      if (spec.layer || spec.hconcat || spec.vconcat || spec.concat || spec.spec) {
        return false;
      }

      if (spec.$schema && spec.$schema.indexOf("https://vega.github.io/schema/vega-lite") >= 0) {
        return true;
      }

      return false;
    }

    var isValidVLSpec_1 = isValidVLSpec;
    var path_1 = {
      path: path_2,
      validateInput: validateInput_1,
      isValidVLSpec: isValidVLSpec_1
    };

    var src = {
      sequence: sequence_1.sequence,
      transition: trans.transition,
      apply: apply_1.apply,
      path: path_1.path
    };

    return src;

  })));

  });

  unwrapExports(graphscape);
  var graphscape_1 = graphscape.path;

  async function recommendKeyframes(sSpec, eSpec, M) {
    return await graphscape_1(copy(sSpec),  copy(eSpec), M);
  }


  async function recommendWithPath(sVlSpec, eVlSpec, opt ={ stageN: 1, totalDuration: 2000 }) {

    let _opt = copy(opt);
    _opt.totalDuration = opt.totalDuration || 2000;
    _opt.stageN = opt.stageN || 1;
    _opt = setUpRecomOpt(_opt);

    const recommendations = {};

    for (let transM = 1; transM <= _opt.stageN; transM++) {
      let paths;
      try {
        paths = await graphscape_1(copy(sVlSpec), copy(eVlSpec), transM);
      } catch (error) {
        if (error.name === "CannotEnumStagesMoreThanTransitions") {
          continue;
        }
        throw error;
      }

      recommendations[transM] = [];
      for (const path of paths) {
        const sequence = path.sequence.map(vl2vg4gemini);

        //enumerate all possible gemini++ specs for the sequence;
        let recomsPerPath = await recommendForSeq(sequence, opt);
        recommendations[transM].push({
          path,
          recommendations: recomsPerPath
        });

      }
    }
    return recommendations;
  }



  function splitStagesPerTransition(stageN, transitionM) {
    return NSplits(new Array(stageN).fill(1), transitionM)
        .map(arr => arr.map(a => a.length));
  }

  async function recommendForSeq(sequence, opt = {}) {
    let globalOpt = copy(opt),
      transM = sequence.length-1,
      stageN = opt.stageN;
    if (stageN < transM) {
      throw new Error(`Cannot recommend ${stageN}-stage animations for a sequence with ${transM} transitions.`)
    }

    globalOpt = setUpRecomOpt(globalOpt);

    let stageNSplits = splitStagesPerTransition(stageN, transM);
    let recomsForSequence = [];
    for (const stageNSplit of stageNSplits) {
      const recommendationPerTransition = [];

      for (let i = 0; i < transM; i++) {
        const sVgVis = (sequence[i]),
          eVgVis = (sequence[i+1]);

        const _opt = {
          ...globalOpt,
          ...(opt.perTransitions || [])[i],
          ...{includeMeta: false},
          ...{
            stageN: stageNSplit[i],
            totalDuration: (opt.totalDuration || 2000) / stageN * stageNSplit[i]
          }
        };
        const _recom = await recommend(sVgVis, eVgVis, _opt);
        recommendationPerTransition.push(_recom);
      }

      recomsForSequence = recomsForSequence.concat(crossJoinArrays(recommendationPerTransition));
    }

    return recomsForSequence.map(recom => {
      return {
        specs: recom,
        cost: sumCost(recom)
      }
    }).sort((a,b) => {
      return a.cost - b.cost
    });
  }

  function sumCost(geminiSpecs) {
    return geminiSpecs.reduce((cost, spec) => {
      cost += spec.pseudoTimeline.eval.cost;
      return cost
    }, 0)
  }

  function canRecommendForSeq(sequence) {
    for (let i = 0; i < (sequence.length - 1); i++) {
      const sVis = sequence[i], eVis = sequence[i+1];
      let isRecommendable = canRecommend(sVis, eVis).result;
      if (isRecommendable.result) {
        return {result: false, reason: isRecommendable.reason}
      }
    }
    return {result: true};
  }

  function canRecommendKeyframes(sSpec, eSpec) {
    //check if specs are single-view vega-lite chart
    if (!isValidVLSpec(sSpec) || !isValidVLSpec(eSpec)) {
      return {result: false, reason: "Gemini++ cannot recommend keyframes for the given Vega-Lite charts."}
    }
    return {result: true}
  }



  function isValidVLSpec(spec) {
    if (spec.layer || spec.hconcat || spec.vconcat || spec.concat || spec.spec) {
      return false;
    }
    if (spec.$schema && (spec.$schema.indexOf("https://vega.github.io/schema/vega-lite") >= 0)){
      return true
    }
    return false

  }

  const { animate, animateSequence } = Gemini;

  exports.allAtOnce = allAtOnce;
  exports.animate = animate;
  exports.animateSequence = animateSequence;
  exports.canRecommend = canRecommend;
  exports.canRecommendForSeq = canRecommendForSeq;
  exports.canRecommendKeyframes = canRecommendKeyframes;
  exports.castVL2VG = castVL2VG;
  exports.compareCost = compareCost;
  exports.recommend = recommend;
  exports.recommendForSeq = recommendForSeq;
  exports.recommendKeyframes = recommendKeyframes;
  exports.recommendWithPath = recommendWithPath;
  exports.vl2vg4gemini = vl2vg4gemini;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=gemini.web.js.map
